// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class SDL2 {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  SDL2(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  /// \brief Initialize the CRC context
  ///
  /// Note: The function initializes the crc table required for all crc calculations.
  ///
  /// \param crcContext        pointer to context variable
  ///
  /// \returns 0 for OK, -1 on error
  int SDLTest_Crc32Init(
    ffi.Pointer<SDLTest_Crc32Context> crcContext,
  ) {
    _SDLTest_Crc32Init ??=
        _dylib.lookupFunction<_c_SDLTest_Crc32Init, _dart_SDLTest_Crc32Init>(
            'SDLTest_Crc32Init');
    return _SDLTest_Crc32Init(
      crcContext,
    );
  }

  _dart_SDLTest_Crc32Init _SDLTest_Crc32Init;

  /// \brief calculate a crc32 from a data block
  ///
  /// \param crcContext         pointer to context variable
  /// \param inBuf              input buffer to checksum
  /// \param inLen              length of input buffer
  /// \param crc32              pointer to Uint32 to store the final CRC into
  ///
  /// \returns 0 for OK, -1 on error
  int SDLTest_Crc32Calc(
    ffi.Pointer<SDLTest_Crc32Context> crcContext,
    ffi.Pointer<ffi.Uint8> inBuf,
    int inLen,
    ffi.Pointer<ffi.Uint32> crc32,
  ) {
    _SDLTest_Crc32Calc ??=
        _dylib.lookupFunction<_c_SDLTest_Crc32Calc, _dart_SDLTest_Crc32Calc>(
            'SDLTest_Crc32Calc');
    return _SDLTest_Crc32Calc(
      crcContext,
      inBuf,
      inLen,
      crc32,
    );
  }

  _dart_SDLTest_Crc32Calc _SDLTest_Crc32Calc;

  int SDLTest_Crc32CalcStart(
    ffi.Pointer<SDLTest_Crc32Context> crcContext,
    ffi.Pointer<ffi.Uint32> crc32,
  ) {
    _SDLTest_Crc32CalcStart ??= _dylib.lookupFunction<_c_SDLTest_Crc32CalcStart,
        _dart_SDLTest_Crc32CalcStart>('SDLTest_Crc32CalcStart');
    return _SDLTest_Crc32CalcStart(
      crcContext,
      crc32,
    );
  }

  _dart_SDLTest_Crc32CalcStart _SDLTest_Crc32CalcStart;

  int SDLTest_Crc32CalcEnd(
    ffi.Pointer<SDLTest_Crc32Context> crcContext,
    ffi.Pointer<ffi.Uint32> crc32,
  ) {
    _SDLTest_Crc32CalcEnd ??= _dylib.lookupFunction<_c_SDLTest_Crc32CalcEnd,
        _dart_SDLTest_Crc32CalcEnd>('SDLTest_Crc32CalcEnd');
    return _SDLTest_Crc32CalcEnd(
      crcContext,
      crc32,
    );
  }

  _dart_SDLTest_Crc32CalcEnd _SDLTest_Crc32CalcEnd;

  int SDLTest_Crc32CalcBuffer(
    ffi.Pointer<SDLTest_Crc32Context> crcContext,
    ffi.Pointer<ffi.Uint8> inBuf,
    int inLen,
    ffi.Pointer<ffi.Uint32> crc32,
  ) {
    _SDLTest_Crc32CalcBuffer ??= _dylib.lookupFunction<
        _c_SDLTest_Crc32CalcBuffer,
        _dart_SDLTest_Crc32CalcBuffer>('SDLTest_Crc32CalcBuffer');
    return _SDLTest_Crc32CalcBuffer(
      crcContext,
      inBuf,
      inLen,
      crc32,
    );
  }

  _dart_SDLTest_Crc32CalcBuffer _SDLTest_Crc32CalcBuffer;

  /// \brief clean up CRC context
  ///
  /// \param crcContext        pointer to context variable
  ///
  /// \returns 0 for OK, -1 on error
  int SDLTest_Crc32Done(
    ffi.Pointer<SDLTest_Crc32Context> crcContext,
  ) {
    _SDLTest_Crc32Done ??=
        _dylib.lookupFunction<_c_SDLTest_Crc32Done, _dart_SDLTest_Crc32Done>(
            'SDLTest_Crc32Done');
    return _SDLTest_Crc32Done(
      crcContext,
    );
  }

  _dart_SDLTest_Crc32Done _SDLTest_Crc32Done;

  /// \brief Gets the name of the platform.
  ffi.Pointer<ffi.Int8> SDL_GetPlatform() {
    _SDL_GetPlatform ??=
        _dylib.lookupFunction<_c_SDL_GetPlatform, _dart_SDL_GetPlatform>(
            'SDL_GetPlatform');
    return _SDL_GetPlatform();
  }

  _dart_SDL_GetPlatform _SDL_GetPlatform;

  int __bswap_16(
    int __bsx,
  ) {
    ___bswap_16 ??=
        _dylib.lookupFunction<_c___bswap_16, _dart___bswap_16>('__bswap_16');
    return ___bswap_16(
      __bsx,
    );
  }

  _dart___bswap_16 ___bswap_16;

  int __bswap_32(
    int __bsx,
  ) {
    ___bswap_32 ??=
        _dylib.lookupFunction<_c___bswap_32, _dart___bswap_32>('__bswap_32');
    return ___bswap_32(
      __bsx,
    );
  }

  _dart___bswap_32 ___bswap_32;

  int __bswap_64(
    int __bsx,
  ) {
    ___bswap_64 ??=
        _dylib.lookupFunction<_c___bswap_64, _dart___bswap_64>('__bswap_64');
    return ___bswap_64(
      __bsx,
    );
  }

  _dart___bswap_64 ___bswap_64;

  int __uint16_identity(
    int __x,
  ) {
    ___uint16_identity ??=
        _dylib.lookupFunction<_c___uint16_identity, _dart___uint16_identity>(
            '__uint16_identity');
    return ___uint16_identity(
      __x,
    );
  }

  _dart___uint16_identity ___uint16_identity;

  int __uint32_identity(
    int __x,
  ) {
    ___uint32_identity ??=
        _dylib.lookupFunction<_c___uint32_identity, _dart___uint32_identity>(
            '__uint32_identity');
    return ___uint32_identity(
      __x,
    );
  }

  _dart___uint32_identity ___uint32_identity;

  int __uint64_identity(
    int __x,
  ) {
    ___uint64_identity ??=
        _dylib.lookupFunction<_c___uint64_identity, _dart___uint64_identity>(
            '__uint64_identity');
    return ___uint64_identity(
      __x,
    );
  }

  _dart___uint64_identity ___uint64_identity;

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    _select ??= _dylib.lookupFunction<_c_select, _dart_select>('select');
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  _dart_select _select;

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    _pselect ??= _dylib.lookupFunction<_c_pselect, _dart_pselect>('pselect');
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  _dart_pselect _pselect;

  int remove(
    ffi.Pointer<ffi.Int8> __filename,
  ) {
    _remove ??= _dylib.lookupFunction<_c_remove, _dart_remove>('remove');
    return _remove(
      __filename,
    );
  }

  _dart_remove _remove;

  int rename(
    ffi.Pointer<ffi.Int8> __old,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    _rename ??= _dylib.lookupFunction<_c_rename, _dart_rename>('rename');
    return _rename(
      __old,
      __new,
    );
  }

  _dart_rename _rename;

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Int8> __old,
    int __newfd,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    _renameat ??=
        _dylib.lookupFunction<_c_renameat, _dart_renameat>('renameat');
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  _dart_renameat _renameat;

  ffi.Pointer<_IO_FILE> tmpfile() {
    _tmpfile ??= _dylib.lookupFunction<_c_tmpfile, _dart_tmpfile>('tmpfile');
    return _tmpfile();
  }

  _dart_tmpfile _tmpfile;

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _tmpnam ??= _dylib.lookupFunction<_c_tmpnam, _dart_tmpnam>('tmpnam');
    return _tmpnam(
      __s,
    );
  }

  _dart_tmpnam _tmpnam;

  ffi.Pointer<ffi.Int8> tmpnam_r(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _tmpnam_r ??=
        _dylib.lookupFunction<_c_tmpnam_r, _dart_tmpnam_r>('tmpnam_r');
    return _tmpnam_r(
      __s,
    );
  }

  _dart_tmpnam_r _tmpnam_r;

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> __dir,
    ffi.Pointer<ffi.Int8> __pfx,
  ) {
    _tempnam ??= _dylib.lookupFunction<_c_tempnam, _dart_tempnam>('tempnam');
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  _dart_tempnam _tempnam;

  int fclose(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fclose ??= _dylib.lookupFunction<_c_fclose, _dart_fclose>('fclose');
    return _fclose(
      __stream,
    );
  }

  _dart_fclose _fclose;

  int fflush(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fflush ??= _dylib.lookupFunction<_c_fflush, _dart_fflush>('fflush');
    return _fflush(
      __stream,
    );
  }

  _dart_fflush _fflush;

  int fflush_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fflush_unlocked ??=
        _dylib.lookupFunction<_c_fflush_unlocked, _dart_fflush_unlocked>(
            'fflush_unlocked');
    return _fflush_unlocked(
      __stream,
    );
  }

  _dart_fflush_unlocked _fflush_unlocked;

  ffi.Pointer<_IO_FILE> fopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    _fopen ??= _dylib.lookupFunction<_c_fopen, _dart_fopen>('fopen');
    return _fopen(
      __filename,
      __modes,
    );
  }

  _dart_fopen _fopen;

  ffi.Pointer<_IO_FILE> freopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _freopen ??= _dylib.lookupFunction<_c_freopen, _dart_freopen>('freopen');
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  _dart_freopen _freopen;

  ffi.Pointer<_IO_FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    _fdopen ??= _dylib.lookupFunction<_c_fdopen, _dart_fdopen>('fdopen');
    return _fdopen(
      __fd,
      __modes,
    );
  }

  _dart_fdopen _fdopen;

  ffi.Pointer<_IO_FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    _fmemopen ??=
        _dylib.lookupFunction<_c_fmemopen, _dart_fmemopen>('fmemopen');
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  _dart_fmemopen _fmemopen;

  ffi.Pointer<_IO_FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
    ffi.Pointer<ffi.Uint64> __sizeloc,
  ) {
    _open_memstream ??=
        _dylib.lookupFunction<_c_open_memstream, _dart_open_memstream>(
            'open_memstream');
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  _dart_open_memstream _open_memstream;

  void setbuf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    _setbuf ??= _dylib.lookupFunction<_c_setbuf, _dart_setbuf>('setbuf');
    return _setbuf(
      __stream,
      __buf,
    );
  }

  _dart_setbuf _setbuf;

  int setvbuf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __modes,
    int __n,
  ) {
    _setvbuf ??= _dylib.lookupFunction<_c_setvbuf, _dart_setvbuf>('setvbuf');
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  _dart_setvbuf _setvbuf;

  void setbuffer(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __size,
  ) {
    _setbuffer ??=
        _dylib.lookupFunction<_c_setbuffer, _dart_setbuffer>('setbuffer');
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  _dart_setbuffer _setbuffer;

  void setlinebuf(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _setlinebuf ??=
        _dylib.lookupFunction<_c_setlinebuf, _dart_setlinebuf>('setlinebuf');
    return _setlinebuf(
      __stream,
    );
  }

  _dart_setlinebuf _setlinebuf;

  int fprintf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _fprintf ??= _dylib.lookupFunction<_c_fprintf, _dart_fprintf>('fprintf');
    return _fprintf(
      __stream,
      __format,
    );
  }

  _dart_fprintf _fprintf;

  int printf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _printf ??= _dylib.lookupFunction<_c_printf, _dart_printf>('printf');
    return _printf(
      __format,
    );
  }

  _dart_printf _printf;

  int sprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _sprintf ??= _dylib.lookupFunction<_c_sprintf, _dart_sprintf>('sprintf');
    return _sprintf(
      __s,
      __format,
    );
  }

  _dart_sprintf _sprintf;

  int vfprintf(
    ffi.Pointer<_IO_FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vfprintf ??=
        _dylib.lookupFunction<_c_vfprintf, _dart_vfprintf>('vfprintf');
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  _dart_vfprintf _vfprintf;

  int vprintf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vprintf ??= _dylib.lookupFunction<_c_vprintf, _dart_vprintf>('vprintf');
    return _vprintf(
      __format,
      __arg,
    );
  }

  _dart_vprintf _vprintf;

  int vsprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vsprintf ??=
        _dylib.lookupFunction<_c_vsprintf, _dart_vsprintf>('vsprintf');
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  _dart_vsprintf _vsprintf;

  int snprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _snprintf ??=
        _dylib.lookupFunction<_c_snprintf, _dart_snprintf>('snprintf');
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  _dart_snprintf _snprintf;

  int vsnprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vsnprintf ??=
        _dylib.lookupFunction<_c_vsnprintf, _dart_vsnprintf>('vsnprintf');
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  _dart_vsnprintf _vsnprintf;

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vdprintf ??=
        _dylib.lookupFunction<_c_vdprintf, _dart_vdprintf>('vdprintf');
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  _dart_vdprintf _vdprintf;

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
  ) {
    _dprintf ??= _dylib.lookupFunction<_c_dprintf, _dart_dprintf>('dprintf');
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  _dart_dprintf _dprintf;

  int fscanf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _fscanf ??= _dylib.lookupFunction<_c_fscanf, _dart_fscanf>('fscanf');
    return _fscanf(
      __stream,
      __format,
    );
  }

  _dart_fscanf _fscanf;

  int scanf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _scanf ??= _dylib.lookupFunction<_c_scanf, _dart_scanf>('scanf');
    return _scanf(
      __format,
    );
  }

  _dart_scanf _scanf;

  int sscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _sscanf ??= _dylib.lookupFunction<_c_sscanf, _dart_sscanf>('sscanf');
    return _sscanf(
      __s,
      __format,
    );
  }

  _dart_sscanf _sscanf;

  int vfscanf(
    ffi.Pointer<_IO_FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vfscanf ??= _dylib.lookupFunction<_c_vfscanf, _dart_vfscanf>('vfscanf');
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  _dart_vfscanf _vfscanf;

  int vscanf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vscanf ??= _dylib.lookupFunction<_c_vscanf, _dart_vscanf>('vscanf');
    return _vscanf(
      __format,
      __arg,
    );
  }

  _dart_vscanf _vscanf;

  int vsscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vsscanf ??= _dylib.lookupFunction<_c_vsscanf, _dart_vsscanf>('vsscanf');
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  _dart_vsscanf _vsscanf;

  int fgetc(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fgetc ??= _dylib.lookupFunction<_c_fgetc, _dart_fgetc>('fgetc');
    return _fgetc(
      __stream,
    );
  }

  _dart_fgetc _fgetc;

  int getc(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _getc ??= _dylib.lookupFunction<_c_getc, _dart_getc>('getc');
    return _getc(
      __stream,
    );
  }

  _dart_getc _getc;

  int getchar() {
    _getchar ??= _dylib.lookupFunction<_c_getchar, _dart_getchar>('getchar');
    return _getchar();
  }

  _dart_getchar _getchar;

  int getc_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _getc_unlocked ??= _dylib
        .lookupFunction<_c_getc_unlocked, _dart_getc_unlocked>('getc_unlocked');
    return _getc_unlocked(
      __stream,
    );
  }

  _dart_getc_unlocked _getc_unlocked;

  int getchar_unlocked() {
    _getchar_unlocked ??=
        _dylib.lookupFunction<_c_getchar_unlocked, _dart_getchar_unlocked>(
            'getchar_unlocked');
    return _getchar_unlocked();
  }

  _dart_getchar_unlocked _getchar_unlocked;

  int fgetc_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fgetc_unlocked ??=
        _dylib.lookupFunction<_c_fgetc_unlocked, _dart_fgetc_unlocked>(
            'fgetc_unlocked');
    return _fgetc_unlocked(
      __stream,
    );
  }

  _dart_fgetc_unlocked _fgetc_unlocked;

  int fputc(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fputc ??= _dylib.lookupFunction<_c_fputc, _dart_fputc>('fputc');
    return _fputc(
      __c,
      __stream,
    );
  }

  _dart_fputc _fputc;

  int putc(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _putc ??= _dylib.lookupFunction<_c_putc, _dart_putc>('putc');
    return _putc(
      __c,
      __stream,
    );
  }

  _dart_putc _putc;

  int putchar(
    int __c,
  ) {
    _putchar ??= _dylib.lookupFunction<_c_putchar, _dart_putchar>('putchar');
    return _putchar(
      __c,
    );
  }

  _dart_putchar _putchar;

  int fputc_unlocked(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fputc_unlocked ??=
        _dylib.lookupFunction<_c_fputc_unlocked, _dart_fputc_unlocked>(
            'fputc_unlocked');
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  _dart_fputc_unlocked _fputc_unlocked;

  int putc_unlocked(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _putc_unlocked ??= _dylib
        .lookupFunction<_c_putc_unlocked, _dart_putc_unlocked>('putc_unlocked');
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  _dart_putc_unlocked _putc_unlocked;

  int putchar_unlocked(
    int __c,
  ) {
    _putchar_unlocked ??=
        _dylib.lookupFunction<_c_putchar_unlocked, _dart_putchar_unlocked>(
            'putchar_unlocked');
    return _putchar_unlocked(
      __c,
    );
  }

  _dart_putchar_unlocked _putchar_unlocked;

  int getw(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _getw ??= _dylib.lookupFunction<_c_getw, _dart_getw>('getw');
    return _getw(
      __stream,
    );
  }

  _dart_getw _getw;

  int putw(
    int __w,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _putw ??= _dylib.lookupFunction<_c_putw, _dart_putw>('putw');
    return _putw(
      __w,
      __stream,
    );
  }

  _dart_putw _putw;

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fgets ??= _dylib.lookupFunction<_c_fgets, _dart_fgets>('fgets');
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  _dart_fgets _fgets;

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Uint64> __n,
    int __delimiter,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    ___getdelim ??=
        _dylib.lookupFunction<_c___getdelim, _dart___getdelim>('__getdelim');
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  _dart___getdelim ___getdelim;

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Uint64> __n,
    int __delimiter,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _getdelim ??=
        _dylib.lookupFunction<_c_getdelim, _dart_getdelim>('getdelim');
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  _dart_getdelim _getdelim;

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Uint64> __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _getline ??= _dylib.lookupFunction<_c_getline, _dart_getline>('getline');
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  _dart_getline _getline;

  int fputs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fputs ??= _dylib.lookupFunction<_c_fputs, _dart_fputs>('fputs');
    return _fputs(
      __s,
      __stream,
    );
  }

  _dart_fputs _fputs;

  int puts(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _puts ??= _dylib.lookupFunction<_c_puts, _dart_puts>('puts');
    return _puts(
      __s,
    );
  }

  _dart_puts _puts;

  int ungetc(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _ungetc ??= _dylib.lookupFunction<_c_ungetc, _dart_ungetc>('ungetc');
    return _ungetc(
      __c,
      __stream,
    );
  }

  _dart_ungetc _ungetc;

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fread ??= _dylib.lookupFunction<_c_fread, _dart_fread>('fread');
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  _dart_fread _fread;

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __s,
  ) {
    _fwrite ??= _dylib.lookupFunction<_c_fwrite, _dart_fwrite>('fwrite');
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  _dart_fwrite _fwrite;

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fread_unlocked ??=
        _dylib.lookupFunction<_c_fread_unlocked, _dart_fread_unlocked>(
            'fread_unlocked');
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  _dart_fread_unlocked _fread_unlocked;

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fwrite_unlocked ??=
        _dylib.lookupFunction<_c_fwrite_unlocked, _dart_fwrite_unlocked>(
            'fwrite_unlocked');
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  _dart_fwrite_unlocked _fwrite_unlocked;

  int fseek(
    ffi.Pointer<_IO_FILE> __stream,
    int __off,
    int __whence,
  ) {
    _fseek ??= _dylib.lookupFunction<_c_fseek, _dart_fseek>('fseek');
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  _dart_fseek _fseek;

  int ftell(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _ftell ??= _dylib.lookupFunction<_c_ftell, _dart_ftell>('ftell');
    return _ftell(
      __stream,
    );
  }

  _dart_ftell _ftell;

  void rewind(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _rewind ??= _dylib.lookupFunction<_c_rewind, _dart_rewind>('rewind');
    return _rewind(
      __stream,
    );
  }

  _dart_rewind _rewind;

  int fseeko(
    ffi.Pointer<_IO_FILE> __stream,
    int __off,
    int __whence,
  ) {
    _fseeko ??= _dylib.lookupFunction<_c_fseeko, _dart_fseeko>('fseeko');
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  _dart_fseeko _fseeko;

  int ftello(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _ftello ??= _dylib.lookupFunction<_c_ftello, _dart_ftello>('ftello');
    return _ftello(
      __stream,
    );
  }

  _dart_ftello _ftello;

  int fgetpos(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<__fpos_t> __pos,
  ) {
    _fgetpos ??= _dylib.lookupFunction<_c_fgetpos, _dart_fgetpos>('fgetpos');
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  _dart_fgetpos _fgetpos;

  int fsetpos(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<__fpos_t> __pos,
  ) {
    _fsetpos ??= _dylib.lookupFunction<_c_fsetpos, _dart_fsetpos>('fsetpos');
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  _dart_fsetpos _fsetpos;

  void clearerr(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _clearerr ??=
        _dylib.lookupFunction<_c_clearerr, _dart_clearerr>('clearerr');
    return _clearerr(
      __stream,
    );
  }

  _dart_clearerr _clearerr;

  int feof(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _feof ??= _dylib.lookupFunction<_c_feof, _dart_feof>('feof');
    return _feof(
      __stream,
    );
  }

  _dart_feof _feof;

  int ferror(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _ferror ??= _dylib.lookupFunction<_c_ferror, _dart_ferror>('ferror');
    return _ferror(
      __stream,
    );
  }

  _dart_ferror _ferror;

  void clearerr_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _clearerr_unlocked ??=
        _dylib.lookupFunction<_c_clearerr_unlocked, _dart_clearerr_unlocked>(
            'clearerr_unlocked');
    return _clearerr_unlocked(
      __stream,
    );
  }

  _dart_clearerr_unlocked _clearerr_unlocked;

  int feof_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _feof_unlocked ??= _dylib
        .lookupFunction<_c_feof_unlocked, _dart_feof_unlocked>('feof_unlocked');
    return _feof_unlocked(
      __stream,
    );
  }

  _dart_feof_unlocked _feof_unlocked;

  int ferror_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _ferror_unlocked ??=
        _dylib.lookupFunction<_c_ferror_unlocked, _dart_ferror_unlocked>(
            'ferror_unlocked');
    return _ferror_unlocked(
      __stream,
    );
  }

  _dart_ferror_unlocked _ferror_unlocked;

  void perror(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _perror ??= _dylib.lookupFunction<_c_perror, _dart_perror>('perror');
    return _perror(
      __s,
    );
  }

  _dart_perror _perror;

  int fileno(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fileno ??= _dylib.lookupFunction<_c_fileno, _dart_fileno>('fileno');
    return _fileno(
      __stream,
    );
  }

  _dart_fileno _fileno;

  int fileno_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fileno_unlocked ??=
        _dylib.lookupFunction<_c_fileno_unlocked, _dart_fileno_unlocked>(
            'fileno_unlocked');
    return _fileno_unlocked(
      __stream,
    );
  }

  _dart_fileno_unlocked _fileno_unlocked;

  ffi.Pointer<_IO_FILE> popen(
    ffi.Pointer<ffi.Int8> __command,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    _popen ??= _dylib.lookupFunction<_c_popen, _dart_popen>('popen');
    return _popen(
      __command,
      __modes,
    );
  }

  _dart_popen _popen;

  int pclose(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _pclose ??= _dylib.lookupFunction<_c_pclose, _dart_pclose>('pclose');
    return _pclose(
      __stream,
    );
  }

  _dart_pclose _pclose;

  ffi.Pointer<ffi.Int8> ctermid(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _ctermid ??= _dylib.lookupFunction<_c_ctermid, _dart_ctermid>('ctermid');
    return _ctermid(
      __s,
    );
  }

  _dart_ctermid _ctermid;

  void flockfile(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _flockfile ??=
        _dylib.lookupFunction<_c_flockfile, _dart_flockfile>('flockfile');
    return _flockfile(
      __stream,
    );
  }

  _dart_flockfile _flockfile;

  int ftrylockfile(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _ftrylockfile ??= _dylib
        .lookupFunction<_c_ftrylockfile, _dart_ftrylockfile>('ftrylockfile');
    return _ftrylockfile(
      __stream,
    );
  }

  _dart_ftrylockfile _ftrylockfile;

  void funlockfile(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _funlockfile ??=
        _dylib.lookupFunction<_c_funlockfile, _dart_funlockfile>('funlockfile');
    return _funlockfile(
      __stream,
    );
  }

  _dart_funlockfile _funlockfile;

  int __uflow(
    ffi.Pointer<_IO_FILE> arg0,
  ) {
    ___uflow ??= _dylib.lookupFunction<_c___uflow, _dart___uflow>('__uflow');
    return ___uflow(
      arg0,
    );
  }

  _dart___uflow ___uflow;

  int __overflow(
    ffi.Pointer<_IO_FILE> arg0,
    int arg1,
  ) {
    ___overflow ??=
        _dylib.lookupFunction<_c___overflow, _dart___overflow>('__overflow');
    return ___overflow(
      arg0,
      arg1,
    );
  }

  _dart___overflow ___overflow;

  int __ctype_get_mb_cur_max() {
    ___ctype_get_mb_cur_max ??= _dylib.lookupFunction<_c___ctype_get_mb_cur_max,
        _dart___ctype_get_mb_cur_max>('__ctype_get_mb_cur_max');
    return ___ctype_get_mb_cur_max();
  }

  _dart___ctype_get_mb_cur_max ___ctype_get_mb_cur_max;

  double atof(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    _atof ??= _dylib.lookupFunction<_c_atof, _dart_atof>('atof');
    return _atof(
      __nptr,
    );
  }

  _dart_atof _atof;

  int atoi(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    _atoi ??= _dylib.lookupFunction<_c_atoi, _dart_atoi>('atoi');
    return _atoi(
      __nptr,
    );
  }

  _dart_atoi _atoi;

  int atol(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    _atol ??= _dylib.lookupFunction<_c_atol, _dart_atol>('atol');
    return _atol(
      __nptr,
    );
  }

  _dart_atol _atol;

  int atoll(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    _atoll ??= _dylib.lookupFunction<_c_atoll, _dart_atoll>('atoll');
    return _atoll(
      __nptr,
    );
  }

  _dart_atoll _atoll;

  double strtod(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    _strtod ??= _dylib.lookupFunction<_c_strtod, _dart_strtod>('strtod');
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  _dart_strtod _strtod;

  double strtof(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    _strtof ??= _dylib.lookupFunction<_c_strtof, _dart_strtof>('strtof');
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  _dart_strtof _strtof;

  int strtol(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtol ??= _dylib.lookupFunction<_c_strtol, _dart_strtol>('strtol');
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtol _strtol;

  int strtoul(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoul ??= _dylib.lookupFunction<_c_strtoul, _dart_strtoul>('strtoul');
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtoul _strtoul;

  int strtoq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoq ??= _dylib.lookupFunction<_c_strtoq, _dart_strtoq>('strtoq');
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtoq _strtoq;

  int strtouq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtouq ??= _dylib.lookupFunction<_c_strtouq, _dart_strtouq>('strtouq');
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtouq _strtouq;

  int strtoll(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoll ??= _dylib.lookupFunction<_c_strtoll, _dart_strtoll>('strtoll');
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtoll _strtoll;

  int strtoull(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoull ??=
        _dylib.lookupFunction<_c_strtoull, _dart_strtoull>('strtoull');
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtoull _strtoull;

  ffi.Pointer<ffi.Int8> l64a(
    int __n,
  ) {
    _l64a ??= _dylib.lookupFunction<_c_l64a, _dart_l64a>('l64a');
    return _l64a(
      __n,
    );
  }

  _dart_l64a _l64a;

  int a64l(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _a64l ??= _dylib.lookupFunction<_c_a64l, _dart_a64l>('a64l');
    return _a64l(
      __s,
    );
  }

  _dart_a64l _a64l;

  int random() {
    _random ??= _dylib.lookupFunction<_c_random, _dart_random>('random');
    return _random();
  }

  _dart_random _random;

  void srandom(
    int __seed,
  ) {
    _srandom ??= _dylib.lookupFunction<_c_srandom, _dart_srandom>('srandom');
    return _srandom(
      __seed,
    );
  }

  _dart_srandom _srandom;

  ffi.Pointer<ffi.Int8> initstate(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
  ) {
    _initstate ??=
        _dylib.lookupFunction<_c_initstate, _dart_initstate>('initstate');
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  _dart_initstate _initstate;

  ffi.Pointer<ffi.Int8> setstate(
    ffi.Pointer<ffi.Int8> __statebuf,
  ) {
    _setstate ??=
        _dylib.lookupFunction<_c_setstate, _dart_setstate>('setstate');
    return _setstate(
      __statebuf,
    );
  }

  _dart_setstate _setstate;

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    _random_r ??=
        _dylib.lookupFunction<_c_random_r, _dart_random_r>('random_r');
    return _random_r(
      __buf,
      __result,
    );
  }

  _dart_random_r _random_r;

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    _srandom_r ??=
        _dylib.lookupFunction<_c_srandom_r, _dart_srandom_r>('srandom_r');
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  _dart_srandom_r _srandom_r;

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    _initstate_r ??=
        _dylib.lookupFunction<_c_initstate_r, _dart_initstate_r>('initstate_r');
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  _dart_initstate_r _initstate_r;

  int setstate_r(
    ffi.Pointer<ffi.Int8> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    _setstate_r ??=
        _dylib.lookupFunction<_c_setstate_r, _dart_setstate_r>('setstate_r');
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  _dart_setstate_r _setstate_r;

  int rand() {
    _rand ??= _dylib.lookupFunction<_c_rand, _dart_rand>('rand');
    return _rand();
  }

  _dart_rand _rand;

  void srand(
    int __seed,
  ) {
    _srand ??= _dylib.lookupFunction<_c_srand, _dart_srand>('srand');
    return _srand(
      __seed,
    );
  }

  _dart_srand _srand;

  int rand_r(
    ffi.Pointer<ffi.Uint32> __seed,
  ) {
    _rand_r ??= _dylib.lookupFunction<_c_rand_r, _dart_rand_r>('rand_r');
    return _rand_r(
      __seed,
    );
  }

  _dart_rand_r _rand_r;

  double drand48() {
    _drand48 ??= _dylib.lookupFunction<_c_drand48, _dart_drand48>('drand48');
    return _drand48();
  }

  _dart_drand48 _drand48;

  double erand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    _erand48 ??= _dylib.lookupFunction<_c_erand48, _dart_erand48>('erand48');
    return _erand48(
      __xsubi,
    );
  }

  _dart_erand48 _erand48;

  int lrand48() {
    _lrand48 ??= _dylib.lookupFunction<_c_lrand48, _dart_lrand48>('lrand48');
    return _lrand48();
  }

  _dart_lrand48 _lrand48;

  int nrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    _nrand48 ??= _dylib.lookupFunction<_c_nrand48, _dart_nrand48>('nrand48');
    return _nrand48(
      __xsubi,
    );
  }

  _dart_nrand48 _nrand48;

  int mrand48() {
    _mrand48 ??= _dylib.lookupFunction<_c_mrand48, _dart_mrand48>('mrand48');
    return _mrand48();
  }

  _dart_mrand48 _mrand48;

  int jrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    _jrand48 ??= _dylib.lookupFunction<_c_jrand48, _dart_jrand48>('jrand48');
    return _jrand48(
      __xsubi,
    );
  }

  _dart_jrand48 _jrand48;

  void srand48(
    int __seedval,
  ) {
    _srand48 ??= _dylib.lookupFunction<_c_srand48, _dart_srand48>('srand48');
    return _srand48(
      __seedval,
    );
  }

  _dart_srand48 _srand48;

  ffi.Pointer<ffi.Uint16> seed48(
    ffi.Pointer<ffi.Uint16> __seed16v,
  ) {
    _seed48 ??= _dylib.lookupFunction<_c_seed48, _dart_seed48>('seed48');
    return _seed48(
      __seed16v,
    );
  }

  _dart_seed48 _seed48;

  void lcong48(
    ffi.Pointer<ffi.Uint16> __param,
  ) {
    _lcong48 ??= _dylib.lookupFunction<_c_lcong48, _dart_lcong48>('lcong48');
    return _lcong48(
      __param,
    );
  }

  _dart_lcong48 _lcong48;

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    _drand48_r ??=
        _dylib.lookupFunction<_c_drand48_r, _dart_drand48_r>('drand48_r');
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  _dart_drand48_r _drand48_r;

  int erand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    _erand48_r ??=
        _dylib.lookupFunction<_c_erand48_r, _dart_erand48_r>('erand48_r');
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  _dart_erand48_r _erand48_r;

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    _lrand48_r ??=
        _dylib.lookupFunction<_c_lrand48_r, _dart_lrand48_r>('lrand48_r');
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  _dart_lrand48_r _lrand48_r;

  int nrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    _nrand48_r ??=
        _dylib.lookupFunction<_c_nrand48_r, _dart_nrand48_r>('nrand48_r');
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  _dart_nrand48_r _nrand48_r;

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    _mrand48_r ??=
        _dylib.lookupFunction<_c_mrand48_r, _dart_mrand48_r>('mrand48_r');
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  _dart_mrand48_r _mrand48_r;

  int jrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    _jrand48_r ??=
        _dylib.lookupFunction<_c_jrand48_r, _dart_jrand48_r>('jrand48_r');
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  _dart_jrand48_r _jrand48_r;

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    _srand48_r ??=
        _dylib.lookupFunction<_c_srand48_r, _dart_srand48_r>('srand48_r');
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  _dart_srand48_r _srand48_r;

  int seed48_r(
    ffi.Pointer<ffi.Uint16> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    _seed48_r ??=
        _dylib.lookupFunction<_c_seed48_r, _dart_seed48_r>('seed48_r');
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  _dart_seed48_r _seed48_r;

  int lcong48_r(
    ffi.Pointer<ffi.Uint16> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    _lcong48_r ??=
        _dylib.lookupFunction<_c_lcong48_r, _dart_lcong48_r>('lcong48_r');
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  _dart_lcong48_r _lcong48_r;

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    _malloc ??= _dylib.lookupFunction<_c_malloc, _dart_malloc>('malloc');
    return _malloc(
      __size,
    );
  }

  _dart_malloc _malloc;

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    _calloc ??= _dylib.lookupFunction<_c_calloc, _dart_calloc>('calloc');
    return _calloc(
      __nmemb,
      __size,
    );
  }

  _dart_calloc _calloc;

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    _realloc ??= _dylib.lookupFunction<_c_realloc, _dart_realloc>('realloc');
    return _realloc(
      __ptr,
      __size,
    );
  }

  _dart_realloc _realloc;

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    _reallocarray ??= _dylib
        .lookupFunction<_c_reallocarray, _dart_reallocarray>('reallocarray');
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  _dart_reallocarray _reallocarray;

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    _free ??= _dylib.lookupFunction<_c_free, _dart_free>('free');
    return _free(
      __ptr,
    );
  }

  _dart_free _free;

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    _alloca ??= _dylib.lookupFunction<_c_alloca, _dart_alloca>('alloca');
    return _alloca(
      __size,
    );
  }

  _dart_alloca _alloca;

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    _valloc ??= _dylib.lookupFunction<_c_valloc, _dart_valloc>('valloc');
    return _valloc(
      __size,
    );
  }

  _dart_valloc _valloc;

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    _posix_memalign ??=
        _dylib.lookupFunction<_c_posix_memalign, _dart_posix_memalign>(
            'posix_memalign');
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  _dart_posix_memalign _posix_memalign;

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    _aligned_alloc ??= _dylib
        .lookupFunction<_c_aligned_alloc, _dart_aligned_alloc>('aligned_alloc');
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  _dart_aligned_alloc _aligned_alloc;

  void abort() {
    _abort ??= _dylib.lookupFunction<_c_abort, _dart_abort>('abort');
    return _abort();
  }

  _dart_abort _abort;

  int atexit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __func,
  ) {
    _atexit ??= _dylib.lookupFunction<_c_atexit, _dart_atexit>('atexit');
    return _atexit(
      __func,
    );
  }

  _dart_atexit _atexit;

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_2>> __func,
  ) {
    _at_quick_exit ??= _dylib
        .lookupFunction<_c_at_quick_exit, _dart_at_quick_exit>('at_quick_exit');
    return _at_quick_exit(
      __func,
    );
  }

  _dart_at_quick_exit _at_quick_exit;

  int on_exit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_3>> __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    _on_exit ??= _dylib.lookupFunction<_c_on_exit, _dart_on_exit>('on_exit');
    return _on_exit(
      __func,
      __arg,
    );
  }

  _dart_on_exit _on_exit;

  void exit(
    int __status,
  ) {
    _exit ??= _dylib.lookupFunction<_c_exit, _dart_exit>('exit');
    return _exit(
      __status,
    );
  }

  _dart_exit _exit;

  void quick_exit(
    int __status,
  ) {
    _quick_exit ??=
        _dylib.lookupFunction<_c_quick_exit, _dart_quick_exit>('quick_exit');
    return _quick_exit(
      __status,
    );
  }

  _dart_quick_exit _quick_exit;

  void _Exit(
    int __status,
  ) {
    __Exit ??= _dylib.lookupFunction<_c__Exit, _dart__Exit>('_Exit');
    return __Exit(
      __status,
    );
  }

  _dart__Exit __Exit;

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    _getenv ??= _dylib.lookupFunction<_c_getenv, _dart_getenv>('getenv');
    return _getenv(
      __name,
    );
  }

  _dart_getenv _getenv;

  int putenv(
    ffi.Pointer<ffi.Int8> __string,
  ) {
    _putenv ??= _dylib.lookupFunction<_c_putenv, _dart_putenv>('putenv');
    return _putenv(
      __string,
    );
  }

  _dart_putenv _putenv;

  int setenv(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __value,
    int __replace,
  ) {
    _setenv ??= _dylib.lookupFunction<_c_setenv, _dart_setenv>('setenv');
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  _dart_setenv _setenv;

  int unsetenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    _unsetenv ??=
        _dylib.lookupFunction<_c_unsetenv, _dart_unsetenv>('unsetenv');
    return _unsetenv(
      __name,
    );
  }

  _dart_unsetenv _unsetenv;

  int clearenv() {
    _clearenv ??=
        _dylib.lookupFunction<_c_clearenv, _dart_clearenv>('clearenv');
    return _clearenv();
  }

  _dart_clearenv _clearenv;

  ffi.Pointer<ffi.Int8> mktemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    _mktemp ??= _dylib.lookupFunction<_c_mktemp, _dart_mktemp>('mktemp');
    return _mktemp(
      __template,
    );
  }

  _dart_mktemp _mktemp;

  int mkstemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    _mkstemp ??= _dylib.lookupFunction<_c_mkstemp, _dart_mkstemp>('mkstemp');
    return _mkstemp(
      __template,
    );
  }

  _dart_mkstemp _mkstemp;

  int mkstemps(
    ffi.Pointer<ffi.Int8> __template,
    int __suffixlen,
  ) {
    _mkstemps ??=
        _dylib.lookupFunction<_c_mkstemps, _dart_mkstemps>('mkstemps');
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  _dart_mkstemps _mkstemps;

  ffi.Pointer<ffi.Int8> mkdtemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    _mkdtemp ??= _dylib.lookupFunction<_c_mkdtemp, _dart_mkdtemp>('mkdtemp');
    return _mkdtemp(
      __template,
    );
  }

  _dart_mkdtemp _mkdtemp;

  int system(
    ffi.Pointer<ffi.Int8> __command,
  ) {
    _system ??= _dylib.lookupFunction<_c_system, _dart_system>('system');
    return _system(
      __command,
    );
  }

  _dart_system _system;

  ffi.Pointer<ffi.Int8> realpath(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __resolved,
  ) {
    _realpath ??=
        _dylib.lookupFunction<_c_realpath, _dart_realpath>('realpath');
    return _realpath(
      __name,
      __resolved,
    );
  }

  _dart_realpath _realpath;

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
  ) {
    _bsearch ??= _dylib.lookupFunction<_c_bsearch, _dart_bsearch>('bsearch');
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  _dart_bsearch _bsearch;

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
  ) {
    _qsort ??= _dylib.lookupFunction<_c_qsort, _dart_qsort>('qsort');
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  _dart_qsort _qsort;

  int abs(
    int __x,
  ) {
    _abs ??= _dylib.lookupFunction<_c_abs, _dart_abs>('abs');
    return _abs(
      __x,
    );
  }

  _dart_abs _abs;

  int labs(
    int __x,
  ) {
    _labs ??= _dylib.lookupFunction<_c_labs, _dart_labs>('labs');
    return _labs(
      __x,
    );
  }

  _dart_labs _labs;

  int llabs(
    int __x,
  ) {
    _llabs ??= _dylib.lookupFunction<_c_llabs, _dart_llabs>('llabs');
    return _llabs(
      __x,
    );
  }

  _dart_llabs _llabs;

  ffi.Pointer<ffi.Int8> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    _ecvt ??= _dylib.lookupFunction<_c_ecvt, _dart_ecvt>('ecvt');
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  _dart_ecvt _ecvt;

  ffi.Pointer<ffi.Int8> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    _fcvt ??= _dylib.lookupFunction<_c_fcvt, _dart_fcvt>('fcvt');
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  _dart_fcvt _fcvt;

  ffi.Pointer<ffi.Int8> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    _gcvt ??= _dylib.lookupFunction<_c_gcvt, _dart_gcvt>('gcvt');
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  _dart_gcvt _gcvt;

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    _ecvt_r ??= _dylib.lookupFunction<_c_ecvt_r, _dart_ecvt_r>('ecvt_r');
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  _dart_ecvt_r _ecvt_r;

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    _fcvt_r ??= _dylib.lookupFunction<_c_fcvt_r, _dart_fcvt_r>('fcvt_r');
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  _dart_fcvt_r _fcvt_r;

  int mblen(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    _mblen ??= _dylib.lookupFunction<_c_mblen, _dart_mblen>('mblen');
    return _mblen(
      __s,
      __n,
    );
  }

  _dart_mblen _mblen;

  int mbtowc(
    ffi.Pointer<ffi.Int32> __pwc,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    _mbtowc ??= _dylib.lookupFunction<_c_mbtowc, _dart_mbtowc>('mbtowc');
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  _dart_mbtowc _mbtowc;

  int wctomb(
    ffi.Pointer<ffi.Int8> __s,
    int __wchar,
  ) {
    _wctomb ??= _dylib.lookupFunction<_c_wctomb, _dart_wctomb>('wctomb');
    return _wctomb(
      __s,
      __wchar,
    );
  }

  _dart_wctomb _wctomb;

  int mbstowcs(
    ffi.Pointer<ffi.Int32> __pwcs,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    _mbstowcs ??=
        _dylib.lookupFunction<_c_mbstowcs, _dart_mbstowcs>('mbstowcs');
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  _dart_mbstowcs _mbstowcs;

  int wcstombs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int32> __pwcs,
    int __n,
  ) {
    _wcstombs ??=
        _dylib.lookupFunction<_c_wcstombs, _dart_wcstombs>('wcstombs');
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  _dart_wcstombs _wcstombs;

  int rpmatch(
    ffi.Pointer<ffi.Int8> __response,
  ) {
    _rpmatch ??= _dylib.lookupFunction<_c_rpmatch, _dart_rpmatch>('rpmatch');
    return _rpmatch(
      __response,
    );
  }

  _dart_rpmatch _rpmatch;

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __valuep,
  ) {
    _getsubopt ??=
        _dylib.lookupFunction<_c_getsubopt, _dart_getsubopt>('getsubopt');
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  _dart_getsubopt _getsubopt;

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    _getloadavg ??=
        _dylib.lookupFunction<_c_getloadavg, _dart_getloadavg>('getloadavg');
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  _dart_getloadavg _getloadavg;

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    _memcpy ??= _dylib.lookupFunction<_c_memcpy, _dart_memcpy>('memcpy');
    return _memcpy(
      __dest,
      __src,
      __n,
    );
  }

  _dart_memcpy _memcpy;

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    _memmove ??= _dylib.lookupFunction<_c_memmove, _dart_memmove>('memmove');
    return _memmove(
      __dest,
      __src,
      __n,
    );
  }

  _dart_memmove _memmove;

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    _memccpy ??= _dylib.lookupFunction<_c_memccpy, _dart_memccpy>('memccpy');
    return _memccpy(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  _dart_memccpy _memccpy;

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    _memset ??= _dylib.lookupFunction<_c_memset, _dart_memset>('memset');
    return _memset(
      __s,
      __c,
      __n,
    );
  }

  _dart_memset _memset;

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    _memcmp ??= _dylib.lookupFunction<_c_memcmp, _dart_memcmp>('memcmp');
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_memcmp _memcmp;

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    _memchr ??= _dylib.lookupFunction<_c_memchr, _dart_memchr>('memchr');
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  _dart_memchr _memchr;

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    _strcpy ??= _dylib.lookupFunction<_c_strcpy, _dart_strcpy>('strcpy');
    return _strcpy(
      __dest,
      __src,
    );
  }

  _dart_strcpy _strcpy;

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    _strncpy ??= _dylib.lookupFunction<_c_strncpy, _dart_strncpy>('strncpy');
    return _strncpy(
      __dest,
      __src,
      __n,
    );
  }

  _dart_strncpy _strncpy;

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    _strcat ??= _dylib.lookupFunction<_c_strcat, _dart_strcat>('strcat');
    return _strcat(
      __dest,
      __src,
    );
  }

  _dart_strcat _strcat;

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    _strncat ??= _dylib.lookupFunction<_c_strncat, _dart_strncat>('strncat');
    return _strncat(
      __dest,
      __src,
      __n,
    );
  }

  _dart_strncat _strncat;

  int strcmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    _strcmp ??= _dylib.lookupFunction<_c_strcmp, _dart_strcmp>('strcmp');
    return _strcmp(
      __s1,
      __s2,
    );
  }

  _dart_strcmp _strcmp;

  int strncmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    _strncmp ??= _dylib.lookupFunction<_c_strncmp, _dart_strncmp>('strncmp');
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_strncmp _strncmp;

  int strcoll(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    _strcoll ??= _dylib.lookupFunction<_c_strcoll, _dart_strcoll>('strcoll');
    return _strcoll(
      __s1,
      __s2,
    );
  }

  _dart_strcoll _strcoll;

  int strxfrm(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    _strxfrm ??= _dylib.lookupFunction<_c_strxfrm, _dart_strxfrm>('strxfrm');
    return _strxfrm(
      __dest,
      __src,
      __n,
    );
  }

  _dart_strxfrm _strxfrm;

  int strcoll_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    ffi.Pointer<__locale_struct> __l,
  ) {
    _strcoll_l ??=
        _dylib.lookupFunction<_c_strcoll_l, _dart_strcoll_l>('strcoll_l');
    return _strcoll_l(
      __s1,
      __s2,
      __l,
    );
  }

  _dart_strcoll_l _strcoll_l;

  int strxfrm_l(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
    ffi.Pointer<__locale_struct> __l,
  ) {
    _strxfrm_l ??=
        _dylib.lookupFunction<_c_strxfrm_l, _dart_strxfrm_l>('strxfrm_l');
    return _strxfrm_l(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  _dart_strxfrm_l _strxfrm_l;

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _strdup ??= _dylib.lookupFunction<_c_strdup, _dart_strdup>('strdup');
    return _strdup(
      __s,
    );
  }

  _dart_strdup _strdup;

  ffi.Pointer<ffi.Int8> strndup(
    ffi.Pointer<ffi.Int8> __string,
    int __n,
  ) {
    _strndup ??= _dylib.lookupFunction<_c_strndup, _dart_strndup>('strndup');
    return _strndup(
      __string,
      __n,
    );
  }

  _dart_strndup _strndup;

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    _strchr ??= _dylib.lookupFunction<_c_strchr, _dart_strchr>('strchr');
    return _strchr(
      __s,
      __c,
    );
  }

  _dart_strchr _strchr;

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    _strrchr ??= _dylib.lookupFunction<_c_strrchr, _dart_strrchr>('strrchr');
    return _strrchr(
      __s,
      __c,
    );
  }

  _dart_strrchr _strrchr;

  int strcspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __reject,
  ) {
    _strcspn ??= _dylib.lookupFunction<_c_strcspn, _dart_strcspn>('strcspn');
    return _strcspn(
      __s,
      __reject,
    );
  }

  _dart_strcspn _strcspn;

  int strspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __accept,
  ) {
    _strspn ??= _dylib.lookupFunction<_c_strspn, _dart_strspn>('strspn');
    return _strspn(
      __s,
      __accept,
    );
  }

  _dart_strspn _strspn;

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __accept,
  ) {
    _strpbrk ??= _dylib.lookupFunction<_c_strpbrk, _dart_strpbrk>('strpbrk');
    return _strpbrk(
      __s,
      __accept,
    );
  }

  _dart_strpbrk _strpbrk;

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> __haystack,
    ffi.Pointer<ffi.Int8> __needle,
  ) {
    _strstr ??= _dylib.lookupFunction<_c_strstr, _dart_strstr>('strstr');
    return _strstr(
      __haystack,
      __needle,
    );
  }

  _dart_strstr _strstr;

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    _strtok ??= _dylib.lookupFunction<_c_strtok, _dart_strtok>('strtok');
    return _strtok(
      __s,
      __delim,
    );
  }

  _dart_strtok _strtok;

  ffi.Pointer<ffi.Int8> __strtok_r(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
  ) {
    ___strtok_r ??=
        _dylib.lookupFunction<_c___strtok_r, _dart___strtok_r>('__strtok_r');
    return ___strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  _dart___strtok_r ___strtok_r;

  ffi.Pointer<ffi.Int8> strtok_r(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
  ) {
    _strtok_r ??=
        _dylib.lookupFunction<_c_strtok_r, _dart_strtok_r>('strtok_r');
    return _strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  _dart_strtok_r _strtok_r;

  int strlen(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _strlen ??= _dylib.lookupFunction<_c_strlen, _dart_strlen>('strlen');
    return _strlen(
      __s,
    );
  }

  _dart_strlen _strlen;

  int strnlen(
    ffi.Pointer<ffi.Int8> __string,
    int __maxlen,
  ) {
    _strnlen ??= _dylib.lookupFunction<_c_strnlen, _dart_strnlen>('strnlen');
    return _strnlen(
      __string,
      __maxlen,
    );
  }

  _dart_strnlen _strnlen;

  ffi.Pointer<ffi.Int8> strerror(
    int __errnum,
  ) {
    _strerror ??=
        _dylib.lookupFunction<_c_strerror, _dart_strerror>('strerror');
    return _strerror(
      __errnum,
    );
  }

  _dart_strerror _strerror;

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Int8> __buf,
    int __buflen,
  ) {
    _strerror_r ??=
        _dylib.lookupFunction<_c_strerror_r, _dart_strerror_r>('strerror_r');
    return _strerror_r(
      __errnum,
      __buf,
      __buflen,
    );
  }

  _dart_strerror_r _strerror_r;

  ffi.Pointer<ffi.Int8> strerror_l(
    int __errnum,
    ffi.Pointer<__locale_struct> __l,
  ) {
    _strerror_l ??=
        _dylib.lookupFunction<_c_strerror_l, _dart_strerror_l>('strerror_l');
    return _strerror_l(
      __errnum,
      __l,
    );
  }

  _dart_strerror_l _strerror_l;

  int bcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    _bcmp ??= _dylib.lookupFunction<_c_bcmp, _dart_bcmp>('bcmp');
    return _bcmp(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_bcmp _bcmp;

  void bcopy(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    _bcopy ??= _dylib.lookupFunction<_c_bcopy, _dart_bcopy>('bcopy');
    return _bcopy(
      __src,
      __dest,
      __n,
    );
  }

  _dart_bcopy _bcopy;

  void bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    _bzero ??= _dylib.lookupFunction<_c_bzero, _dart_bzero>('bzero');
    return _bzero(
      __s,
      __n,
    );
  }

  _dart_bzero _bzero;

  ffi.Pointer<ffi.Int8> index(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    _index ??= _dylib.lookupFunction<_c_index, _dart_index>('index');
    return _index(
      __s,
      __c,
    );
  }

  _dart_index _index;

  ffi.Pointer<ffi.Int8> rindex(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    _rindex ??= _dylib.lookupFunction<_c_rindex, _dart_rindex>('rindex');
    return _rindex(
      __s,
      __c,
    );
  }

  _dart_rindex _rindex;

  int ffs(
    int __i,
  ) {
    _ffs ??= _dylib.lookupFunction<_c_ffs, _dart_ffs>('ffs');
    return _ffs(
      __i,
    );
  }

  _dart_ffs _ffs;

  int ffsl(
    int __l,
  ) {
    _ffsl ??= _dylib.lookupFunction<_c_ffsl, _dart_ffsl>('ffsl');
    return _ffsl(
      __l,
    );
  }

  _dart_ffsl _ffsl;

  int ffsll(
    int __ll,
  ) {
    _ffsll ??= _dylib.lookupFunction<_c_ffsll, _dart_ffsll>('ffsll');
    return _ffsll(
      __ll,
    );
  }

  _dart_ffsll _ffsll;

  int strcasecmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    _strcasecmp ??=
        _dylib.lookupFunction<_c_strcasecmp, _dart_strcasecmp>('strcasecmp');
    return _strcasecmp(
      __s1,
      __s2,
    );
  }

  _dart_strcasecmp _strcasecmp;

  int strncasecmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    _strncasecmp ??=
        _dylib.lookupFunction<_c_strncasecmp, _dart_strncasecmp>('strncasecmp');
    return _strncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_strncasecmp _strncasecmp;

  int strcasecmp_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    ffi.Pointer<__locale_struct> __loc,
  ) {
    _strcasecmp_l ??= _dylib
        .lookupFunction<_c_strcasecmp_l, _dart_strcasecmp_l>('strcasecmp_l');
    return _strcasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  _dart_strcasecmp_l _strcasecmp_l;

  int strncasecmp_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
    ffi.Pointer<__locale_struct> __loc,
  ) {
    _strncasecmp_l ??= _dylib
        .lookupFunction<_c_strncasecmp_l, _dart_strncasecmp_l>('strncasecmp_l');
    return _strncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  _dart_strncasecmp_l _strncasecmp_l;

  void explicit_bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    _explicit_bzero ??=
        _dylib.lookupFunction<_c_explicit_bzero, _dart_explicit_bzero>(
            'explicit_bzero');
    return _explicit_bzero(
      __s,
      __n,
    );
  }

  _dart_explicit_bzero _explicit_bzero;

  ffi.Pointer<ffi.Int8> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    _strsep ??= _dylib.lookupFunction<_c_strsep, _dart_strsep>('strsep');
    return _strsep(
      __stringp,
      __delim,
    );
  }

  _dart_strsep _strsep;

  ffi.Pointer<ffi.Int8> strsignal(
    int __sig,
  ) {
    _strsignal ??=
        _dylib.lookupFunction<_c_strsignal, _dart_strsignal>('strsignal');
    return _strsignal(
      __sig,
    );
  }

  _dart_strsignal _strsignal;

  ffi.Pointer<ffi.Int8> __stpcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    ___stpcpy ??=
        _dylib.lookupFunction<_c___stpcpy, _dart___stpcpy>('__stpcpy');
    return ___stpcpy(
      __dest,
      __src,
    );
  }

  _dart___stpcpy ___stpcpy;

  ffi.Pointer<ffi.Int8> stpcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    _stpcpy ??= _dylib.lookupFunction<_c_stpcpy, _dart_stpcpy>('stpcpy');
    return _stpcpy(
      __dest,
      __src,
    );
  }

  _dart_stpcpy _stpcpy;

  ffi.Pointer<ffi.Int8> __stpncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    ___stpncpy ??=
        _dylib.lookupFunction<_c___stpncpy, _dart___stpncpy>('__stpncpy');
    return ___stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  _dart___stpncpy ___stpncpy;

  ffi.Pointer<ffi.Int8> stpncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    _stpncpy ??= _dylib.lookupFunction<_c_stpncpy, _dart_stpncpy>('stpncpy');
    return _stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  _dart_stpncpy _stpncpy;

  ffi.Pointer<ffi.Int32> wcscpy(
    ffi.Pointer<ffi.Int32> __dest,
    ffi.Pointer<ffi.Int32> __src,
  ) {
    _wcscpy ??= _dylib.lookupFunction<_c_wcscpy, _dart_wcscpy>('wcscpy');
    return _wcscpy(
      __dest,
      __src,
    );
  }

  _dart_wcscpy _wcscpy;

  ffi.Pointer<ffi.Int32> wcsncpy(
    ffi.Pointer<ffi.Int32> __dest,
    ffi.Pointer<ffi.Int32> __src,
    int __n,
  ) {
    _wcsncpy ??= _dylib.lookupFunction<_c_wcsncpy, _dart_wcsncpy>('wcsncpy');
    return _wcsncpy(
      __dest,
      __src,
      __n,
    );
  }

  _dart_wcsncpy _wcsncpy;

  ffi.Pointer<ffi.Int32> wcscat(
    ffi.Pointer<ffi.Int32> __dest,
    ffi.Pointer<ffi.Int32> __src,
  ) {
    _wcscat ??= _dylib.lookupFunction<_c_wcscat, _dart_wcscat>('wcscat');
    return _wcscat(
      __dest,
      __src,
    );
  }

  _dart_wcscat _wcscat;

  ffi.Pointer<ffi.Int32> wcsncat(
    ffi.Pointer<ffi.Int32> __dest,
    ffi.Pointer<ffi.Int32> __src,
    int __n,
  ) {
    _wcsncat ??= _dylib.lookupFunction<_c_wcsncat, _dart_wcsncat>('wcsncat');
    return _wcsncat(
      __dest,
      __src,
      __n,
    );
  }

  _dart_wcsncat _wcsncat;

  int wcscmp(
    ffi.Pointer<ffi.Int32> __s1,
    ffi.Pointer<ffi.Int32> __s2,
  ) {
    _wcscmp ??= _dylib.lookupFunction<_c_wcscmp, _dart_wcscmp>('wcscmp');
    return _wcscmp(
      __s1,
      __s2,
    );
  }

  _dart_wcscmp _wcscmp;

  int wcsncmp(
    ffi.Pointer<ffi.Int32> __s1,
    ffi.Pointer<ffi.Int32> __s2,
    int __n,
  ) {
    _wcsncmp ??= _dylib.lookupFunction<_c_wcsncmp, _dart_wcsncmp>('wcsncmp');
    return _wcsncmp(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_wcsncmp _wcsncmp;

  int wcscasecmp(
    ffi.Pointer<ffi.Int32> __s1,
    ffi.Pointer<ffi.Int32> __s2,
  ) {
    _wcscasecmp ??=
        _dylib.lookupFunction<_c_wcscasecmp, _dart_wcscasecmp>('wcscasecmp');
    return _wcscasecmp(
      __s1,
      __s2,
    );
  }

  _dart_wcscasecmp _wcscasecmp;

  int wcsncasecmp(
    ffi.Pointer<ffi.Int32> __s1,
    ffi.Pointer<ffi.Int32> __s2,
    int __n,
  ) {
    _wcsncasecmp ??=
        _dylib.lookupFunction<_c_wcsncasecmp, _dart_wcsncasecmp>('wcsncasecmp');
    return _wcsncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_wcsncasecmp _wcsncasecmp;

  int wcscasecmp_l(
    ffi.Pointer<ffi.Int32> __s1,
    ffi.Pointer<ffi.Int32> __s2,
    ffi.Pointer<__locale_struct> __loc,
  ) {
    _wcscasecmp_l ??= _dylib
        .lookupFunction<_c_wcscasecmp_l, _dart_wcscasecmp_l>('wcscasecmp_l');
    return _wcscasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  _dart_wcscasecmp_l _wcscasecmp_l;

  int wcsncasecmp_l(
    ffi.Pointer<ffi.Int32> __s1,
    ffi.Pointer<ffi.Int32> __s2,
    int __n,
    ffi.Pointer<__locale_struct> __loc,
  ) {
    _wcsncasecmp_l ??= _dylib
        .lookupFunction<_c_wcsncasecmp_l, _dart_wcsncasecmp_l>('wcsncasecmp_l');
    return _wcsncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  _dart_wcsncasecmp_l _wcsncasecmp_l;

  int wcscoll(
    ffi.Pointer<ffi.Int32> __s1,
    ffi.Pointer<ffi.Int32> __s2,
  ) {
    _wcscoll ??= _dylib.lookupFunction<_c_wcscoll, _dart_wcscoll>('wcscoll');
    return _wcscoll(
      __s1,
      __s2,
    );
  }

  _dart_wcscoll _wcscoll;

  int wcsxfrm(
    ffi.Pointer<ffi.Int32> __s1,
    ffi.Pointer<ffi.Int32> __s2,
    int __n,
  ) {
    _wcsxfrm ??= _dylib.lookupFunction<_c_wcsxfrm, _dart_wcsxfrm>('wcsxfrm');
    return _wcsxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_wcsxfrm _wcsxfrm;

  int wcscoll_l(
    ffi.Pointer<ffi.Int32> __s1,
    ffi.Pointer<ffi.Int32> __s2,
    ffi.Pointer<__locale_struct> __loc,
  ) {
    _wcscoll_l ??=
        _dylib.lookupFunction<_c_wcscoll_l, _dart_wcscoll_l>('wcscoll_l');
    return _wcscoll_l(
      __s1,
      __s2,
      __loc,
    );
  }

  _dart_wcscoll_l _wcscoll_l;

  int wcsxfrm_l(
    ffi.Pointer<ffi.Int32> __s1,
    ffi.Pointer<ffi.Int32> __s2,
    int __n,
    ffi.Pointer<__locale_struct> __loc,
  ) {
    _wcsxfrm_l ??=
        _dylib.lookupFunction<_c_wcsxfrm_l, _dart_wcsxfrm_l>('wcsxfrm_l');
    return _wcsxfrm_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  _dart_wcsxfrm_l _wcsxfrm_l;

  ffi.Pointer<ffi.Int32> wcsdup(
    ffi.Pointer<ffi.Int32> __s,
  ) {
    _wcsdup ??= _dylib.lookupFunction<_c_wcsdup, _dart_wcsdup>('wcsdup');
    return _wcsdup(
      __s,
    );
  }

  _dart_wcsdup _wcsdup;

  ffi.Pointer<ffi.Int32> wcschr(
    ffi.Pointer<ffi.Int32> __wcs,
    int __wc,
  ) {
    _wcschr ??= _dylib.lookupFunction<_c_wcschr, _dart_wcschr>('wcschr');
    return _wcschr(
      __wcs,
      __wc,
    );
  }

  _dart_wcschr _wcschr;

  ffi.Pointer<ffi.Int32> wcsrchr(
    ffi.Pointer<ffi.Int32> __wcs,
    int __wc,
  ) {
    _wcsrchr ??= _dylib.lookupFunction<_c_wcsrchr, _dart_wcsrchr>('wcsrchr');
    return _wcsrchr(
      __wcs,
      __wc,
    );
  }

  _dart_wcsrchr _wcsrchr;

  int wcscspn(
    ffi.Pointer<ffi.Int32> __wcs,
    ffi.Pointer<ffi.Int32> __reject,
  ) {
    _wcscspn ??= _dylib.lookupFunction<_c_wcscspn, _dart_wcscspn>('wcscspn');
    return _wcscspn(
      __wcs,
      __reject,
    );
  }

  _dart_wcscspn _wcscspn;

  int wcsspn(
    ffi.Pointer<ffi.Int32> __wcs,
    ffi.Pointer<ffi.Int32> __accept,
  ) {
    _wcsspn ??= _dylib.lookupFunction<_c_wcsspn, _dart_wcsspn>('wcsspn');
    return _wcsspn(
      __wcs,
      __accept,
    );
  }

  _dart_wcsspn _wcsspn;

  ffi.Pointer<ffi.Int32> wcspbrk(
    ffi.Pointer<ffi.Int32> __wcs,
    ffi.Pointer<ffi.Int32> __accept,
  ) {
    _wcspbrk ??= _dylib.lookupFunction<_c_wcspbrk, _dart_wcspbrk>('wcspbrk');
    return _wcspbrk(
      __wcs,
      __accept,
    );
  }

  _dart_wcspbrk _wcspbrk;

  ffi.Pointer<ffi.Int32> wcsstr(
    ffi.Pointer<ffi.Int32> __haystack,
    ffi.Pointer<ffi.Int32> __needle,
  ) {
    _wcsstr ??= _dylib.lookupFunction<_c_wcsstr, _dart_wcsstr>('wcsstr');
    return _wcsstr(
      __haystack,
      __needle,
    );
  }

  _dart_wcsstr _wcsstr;

  ffi.Pointer<ffi.Int32> wcstok(
    ffi.Pointer<ffi.Int32> __s,
    ffi.Pointer<ffi.Int32> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> __ptr,
  ) {
    _wcstok ??= _dylib.lookupFunction<_c_wcstok, _dart_wcstok>('wcstok');
    return _wcstok(
      __s,
      __delim,
      __ptr,
    );
  }

  _dart_wcstok _wcstok;

  int wcslen(
    ffi.Pointer<ffi.Int32> __s,
  ) {
    _wcslen ??= _dylib.lookupFunction<_c_wcslen, _dart_wcslen>('wcslen');
    return _wcslen(
      __s,
    );
  }

  _dart_wcslen _wcslen;

  int wcsnlen(
    ffi.Pointer<ffi.Int32> __s,
    int __maxlen,
  ) {
    _wcsnlen ??= _dylib.lookupFunction<_c_wcsnlen, _dart_wcsnlen>('wcsnlen');
    return _wcsnlen(
      __s,
      __maxlen,
    );
  }

  _dart_wcsnlen _wcsnlen;

  ffi.Pointer<ffi.Int32> wmemchr(
    ffi.Pointer<ffi.Int32> __s,
    int __c,
    int __n,
  ) {
    _wmemchr ??= _dylib.lookupFunction<_c_wmemchr, _dart_wmemchr>('wmemchr');
    return _wmemchr(
      __s,
      __c,
      __n,
    );
  }

  _dart_wmemchr _wmemchr;

  int wmemcmp(
    ffi.Pointer<ffi.Int32> __s1,
    ffi.Pointer<ffi.Int32> __s2,
    int __n,
  ) {
    _wmemcmp ??= _dylib.lookupFunction<_c_wmemcmp, _dart_wmemcmp>('wmemcmp');
    return _wmemcmp(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_wmemcmp _wmemcmp;

  ffi.Pointer<ffi.Int32> wmemcpy(
    ffi.Pointer<ffi.Int32> __s1,
    ffi.Pointer<ffi.Int32> __s2,
    int __n,
  ) {
    _wmemcpy ??= _dylib.lookupFunction<_c_wmemcpy, _dart_wmemcpy>('wmemcpy');
    return _wmemcpy(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_wmemcpy _wmemcpy;

  ffi.Pointer<ffi.Int32> wmemmove(
    ffi.Pointer<ffi.Int32> __s1,
    ffi.Pointer<ffi.Int32> __s2,
    int __n,
  ) {
    _wmemmove ??=
        _dylib.lookupFunction<_c_wmemmove, _dart_wmemmove>('wmemmove');
    return _wmemmove(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_wmemmove _wmemmove;

  ffi.Pointer<ffi.Int32> wmemset(
    ffi.Pointer<ffi.Int32> __s,
    int __c,
    int __n,
  ) {
    _wmemset ??= _dylib.lookupFunction<_c_wmemset, _dart_wmemset>('wmemset');
    return _wmemset(
      __s,
      __c,
      __n,
    );
  }

  _dart_wmemset _wmemset;

  int btowc(
    int __c,
  ) {
    _btowc ??= _dylib.lookupFunction<_c_btowc, _dart_btowc>('btowc');
    return _btowc(
      __c,
    );
  }

  _dart_btowc _btowc;

  int wctob(
    int __c,
  ) {
    _wctob ??= _dylib.lookupFunction<_c_wctob, _dart_wctob>('wctob');
    return _wctob(
      __c,
    );
  }

  _dart_wctob _wctob;

  int mbsinit(
    ffi.Pointer<__mbstate_t> __ps,
  ) {
    _mbsinit ??= _dylib.lookupFunction<_c_mbsinit, _dart_mbsinit>('mbsinit');
    return _mbsinit(
      __ps,
    );
  }

  _dart_mbsinit _mbsinit;

  int mbrtowc(
    ffi.Pointer<ffi.Int32> __pwc,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
    ffi.Pointer<__mbstate_t> __p,
  ) {
    _mbrtowc ??= _dylib.lookupFunction<_c_mbrtowc, _dart_mbrtowc>('mbrtowc');
    return _mbrtowc(
      __pwc,
      __s,
      __n,
      __p,
    );
  }

  _dart_mbrtowc _mbrtowc;

  int wcrtomb(
    ffi.Pointer<ffi.Int8> __s,
    int __wc,
    ffi.Pointer<__mbstate_t> __ps,
  ) {
    _wcrtomb ??= _dylib.lookupFunction<_c_wcrtomb, _dart_wcrtomb>('wcrtomb');
    return _wcrtomb(
      __s,
      __wc,
      __ps,
    );
  }

  _dart_wcrtomb _wcrtomb;

  int __mbrlen(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
    ffi.Pointer<__mbstate_t> __ps,
  ) {
    ___mbrlen ??=
        _dylib.lookupFunction<_c___mbrlen, _dart___mbrlen>('__mbrlen');
    return ___mbrlen(
      __s,
      __n,
      __ps,
    );
  }

  _dart___mbrlen ___mbrlen;

  int mbrlen(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
    ffi.Pointer<__mbstate_t> __ps,
  ) {
    _mbrlen ??= _dylib.lookupFunction<_c_mbrlen, _dart_mbrlen>('mbrlen');
    return _mbrlen(
      __s,
      __n,
      __ps,
    );
  }

  _dart_mbrlen _mbrlen;

  int mbsrtowcs(
    ffi.Pointer<ffi.Int32> __dst,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __src,
    int __len,
    ffi.Pointer<__mbstate_t> __ps,
  ) {
    _mbsrtowcs ??=
        _dylib.lookupFunction<_c_mbsrtowcs, _dart_mbsrtowcs>('mbsrtowcs');
    return _mbsrtowcs(
      __dst,
      __src,
      __len,
      __ps,
    );
  }

  _dart_mbsrtowcs _mbsrtowcs;

  int wcsrtombs(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> __src,
    int __len,
    ffi.Pointer<__mbstate_t> __ps,
  ) {
    _wcsrtombs ??=
        _dylib.lookupFunction<_c_wcsrtombs, _dart_wcsrtombs>('wcsrtombs');
    return _wcsrtombs(
      __dst,
      __src,
      __len,
      __ps,
    );
  }

  _dart_wcsrtombs _wcsrtombs;

  int mbsnrtowcs(
    ffi.Pointer<ffi.Int32> __dst,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __src,
    int __nmc,
    int __len,
    ffi.Pointer<__mbstate_t> __ps,
  ) {
    _mbsnrtowcs ??=
        _dylib.lookupFunction<_c_mbsnrtowcs, _dart_mbsnrtowcs>('mbsnrtowcs');
    return _mbsnrtowcs(
      __dst,
      __src,
      __nmc,
      __len,
      __ps,
    );
  }

  _dart_mbsnrtowcs _mbsnrtowcs;

  int wcsnrtombs(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> __src,
    int __nwc,
    int __len,
    ffi.Pointer<__mbstate_t> __ps,
  ) {
    _wcsnrtombs ??=
        _dylib.lookupFunction<_c_wcsnrtombs, _dart_wcsnrtombs>('wcsnrtombs');
    return _wcsnrtombs(
      __dst,
      __src,
      __nwc,
      __len,
      __ps,
    );
  }

  _dart_wcsnrtombs _wcsnrtombs;

  double wcstod(
    ffi.Pointer<ffi.Int32> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  ) {
    _wcstod ??= _dylib.lookupFunction<_c_wcstod, _dart_wcstod>('wcstod');
    return _wcstod(
      __nptr,
      __endptr,
    );
  }

  _dart_wcstod _wcstod;

  double wcstof(
    ffi.Pointer<ffi.Int32> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  ) {
    _wcstof ??= _dylib.lookupFunction<_c_wcstof, _dart_wcstof>('wcstof');
    return _wcstof(
      __nptr,
      __endptr,
    );
  }

  _dart_wcstof _wcstof;

  int wcstol(
    ffi.Pointer<ffi.Int32> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
    int __base,
  ) {
    _wcstol ??= _dylib.lookupFunction<_c_wcstol, _dart_wcstol>('wcstol');
    return _wcstol(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_wcstol _wcstol;

  int wcstoul(
    ffi.Pointer<ffi.Int32> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
    int __base,
  ) {
    _wcstoul ??= _dylib.lookupFunction<_c_wcstoul, _dart_wcstoul>('wcstoul');
    return _wcstoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_wcstoul _wcstoul;

  int wcstoll(
    ffi.Pointer<ffi.Int32> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
    int __base,
  ) {
    _wcstoll ??= _dylib.lookupFunction<_c_wcstoll, _dart_wcstoll>('wcstoll');
    return _wcstoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_wcstoll _wcstoll;

  int wcstoull(
    ffi.Pointer<ffi.Int32> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
    int __base,
  ) {
    _wcstoull ??=
        _dylib.lookupFunction<_c_wcstoull, _dart_wcstoull>('wcstoull');
    return _wcstoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_wcstoull _wcstoull;

  ffi.Pointer<ffi.Int32> wcpcpy(
    ffi.Pointer<ffi.Int32> __dest,
    ffi.Pointer<ffi.Int32> __src,
  ) {
    _wcpcpy ??= _dylib.lookupFunction<_c_wcpcpy, _dart_wcpcpy>('wcpcpy');
    return _wcpcpy(
      __dest,
      __src,
    );
  }

  _dart_wcpcpy _wcpcpy;

  ffi.Pointer<ffi.Int32> wcpncpy(
    ffi.Pointer<ffi.Int32> __dest,
    ffi.Pointer<ffi.Int32> __src,
    int __n,
  ) {
    _wcpncpy ??= _dylib.lookupFunction<_c_wcpncpy, _dart_wcpncpy>('wcpncpy');
    return _wcpncpy(
      __dest,
      __src,
      __n,
    );
  }

  _dart_wcpncpy _wcpncpy;

  ffi.Pointer<_IO_FILE> open_wmemstream(
    ffi.Pointer<ffi.Pointer<ffi.Int32>> __bufloc,
    ffi.Pointer<ffi.Uint64> __sizeloc,
  ) {
    _open_wmemstream ??=
        _dylib.lookupFunction<_c_open_wmemstream, _dart_open_wmemstream>(
            'open_wmemstream');
    return _open_wmemstream(
      __bufloc,
      __sizeloc,
    );
  }

  _dart_open_wmemstream _open_wmemstream;

  int fwide(
    ffi.Pointer<_IO_FILE> __fp,
    int __mode,
  ) {
    _fwide ??= _dylib.lookupFunction<_c_fwide, _dart_fwide>('fwide');
    return _fwide(
      __fp,
      __mode,
    );
  }

  _dart_fwide _fwide;

  int fwprintf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int32> __format,
  ) {
    _fwprintf ??=
        _dylib.lookupFunction<_c_fwprintf, _dart_fwprintf>('fwprintf');
    return _fwprintf(
      __stream,
      __format,
    );
  }

  _dart_fwprintf _fwprintf;

  int wprintf(
    ffi.Pointer<ffi.Int32> __format,
  ) {
    _wprintf ??= _dylib.lookupFunction<_c_wprintf, _dart_wprintf>('wprintf');
    return _wprintf(
      __format,
    );
  }

  _dart_wprintf _wprintf;

  int swprintf(
    ffi.Pointer<ffi.Int32> __s,
    int __n,
    ffi.Pointer<ffi.Int32> __format,
  ) {
    _swprintf ??=
        _dylib.lookupFunction<_c_swprintf, _dart_swprintf>('swprintf');
    return _swprintf(
      __s,
      __n,
      __format,
    );
  }

  _dart_swprintf _swprintf;

  int vfwprintf(
    ffi.Pointer<_IO_FILE> __s,
    ffi.Pointer<ffi.Int32> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vfwprintf ??=
        _dylib.lookupFunction<_c_vfwprintf, _dart_vfwprintf>('vfwprintf');
    return _vfwprintf(
      __s,
      __format,
      __arg,
    );
  }

  _dart_vfwprintf _vfwprintf;

  int vwprintf(
    ffi.Pointer<ffi.Int32> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vwprintf ??=
        _dylib.lookupFunction<_c_vwprintf, _dart_vwprintf>('vwprintf');
    return _vwprintf(
      __format,
      __arg,
    );
  }

  _dart_vwprintf _vwprintf;

  int vswprintf(
    ffi.Pointer<ffi.Int32> __s,
    int __n,
    ffi.Pointer<ffi.Int32> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vswprintf ??=
        _dylib.lookupFunction<_c_vswprintf, _dart_vswprintf>('vswprintf');
    return _vswprintf(
      __s,
      __n,
      __format,
      __arg,
    );
  }

  _dart_vswprintf _vswprintf;

  int fwscanf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int32> __format,
  ) {
    _fwscanf ??= _dylib.lookupFunction<_c_fwscanf, _dart_fwscanf>('fwscanf');
    return _fwscanf(
      __stream,
      __format,
    );
  }

  _dart_fwscanf _fwscanf;

  int wscanf(
    ffi.Pointer<ffi.Int32> __format,
  ) {
    _wscanf ??= _dylib.lookupFunction<_c_wscanf, _dart_wscanf>('wscanf');
    return _wscanf(
      __format,
    );
  }

  _dart_wscanf _wscanf;

  int swscanf(
    ffi.Pointer<ffi.Int32> __s,
    ffi.Pointer<ffi.Int32> __format,
  ) {
    _swscanf ??= _dylib.lookupFunction<_c_swscanf, _dart_swscanf>('swscanf');
    return _swscanf(
      __s,
      __format,
    );
  }

  _dart_swscanf _swscanf;

  int vfwscanf(
    ffi.Pointer<_IO_FILE> __s,
    ffi.Pointer<ffi.Int32> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vfwscanf ??=
        _dylib.lookupFunction<_c_vfwscanf, _dart_vfwscanf>('vfwscanf');
    return _vfwscanf(
      __s,
      __format,
      __arg,
    );
  }

  _dart_vfwscanf _vfwscanf;

  int vwscanf(
    ffi.Pointer<ffi.Int32> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vwscanf ??= _dylib.lookupFunction<_c_vwscanf, _dart_vwscanf>('vwscanf');
    return _vwscanf(
      __format,
      __arg,
    );
  }

  _dart_vwscanf _vwscanf;

  int vswscanf(
    ffi.Pointer<ffi.Int32> __s,
    ffi.Pointer<ffi.Int32> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vswscanf ??=
        _dylib.lookupFunction<_c_vswscanf, _dart_vswscanf>('vswscanf');
    return _vswscanf(
      __s,
      __format,
      __arg,
    );
  }

  _dart_vswscanf _vswscanf;

  int fgetwc(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fgetwc ??= _dylib.lookupFunction<_c_fgetwc, _dart_fgetwc>('fgetwc');
    return _fgetwc(
      __stream,
    );
  }

  _dart_fgetwc _fgetwc;

  int getwc(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _getwc ??= _dylib.lookupFunction<_c_getwc, _dart_getwc>('getwc');
    return _getwc(
      __stream,
    );
  }

  _dart_getwc _getwc;

  int getwchar() {
    _getwchar ??=
        _dylib.lookupFunction<_c_getwchar, _dart_getwchar>('getwchar');
    return _getwchar();
  }

  _dart_getwchar _getwchar;

  int fputwc(
    int __wc,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fputwc ??= _dylib.lookupFunction<_c_fputwc, _dart_fputwc>('fputwc');
    return _fputwc(
      __wc,
      __stream,
    );
  }

  _dart_fputwc _fputwc;

  int putwc(
    int __wc,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _putwc ??= _dylib.lookupFunction<_c_putwc, _dart_putwc>('putwc');
    return _putwc(
      __wc,
      __stream,
    );
  }

  _dart_putwc _putwc;

  int putwchar(
    int __wc,
  ) {
    _putwchar ??=
        _dylib.lookupFunction<_c_putwchar, _dart_putwchar>('putwchar');
    return _putwchar(
      __wc,
    );
  }

  _dart_putwchar _putwchar;

  ffi.Pointer<ffi.Int32> fgetws(
    ffi.Pointer<ffi.Int32> __ws,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fgetws ??= _dylib.lookupFunction<_c_fgetws, _dart_fgetws>('fgetws');
    return _fgetws(
      __ws,
      __n,
      __stream,
    );
  }

  _dart_fgetws _fgetws;

  int fputws(
    ffi.Pointer<ffi.Int32> __ws,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fputws ??= _dylib.lookupFunction<_c_fputws, _dart_fputws>('fputws');
    return _fputws(
      __ws,
      __stream,
    );
  }

  _dart_fputws _fputws;

  int ungetwc(
    int __wc,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _ungetwc ??= _dylib.lookupFunction<_c_ungetwc, _dart_ungetwc>('ungetwc');
    return _ungetwc(
      __wc,
      __stream,
    );
  }

  _dart_ungetwc _ungetwc;

  int wcsftime(
    ffi.Pointer<ffi.Int32> __s,
    int __maxsize,
    ffi.Pointer<ffi.Int32> __format,
    ffi.Pointer<tm> __tp,
  ) {
    _wcsftime ??=
        _dylib.lookupFunction<_c_wcsftime, _dart_wcsftime>('wcsftime');
    return _wcsftime(
      __s,
      __maxsize,
      __format,
      __tp,
    );
  }

  _dart_wcsftime _wcsftime;

  int imaxabs(
    int __n,
  ) {
    _imaxabs ??= _dylib.lookupFunction<_c_imaxabs, _dart_imaxabs>('imaxabs');
    return _imaxabs(
      __n,
    );
  }

  _dart_imaxabs _imaxabs;

  int strtoimax(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoimax ??=
        _dylib.lookupFunction<_c_strtoimax, _dart_strtoimax>('strtoimax');
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtoimax _strtoimax;

  int strtoumax(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoumax ??=
        _dylib.lookupFunction<_c_strtoumax, _dart_strtoumax>('strtoumax');
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtoumax _strtoumax;

  int wcstoimax(
    ffi.Pointer<ffi.Int32> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
    int __base,
  ) {
    _wcstoimax ??=
        _dylib.lookupFunction<_c_wcstoimax, _dart_wcstoimax>('wcstoimax');
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_wcstoimax _wcstoimax;

  int wcstoumax(
    ffi.Pointer<ffi.Int32> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
    int __base,
  ) {
    _wcstoumax ??=
        _dylib.lookupFunction<_c_wcstoumax, _dart_wcstoumax>('wcstoumax');
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_wcstoumax _wcstoumax;

  ffi.Pointer<ffi.Pointer<ffi.Uint16>> __ctype_b_loc() {
    ___ctype_b_loc ??= _dylib
        .lookupFunction<_c___ctype_b_loc, _dart___ctype_b_loc>('__ctype_b_loc');
    return ___ctype_b_loc();
  }

  _dart___ctype_b_loc ___ctype_b_loc;

  ffi.Pointer<ffi.Pointer<ffi.Int32>> __ctype_tolower_loc() {
    ___ctype_tolower_loc ??= _dylib.lookupFunction<_c___ctype_tolower_loc,
        _dart___ctype_tolower_loc>('__ctype_tolower_loc');
    return ___ctype_tolower_loc();
  }

  _dart___ctype_tolower_loc ___ctype_tolower_loc;

  ffi.Pointer<ffi.Pointer<ffi.Int32>> __ctype_toupper_loc() {
    ___ctype_toupper_loc ??= _dylib.lookupFunction<_c___ctype_toupper_loc,
        _dart___ctype_toupper_loc>('__ctype_toupper_loc');
    return ___ctype_toupper_loc();
  }

  _dart___ctype_toupper_loc ___ctype_toupper_loc;

  int isalnum(
    int arg0,
  ) {
    _isalnum ??= _dylib.lookupFunction<_c_isalnum, _dart_isalnum>('isalnum');
    return _isalnum(
      arg0,
    );
  }

  _dart_isalnum _isalnum;

  int isalpha(
    int arg0,
  ) {
    _isalpha ??= _dylib.lookupFunction<_c_isalpha, _dart_isalpha>('isalpha');
    return _isalpha(
      arg0,
    );
  }

  _dart_isalpha _isalpha;

  int iscntrl(
    int arg0,
  ) {
    _iscntrl ??= _dylib.lookupFunction<_c_iscntrl, _dart_iscntrl>('iscntrl');
    return _iscntrl(
      arg0,
    );
  }

  _dart_iscntrl _iscntrl;

  int isdigit(
    int arg0,
  ) {
    _isdigit ??= _dylib.lookupFunction<_c_isdigit, _dart_isdigit>('isdigit');
    return _isdigit(
      arg0,
    );
  }

  _dart_isdigit _isdigit;

  int islower(
    int arg0,
  ) {
    _islower ??= _dylib.lookupFunction<_c_islower, _dart_islower>('islower');
    return _islower(
      arg0,
    );
  }

  _dart_islower _islower;

  int isgraph(
    int arg0,
  ) {
    _isgraph ??= _dylib.lookupFunction<_c_isgraph, _dart_isgraph>('isgraph');
    return _isgraph(
      arg0,
    );
  }

  _dart_isgraph _isgraph;

  int isprint(
    int arg0,
  ) {
    _isprint ??= _dylib.lookupFunction<_c_isprint, _dart_isprint>('isprint');
    return _isprint(
      arg0,
    );
  }

  _dart_isprint _isprint;

  int ispunct(
    int arg0,
  ) {
    _ispunct ??= _dylib.lookupFunction<_c_ispunct, _dart_ispunct>('ispunct');
    return _ispunct(
      arg0,
    );
  }

  _dart_ispunct _ispunct;

  int isspace(
    int arg0,
  ) {
    _isspace ??= _dylib.lookupFunction<_c_isspace, _dart_isspace>('isspace');
    return _isspace(
      arg0,
    );
  }

  _dart_isspace _isspace;

  int isupper(
    int arg0,
  ) {
    _isupper ??= _dylib.lookupFunction<_c_isupper, _dart_isupper>('isupper');
    return _isupper(
      arg0,
    );
  }

  _dart_isupper _isupper;

  int isxdigit(
    int arg0,
  ) {
    _isxdigit ??=
        _dylib.lookupFunction<_c_isxdigit, _dart_isxdigit>('isxdigit');
    return _isxdigit(
      arg0,
    );
  }

  _dart_isxdigit _isxdigit;

  int tolower(
    int __c,
  ) {
    _tolower_1 ??= _dylib.lookupFunction<_c_tolower, _dart_tolower>('tolower');
    return _tolower_1(
      __c,
    );
  }

  _dart_tolower _tolower_1;

  int toupper(
    int __c,
  ) {
    _toupper_1 ??= _dylib.lookupFunction<_c_toupper, _dart_toupper>('toupper');
    return _toupper_1(
      __c,
    );
  }

  _dart_toupper _toupper_1;

  int isblank(
    int arg0,
  ) {
    _isblank ??= _dylib.lookupFunction<_c_isblank, _dart_isblank>('isblank');
    return _isblank(
      arg0,
    );
  }

  _dart_isblank _isblank;

  int isascii(
    int __c,
  ) {
    _isascii ??= _dylib.lookupFunction<_c_isascii, _dart_isascii>('isascii');
    return _isascii(
      __c,
    );
  }

  _dart_isascii _isascii;

  int toascii(
    int __c,
  ) {
    _toascii ??= _dylib.lookupFunction<_c_toascii, _dart_toascii>('toascii');
    return _toascii(
      __c,
    );
  }

  _dart_toascii _toascii;

  int _toupper(
    int arg0,
  ) {
    __toupper ??=
        _dylib.lookupFunction<_c__toupper, _dart__toupper>('_toupper');
    return __toupper(
      arg0,
    );
  }

  _dart__toupper __toupper;

  int _tolower(
    int arg0,
  ) {
    __tolower ??=
        _dylib.lookupFunction<_c__tolower, _dart__tolower>('_tolower');
    return __tolower(
      arg0,
    );
  }

  _dart__tolower __tolower;

  int isalnum_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isalnum_l ??=
        _dylib.lookupFunction<_c_isalnum_l, _dart_isalnum_l>('isalnum_l');
    return _isalnum_l(
      arg0,
      arg1,
    );
  }

  _dart_isalnum_l _isalnum_l;

  int isalpha_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isalpha_l ??=
        _dylib.lookupFunction<_c_isalpha_l, _dart_isalpha_l>('isalpha_l');
    return _isalpha_l(
      arg0,
      arg1,
    );
  }

  _dart_isalpha_l _isalpha_l;

  int iscntrl_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _iscntrl_l ??=
        _dylib.lookupFunction<_c_iscntrl_l, _dart_iscntrl_l>('iscntrl_l');
    return _iscntrl_l(
      arg0,
      arg1,
    );
  }

  _dart_iscntrl_l _iscntrl_l;

  int isdigit_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isdigit_l ??=
        _dylib.lookupFunction<_c_isdigit_l, _dart_isdigit_l>('isdigit_l');
    return _isdigit_l(
      arg0,
      arg1,
    );
  }

  _dart_isdigit_l _isdigit_l;

  int islower_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _islower_l ??=
        _dylib.lookupFunction<_c_islower_l, _dart_islower_l>('islower_l');
    return _islower_l(
      arg0,
      arg1,
    );
  }

  _dart_islower_l _islower_l;

  int isgraph_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isgraph_l ??=
        _dylib.lookupFunction<_c_isgraph_l, _dart_isgraph_l>('isgraph_l');
    return _isgraph_l(
      arg0,
      arg1,
    );
  }

  _dart_isgraph_l _isgraph_l;

  int isprint_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isprint_l ??=
        _dylib.lookupFunction<_c_isprint_l, _dart_isprint_l>('isprint_l');
    return _isprint_l(
      arg0,
      arg1,
    );
  }

  _dart_isprint_l _isprint_l;

  int ispunct_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _ispunct_l ??=
        _dylib.lookupFunction<_c_ispunct_l, _dart_ispunct_l>('ispunct_l');
    return _ispunct_l(
      arg0,
      arg1,
    );
  }

  _dart_ispunct_l _ispunct_l;

  int isspace_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isspace_l ??=
        _dylib.lookupFunction<_c_isspace_l, _dart_isspace_l>('isspace_l');
    return _isspace_l(
      arg0,
      arg1,
    );
  }

  _dart_isspace_l _isspace_l;

  int isupper_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isupper_l ??=
        _dylib.lookupFunction<_c_isupper_l, _dart_isupper_l>('isupper_l');
    return _isupper_l(
      arg0,
      arg1,
    );
  }

  _dart_isupper_l _isupper_l;

  int isxdigit_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isxdigit_l ??=
        _dylib.lookupFunction<_c_isxdigit_l, _dart_isxdigit_l>('isxdigit_l');
    return _isxdigit_l(
      arg0,
      arg1,
    );
  }

  _dart_isxdigit_l _isxdigit_l;

  int isblank_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isblank_l ??=
        _dylib.lookupFunction<_c_isblank_l, _dart_isblank_l>('isblank_l');
    return _isblank_l(
      arg0,
      arg1,
    );
  }

  _dart_isblank_l _isblank_l;

  int __tolower_l(
    int __c,
    ffi.Pointer<__locale_struct> __l,
  ) {
    ___tolower_l ??=
        _dylib.lookupFunction<_c___tolower_l, _dart___tolower_l>('__tolower_l');
    return ___tolower_l(
      __c,
      __l,
    );
  }

  _dart___tolower_l ___tolower_l;

  int tolower_l(
    int __c,
    ffi.Pointer<__locale_struct> __l,
  ) {
    _tolower_l ??=
        _dylib.lookupFunction<_c_tolower_l, _dart_tolower_l>('tolower_l');
    return _tolower_l(
      __c,
      __l,
    );
  }

  _dart_tolower_l _tolower_l;

  int __toupper_l(
    int __c,
    ffi.Pointer<__locale_struct> __l,
  ) {
    ___toupper_l ??=
        _dylib.lookupFunction<_c___toupper_l, _dart___toupper_l>('__toupper_l');
    return ___toupper_l(
      __c,
      __l,
    );
  }

  _dart___toupper_l ___toupper_l;

  int toupper_l(
    int __c,
    ffi.Pointer<__locale_struct> __l,
  ) {
    _toupper_l ??=
        _dylib.lookupFunction<_c_toupper_l, _dart_toupper_l>('toupper_l');
    return _toupper_l(
      __c,
      __l,
    );
  }

  _dart_toupper_l _toupper_l;

  int __fpclassify(
    double __value,
  ) {
    ___fpclassify ??= _dylib
        .lookupFunction<_c___fpclassify, _dart___fpclassify>('__fpclassify');
    return ___fpclassify(
      __value,
    );
  }

  _dart___fpclassify ___fpclassify;

  int __signbit(
    double __value,
  ) {
    ___signbit ??=
        _dylib.lookupFunction<_c___signbit, _dart___signbit>('__signbit');
    return ___signbit(
      __value,
    );
  }

  _dart___signbit ___signbit;

  int __isinf(
    double __value,
  ) {
    ___isinf ??= _dylib.lookupFunction<_c___isinf, _dart___isinf>('__isinf');
    return ___isinf(
      __value,
    );
  }

  _dart___isinf ___isinf;

  int __finite(
    double __value,
  ) {
    ___finite ??=
        _dylib.lookupFunction<_c___finite, _dart___finite>('__finite');
    return ___finite(
      __value,
    );
  }

  _dart___finite ___finite;

  int __isnan(
    double __value,
  ) {
    ___isnan ??= _dylib.lookupFunction<_c___isnan, _dart___isnan>('__isnan');
    return ___isnan(
      __value,
    );
  }

  _dart___isnan ___isnan;

  int __iseqsig(
    double __x,
    double __y,
  ) {
    ___iseqsig ??=
        _dylib.lookupFunction<_c___iseqsig, _dart___iseqsig>('__iseqsig');
    return ___iseqsig(
      __x,
      __y,
    );
  }

  _dart___iseqsig ___iseqsig;

  int __issignaling(
    double __value,
  ) {
    ___issignaling ??= _dylib
        .lookupFunction<_c___issignaling, _dart___issignaling>('__issignaling');
    return ___issignaling(
      __value,
    );
  }

  _dart___issignaling ___issignaling;

  double acos(
    double __x,
  ) {
    _acos ??= _dylib.lookupFunction<_c_acos, _dart_acos>('acos');
    return _acos(
      __x,
    );
  }

  _dart_acos _acos;

  double __acos(
    double __x,
  ) {
    ___acos ??= _dylib.lookupFunction<_c___acos, _dart___acos>('__acos');
    return ___acos(
      __x,
    );
  }

  _dart___acos ___acos;

  double asin(
    double __x,
  ) {
    _asin ??= _dylib.lookupFunction<_c_asin, _dart_asin>('asin');
    return _asin(
      __x,
    );
  }

  _dart_asin _asin;

  double __asin(
    double __x,
  ) {
    ___asin ??= _dylib.lookupFunction<_c___asin, _dart___asin>('__asin');
    return ___asin(
      __x,
    );
  }

  _dart___asin ___asin;

  double atan(
    double __x,
  ) {
    _atan ??= _dylib.lookupFunction<_c_atan, _dart_atan>('atan');
    return _atan(
      __x,
    );
  }

  _dart_atan _atan;

  double __atan(
    double __x,
  ) {
    ___atan ??= _dylib.lookupFunction<_c___atan, _dart___atan>('__atan');
    return ___atan(
      __x,
    );
  }

  _dart___atan ___atan;

  double atan2(
    double __y,
    double __x,
  ) {
    _atan2 ??= _dylib.lookupFunction<_c_atan2, _dart_atan2>('atan2');
    return _atan2(
      __y,
      __x,
    );
  }

  _dart_atan2 _atan2;

  double __atan2(
    double __y,
    double __x,
  ) {
    ___atan2 ??= _dylib.lookupFunction<_c___atan2, _dart___atan2>('__atan2');
    return ___atan2(
      __y,
      __x,
    );
  }

  _dart___atan2 ___atan2;

  double cos(
    double __x,
  ) {
    _cos ??= _dylib.lookupFunction<_c_cos, _dart_cos>('cos');
    return _cos(
      __x,
    );
  }

  _dart_cos _cos;

  double __cos(
    double __x,
  ) {
    ___cos ??= _dylib.lookupFunction<_c___cos, _dart___cos>('__cos');
    return ___cos(
      __x,
    );
  }

  _dart___cos ___cos;

  double sin(
    double __x,
  ) {
    _sin ??= _dylib.lookupFunction<_c_sin, _dart_sin>('sin');
    return _sin(
      __x,
    );
  }

  _dart_sin _sin;

  double __sin(
    double __x,
  ) {
    ___sin ??= _dylib.lookupFunction<_c___sin, _dart___sin>('__sin');
    return ___sin(
      __x,
    );
  }

  _dart___sin ___sin;

  double tan(
    double __x,
  ) {
    _tan ??= _dylib.lookupFunction<_c_tan, _dart_tan>('tan');
    return _tan(
      __x,
    );
  }

  _dart_tan _tan;

  double __tan(
    double __x,
  ) {
    ___tan ??= _dylib.lookupFunction<_c___tan, _dart___tan>('__tan');
    return ___tan(
      __x,
    );
  }

  _dart___tan ___tan;

  double cosh(
    double __x,
  ) {
    _cosh ??= _dylib.lookupFunction<_c_cosh, _dart_cosh>('cosh');
    return _cosh(
      __x,
    );
  }

  _dart_cosh _cosh;

  double __cosh(
    double __x,
  ) {
    ___cosh ??= _dylib.lookupFunction<_c___cosh, _dart___cosh>('__cosh');
    return ___cosh(
      __x,
    );
  }

  _dart___cosh ___cosh;

  double sinh(
    double __x,
  ) {
    _sinh ??= _dylib.lookupFunction<_c_sinh, _dart_sinh>('sinh');
    return _sinh(
      __x,
    );
  }

  _dart_sinh _sinh;

  double __sinh(
    double __x,
  ) {
    ___sinh ??= _dylib.lookupFunction<_c___sinh, _dart___sinh>('__sinh');
    return ___sinh(
      __x,
    );
  }

  _dart___sinh ___sinh;

  double tanh(
    double __x,
  ) {
    _tanh ??= _dylib.lookupFunction<_c_tanh, _dart_tanh>('tanh');
    return _tanh(
      __x,
    );
  }

  _dart_tanh _tanh;

  double __tanh(
    double __x,
  ) {
    ___tanh ??= _dylib.lookupFunction<_c___tanh, _dart___tanh>('__tanh');
    return ___tanh(
      __x,
    );
  }

  _dart___tanh ___tanh;

  double acosh(
    double __x,
  ) {
    _acosh ??= _dylib.lookupFunction<_c_acosh, _dart_acosh>('acosh');
    return _acosh(
      __x,
    );
  }

  _dart_acosh _acosh;

  double __acosh(
    double __x,
  ) {
    ___acosh ??= _dylib.lookupFunction<_c___acosh, _dart___acosh>('__acosh');
    return ___acosh(
      __x,
    );
  }

  _dart___acosh ___acosh;

  double asinh(
    double __x,
  ) {
    _asinh ??= _dylib.lookupFunction<_c_asinh, _dart_asinh>('asinh');
    return _asinh(
      __x,
    );
  }

  _dart_asinh _asinh;

  double __asinh(
    double __x,
  ) {
    ___asinh ??= _dylib.lookupFunction<_c___asinh, _dart___asinh>('__asinh');
    return ___asinh(
      __x,
    );
  }

  _dart___asinh ___asinh;

  double atanh(
    double __x,
  ) {
    _atanh ??= _dylib.lookupFunction<_c_atanh, _dart_atanh>('atanh');
    return _atanh(
      __x,
    );
  }

  _dart_atanh _atanh;

  double __atanh(
    double __x,
  ) {
    ___atanh ??= _dylib.lookupFunction<_c___atanh, _dart___atanh>('__atanh');
    return ___atanh(
      __x,
    );
  }

  _dart___atanh ___atanh;

  double exp(
    double __x,
  ) {
    _exp ??= _dylib.lookupFunction<_c_exp, _dart_exp>('exp');
    return _exp(
      __x,
    );
  }

  _dart_exp _exp;

  double __exp(
    double __x,
  ) {
    ___exp ??= _dylib.lookupFunction<_c___exp, _dart___exp>('__exp');
    return ___exp(
      __x,
    );
  }

  _dart___exp ___exp;

  double frexp(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    _frexp ??= _dylib.lookupFunction<_c_frexp, _dart_frexp>('frexp');
    return _frexp(
      __x,
      __exponent,
    );
  }

  _dart_frexp _frexp;

  double __frexp(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    ___frexp ??= _dylib.lookupFunction<_c___frexp, _dart___frexp>('__frexp');
    return ___frexp(
      __x,
      __exponent,
    );
  }

  _dart___frexp ___frexp;

  double ldexp(
    double __x,
    int __exponent,
  ) {
    _ldexp ??= _dylib.lookupFunction<_c_ldexp, _dart_ldexp>('ldexp');
    return _ldexp(
      __x,
      __exponent,
    );
  }

  _dart_ldexp _ldexp;

  double __ldexp(
    double __x,
    int __exponent,
  ) {
    ___ldexp ??= _dylib.lookupFunction<_c___ldexp, _dart___ldexp>('__ldexp');
    return ___ldexp(
      __x,
      __exponent,
    );
  }

  _dart___ldexp ___ldexp;

  double log(
    double __x,
  ) {
    _log ??= _dylib.lookupFunction<_c_log, _dart_log>('log');
    return _log(
      __x,
    );
  }

  _dart_log _log;

  double __log(
    double __x,
  ) {
    ___log ??= _dylib.lookupFunction<_c___log, _dart___log>('__log');
    return ___log(
      __x,
    );
  }

  _dart___log ___log;

  double log10(
    double __x,
  ) {
    _log10 ??= _dylib.lookupFunction<_c_log10, _dart_log10>('log10');
    return _log10(
      __x,
    );
  }

  _dart_log10 _log10;

  double __log10(
    double __x,
  ) {
    ___log10 ??= _dylib.lookupFunction<_c___log10, _dart___log10>('__log10');
    return ___log10(
      __x,
    );
  }

  _dart___log10 ___log10;

  double modf(
    double __x,
    ffi.Pointer<ffi.Double> __iptr,
  ) {
    _modf ??= _dylib.lookupFunction<_c_modf, _dart_modf>('modf');
    return _modf(
      __x,
      __iptr,
    );
  }

  _dart_modf _modf;

  double __modf(
    double __x,
    ffi.Pointer<ffi.Double> __iptr,
  ) {
    ___modf ??= _dylib.lookupFunction<_c___modf, _dart___modf>('__modf');
    return ___modf(
      __x,
      __iptr,
    );
  }

  _dart___modf ___modf;

  double expm1(
    double __x,
  ) {
    _expm1 ??= _dylib.lookupFunction<_c_expm1, _dart_expm1>('expm1');
    return _expm1(
      __x,
    );
  }

  _dart_expm1 _expm1;

  double __expm1(
    double __x,
  ) {
    ___expm1 ??= _dylib.lookupFunction<_c___expm1, _dart___expm1>('__expm1');
    return ___expm1(
      __x,
    );
  }

  _dart___expm1 ___expm1;

  double log1p(
    double __x,
  ) {
    _log1p ??= _dylib.lookupFunction<_c_log1p, _dart_log1p>('log1p');
    return _log1p(
      __x,
    );
  }

  _dart_log1p _log1p;

  double __log1p(
    double __x,
  ) {
    ___log1p ??= _dylib.lookupFunction<_c___log1p, _dart___log1p>('__log1p');
    return ___log1p(
      __x,
    );
  }

  _dart___log1p ___log1p;

  double logb(
    double __x,
  ) {
    _logb ??= _dylib.lookupFunction<_c_logb, _dart_logb>('logb');
    return _logb(
      __x,
    );
  }

  _dart_logb _logb;

  double __logb(
    double __x,
  ) {
    ___logb ??= _dylib.lookupFunction<_c___logb, _dart___logb>('__logb');
    return ___logb(
      __x,
    );
  }

  _dart___logb ___logb;

  double exp2(
    double __x,
  ) {
    _exp2 ??= _dylib.lookupFunction<_c_exp2, _dart_exp2>('exp2');
    return _exp2(
      __x,
    );
  }

  _dart_exp2 _exp2;

  double __exp2(
    double __x,
  ) {
    ___exp2 ??= _dylib.lookupFunction<_c___exp2, _dart___exp2>('__exp2');
    return ___exp2(
      __x,
    );
  }

  _dart___exp2 ___exp2;

  double log2(
    double __x,
  ) {
    _log2 ??= _dylib.lookupFunction<_c_log2, _dart_log2>('log2');
    return _log2(
      __x,
    );
  }

  _dart_log2 _log2;

  double __log2(
    double __x,
  ) {
    ___log2 ??= _dylib.lookupFunction<_c___log2, _dart___log2>('__log2');
    return ___log2(
      __x,
    );
  }

  _dart___log2 ___log2;

  double pow(
    double __x,
    double __y,
  ) {
    _pow ??= _dylib.lookupFunction<_c_pow, _dart_pow>('pow');
    return _pow(
      __x,
      __y,
    );
  }

  _dart_pow _pow;

  double __pow(
    double __x,
    double __y,
  ) {
    ___pow ??= _dylib.lookupFunction<_c___pow, _dart___pow>('__pow');
    return ___pow(
      __x,
      __y,
    );
  }

  _dart___pow ___pow;

  double sqrt(
    double __x,
  ) {
    _sqrt ??= _dylib.lookupFunction<_c_sqrt, _dart_sqrt>('sqrt');
    return _sqrt(
      __x,
    );
  }

  _dart_sqrt _sqrt;

  double __sqrt(
    double __x,
  ) {
    ___sqrt ??= _dylib.lookupFunction<_c___sqrt, _dart___sqrt>('__sqrt');
    return ___sqrt(
      __x,
    );
  }

  _dart___sqrt ___sqrt;

  double hypot(
    double __x,
    double __y,
  ) {
    _hypot ??= _dylib.lookupFunction<_c_hypot, _dart_hypot>('hypot');
    return _hypot(
      __x,
      __y,
    );
  }

  _dart_hypot _hypot;

  double __hypot(
    double __x,
    double __y,
  ) {
    ___hypot ??= _dylib.lookupFunction<_c___hypot, _dart___hypot>('__hypot');
    return ___hypot(
      __x,
      __y,
    );
  }

  _dart___hypot ___hypot;

  double cbrt(
    double __x,
  ) {
    _cbrt ??= _dylib.lookupFunction<_c_cbrt, _dart_cbrt>('cbrt');
    return _cbrt(
      __x,
    );
  }

  _dart_cbrt _cbrt;

  double __cbrt(
    double __x,
  ) {
    ___cbrt ??= _dylib.lookupFunction<_c___cbrt, _dart___cbrt>('__cbrt');
    return ___cbrt(
      __x,
    );
  }

  _dart___cbrt ___cbrt;

  double ceil(
    double __x,
  ) {
    _ceil ??= _dylib.lookupFunction<_c_ceil, _dart_ceil>('ceil');
    return _ceil(
      __x,
    );
  }

  _dart_ceil _ceil;

  double __ceil(
    double __x,
  ) {
    ___ceil ??= _dylib.lookupFunction<_c___ceil, _dart___ceil>('__ceil');
    return ___ceil(
      __x,
    );
  }

  _dart___ceil ___ceil;

  double fabs(
    double __x,
  ) {
    _fabs ??= _dylib.lookupFunction<_c_fabs, _dart_fabs>('fabs');
    return _fabs(
      __x,
    );
  }

  _dart_fabs _fabs;

  double __fabs(
    double __x,
  ) {
    ___fabs ??= _dylib.lookupFunction<_c___fabs, _dart___fabs>('__fabs');
    return ___fabs(
      __x,
    );
  }

  _dart___fabs ___fabs;

  double floor(
    double __x,
  ) {
    _floor ??= _dylib.lookupFunction<_c_floor, _dart_floor>('floor');
    return _floor(
      __x,
    );
  }

  _dart_floor _floor;

  double __floor(
    double __x,
  ) {
    ___floor ??= _dylib.lookupFunction<_c___floor, _dart___floor>('__floor');
    return ___floor(
      __x,
    );
  }

  _dart___floor ___floor;

  double fmod(
    double __x,
    double __y,
  ) {
    _fmod ??= _dylib.lookupFunction<_c_fmod, _dart_fmod>('fmod');
    return _fmod(
      __x,
      __y,
    );
  }

  _dart_fmod _fmod;

  double __fmod(
    double __x,
    double __y,
  ) {
    ___fmod ??= _dylib.lookupFunction<_c___fmod, _dart___fmod>('__fmod');
    return ___fmod(
      __x,
      __y,
    );
  }

  _dart___fmod ___fmod;

  int isinf(
    double __value,
  ) {
    _isinf ??= _dylib.lookupFunction<_c_isinf, _dart_isinf>('isinf');
    return _isinf(
      __value,
    );
  }

  _dart_isinf _isinf;

  int finite(
    double __value,
  ) {
    _finite ??= _dylib.lookupFunction<_c_finite, _dart_finite>('finite');
    return _finite(
      __value,
    );
  }

  _dart_finite _finite;

  double drem(
    double __x,
    double __y,
  ) {
    _drem ??= _dylib.lookupFunction<_c_drem, _dart_drem>('drem');
    return _drem(
      __x,
      __y,
    );
  }

  _dart_drem _drem;

  double __drem(
    double __x,
    double __y,
  ) {
    ___drem ??= _dylib.lookupFunction<_c___drem, _dart___drem>('__drem');
    return ___drem(
      __x,
      __y,
    );
  }

  _dart___drem ___drem;

  double significand(
    double __x,
  ) {
    _significand ??=
        _dylib.lookupFunction<_c_significand, _dart_significand>('significand');
    return _significand(
      __x,
    );
  }

  _dart_significand _significand;

  double __significand(
    double __x,
  ) {
    ___significand ??= _dylib
        .lookupFunction<_c___significand, _dart___significand>('__significand');
    return ___significand(
      __x,
    );
  }

  _dart___significand ___significand;

  double copysign(
    double __x,
    double __y,
  ) {
    _copysign ??=
        _dylib.lookupFunction<_c_copysign, _dart_copysign>('copysign');
    return _copysign(
      __x,
      __y,
    );
  }

  _dart_copysign _copysign;

  double __copysign(
    double __x,
    double __y,
  ) {
    ___copysign ??=
        _dylib.lookupFunction<_c___copysign, _dart___copysign>('__copysign');
    return ___copysign(
      __x,
      __y,
    );
  }

  _dart___copysign ___copysign;

  double nan(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    _nan ??= _dylib.lookupFunction<_c_nan, _dart_nan>('nan');
    return _nan(
      __tagb,
    );
  }

  _dart_nan _nan;

  double __nan(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    ___nan ??= _dylib.lookupFunction<_c___nan, _dart___nan>('__nan');
    return ___nan(
      __tagb,
    );
  }

  _dart___nan ___nan;

  int isnan(
    double __value,
  ) {
    _isnan ??= _dylib.lookupFunction<_c_isnan, _dart_isnan>('isnan');
    return _isnan(
      __value,
    );
  }

  _dart_isnan _isnan;

  double j0(
    double arg0,
  ) {
    _j0 ??= _dylib.lookupFunction<_c_j0, _dart_j0>('j0');
    return _j0(
      arg0,
    );
  }

  _dart_j0 _j0;

  double __j0(
    double arg0,
  ) {
    ___j0 ??= _dylib.lookupFunction<_c___j0, _dart___j0>('__j0');
    return ___j0(
      arg0,
    );
  }

  _dart___j0 ___j0;

  double j1(
    double arg0,
  ) {
    _j1 ??= _dylib.lookupFunction<_c_j1, _dart_j1>('j1');
    return _j1(
      arg0,
    );
  }

  _dart_j1 _j1;

  double __j1(
    double arg0,
  ) {
    ___j1 ??= _dylib.lookupFunction<_c___j1, _dart___j1>('__j1');
    return ___j1(
      arg0,
    );
  }

  _dart___j1 ___j1;

  double jn(
    int arg0,
    double arg1,
  ) {
    _jn ??= _dylib.lookupFunction<_c_jn, _dart_jn>('jn');
    return _jn(
      arg0,
      arg1,
    );
  }

  _dart_jn _jn;

  double __jn(
    int arg0,
    double arg1,
  ) {
    ___jn ??= _dylib.lookupFunction<_c___jn, _dart___jn>('__jn');
    return ___jn(
      arg0,
      arg1,
    );
  }

  _dart___jn ___jn;

  double y0(
    double arg0,
  ) {
    _y0 ??= _dylib.lookupFunction<_c_y0, _dart_y0>('y0');
    return _y0(
      arg0,
    );
  }

  _dart_y0 _y0;

  double __y0(
    double arg0,
  ) {
    ___y0 ??= _dylib.lookupFunction<_c___y0, _dart___y0>('__y0');
    return ___y0(
      arg0,
    );
  }

  _dart___y0 ___y0;

  double y1(
    double arg0,
  ) {
    _y1 ??= _dylib.lookupFunction<_c_y1, _dart_y1>('y1');
    return _y1(
      arg0,
    );
  }

  _dart_y1 _y1;

  double __y1(
    double arg0,
  ) {
    ___y1 ??= _dylib.lookupFunction<_c___y1, _dart___y1>('__y1');
    return ___y1(
      arg0,
    );
  }

  _dart___y1 ___y1;

  double yn(
    int arg0,
    double arg1,
  ) {
    _yn ??= _dylib.lookupFunction<_c_yn, _dart_yn>('yn');
    return _yn(
      arg0,
      arg1,
    );
  }

  _dart_yn _yn;

  double __yn(
    int arg0,
    double arg1,
  ) {
    ___yn ??= _dylib.lookupFunction<_c___yn, _dart___yn>('__yn');
    return ___yn(
      arg0,
      arg1,
    );
  }

  _dart___yn ___yn;

  double erf(
    double arg0,
  ) {
    _erf ??= _dylib.lookupFunction<_c_erf, _dart_erf>('erf');
    return _erf(
      arg0,
    );
  }

  _dart_erf _erf;

  double __erf(
    double arg0,
  ) {
    ___erf ??= _dylib.lookupFunction<_c___erf, _dart___erf>('__erf');
    return ___erf(
      arg0,
    );
  }

  _dart___erf ___erf;

  double erfc(
    double arg0,
  ) {
    _erfc ??= _dylib.lookupFunction<_c_erfc, _dart_erfc>('erfc');
    return _erfc(
      arg0,
    );
  }

  _dart_erfc _erfc;

  double __erfc(
    double arg0,
  ) {
    ___erfc ??= _dylib.lookupFunction<_c___erfc, _dart___erfc>('__erfc');
    return ___erfc(
      arg0,
    );
  }

  _dart___erfc ___erfc;

  double lgamma(
    double arg0,
  ) {
    _lgamma ??= _dylib.lookupFunction<_c_lgamma, _dart_lgamma>('lgamma');
    return _lgamma(
      arg0,
    );
  }

  _dart_lgamma _lgamma;

  double __lgamma(
    double arg0,
  ) {
    ___lgamma ??=
        _dylib.lookupFunction<_c___lgamma, _dart___lgamma>('__lgamma');
    return ___lgamma(
      arg0,
    );
  }

  _dart___lgamma ___lgamma;

  double tgamma(
    double arg0,
  ) {
    _tgamma ??= _dylib.lookupFunction<_c_tgamma, _dart_tgamma>('tgamma');
    return _tgamma(
      arg0,
    );
  }

  _dart_tgamma _tgamma;

  double __tgamma(
    double arg0,
  ) {
    ___tgamma ??=
        _dylib.lookupFunction<_c___tgamma, _dart___tgamma>('__tgamma');
    return ___tgamma(
      arg0,
    );
  }

  _dart___tgamma ___tgamma;

  double gamma(
    double arg0,
  ) {
    _gamma ??= _dylib.lookupFunction<_c_gamma, _dart_gamma>('gamma');
    return _gamma(
      arg0,
    );
  }

  _dart_gamma _gamma;

  double __gamma(
    double arg0,
  ) {
    ___gamma ??= _dylib.lookupFunction<_c___gamma, _dart___gamma>('__gamma');
    return ___gamma(
      arg0,
    );
  }

  _dart___gamma ___gamma;

  double lgamma_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    _lgamma_r ??=
        _dylib.lookupFunction<_c_lgamma_r, _dart_lgamma_r>('lgamma_r');
    return _lgamma_r(
      arg0,
      __signgamp,
    );
  }

  _dart_lgamma_r _lgamma_r;

  double __lgamma_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    ___lgamma_r ??=
        _dylib.lookupFunction<_c___lgamma_r, _dart___lgamma_r>('__lgamma_r');
    return ___lgamma_r(
      arg0,
      __signgamp,
    );
  }

  _dart___lgamma_r ___lgamma_r;

  double rint(
    double __x,
  ) {
    _rint ??= _dylib.lookupFunction<_c_rint, _dart_rint>('rint');
    return _rint(
      __x,
    );
  }

  _dart_rint _rint;

  double __rint(
    double __x,
  ) {
    ___rint ??= _dylib.lookupFunction<_c___rint, _dart___rint>('__rint');
    return ___rint(
      __x,
    );
  }

  _dart___rint ___rint;

  double nextafter(
    double __x,
    double __y,
  ) {
    _nextafter ??=
        _dylib.lookupFunction<_c_nextafter, _dart_nextafter>('nextafter');
    return _nextafter(
      __x,
      __y,
    );
  }

  _dart_nextafter _nextafter;

  double __nextafter(
    double __x,
    double __y,
  ) {
    ___nextafter ??=
        _dylib.lookupFunction<_c___nextafter, _dart___nextafter>('__nextafter');
    return ___nextafter(
      __x,
      __y,
    );
  }

  _dart___nextafter ___nextafter;

  double remainder(
    double __x,
    double __y,
  ) {
    _remainder ??=
        _dylib.lookupFunction<_c_remainder, _dart_remainder>('remainder');
    return _remainder(
      __x,
      __y,
    );
  }

  _dart_remainder _remainder;

  double __remainder(
    double __x,
    double __y,
  ) {
    ___remainder ??=
        _dylib.lookupFunction<_c___remainder, _dart___remainder>('__remainder');
    return ___remainder(
      __x,
      __y,
    );
  }

  _dart___remainder ___remainder;

  double scalbn(
    double __x,
    int __n,
  ) {
    _scalbn ??= _dylib.lookupFunction<_c_scalbn, _dart_scalbn>('scalbn');
    return _scalbn(
      __x,
      __n,
    );
  }

  _dart_scalbn _scalbn;

  double __scalbn(
    double __x,
    int __n,
  ) {
    ___scalbn ??=
        _dylib.lookupFunction<_c___scalbn, _dart___scalbn>('__scalbn');
    return ___scalbn(
      __x,
      __n,
    );
  }

  _dart___scalbn ___scalbn;

  int ilogb(
    double __x,
  ) {
    _ilogb ??= _dylib.lookupFunction<_c_ilogb, _dart_ilogb>('ilogb');
    return _ilogb(
      __x,
    );
  }

  _dart_ilogb _ilogb;

  int __ilogb(
    double __x,
  ) {
    ___ilogb ??= _dylib.lookupFunction<_c___ilogb, _dart___ilogb>('__ilogb');
    return ___ilogb(
      __x,
    );
  }

  _dart___ilogb ___ilogb;

  double scalbln(
    double __x,
    int __n,
  ) {
    _scalbln ??= _dylib.lookupFunction<_c_scalbln, _dart_scalbln>('scalbln');
    return _scalbln(
      __x,
      __n,
    );
  }

  _dart_scalbln _scalbln;

  double __scalbln(
    double __x,
    int __n,
  ) {
    ___scalbln ??=
        _dylib.lookupFunction<_c___scalbln, _dart___scalbln>('__scalbln');
    return ___scalbln(
      __x,
      __n,
    );
  }

  _dart___scalbln ___scalbln;

  double nearbyint(
    double __x,
  ) {
    _nearbyint ??=
        _dylib.lookupFunction<_c_nearbyint, _dart_nearbyint>('nearbyint');
    return _nearbyint(
      __x,
    );
  }

  _dart_nearbyint _nearbyint;

  double __nearbyint(
    double __x,
  ) {
    ___nearbyint ??=
        _dylib.lookupFunction<_c___nearbyint, _dart___nearbyint>('__nearbyint');
    return ___nearbyint(
      __x,
    );
  }

  _dart___nearbyint ___nearbyint;

  double round(
    double __x,
  ) {
    _round ??= _dylib.lookupFunction<_c_round, _dart_round>('round');
    return _round(
      __x,
    );
  }

  _dart_round _round;

  double __round(
    double __x,
  ) {
    ___round ??= _dylib.lookupFunction<_c___round, _dart___round>('__round');
    return ___round(
      __x,
    );
  }

  _dart___round ___round;

  double trunc(
    double __x,
  ) {
    _trunc ??= _dylib.lookupFunction<_c_trunc, _dart_trunc>('trunc');
    return _trunc(
      __x,
    );
  }

  _dart_trunc _trunc;

  double __trunc(
    double __x,
  ) {
    ___trunc ??= _dylib.lookupFunction<_c___trunc, _dart___trunc>('__trunc');
    return ___trunc(
      __x,
    );
  }

  _dart___trunc ___trunc;

  double remquo(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    _remquo ??= _dylib.lookupFunction<_c_remquo, _dart_remquo>('remquo');
    return _remquo(
      __x,
      __y,
      __quo,
    );
  }

  _dart_remquo _remquo;

  double __remquo(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    ___remquo ??=
        _dylib.lookupFunction<_c___remquo, _dart___remquo>('__remquo');
    return ___remquo(
      __x,
      __y,
      __quo,
    );
  }

  _dart___remquo ___remquo;

  int lrint(
    double __x,
  ) {
    _lrint ??= _dylib.lookupFunction<_c_lrint, _dart_lrint>('lrint');
    return _lrint(
      __x,
    );
  }

  _dart_lrint _lrint;

  int __lrint(
    double __x,
  ) {
    ___lrint ??= _dylib.lookupFunction<_c___lrint, _dart___lrint>('__lrint');
    return ___lrint(
      __x,
    );
  }

  _dart___lrint ___lrint;

  int llrint(
    double __x,
  ) {
    _llrint ??= _dylib.lookupFunction<_c_llrint, _dart_llrint>('llrint');
    return _llrint(
      __x,
    );
  }

  _dart_llrint _llrint;

  int __llrint(
    double __x,
  ) {
    ___llrint ??=
        _dylib.lookupFunction<_c___llrint, _dart___llrint>('__llrint');
    return ___llrint(
      __x,
    );
  }

  _dart___llrint ___llrint;

  int lround(
    double __x,
  ) {
    _lround ??= _dylib.lookupFunction<_c_lround, _dart_lround>('lround');
    return _lround(
      __x,
    );
  }

  _dart_lround _lround;

  int __lround(
    double __x,
  ) {
    ___lround ??=
        _dylib.lookupFunction<_c___lround, _dart___lround>('__lround');
    return ___lround(
      __x,
    );
  }

  _dart___lround ___lround;

  int llround(
    double __x,
  ) {
    _llround ??= _dylib.lookupFunction<_c_llround, _dart_llround>('llround');
    return _llround(
      __x,
    );
  }

  _dart_llround _llround;

  int __llround(
    double __x,
  ) {
    ___llround ??=
        _dylib.lookupFunction<_c___llround, _dart___llround>('__llround');
    return ___llround(
      __x,
    );
  }

  _dart___llround ___llround;

  double fdim(
    double __x,
    double __y,
  ) {
    _fdim ??= _dylib.lookupFunction<_c_fdim, _dart_fdim>('fdim');
    return _fdim(
      __x,
      __y,
    );
  }

  _dart_fdim _fdim;

  double __fdim(
    double __x,
    double __y,
  ) {
    ___fdim ??= _dylib.lookupFunction<_c___fdim, _dart___fdim>('__fdim');
    return ___fdim(
      __x,
      __y,
    );
  }

  _dart___fdim ___fdim;

  double fmax(
    double __x,
    double __y,
  ) {
    _fmax ??= _dylib.lookupFunction<_c_fmax, _dart_fmax>('fmax');
    return _fmax(
      __x,
      __y,
    );
  }

  _dart_fmax _fmax;

  double __fmax(
    double __x,
    double __y,
  ) {
    ___fmax ??= _dylib.lookupFunction<_c___fmax, _dart___fmax>('__fmax');
    return ___fmax(
      __x,
      __y,
    );
  }

  _dart___fmax ___fmax;

  double fmin(
    double __x,
    double __y,
  ) {
    _fmin ??= _dylib.lookupFunction<_c_fmin, _dart_fmin>('fmin');
    return _fmin(
      __x,
      __y,
    );
  }

  _dart_fmin _fmin;

  double __fmin(
    double __x,
    double __y,
  ) {
    ___fmin ??= _dylib.lookupFunction<_c___fmin, _dart___fmin>('__fmin');
    return ___fmin(
      __x,
      __y,
    );
  }

  _dart___fmin ___fmin;

  double fma(
    double __x,
    double __y,
    double __z,
  ) {
    _fma ??= _dylib.lookupFunction<_c_fma, _dart_fma>('fma');
    return _fma(
      __x,
      __y,
      __z,
    );
  }

  _dart_fma _fma;

  double __fma(
    double __x,
    double __y,
    double __z,
  ) {
    ___fma ??= _dylib.lookupFunction<_c___fma, _dart___fma>('__fma');
    return ___fma(
      __x,
      __y,
      __z,
    );
  }

  _dart___fma ___fma;

  double scalb(
    double __x,
    double __n,
  ) {
    _scalb ??= _dylib.lookupFunction<_c_scalb, _dart_scalb>('scalb');
    return _scalb(
      __x,
      __n,
    );
  }

  _dart_scalb _scalb;

  double __scalb(
    double __x,
    double __n,
  ) {
    ___scalb ??= _dylib.lookupFunction<_c___scalb, _dart___scalb>('__scalb');
    return ___scalb(
      __x,
      __n,
    );
  }

  _dart___scalb ___scalb;

  int __fpclassifyf(
    double __value,
  ) {
    ___fpclassifyf ??= _dylib
        .lookupFunction<_c___fpclassifyf, _dart___fpclassifyf>('__fpclassifyf');
    return ___fpclassifyf(
      __value,
    );
  }

  _dart___fpclassifyf ___fpclassifyf;

  int __signbitf(
    double __value,
  ) {
    ___signbitf ??=
        _dylib.lookupFunction<_c___signbitf, _dart___signbitf>('__signbitf');
    return ___signbitf(
      __value,
    );
  }

  _dart___signbitf ___signbitf;

  int __isinff(
    double __value,
  ) {
    ___isinff ??=
        _dylib.lookupFunction<_c___isinff, _dart___isinff>('__isinff');
    return ___isinff(
      __value,
    );
  }

  _dart___isinff ___isinff;

  int __finitef(
    double __value,
  ) {
    ___finitef ??=
        _dylib.lookupFunction<_c___finitef, _dart___finitef>('__finitef');
    return ___finitef(
      __value,
    );
  }

  _dart___finitef ___finitef;

  int __isnanf(
    double __value,
  ) {
    ___isnanf ??=
        _dylib.lookupFunction<_c___isnanf, _dart___isnanf>('__isnanf');
    return ___isnanf(
      __value,
    );
  }

  _dart___isnanf ___isnanf;

  int __iseqsigf(
    double __x,
    double __y,
  ) {
    ___iseqsigf ??=
        _dylib.lookupFunction<_c___iseqsigf, _dart___iseqsigf>('__iseqsigf');
    return ___iseqsigf(
      __x,
      __y,
    );
  }

  _dart___iseqsigf ___iseqsigf;

  int __issignalingf(
    double __value,
  ) {
    ___issignalingf ??=
        _dylib.lookupFunction<_c___issignalingf, _dart___issignalingf>(
            '__issignalingf');
    return ___issignalingf(
      __value,
    );
  }

  _dart___issignalingf ___issignalingf;

  double acosf(
    double __x,
  ) {
    _acosf ??= _dylib.lookupFunction<_c_acosf, _dart_acosf>('acosf');
    return _acosf(
      __x,
    );
  }

  _dart_acosf _acosf;

  double __acosf(
    double __x,
  ) {
    ___acosf ??= _dylib.lookupFunction<_c___acosf, _dart___acosf>('__acosf');
    return ___acosf(
      __x,
    );
  }

  _dart___acosf ___acosf;

  double asinf(
    double __x,
  ) {
    _asinf ??= _dylib.lookupFunction<_c_asinf, _dart_asinf>('asinf');
    return _asinf(
      __x,
    );
  }

  _dart_asinf _asinf;

  double __asinf(
    double __x,
  ) {
    ___asinf ??= _dylib.lookupFunction<_c___asinf, _dart___asinf>('__asinf');
    return ___asinf(
      __x,
    );
  }

  _dart___asinf ___asinf;

  double atanf(
    double __x,
  ) {
    _atanf ??= _dylib.lookupFunction<_c_atanf, _dart_atanf>('atanf');
    return _atanf(
      __x,
    );
  }

  _dart_atanf _atanf;

  double __atanf(
    double __x,
  ) {
    ___atanf ??= _dylib.lookupFunction<_c___atanf, _dart___atanf>('__atanf');
    return ___atanf(
      __x,
    );
  }

  _dart___atanf ___atanf;

  double atan2f(
    double __y,
    double __x,
  ) {
    _atan2f ??= _dylib.lookupFunction<_c_atan2f, _dart_atan2f>('atan2f');
    return _atan2f(
      __y,
      __x,
    );
  }

  _dart_atan2f _atan2f;

  double __atan2f(
    double __y,
    double __x,
  ) {
    ___atan2f ??=
        _dylib.lookupFunction<_c___atan2f, _dart___atan2f>('__atan2f');
    return ___atan2f(
      __y,
      __x,
    );
  }

  _dart___atan2f ___atan2f;

  double cosf(
    double __x,
  ) {
    _cosf ??= _dylib.lookupFunction<_c_cosf, _dart_cosf>('cosf');
    return _cosf(
      __x,
    );
  }

  _dart_cosf _cosf;

  double __cosf(
    double __x,
  ) {
    ___cosf ??= _dylib.lookupFunction<_c___cosf, _dart___cosf>('__cosf');
    return ___cosf(
      __x,
    );
  }

  _dart___cosf ___cosf;

  double sinf(
    double __x,
  ) {
    _sinf ??= _dylib.lookupFunction<_c_sinf, _dart_sinf>('sinf');
    return _sinf(
      __x,
    );
  }

  _dart_sinf _sinf;

  double __sinf(
    double __x,
  ) {
    ___sinf ??= _dylib.lookupFunction<_c___sinf, _dart___sinf>('__sinf');
    return ___sinf(
      __x,
    );
  }

  _dart___sinf ___sinf;

  double tanf(
    double __x,
  ) {
    _tanf ??= _dylib.lookupFunction<_c_tanf, _dart_tanf>('tanf');
    return _tanf(
      __x,
    );
  }

  _dart_tanf _tanf;

  double __tanf(
    double __x,
  ) {
    ___tanf ??= _dylib.lookupFunction<_c___tanf, _dart___tanf>('__tanf');
    return ___tanf(
      __x,
    );
  }

  _dart___tanf ___tanf;

  double coshf(
    double __x,
  ) {
    _coshf ??= _dylib.lookupFunction<_c_coshf, _dart_coshf>('coshf');
    return _coshf(
      __x,
    );
  }

  _dart_coshf _coshf;

  double __coshf(
    double __x,
  ) {
    ___coshf ??= _dylib.lookupFunction<_c___coshf, _dart___coshf>('__coshf');
    return ___coshf(
      __x,
    );
  }

  _dart___coshf ___coshf;

  double sinhf(
    double __x,
  ) {
    _sinhf ??= _dylib.lookupFunction<_c_sinhf, _dart_sinhf>('sinhf');
    return _sinhf(
      __x,
    );
  }

  _dart_sinhf _sinhf;

  double __sinhf(
    double __x,
  ) {
    ___sinhf ??= _dylib.lookupFunction<_c___sinhf, _dart___sinhf>('__sinhf');
    return ___sinhf(
      __x,
    );
  }

  _dart___sinhf ___sinhf;

  double tanhf(
    double __x,
  ) {
    _tanhf ??= _dylib.lookupFunction<_c_tanhf, _dart_tanhf>('tanhf');
    return _tanhf(
      __x,
    );
  }

  _dart_tanhf _tanhf;

  double __tanhf(
    double __x,
  ) {
    ___tanhf ??= _dylib.lookupFunction<_c___tanhf, _dart___tanhf>('__tanhf');
    return ___tanhf(
      __x,
    );
  }

  _dart___tanhf ___tanhf;

  double acoshf(
    double __x,
  ) {
    _acoshf ??= _dylib.lookupFunction<_c_acoshf, _dart_acoshf>('acoshf');
    return _acoshf(
      __x,
    );
  }

  _dart_acoshf _acoshf;

  double __acoshf(
    double __x,
  ) {
    ___acoshf ??=
        _dylib.lookupFunction<_c___acoshf, _dart___acoshf>('__acoshf');
    return ___acoshf(
      __x,
    );
  }

  _dart___acoshf ___acoshf;

  double asinhf(
    double __x,
  ) {
    _asinhf ??= _dylib.lookupFunction<_c_asinhf, _dart_asinhf>('asinhf');
    return _asinhf(
      __x,
    );
  }

  _dart_asinhf _asinhf;

  double __asinhf(
    double __x,
  ) {
    ___asinhf ??=
        _dylib.lookupFunction<_c___asinhf, _dart___asinhf>('__asinhf');
    return ___asinhf(
      __x,
    );
  }

  _dart___asinhf ___asinhf;

  double atanhf(
    double __x,
  ) {
    _atanhf ??= _dylib.lookupFunction<_c_atanhf, _dart_atanhf>('atanhf');
    return _atanhf(
      __x,
    );
  }

  _dart_atanhf _atanhf;

  double __atanhf(
    double __x,
  ) {
    ___atanhf ??=
        _dylib.lookupFunction<_c___atanhf, _dart___atanhf>('__atanhf');
    return ___atanhf(
      __x,
    );
  }

  _dart___atanhf ___atanhf;

  double expf(
    double __x,
  ) {
    _expf ??= _dylib.lookupFunction<_c_expf, _dart_expf>('expf');
    return _expf(
      __x,
    );
  }

  _dart_expf _expf;

  double __expf(
    double __x,
  ) {
    ___expf ??= _dylib.lookupFunction<_c___expf, _dart___expf>('__expf');
    return ___expf(
      __x,
    );
  }

  _dart___expf ___expf;

  double frexpf(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    _frexpf ??= _dylib.lookupFunction<_c_frexpf, _dart_frexpf>('frexpf');
    return _frexpf(
      __x,
      __exponent,
    );
  }

  _dart_frexpf _frexpf;

  double __frexpf(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    ___frexpf ??=
        _dylib.lookupFunction<_c___frexpf, _dart___frexpf>('__frexpf');
    return ___frexpf(
      __x,
      __exponent,
    );
  }

  _dart___frexpf ___frexpf;

  double ldexpf(
    double __x,
    int __exponent,
  ) {
    _ldexpf ??= _dylib.lookupFunction<_c_ldexpf, _dart_ldexpf>('ldexpf');
    return _ldexpf(
      __x,
      __exponent,
    );
  }

  _dart_ldexpf _ldexpf;

  double __ldexpf(
    double __x,
    int __exponent,
  ) {
    ___ldexpf ??=
        _dylib.lookupFunction<_c___ldexpf, _dart___ldexpf>('__ldexpf');
    return ___ldexpf(
      __x,
      __exponent,
    );
  }

  _dart___ldexpf ___ldexpf;

  double logf(
    double __x,
  ) {
    _logf ??= _dylib.lookupFunction<_c_logf, _dart_logf>('logf');
    return _logf(
      __x,
    );
  }

  _dart_logf _logf;

  double __logf(
    double __x,
  ) {
    ___logf ??= _dylib.lookupFunction<_c___logf, _dart___logf>('__logf');
    return ___logf(
      __x,
    );
  }

  _dart___logf ___logf;

  double log10f(
    double __x,
  ) {
    _log10f ??= _dylib.lookupFunction<_c_log10f, _dart_log10f>('log10f');
    return _log10f(
      __x,
    );
  }

  _dart_log10f _log10f;

  double __log10f(
    double __x,
  ) {
    ___log10f ??=
        _dylib.lookupFunction<_c___log10f, _dart___log10f>('__log10f');
    return ___log10f(
      __x,
    );
  }

  _dart___log10f ___log10f;

  double modff(
    double __x,
    ffi.Pointer<ffi.Float> __iptr,
  ) {
    _modff ??= _dylib.lookupFunction<_c_modff, _dart_modff>('modff');
    return _modff(
      __x,
      __iptr,
    );
  }

  _dart_modff _modff;

  double __modff(
    double __x,
    ffi.Pointer<ffi.Float> __iptr,
  ) {
    ___modff ??= _dylib.lookupFunction<_c___modff, _dart___modff>('__modff');
    return ___modff(
      __x,
      __iptr,
    );
  }

  _dart___modff ___modff;

  double expm1f(
    double __x,
  ) {
    _expm1f ??= _dylib.lookupFunction<_c_expm1f, _dart_expm1f>('expm1f');
    return _expm1f(
      __x,
    );
  }

  _dart_expm1f _expm1f;

  double __expm1f(
    double __x,
  ) {
    ___expm1f ??=
        _dylib.lookupFunction<_c___expm1f, _dart___expm1f>('__expm1f');
    return ___expm1f(
      __x,
    );
  }

  _dart___expm1f ___expm1f;

  double log1pf(
    double __x,
  ) {
    _log1pf ??= _dylib.lookupFunction<_c_log1pf, _dart_log1pf>('log1pf');
    return _log1pf(
      __x,
    );
  }

  _dart_log1pf _log1pf;

  double __log1pf(
    double __x,
  ) {
    ___log1pf ??=
        _dylib.lookupFunction<_c___log1pf, _dart___log1pf>('__log1pf');
    return ___log1pf(
      __x,
    );
  }

  _dart___log1pf ___log1pf;

  double logbf(
    double __x,
  ) {
    _logbf ??= _dylib.lookupFunction<_c_logbf, _dart_logbf>('logbf');
    return _logbf(
      __x,
    );
  }

  _dart_logbf _logbf;

  double __logbf(
    double __x,
  ) {
    ___logbf ??= _dylib.lookupFunction<_c___logbf, _dart___logbf>('__logbf');
    return ___logbf(
      __x,
    );
  }

  _dart___logbf ___logbf;

  double exp2f(
    double __x,
  ) {
    _exp2f ??= _dylib.lookupFunction<_c_exp2f, _dart_exp2f>('exp2f');
    return _exp2f(
      __x,
    );
  }

  _dart_exp2f _exp2f;

  double __exp2f(
    double __x,
  ) {
    ___exp2f ??= _dylib.lookupFunction<_c___exp2f, _dart___exp2f>('__exp2f');
    return ___exp2f(
      __x,
    );
  }

  _dart___exp2f ___exp2f;

  double log2f(
    double __x,
  ) {
    _log2f ??= _dylib.lookupFunction<_c_log2f, _dart_log2f>('log2f');
    return _log2f(
      __x,
    );
  }

  _dart_log2f _log2f;

  double __log2f(
    double __x,
  ) {
    ___log2f ??= _dylib.lookupFunction<_c___log2f, _dart___log2f>('__log2f');
    return ___log2f(
      __x,
    );
  }

  _dart___log2f ___log2f;

  double powf(
    double __x,
    double __y,
  ) {
    _powf ??= _dylib.lookupFunction<_c_powf, _dart_powf>('powf');
    return _powf(
      __x,
      __y,
    );
  }

  _dart_powf _powf;

  double __powf(
    double __x,
    double __y,
  ) {
    ___powf ??= _dylib.lookupFunction<_c___powf, _dart___powf>('__powf');
    return ___powf(
      __x,
      __y,
    );
  }

  _dart___powf ___powf;

  double sqrtf(
    double __x,
  ) {
    _sqrtf ??= _dylib.lookupFunction<_c_sqrtf, _dart_sqrtf>('sqrtf');
    return _sqrtf(
      __x,
    );
  }

  _dart_sqrtf _sqrtf;

  double __sqrtf(
    double __x,
  ) {
    ___sqrtf ??= _dylib.lookupFunction<_c___sqrtf, _dart___sqrtf>('__sqrtf');
    return ___sqrtf(
      __x,
    );
  }

  _dart___sqrtf ___sqrtf;

  double hypotf(
    double __x,
    double __y,
  ) {
    _hypotf ??= _dylib.lookupFunction<_c_hypotf, _dart_hypotf>('hypotf');
    return _hypotf(
      __x,
      __y,
    );
  }

  _dart_hypotf _hypotf;

  double __hypotf(
    double __x,
    double __y,
  ) {
    ___hypotf ??=
        _dylib.lookupFunction<_c___hypotf, _dart___hypotf>('__hypotf');
    return ___hypotf(
      __x,
      __y,
    );
  }

  _dart___hypotf ___hypotf;

  double cbrtf(
    double __x,
  ) {
    _cbrtf ??= _dylib.lookupFunction<_c_cbrtf, _dart_cbrtf>('cbrtf');
    return _cbrtf(
      __x,
    );
  }

  _dart_cbrtf _cbrtf;

  double __cbrtf(
    double __x,
  ) {
    ___cbrtf ??= _dylib.lookupFunction<_c___cbrtf, _dart___cbrtf>('__cbrtf');
    return ___cbrtf(
      __x,
    );
  }

  _dart___cbrtf ___cbrtf;

  double ceilf(
    double __x,
  ) {
    _ceilf ??= _dylib.lookupFunction<_c_ceilf, _dart_ceilf>('ceilf');
    return _ceilf(
      __x,
    );
  }

  _dart_ceilf _ceilf;

  double __ceilf(
    double __x,
  ) {
    ___ceilf ??= _dylib.lookupFunction<_c___ceilf, _dart___ceilf>('__ceilf');
    return ___ceilf(
      __x,
    );
  }

  _dart___ceilf ___ceilf;

  double fabsf(
    double __x,
  ) {
    _fabsf ??= _dylib.lookupFunction<_c_fabsf, _dart_fabsf>('fabsf');
    return _fabsf(
      __x,
    );
  }

  _dart_fabsf _fabsf;

  double __fabsf(
    double __x,
  ) {
    ___fabsf ??= _dylib.lookupFunction<_c___fabsf, _dart___fabsf>('__fabsf');
    return ___fabsf(
      __x,
    );
  }

  _dart___fabsf ___fabsf;

  double floorf(
    double __x,
  ) {
    _floorf ??= _dylib.lookupFunction<_c_floorf, _dart_floorf>('floorf');
    return _floorf(
      __x,
    );
  }

  _dart_floorf _floorf;

  double __floorf(
    double __x,
  ) {
    ___floorf ??=
        _dylib.lookupFunction<_c___floorf, _dart___floorf>('__floorf');
    return ___floorf(
      __x,
    );
  }

  _dart___floorf ___floorf;

  double fmodf(
    double __x,
    double __y,
  ) {
    _fmodf ??= _dylib.lookupFunction<_c_fmodf, _dart_fmodf>('fmodf');
    return _fmodf(
      __x,
      __y,
    );
  }

  _dart_fmodf _fmodf;

  double __fmodf(
    double __x,
    double __y,
  ) {
    ___fmodf ??= _dylib.lookupFunction<_c___fmodf, _dart___fmodf>('__fmodf');
    return ___fmodf(
      __x,
      __y,
    );
  }

  _dart___fmodf ___fmodf;

  int isinff(
    double __value,
  ) {
    _isinff ??= _dylib.lookupFunction<_c_isinff, _dart_isinff>('isinff');
    return _isinff(
      __value,
    );
  }

  _dart_isinff _isinff;

  int finitef(
    double __value,
  ) {
    _finitef ??= _dylib.lookupFunction<_c_finitef, _dart_finitef>('finitef');
    return _finitef(
      __value,
    );
  }

  _dart_finitef _finitef;

  double dremf(
    double __x,
    double __y,
  ) {
    _dremf ??= _dylib.lookupFunction<_c_dremf, _dart_dremf>('dremf');
    return _dremf(
      __x,
      __y,
    );
  }

  _dart_dremf _dremf;

  double __dremf(
    double __x,
    double __y,
  ) {
    ___dremf ??= _dylib.lookupFunction<_c___dremf, _dart___dremf>('__dremf');
    return ___dremf(
      __x,
      __y,
    );
  }

  _dart___dremf ___dremf;

  double significandf(
    double __x,
  ) {
    _significandf ??= _dylib
        .lookupFunction<_c_significandf, _dart_significandf>('significandf');
    return _significandf(
      __x,
    );
  }

  _dart_significandf _significandf;

  double __significandf(
    double __x,
  ) {
    ___significandf ??=
        _dylib.lookupFunction<_c___significandf, _dart___significandf>(
            '__significandf');
    return ___significandf(
      __x,
    );
  }

  _dart___significandf ___significandf;

  double copysignf(
    double __x,
    double __y,
  ) {
    _copysignf ??=
        _dylib.lookupFunction<_c_copysignf, _dart_copysignf>('copysignf');
    return _copysignf(
      __x,
      __y,
    );
  }

  _dart_copysignf _copysignf;

  double __copysignf(
    double __x,
    double __y,
  ) {
    ___copysignf ??=
        _dylib.lookupFunction<_c___copysignf, _dart___copysignf>('__copysignf');
    return ___copysignf(
      __x,
      __y,
    );
  }

  _dart___copysignf ___copysignf;

  double nanf(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    _nanf ??= _dylib.lookupFunction<_c_nanf, _dart_nanf>('nanf');
    return _nanf(
      __tagb,
    );
  }

  _dart_nanf _nanf;

  double __nanf(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    ___nanf ??= _dylib.lookupFunction<_c___nanf, _dart___nanf>('__nanf');
    return ___nanf(
      __tagb,
    );
  }

  _dart___nanf ___nanf;

  int isnanf(
    double __value,
  ) {
    _isnanf ??= _dylib.lookupFunction<_c_isnanf, _dart_isnanf>('isnanf');
    return _isnanf(
      __value,
    );
  }

  _dart_isnanf _isnanf;

  double j0f(
    double arg0,
  ) {
    _j0f ??= _dylib.lookupFunction<_c_j0f, _dart_j0f>('j0f');
    return _j0f(
      arg0,
    );
  }

  _dart_j0f _j0f;

  double __j0f(
    double arg0,
  ) {
    ___j0f ??= _dylib.lookupFunction<_c___j0f, _dart___j0f>('__j0f');
    return ___j0f(
      arg0,
    );
  }

  _dart___j0f ___j0f;

  double j1f(
    double arg0,
  ) {
    _j1f ??= _dylib.lookupFunction<_c_j1f, _dart_j1f>('j1f');
    return _j1f(
      arg0,
    );
  }

  _dart_j1f _j1f;

  double __j1f(
    double arg0,
  ) {
    ___j1f ??= _dylib.lookupFunction<_c___j1f, _dart___j1f>('__j1f');
    return ___j1f(
      arg0,
    );
  }

  _dart___j1f ___j1f;

  double jnf(
    int arg0,
    double arg1,
  ) {
    _jnf ??= _dylib.lookupFunction<_c_jnf, _dart_jnf>('jnf');
    return _jnf(
      arg0,
      arg1,
    );
  }

  _dart_jnf _jnf;

  double __jnf(
    int arg0,
    double arg1,
  ) {
    ___jnf ??= _dylib.lookupFunction<_c___jnf, _dart___jnf>('__jnf');
    return ___jnf(
      arg0,
      arg1,
    );
  }

  _dart___jnf ___jnf;

  double y0f(
    double arg0,
  ) {
    _y0f ??= _dylib.lookupFunction<_c_y0f, _dart_y0f>('y0f');
    return _y0f(
      arg0,
    );
  }

  _dart_y0f _y0f;

  double __y0f(
    double arg0,
  ) {
    ___y0f ??= _dylib.lookupFunction<_c___y0f, _dart___y0f>('__y0f');
    return ___y0f(
      arg0,
    );
  }

  _dart___y0f ___y0f;

  double y1f(
    double arg0,
  ) {
    _y1f ??= _dylib.lookupFunction<_c_y1f, _dart_y1f>('y1f');
    return _y1f(
      arg0,
    );
  }

  _dart_y1f _y1f;

  double __y1f(
    double arg0,
  ) {
    ___y1f ??= _dylib.lookupFunction<_c___y1f, _dart___y1f>('__y1f');
    return ___y1f(
      arg0,
    );
  }

  _dart___y1f ___y1f;

  double ynf(
    int arg0,
    double arg1,
  ) {
    _ynf ??= _dylib.lookupFunction<_c_ynf, _dart_ynf>('ynf');
    return _ynf(
      arg0,
      arg1,
    );
  }

  _dart_ynf _ynf;

  double __ynf(
    int arg0,
    double arg1,
  ) {
    ___ynf ??= _dylib.lookupFunction<_c___ynf, _dart___ynf>('__ynf');
    return ___ynf(
      arg0,
      arg1,
    );
  }

  _dart___ynf ___ynf;

  double erff(
    double arg0,
  ) {
    _erff ??= _dylib.lookupFunction<_c_erff, _dart_erff>('erff');
    return _erff(
      arg0,
    );
  }

  _dart_erff _erff;

  double __erff(
    double arg0,
  ) {
    ___erff ??= _dylib.lookupFunction<_c___erff, _dart___erff>('__erff');
    return ___erff(
      arg0,
    );
  }

  _dart___erff ___erff;

  double erfcf(
    double arg0,
  ) {
    _erfcf ??= _dylib.lookupFunction<_c_erfcf, _dart_erfcf>('erfcf');
    return _erfcf(
      arg0,
    );
  }

  _dart_erfcf _erfcf;

  double __erfcf(
    double arg0,
  ) {
    ___erfcf ??= _dylib.lookupFunction<_c___erfcf, _dart___erfcf>('__erfcf');
    return ___erfcf(
      arg0,
    );
  }

  _dart___erfcf ___erfcf;

  double lgammaf(
    double arg0,
  ) {
    _lgammaf ??= _dylib.lookupFunction<_c_lgammaf, _dart_lgammaf>('lgammaf');
    return _lgammaf(
      arg0,
    );
  }

  _dart_lgammaf _lgammaf;

  double __lgammaf(
    double arg0,
  ) {
    ___lgammaf ??=
        _dylib.lookupFunction<_c___lgammaf, _dart___lgammaf>('__lgammaf');
    return ___lgammaf(
      arg0,
    );
  }

  _dart___lgammaf ___lgammaf;

  double tgammaf(
    double arg0,
  ) {
    _tgammaf ??= _dylib.lookupFunction<_c_tgammaf, _dart_tgammaf>('tgammaf');
    return _tgammaf(
      arg0,
    );
  }

  _dart_tgammaf _tgammaf;

  double __tgammaf(
    double arg0,
  ) {
    ___tgammaf ??=
        _dylib.lookupFunction<_c___tgammaf, _dart___tgammaf>('__tgammaf');
    return ___tgammaf(
      arg0,
    );
  }

  _dart___tgammaf ___tgammaf;

  double gammaf(
    double arg0,
  ) {
    _gammaf ??= _dylib.lookupFunction<_c_gammaf, _dart_gammaf>('gammaf');
    return _gammaf(
      arg0,
    );
  }

  _dart_gammaf _gammaf;

  double __gammaf(
    double arg0,
  ) {
    ___gammaf ??=
        _dylib.lookupFunction<_c___gammaf, _dart___gammaf>('__gammaf');
    return ___gammaf(
      arg0,
    );
  }

  _dart___gammaf ___gammaf;

  double lgammaf_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    _lgammaf_r ??=
        _dylib.lookupFunction<_c_lgammaf_r, _dart_lgammaf_r>('lgammaf_r');
    return _lgammaf_r(
      arg0,
      __signgamp,
    );
  }

  _dart_lgammaf_r _lgammaf_r;

  double __lgammaf_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    ___lgammaf_r ??=
        _dylib.lookupFunction<_c___lgammaf_r, _dart___lgammaf_r>('__lgammaf_r');
    return ___lgammaf_r(
      arg0,
      __signgamp,
    );
  }

  _dart___lgammaf_r ___lgammaf_r;

  double rintf(
    double __x,
  ) {
    _rintf ??= _dylib.lookupFunction<_c_rintf, _dart_rintf>('rintf');
    return _rintf(
      __x,
    );
  }

  _dart_rintf _rintf;

  double __rintf(
    double __x,
  ) {
    ___rintf ??= _dylib.lookupFunction<_c___rintf, _dart___rintf>('__rintf');
    return ___rintf(
      __x,
    );
  }

  _dart___rintf ___rintf;

  double nextafterf(
    double __x,
    double __y,
  ) {
    _nextafterf ??=
        _dylib.lookupFunction<_c_nextafterf, _dart_nextafterf>('nextafterf');
    return _nextafterf(
      __x,
      __y,
    );
  }

  _dart_nextafterf _nextafterf;

  double __nextafterf(
    double __x,
    double __y,
  ) {
    ___nextafterf ??= _dylib
        .lookupFunction<_c___nextafterf, _dart___nextafterf>('__nextafterf');
    return ___nextafterf(
      __x,
      __y,
    );
  }

  _dart___nextafterf ___nextafterf;

  double remainderf(
    double __x,
    double __y,
  ) {
    _remainderf ??=
        _dylib.lookupFunction<_c_remainderf, _dart_remainderf>('remainderf');
    return _remainderf(
      __x,
      __y,
    );
  }

  _dart_remainderf _remainderf;

  double __remainderf(
    double __x,
    double __y,
  ) {
    ___remainderf ??= _dylib
        .lookupFunction<_c___remainderf, _dart___remainderf>('__remainderf');
    return ___remainderf(
      __x,
      __y,
    );
  }

  _dart___remainderf ___remainderf;

  double scalbnf(
    double __x,
    int __n,
  ) {
    _scalbnf ??= _dylib.lookupFunction<_c_scalbnf, _dart_scalbnf>('scalbnf');
    return _scalbnf(
      __x,
      __n,
    );
  }

  _dart_scalbnf _scalbnf;

  double __scalbnf(
    double __x,
    int __n,
  ) {
    ___scalbnf ??=
        _dylib.lookupFunction<_c___scalbnf, _dart___scalbnf>('__scalbnf');
    return ___scalbnf(
      __x,
      __n,
    );
  }

  _dart___scalbnf ___scalbnf;

  int ilogbf(
    double __x,
  ) {
    _ilogbf ??= _dylib.lookupFunction<_c_ilogbf, _dart_ilogbf>('ilogbf');
    return _ilogbf(
      __x,
    );
  }

  _dart_ilogbf _ilogbf;

  int __ilogbf(
    double __x,
  ) {
    ___ilogbf ??=
        _dylib.lookupFunction<_c___ilogbf, _dart___ilogbf>('__ilogbf');
    return ___ilogbf(
      __x,
    );
  }

  _dart___ilogbf ___ilogbf;

  double scalblnf(
    double __x,
    int __n,
  ) {
    _scalblnf ??=
        _dylib.lookupFunction<_c_scalblnf, _dart_scalblnf>('scalblnf');
    return _scalblnf(
      __x,
      __n,
    );
  }

  _dart_scalblnf _scalblnf;

  double __scalblnf(
    double __x,
    int __n,
  ) {
    ___scalblnf ??=
        _dylib.lookupFunction<_c___scalblnf, _dart___scalblnf>('__scalblnf');
    return ___scalblnf(
      __x,
      __n,
    );
  }

  _dart___scalblnf ___scalblnf;

  double nearbyintf(
    double __x,
  ) {
    _nearbyintf ??=
        _dylib.lookupFunction<_c_nearbyintf, _dart_nearbyintf>('nearbyintf');
    return _nearbyintf(
      __x,
    );
  }

  _dart_nearbyintf _nearbyintf;

  double __nearbyintf(
    double __x,
  ) {
    ___nearbyintf ??= _dylib
        .lookupFunction<_c___nearbyintf, _dart___nearbyintf>('__nearbyintf');
    return ___nearbyintf(
      __x,
    );
  }

  _dart___nearbyintf ___nearbyintf;

  double roundf(
    double __x,
  ) {
    _roundf ??= _dylib.lookupFunction<_c_roundf, _dart_roundf>('roundf');
    return _roundf(
      __x,
    );
  }

  _dart_roundf _roundf;

  double __roundf(
    double __x,
  ) {
    ___roundf ??=
        _dylib.lookupFunction<_c___roundf, _dart___roundf>('__roundf');
    return ___roundf(
      __x,
    );
  }

  _dart___roundf ___roundf;

  double truncf(
    double __x,
  ) {
    _truncf ??= _dylib.lookupFunction<_c_truncf, _dart_truncf>('truncf');
    return _truncf(
      __x,
    );
  }

  _dart_truncf _truncf;

  double __truncf(
    double __x,
  ) {
    ___truncf ??=
        _dylib.lookupFunction<_c___truncf, _dart___truncf>('__truncf');
    return ___truncf(
      __x,
    );
  }

  _dart___truncf ___truncf;

  double remquof(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    _remquof ??= _dylib.lookupFunction<_c_remquof, _dart_remquof>('remquof');
    return _remquof(
      __x,
      __y,
      __quo,
    );
  }

  _dart_remquof _remquof;

  double __remquof(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    ___remquof ??=
        _dylib.lookupFunction<_c___remquof, _dart___remquof>('__remquof');
    return ___remquof(
      __x,
      __y,
      __quo,
    );
  }

  _dart___remquof ___remquof;

  int lrintf(
    double __x,
  ) {
    _lrintf ??= _dylib.lookupFunction<_c_lrintf, _dart_lrintf>('lrintf');
    return _lrintf(
      __x,
    );
  }

  _dart_lrintf _lrintf;

  int __lrintf(
    double __x,
  ) {
    ___lrintf ??=
        _dylib.lookupFunction<_c___lrintf, _dart___lrintf>('__lrintf');
    return ___lrintf(
      __x,
    );
  }

  _dart___lrintf ___lrintf;

  int llrintf(
    double __x,
  ) {
    _llrintf ??= _dylib.lookupFunction<_c_llrintf, _dart_llrintf>('llrintf');
    return _llrintf(
      __x,
    );
  }

  _dart_llrintf _llrintf;

  int __llrintf(
    double __x,
  ) {
    ___llrintf ??=
        _dylib.lookupFunction<_c___llrintf, _dart___llrintf>('__llrintf');
    return ___llrintf(
      __x,
    );
  }

  _dart___llrintf ___llrintf;

  int lroundf(
    double __x,
  ) {
    _lroundf ??= _dylib.lookupFunction<_c_lroundf, _dart_lroundf>('lroundf');
    return _lroundf(
      __x,
    );
  }

  _dart_lroundf _lroundf;

  int __lroundf(
    double __x,
  ) {
    ___lroundf ??=
        _dylib.lookupFunction<_c___lroundf, _dart___lroundf>('__lroundf');
    return ___lroundf(
      __x,
    );
  }

  _dart___lroundf ___lroundf;

  int llroundf(
    double __x,
  ) {
    _llroundf ??=
        _dylib.lookupFunction<_c_llroundf, _dart_llroundf>('llroundf');
    return _llroundf(
      __x,
    );
  }

  _dart_llroundf _llroundf;

  int __llroundf(
    double __x,
  ) {
    ___llroundf ??=
        _dylib.lookupFunction<_c___llroundf, _dart___llroundf>('__llroundf');
    return ___llroundf(
      __x,
    );
  }

  _dart___llroundf ___llroundf;

  double fdimf(
    double __x,
    double __y,
  ) {
    _fdimf ??= _dylib.lookupFunction<_c_fdimf, _dart_fdimf>('fdimf');
    return _fdimf(
      __x,
      __y,
    );
  }

  _dart_fdimf _fdimf;

  double __fdimf(
    double __x,
    double __y,
  ) {
    ___fdimf ??= _dylib.lookupFunction<_c___fdimf, _dart___fdimf>('__fdimf');
    return ___fdimf(
      __x,
      __y,
    );
  }

  _dart___fdimf ___fdimf;

  double fmaxf(
    double __x,
    double __y,
  ) {
    _fmaxf ??= _dylib.lookupFunction<_c_fmaxf, _dart_fmaxf>('fmaxf');
    return _fmaxf(
      __x,
      __y,
    );
  }

  _dart_fmaxf _fmaxf;

  double __fmaxf(
    double __x,
    double __y,
  ) {
    ___fmaxf ??= _dylib.lookupFunction<_c___fmaxf, _dart___fmaxf>('__fmaxf');
    return ___fmaxf(
      __x,
      __y,
    );
  }

  _dart___fmaxf ___fmaxf;

  double fminf(
    double __x,
    double __y,
  ) {
    _fminf ??= _dylib.lookupFunction<_c_fminf, _dart_fminf>('fminf');
    return _fminf(
      __x,
      __y,
    );
  }

  _dart_fminf _fminf;

  double __fminf(
    double __x,
    double __y,
  ) {
    ___fminf ??= _dylib.lookupFunction<_c___fminf, _dart___fminf>('__fminf');
    return ___fminf(
      __x,
      __y,
    );
  }

  _dart___fminf ___fminf;

  double fmaf(
    double __x,
    double __y,
    double __z,
  ) {
    _fmaf ??= _dylib.lookupFunction<_c_fmaf, _dart_fmaf>('fmaf');
    return _fmaf(
      __x,
      __y,
      __z,
    );
  }

  _dart_fmaf _fmaf;

  double __fmaf(
    double __x,
    double __y,
    double __z,
  ) {
    ___fmaf ??= _dylib.lookupFunction<_c___fmaf, _dart___fmaf>('__fmaf');
    return ___fmaf(
      __x,
      __y,
      __z,
    );
  }

  _dart___fmaf ___fmaf;

  double scalbf(
    double __x,
    double __n,
  ) {
    _scalbf ??= _dylib.lookupFunction<_c_scalbf, _dart_scalbf>('scalbf');
    return _scalbf(
      __x,
      __n,
    );
  }

  _dart_scalbf _scalbf;

  double __scalbf(
    double __x,
    double __n,
  ) {
    ___scalbf ??=
        _dylib.lookupFunction<_c___scalbf, _dart___scalbf>('__scalbf');
    return ___scalbf(
      __x,
      __n,
    );
  }

  _dart___scalbf ___scalbf;

  ffi.Pointer<ffi.Void> SDL_malloc(
    int size,
  ) {
    _SDL_malloc ??=
        _dylib.lookupFunction<_c_SDL_malloc, _dart_SDL_malloc>('SDL_malloc');
    return _SDL_malloc(
      size,
    );
  }

  _dart_SDL_malloc _SDL_malloc;

  ffi.Pointer<ffi.Void> SDL_calloc(
    int nmemb,
    int size,
  ) {
    _SDL_calloc ??=
        _dylib.lookupFunction<_c_SDL_calloc, _dart_SDL_calloc>('SDL_calloc');
    return _SDL_calloc(
      nmemb,
      size,
    );
  }

  _dart_SDL_calloc _SDL_calloc;

  ffi.Pointer<ffi.Void> SDL_realloc(
    ffi.Pointer<ffi.Void> mem,
    int size,
  ) {
    _SDL_realloc ??=
        _dylib.lookupFunction<_c_SDL_realloc, _dart_SDL_realloc>('SDL_realloc');
    return _SDL_realloc(
      mem,
      size,
    );
  }

  _dart_SDL_realloc _SDL_realloc;

  void SDL_free(
    ffi.Pointer<ffi.Void> mem,
  ) {
    _SDL_free ??=
        _dylib.lookupFunction<_c_SDL_free, _dart_SDL_free>('SDL_free');
    return _SDL_free(
      mem,
    );
  }

  _dart_SDL_free _SDL_free;

  /// \brief Get the current set of SDL memory functions
  void SDL_GetMemoryFunctions(
    ffi.Pointer<ffi.Pointer<ffi.NativeFunction<SDL_malloc_func>>> malloc_func,
    ffi.Pointer<ffi.Pointer<ffi.NativeFunction<SDL_calloc_func>>> calloc_func,
    ffi.Pointer<ffi.Pointer<ffi.NativeFunction<SDL_realloc_func>>> realloc_func,
    ffi.Pointer<ffi.Pointer<ffi.NativeFunction<SDL_free_func>>> free_func,
  ) {
    _SDL_GetMemoryFunctions ??= _dylib.lookupFunction<_c_SDL_GetMemoryFunctions,
        _dart_SDL_GetMemoryFunctions>('SDL_GetMemoryFunctions');
    return _SDL_GetMemoryFunctions(
      malloc_func,
      calloc_func,
      realloc_func,
      free_func,
    );
  }

  _dart_SDL_GetMemoryFunctions _SDL_GetMemoryFunctions;

  /// \brief Replace SDL's memory allocation functions with a custom set
  ///
  /// \note If you are replacing SDL's memory functions, you should call
  /// SDL_GetNumAllocations() and be very careful if it returns non-zero.
  /// That means that your free function will be called with memory
  /// allocated by the previous memory allocation functions.
  int SDL_SetMemoryFunctions(
    ffi.Pointer<ffi.NativeFunction<SDL_malloc_func>> malloc_func,
    ffi.Pointer<ffi.NativeFunction<SDL_calloc_func>> calloc_func,
    ffi.Pointer<ffi.NativeFunction<SDL_realloc_func>> realloc_func,
    ffi.Pointer<ffi.NativeFunction<SDL_free_func>> free_func,
  ) {
    _SDL_SetMemoryFunctions ??= _dylib.lookupFunction<_c_SDL_SetMemoryFunctions,
        _dart_SDL_SetMemoryFunctions>('SDL_SetMemoryFunctions');
    return _SDL_SetMemoryFunctions(
      malloc_func,
      calloc_func,
      realloc_func,
      free_func,
    );
  }

  _dart_SDL_SetMemoryFunctions _SDL_SetMemoryFunctions;

  /// \brief Get the number of outstanding (unfreed) allocations
  int SDL_GetNumAllocations() {
    _SDL_GetNumAllocations ??= _dylib.lookupFunction<_c_SDL_GetNumAllocations,
        _dart_SDL_GetNumAllocations>('SDL_GetNumAllocations');
    return _SDL_GetNumAllocations();
  }

  _dart_SDL_GetNumAllocations _SDL_GetNumAllocations;

  ffi.Pointer<ffi.Int8> SDL_getenv(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _SDL_getenv ??=
        _dylib.lookupFunction<_c_SDL_getenv, _dart_SDL_getenv>('SDL_getenv');
    return _SDL_getenv(
      name,
    );
  }

  _dart_SDL_getenv _SDL_getenv;

  int SDL_setenv(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> value,
    int overwrite,
  ) {
    _SDL_setenv ??=
        _dylib.lookupFunction<_c_SDL_setenv, _dart_SDL_setenv>('SDL_setenv');
    return _SDL_setenv(
      name,
      value,
      overwrite,
    );
  }

  _dart_SDL_setenv _SDL_setenv;

  void SDL_qsort(
    ffi.Pointer<ffi.Void> base,
    int nmemb,
    int size,
    ffi.Pointer<ffi.NativeFunction<_typedefC_4>> compare,
  ) {
    _SDL_qsort ??=
        _dylib.lookupFunction<_c_SDL_qsort, _dart_SDL_qsort>('SDL_qsort');
    return _SDL_qsort(
      base,
      nmemb,
      size,
      compare,
    );
  }

  _dart_SDL_qsort _SDL_qsort;

  int SDL_abs(
    int x,
  ) {
    _SDL_abs ??= _dylib.lookupFunction<_c_SDL_abs, _dart_SDL_abs>('SDL_abs');
    return _SDL_abs(
      x,
    );
  }

  _dart_SDL_abs _SDL_abs;

  int SDL_isdigit(
    int x,
  ) {
    _SDL_isdigit ??=
        _dylib.lookupFunction<_c_SDL_isdigit, _dart_SDL_isdigit>('SDL_isdigit');
    return _SDL_isdigit(
      x,
    );
  }

  _dart_SDL_isdigit _SDL_isdigit;

  int SDL_isspace(
    int x,
  ) {
    _SDL_isspace ??=
        _dylib.lookupFunction<_c_SDL_isspace, _dart_SDL_isspace>('SDL_isspace');
    return _SDL_isspace(
      x,
    );
  }

  _dart_SDL_isspace _SDL_isspace;

  int SDL_isupper(
    int x,
  ) {
    _SDL_isupper ??=
        _dylib.lookupFunction<_c_SDL_isupper, _dart_SDL_isupper>('SDL_isupper');
    return _SDL_isupper(
      x,
    );
  }

  _dart_SDL_isupper _SDL_isupper;

  int SDL_islower(
    int x,
  ) {
    _SDL_islower ??=
        _dylib.lookupFunction<_c_SDL_islower, _dart_SDL_islower>('SDL_islower');
    return _SDL_islower(
      x,
    );
  }

  _dart_SDL_islower _SDL_islower;

  int SDL_toupper(
    int x,
  ) {
    _SDL_toupper ??=
        _dylib.lookupFunction<_c_SDL_toupper, _dart_SDL_toupper>('SDL_toupper');
    return _SDL_toupper(
      x,
    );
  }

  _dart_SDL_toupper _SDL_toupper;

  int SDL_tolower(
    int x,
  ) {
    _SDL_tolower ??=
        _dylib.lookupFunction<_c_SDL_tolower, _dart_SDL_tolower>('SDL_tolower');
    return _SDL_tolower(
      x,
    );
  }

  _dart_SDL_tolower _SDL_tolower;

  ffi.Pointer<ffi.Void> SDL_memset(
    ffi.Pointer<ffi.Void> dst,
    int c,
    int len,
  ) {
    _SDL_memset ??=
        _dylib.lookupFunction<_c_SDL_memset, _dart_SDL_memset>('SDL_memset');
    return _SDL_memset(
      dst,
      c,
      len,
    );
  }

  _dart_SDL_memset _SDL_memset;

  void SDL_memset4(
    ffi.Pointer<ffi.Void> dst,
    int val,
    int dwords,
  ) {
    _SDL_memset4 ??=
        _dylib.lookupFunction<_c_SDL_memset4, _dart_SDL_memset4>('SDL_memset4');
    return _SDL_memset4(
      dst,
      val,
      dwords,
    );
  }

  _dart_SDL_memset4 _SDL_memset4;

  ffi.Pointer<ffi.Void> SDL_memcpy(
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<ffi.Void> src,
    int len,
  ) {
    _SDL_memcpy ??=
        _dylib.lookupFunction<_c_SDL_memcpy, _dart_SDL_memcpy>('SDL_memcpy');
    return _SDL_memcpy(
      dst,
      src,
      len,
    );
  }

  _dart_SDL_memcpy _SDL_memcpy;

  ffi.Pointer<ffi.Void> SDL_memmove(
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<ffi.Void> src,
    int len,
  ) {
    _SDL_memmove ??=
        _dylib.lookupFunction<_c_SDL_memmove, _dart_SDL_memmove>('SDL_memmove');
    return _SDL_memmove(
      dst,
      src,
      len,
    );
  }

  _dart_SDL_memmove _SDL_memmove;

  int SDL_memcmp(
    ffi.Pointer<ffi.Void> s1,
    ffi.Pointer<ffi.Void> s2,
    int len,
  ) {
    _SDL_memcmp ??=
        _dylib.lookupFunction<_c_SDL_memcmp, _dart_SDL_memcmp>('SDL_memcmp');
    return _SDL_memcmp(
      s1,
      s2,
      len,
    );
  }

  _dart_SDL_memcmp _SDL_memcmp;

  int SDL_wcslen(
    ffi.Pointer<ffi.Int32> wstr,
  ) {
    _SDL_wcslen ??=
        _dylib.lookupFunction<_c_SDL_wcslen, _dart_SDL_wcslen>('SDL_wcslen');
    return _SDL_wcslen(
      wstr,
    );
  }

  _dart_SDL_wcslen _SDL_wcslen;

  int SDL_wcslcpy(
    ffi.Pointer<ffi.Int32> dst,
    ffi.Pointer<ffi.Int32> src,
    int maxlen,
  ) {
    _SDL_wcslcpy ??=
        _dylib.lookupFunction<_c_SDL_wcslcpy, _dart_SDL_wcslcpy>('SDL_wcslcpy');
    return _SDL_wcslcpy(
      dst,
      src,
      maxlen,
    );
  }

  _dart_SDL_wcslcpy _SDL_wcslcpy;

  int SDL_wcslcat(
    ffi.Pointer<ffi.Int32> dst,
    ffi.Pointer<ffi.Int32> src,
    int maxlen,
  ) {
    _SDL_wcslcat ??=
        _dylib.lookupFunction<_c_SDL_wcslcat, _dart_SDL_wcslcat>('SDL_wcslcat');
    return _SDL_wcslcat(
      dst,
      src,
      maxlen,
    );
  }

  _dart_SDL_wcslcat _SDL_wcslcat;

  ffi.Pointer<ffi.Int32> SDL_wcsdup(
    ffi.Pointer<ffi.Int32> wstr,
  ) {
    _SDL_wcsdup ??=
        _dylib.lookupFunction<_c_SDL_wcsdup, _dart_SDL_wcsdup>('SDL_wcsdup');
    return _SDL_wcsdup(
      wstr,
    );
  }

  _dart_SDL_wcsdup _SDL_wcsdup;

  ffi.Pointer<ffi.Int32> SDL_wcsstr(
    ffi.Pointer<ffi.Int32> haystack,
    ffi.Pointer<ffi.Int32> needle,
  ) {
    _SDL_wcsstr ??=
        _dylib.lookupFunction<_c_SDL_wcsstr, _dart_SDL_wcsstr>('SDL_wcsstr');
    return _SDL_wcsstr(
      haystack,
      needle,
    );
  }

  _dart_SDL_wcsstr _SDL_wcsstr;

  int SDL_wcscmp(
    ffi.Pointer<ffi.Int32> str1,
    ffi.Pointer<ffi.Int32> str2,
  ) {
    _SDL_wcscmp ??=
        _dylib.lookupFunction<_c_SDL_wcscmp, _dart_SDL_wcscmp>('SDL_wcscmp');
    return _SDL_wcscmp(
      str1,
      str2,
    );
  }

  _dart_SDL_wcscmp _SDL_wcscmp;

  int SDL_wcsncmp(
    ffi.Pointer<ffi.Int32> str1,
    ffi.Pointer<ffi.Int32> str2,
    int maxlen,
  ) {
    _SDL_wcsncmp ??=
        _dylib.lookupFunction<_c_SDL_wcsncmp, _dart_SDL_wcsncmp>('SDL_wcsncmp');
    return _SDL_wcsncmp(
      str1,
      str2,
      maxlen,
    );
  }

  _dart_SDL_wcsncmp _SDL_wcsncmp;

  int SDL_strlen(
    ffi.Pointer<ffi.Int8> str,
  ) {
    _SDL_strlen ??=
        _dylib.lookupFunction<_c_SDL_strlen, _dart_SDL_strlen>('SDL_strlen');
    return _SDL_strlen(
      str,
    );
  }

  _dart_SDL_strlen _SDL_strlen;

  int SDL_strlcpy(
    ffi.Pointer<ffi.Int8> dst,
    ffi.Pointer<ffi.Int8> src,
    int maxlen,
  ) {
    _SDL_strlcpy ??=
        _dylib.lookupFunction<_c_SDL_strlcpy, _dart_SDL_strlcpy>('SDL_strlcpy');
    return _SDL_strlcpy(
      dst,
      src,
      maxlen,
    );
  }

  _dart_SDL_strlcpy _SDL_strlcpy;

  int SDL_utf8strlcpy(
    ffi.Pointer<ffi.Int8> dst,
    ffi.Pointer<ffi.Int8> src,
    int dst_bytes,
  ) {
    _SDL_utf8strlcpy ??=
        _dylib.lookupFunction<_c_SDL_utf8strlcpy, _dart_SDL_utf8strlcpy>(
            'SDL_utf8strlcpy');
    return _SDL_utf8strlcpy(
      dst,
      src,
      dst_bytes,
    );
  }

  _dart_SDL_utf8strlcpy _SDL_utf8strlcpy;

  int SDL_strlcat(
    ffi.Pointer<ffi.Int8> dst,
    ffi.Pointer<ffi.Int8> src,
    int maxlen,
  ) {
    _SDL_strlcat ??=
        _dylib.lookupFunction<_c_SDL_strlcat, _dart_SDL_strlcat>('SDL_strlcat');
    return _SDL_strlcat(
      dst,
      src,
      maxlen,
    );
  }

  _dart_SDL_strlcat _SDL_strlcat;

  ffi.Pointer<ffi.Int8> SDL_strdup(
    ffi.Pointer<ffi.Int8> str,
  ) {
    _SDL_strdup ??=
        _dylib.lookupFunction<_c_SDL_strdup, _dart_SDL_strdup>('SDL_strdup');
    return _SDL_strdup(
      str,
    );
  }

  _dart_SDL_strdup _SDL_strdup;

  ffi.Pointer<ffi.Int8> SDL_strrev(
    ffi.Pointer<ffi.Int8> str,
  ) {
    _SDL_strrev ??=
        _dylib.lookupFunction<_c_SDL_strrev, _dart_SDL_strrev>('SDL_strrev');
    return _SDL_strrev(
      str,
    );
  }

  _dart_SDL_strrev _SDL_strrev;

  ffi.Pointer<ffi.Int8> SDL_strupr(
    ffi.Pointer<ffi.Int8> str,
  ) {
    _SDL_strupr ??=
        _dylib.lookupFunction<_c_SDL_strupr, _dart_SDL_strupr>('SDL_strupr');
    return _SDL_strupr(
      str,
    );
  }

  _dart_SDL_strupr _SDL_strupr;

  ffi.Pointer<ffi.Int8> SDL_strlwr(
    ffi.Pointer<ffi.Int8> str,
  ) {
    _SDL_strlwr ??=
        _dylib.lookupFunction<_c_SDL_strlwr, _dart_SDL_strlwr>('SDL_strlwr');
    return _SDL_strlwr(
      str,
    );
  }

  _dart_SDL_strlwr _SDL_strlwr;

  ffi.Pointer<ffi.Int8> SDL_strchr(
    ffi.Pointer<ffi.Int8> str,
    int c,
  ) {
    _SDL_strchr ??=
        _dylib.lookupFunction<_c_SDL_strchr, _dart_SDL_strchr>('SDL_strchr');
    return _SDL_strchr(
      str,
      c,
    );
  }

  _dart_SDL_strchr _SDL_strchr;

  ffi.Pointer<ffi.Int8> SDL_strrchr(
    ffi.Pointer<ffi.Int8> str,
    int c,
  ) {
    _SDL_strrchr ??=
        _dylib.lookupFunction<_c_SDL_strrchr, _dart_SDL_strrchr>('SDL_strrchr');
    return _SDL_strrchr(
      str,
      c,
    );
  }

  _dart_SDL_strrchr _SDL_strrchr;

  ffi.Pointer<ffi.Int8> SDL_strstr(
    ffi.Pointer<ffi.Int8> haystack,
    ffi.Pointer<ffi.Int8> needle,
  ) {
    _SDL_strstr ??=
        _dylib.lookupFunction<_c_SDL_strstr, _dart_SDL_strstr>('SDL_strstr');
    return _SDL_strstr(
      haystack,
      needle,
    );
  }

  _dart_SDL_strstr _SDL_strstr;

  ffi.Pointer<ffi.Int8> SDL_strtokr(
    ffi.Pointer<ffi.Int8> s1,
    ffi.Pointer<ffi.Int8> s2,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> saveptr,
  ) {
    _SDL_strtokr ??=
        _dylib.lookupFunction<_c_SDL_strtokr, _dart_SDL_strtokr>('SDL_strtokr');
    return _SDL_strtokr(
      s1,
      s2,
      saveptr,
    );
  }

  _dart_SDL_strtokr _SDL_strtokr;

  int SDL_utf8strlen(
    ffi.Pointer<ffi.Int8> str,
  ) {
    _SDL_utf8strlen ??=
        _dylib.lookupFunction<_c_SDL_utf8strlen, _dart_SDL_utf8strlen>(
            'SDL_utf8strlen');
    return _SDL_utf8strlen(
      str,
    );
  }

  _dart_SDL_utf8strlen _SDL_utf8strlen;

  ffi.Pointer<ffi.Int8> SDL_itoa(
    int value,
    ffi.Pointer<ffi.Int8> str,
    int radix,
  ) {
    _SDL_itoa ??=
        _dylib.lookupFunction<_c_SDL_itoa, _dart_SDL_itoa>('SDL_itoa');
    return _SDL_itoa(
      value,
      str,
      radix,
    );
  }

  _dart_SDL_itoa _SDL_itoa;

  ffi.Pointer<ffi.Int8> SDL_uitoa(
    int value,
    ffi.Pointer<ffi.Int8> str,
    int radix,
  ) {
    _SDL_uitoa ??=
        _dylib.lookupFunction<_c_SDL_uitoa, _dart_SDL_uitoa>('SDL_uitoa');
    return _SDL_uitoa(
      value,
      str,
      radix,
    );
  }

  _dart_SDL_uitoa _SDL_uitoa;

  ffi.Pointer<ffi.Int8> SDL_ltoa(
    int value,
    ffi.Pointer<ffi.Int8> str,
    int radix,
  ) {
    _SDL_ltoa ??=
        _dylib.lookupFunction<_c_SDL_ltoa, _dart_SDL_ltoa>('SDL_ltoa');
    return _SDL_ltoa(
      value,
      str,
      radix,
    );
  }

  _dart_SDL_ltoa _SDL_ltoa;

  ffi.Pointer<ffi.Int8> SDL_ultoa(
    int value,
    ffi.Pointer<ffi.Int8> str,
    int radix,
  ) {
    _SDL_ultoa ??=
        _dylib.lookupFunction<_c_SDL_ultoa, _dart_SDL_ultoa>('SDL_ultoa');
    return _SDL_ultoa(
      value,
      str,
      radix,
    );
  }

  _dart_SDL_ultoa _SDL_ultoa;

  ffi.Pointer<ffi.Int8> SDL_lltoa(
    int value,
    ffi.Pointer<ffi.Int8> str,
    int radix,
  ) {
    _SDL_lltoa ??=
        _dylib.lookupFunction<_c_SDL_lltoa, _dart_SDL_lltoa>('SDL_lltoa');
    return _SDL_lltoa(
      value,
      str,
      radix,
    );
  }

  _dart_SDL_lltoa _SDL_lltoa;

  ffi.Pointer<ffi.Int8> SDL_ulltoa(
    int value,
    ffi.Pointer<ffi.Int8> str,
    int radix,
  ) {
    _SDL_ulltoa ??=
        _dylib.lookupFunction<_c_SDL_ulltoa, _dart_SDL_ulltoa>('SDL_ulltoa');
    return _SDL_ulltoa(
      value,
      str,
      radix,
    );
  }

  _dart_SDL_ulltoa _SDL_ulltoa;

  int SDL_atoi(
    ffi.Pointer<ffi.Int8> str,
  ) {
    _SDL_atoi ??=
        _dylib.lookupFunction<_c_SDL_atoi, _dart_SDL_atoi>('SDL_atoi');
    return _SDL_atoi(
      str,
    );
  }

  _dart_SDL_atoi _SDL_atoi;

  double SDL_atof(
    ffi.Pointer<ffi.Int8> str,
  ) {
    _SDL_atof ??=
        _dylib.lookupFunction<_c_SDL_atof, _dart_SDL_atof>('SDL_atof');
    return _SDL_atof(
      str,
    );
  }

  _dart_SDL_atof _SDL_atof;

  int SDL_strtol(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> endp,
    int base,
  ) {
    _SDL_strtol ??=
        _dylib.lookupFunction<_c_SDL_strtol, _dart_SDL_strtol>('SDL_strtol');
    return _SDL_strtol(
      str,
      endp,
      base,
    );
  }

  _dart_SDL_strtol _SDL_strtol;

  int SDL_strtoul(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> endp,
    int base,
  ) {
    _SDL_strtoul ??=
        _dylib.lookupFunction<_c_SDL_strtoul, _dart_SDL_strtoul>('SDL_strtoul');
    return _SDL_strtoul(
      str,
      endp,
      base,
    );
  }

  _dart_SDL_strtoul _SDL_strtoul;

  int SDL_strtoll(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> endp,
    int base,
  ) {
    _SDL_strtoll ??=
        _dylib.lookupFunction<_c_SDL_strtoll, _dart_SDL_strtoll>('SDL_strtoll');
    return _SDL_strtoll(
      str,
      endp,
      base,
    );
  }

  _dart_SDL_strtoll _SDL_strtoll;

  int SDL_strtoull(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> endp,
    int base,
  ) {
    _SDL_strtoull ??= _dylib
        .lookupFunction<_c_SDL_strtoull, _dart_SDL_strtoull>('SDL_strtoull');
    return _SDL_strtoull(
      str,
      endp,
      base,
    );
  }

  _dart_SDL_strtoull _SDL_strtoull;

  double SDL_strtod(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> endp,
  ) {
    _SDL_strtod ??=
        _dylib.lookupFunction<_c_SDL_strtod, _dart_SDL_strtod>('SDL_strtod');
    return _SDL_strtod(
      str,
      endp,
    );
  }

  _dart_SDL_strtod _SDL_strtod;

  int SDL_strcmp(
    ffi.Pointer<ffi.Int8> str1,
    ffi.Pointer<ffi.Int8> str2,
  ) {
    _SDL_strcmp ??=
        _dylib.lookupFunction<_c_SDL_strcmp, _dart_SDL_strcmp>('SDL_strcmp');
    return _SDL_strcmp(
      str1,
      str2,
    );
  }

  _dart_SDL_strcmp _SDL_strcmp;

  int SDL_strncmp(
    ffi.Pointer<ffi.Int8> str1,
    ffi.Pointer<ffi.Int8> str2,
    int maxlen,
  ) {
    _SDL_strncmp ??=
        _dylib.lookupFunction<_c_SDL_strncmp, _dart_SDL_strncmp>('SDL_strncmp');
    return _SDL_strncmp(
      str1,
      str2,
      maxlen,
    );
  }

  _dart_SDL_strncmp _SDL_strncmp;

  int SDL_strcasecmp(
    ffi.Pointer<ffi.Int8> str1,
    ffi.Pointer<ffi.Int8> str2,
  ) {
    _SDL_strcasecmp ??=
        _dylib.lookupFunction<_c_SDL_strcasecmp, _dart_SDL_strcasecmp>(
            'SDL_strcasecmp');
    return _SDL_strcasecmp(
      str1,
      str2,
    );
  }

  _dart_SDL_strcasecmp _SDL_strcasecmp;

  int SDL_strncasecmp(
    ffi.Pointer<ffi.Int8> str1,
    ffi.Pointer<ffi.Int8> str2,
    int len,
  ) {
    _SDL_strncasecmp ??=
        _dylib.lookupFunction<_c_SDL_strncasecmp, _dart_SDL_strncasecmp>(
            'SDL_strncasecmp');
    return _SDL_strncasecmp(
      str1,
      str2,
      len,
    );
  }

  _dart_SDL_strncasecmp _SDL_strncasecmp;

  int SDL_sscanf(
    ffi.Pointer<ffi.Int8> text,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    _SDL_sscanf ??=
        _dylib.lookupFunction<_c_SDL_sscanf, _dart_SDL_sscanf>('SDL_sscanf');
    return _SDL_sscanf(
      text,
      fmt,
    );
  }

  _dart_SDL_sscanf _SDL_sscanf;

  int SDL_vsscanf(
    ffi.Pointer<ffi.Int8> text,
    ffi.Pointer<ffi.Int8> fmt,
    ffi.Pointer<__va_list_tag> ap,
  ) {
    _SDL_vsscanf ??=
        _dylib.lookupFunction<_c_SDL_vsscanf, _dart_SDL_vsscanf>('SDL_vsscanf');
    return _SDL_vsscanf(
      text,
      fmt,
      ap,
    );
  }

  _dart_SDL_vsscanf _SDL_vsscanf;

  int SDL_snprintf(
    ffi.Pointer<ffi.Int8> text,
    int maxlen,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    _SDL_snprintf ??= _dylib
        .lookupFunction<_c_SDL_snprintf, _dart_SDL_snprintf>('SDL_snprintf');
    return _SDL_snprintf(
      text,
      maxlen,
      fmt,
    );
  }

  _dart_SDL_snprintf _SDL_snprintf;

  int SDL_vsnprintf(
    ffi.Pointer<ffi.Int8> text,
    int maxlen,
    ffi.Pointer<ffi.Int8> fmt,
    ffi.Pointer<__va_list_tag> ap,
  ) {
    _SDL_vsnprintf ??= _dylib
        .lookupFunction<_c_SDL_vsnprintf, _dart_SDL_vsnprintf>('SDL_vsnprintf');
    return _SDL_vsnprintf(
      text,
      maxlen,
      fmt,
      ap,
    );
  }

  _dart_SDL_vsnprintf _SDL_vsnprintf;

  double SDL_acos(
    double x,
  ) {
    _SDL_acos ??=
        _dylib.lookupFunction<_c_SDL_acos, _dart_SDL_acos>('SDL_acos');
    return _SDL_acos(
      x,
    );
  }

  _dart_SDL_acos _SDL_acos;

  double SDL_acosf(
    double x,
  ) {
    _SDL_acosf ??=
        _dylib.lookupFunction<_c_SDL_acosf, _dart_SDL_acosf>('SDL_acosf');
    return _SDL_acosf(
      x,
    );
  }

  _dart_SDL_acosf _SDL_acosf;

  double SDL_asin(
    double x,
  ) {
    _SDL_asin ??=
        _dylib.lookupFunction<_c_SDL_asin, _dart_SDL_asin>('SDL_asin');
    return _SDL_asin(
      x,
    );
  }

  _dart_SDL_asin _SDL_asin;

  double SDL_asinf(
    double x,
  ) {
    _SDL_asinf ??=
        _dylib.lookupFunction<_c_SDL_asinf, _dart_SDL_asinf>('SDL_asinf');
    return _SDL_asinf(
      x,
    );
  }

  _dart_SDL_asinf _SDL_asinf;

  double SDL_atan(
    double x,
  ) {
    _SDL_atan ??=
        _dylib.lookupFunction<_c_SDL_atan, _dart_SDL_atan>('SDL_atan');
    return _SDL_atan(
      x,
    );
  }

  _dart_SDL_atan _SDL_atan;

  double SDL_atanf(
    double x,
  ) {
    _SDL_atanf ??=
        _dylib.lookupFunction<_c_SDL_atanf, _dart_SDL_atanf>('SDL_atanf');
    return _SDL_atanf(
      x,
    );
  }

  _dart_SDL_atanf _SDL_atanf;

  double SDL_atan2(
    double x,
    double y,
  ) {
    _SDL_atan2 ??=
        _dylib.lookupFunction<_c_SDL_atan2, _dart_SDL_atan2>('SDL_atan2');
    return _SDL_atan2(
      x,
      y,
    );
  }

  _dart_SDL_atan2 _SDL_atan2;

  double SDL_atan2f(
    double x,
    double y,
  ) {
    _SDL_atan2f ??=
        _dylib.lookupFunction<_c_SDL_atan2f, _dart_SDL_atan2f>('SDL_atan2f');
    return _SDL_atan2f(
      x,
      y,
    );
  }

  _dart_SDL_atan2f _SDL_atan2f;

  double SDL_ceil(
    double x,
  ) {
    _SDL_ceil ??=
        _dylib.lookupFunction<_c_SDL_ceil, _dart_SDL_ceil>('SDL_ceil');
    return _SDL_ceil(
      x,
    );
  }

  _dart_SDL_ceil _SDL_ceil;

  double SDL_ceilf(
    double x,
  ) {
    _SDL_ceilf ??=
        _dylib.lookupFunction<_c_SDL_ceilf, _dart_SDL_ceilf>('SDL_ceilf');
    return _SDL_ceilf(
      x,
    );
  }

  _dart_SDL_ceilf _SDL_ceilf;

  double SDL_copysign(
    double x,
    double y,
  ) {
    _SDL_copysign ??= _dylib
        .lookupFunction<_c_SDL_copysign, _dart_SDL_copysign>('SDL_copysign');
    return _SDL_copysign(
      x,
      y,
    );
  }

  _dart_SDL_copysign _SDL_copysign;

  double SDL_copysignf(
    double x,
    double y,
  ) {
    _SDL_copysignf ??= _dylib
        .lookupFunction<_c_SDL_copysignf, _dart_SDL_copysignf>('SDL_copysignf');
    return _SDL_copysignf(
      x,
      y,
    );
  }

  _dart_SDL_copysignf _SDL_copysignf;

  double SDL_cos(
    double x,
  ) {
    _SDL_cos ??= _dylib.lookupFunction<_c_SDL_cos, _dart_SDL_cos>('SDL_cos');
    return _SDL_cos(
      x,
    );
  }

  _dart_SDL_cos _SDL_cos;

  double SDL_cosf(
    double x,
  ) {
    _SDL_cosf ??=
        _dylib.lookupFunction<_c_SDL_cosf, _dart_SDL_cosf>('SDL_cosf');
    return _SDL_cosf(
      x,
    );
  }

  _dart_SDL_cosf _SDL_cosf;

  double SDL_exp(
    double x,
  ) {
    _SDL_exp ??= _dylib.lookupFunction<_c_SDL_exp, _dart_SDL_exp>('SDL_exp');
    return _SDL_exp(
      x,
    );
  }

  _dart_SDL_exp _SDL_exp;

  double SDL_expf(
    double x,
  ) {
    _SDL_expf ??=
        _dylib.lookupFunction<_c_SDL_expf, _dart_SDL_expf>('SDL_expf');
    return _SDL_expf(
      x,
    );
  }

  _dart_SDL_expf _SDL_expf;

  double SDL_fabs(
    double x,
  ) {
    _SDL_fabs ??=
        _dylib.lookupFunction<_c_SDL_fabs, _dart_SDL_fabs>('SDL_fabs');
    return _SDL_fabs(
      x,
    );
  }

  _dart_SDL_fabs _SDL_fabs;

  double SDL_fabsf(
    double x,
  ) {
    _SDL_fabsf ??=
        _dylib.lookupFunction<_c_SDL_fabsf, _dart_SDL_fabsf>('SDL_fabsf');
    return _SDL_fabsf(
      x,
    );
  }

  _dart_SDL_fabsf _SDL_fabsf;

  double SDL_floor(
    double x,
  ) {
    _SDL_floor ??=
        _dylib.lookupFunction<_c_SDL_floor, _dart_SDL_floor>('SDL_floor');
    return _SDL_floor(
      x,
    );
  }

  _dart_SDL_floor _SDL_floor;

  double SDL_floorf(
    double x,
  ) {
    _SDL_floorf ??=
        _dylib.lookupFunction<_c_SDL_floorf, _dart_SDL_floorf>('SDL_floorf');
    return _SDL_floorf(
      x,
    );
  }

  _dart_SDL_floorf _SDL_floorf;

  double SDL_fmod(
    double x,
    double y,
  ) {
    _SDL_fmod ??=
        _dylib.lookupFunction<_c_SDL_fmod, _dart_SDL_fmod>('SDL_fmod');
    return _SDL_fmod(
      x,
      y,
    );
  }

  _dart_SDL_fmod _SDL_fmod;

  double SDL_fmodf(
    double x,
    double y,
  ) {
    _SDL_fmodf ??=
        _dylib.lookupFunction<_c_SDL_fmodf, _dart_SDL_fmodf>('SDL_fmodf');
    return _SDL_fmodf(
      x,
      y,
    );
  }

  _dart_SDL_fmodf _SDL_fmodf;

  double SDL_log(
    double x,
  ) {
    _SDL_log ??= _dylib.lookupFunction<_c_SDL_log, _dart_SDL_log>('SDL_log');
    return _SDL_log(
      x,
    );
  }

  _dart_SDL_log _SDL_log;

  double SDL_logf(
    double x,
  ) {
    _SDL_logf ??=
        _dylib.lookupFunction<_c_SDL_logf, _dart_SDL_logf>('SDL_logf');
    return _SDL_logf(
      x,
    );
  }

  _dart_SDL_logf _SDL_logf;

  double SDL_log10(
    double x,
  ) {
    _SDL_log10 ??=
        _dylib.lookupFunction<_c_SDL_log10, _dart_SDL_log10>('SDL_log10');
    return _SDL_log10(
      x,
    );
  }

  _dart_SDL_log10 _SDL_log10;

  double SDL_log10f(
    double x,
  ) {
    _SDL_log10f ??=
        _dylib.lookupFunction<_c_SDL_log10f, _dart_SDL_log10f>('SDL_log10f');
    return _SDL_log10f(
      x,
    );
  }

  _dart_SDL_log10f _SDL_log10f;

  double SDL_pow(
    double x,
    double y,
  ) {
    _SDL_pow ??= _dylib.lookupFunction<_c_SDL_pow, _dart_SDL_pow>('SDL_pow');
    return _SDL_pow(
      x,
      y,
    );
  }

  _dart_SDL_pow _SDL_pow;

  double SDL_powf(
    double x,
    double y,
  ) {
    _SDL_powf ??=
        _dylib.lookupFunction<_c_SDL_powf, _dart_SDL_powf>('SDL_powf');
    return _SDL_powf(
      x,
      y,
    );
  }

  _dart_SDL_powf _SDL_powf;

  double SDL_scalbn(
    double x,
    int n,
  ) {
    _SDL_scalbn ??=
        _dylib.lookupFunction<_c_SDL_scalbn, _dart_SDL_scalbn>('SDL_scalbn');
    return _SDL_scalbn(
      x,
      n,
    );
  }

  _dart_SDL_scalbn _SDL_scalbn;

  double SDL_scalbnf(
    double x,
    int n,
  ) {
    _SDL_scalbnf ??=
        _dylib.lookupFunction<_c_SDL_scalbnf, _dart_SDL_scalbnf>('SDL_scalbnf');
    return _SDL_scalbnf(
      x,
      n,
    );
  }

  _dart_SDL_scalbnf _SDL_scalbnf;

  double SDL_sin(
    double x,
  ) {
    _SDL_sin ??= _dylib.lookupFunction<_c_SDL_sin, _dart_SDL_sin>('SDL_sin');
    return _SDL_sin(
      x,
    );
  }

  _dart_SDL_sin _SDL_sin;

  double SDL_sinf(
    double x,
  ) {
    _SDL_sinf ??=
        _dylib.lookupFunction<_c_SDL_sinf, _dart_SDL_sinf>('SDL_sinf');
    return _SDL_sinf(
      x,
    );
  }

  _dart_SDL_sinf _SDL_sinf;

  double SDL_sqrt(
    double x,
  ) {
    _SDL_sqrt ??=
        _dylib.lookupFunction<_c_SDL_sqrt, _dart_SDL_sqrt>('SDL_sqrt');
    return _SDL_sqrt(
      x,
    );
  }

  _dart_SDL_sqrt _SDL_sqrt;

  double SDL_sqrtf(
    double x,
  ) {
    _SDL_sqrtf ??=
        _dylib.lookupFunction<_c_SDL_sqrtf, _dart_SDL_sqrtf>('SDL_sqrtf');
    return _SDL_sqrtf(
      x,
    );
  }

  _dart_SDL_sqrtf _SDL_sqrtf;

  double SDL_tan(
    double x,
  ) {
    _SDL_tan ??= _dylib.lookupFunction<_c_SDL_tan, _dart_SDL_tan>('SDL_tan');
    return _SDL_tan(
      x,
    );
  }

  _dart_SDL_tan _SDL_tan;

  double SDL_tanf(
    double x,
  ) {
    _SDL_tanf ??=
        _dylib.lookupFunction<_c_SDL_tanf, _dart_SDL_tanf>('SDL_tanf');
    return _SDL_tanf(
      x,
    );
  }

  _dart_SDL_tanf _SDL_tanf;

  ffi.Pointer<_SDL_iconv_t> SDL_iconv_open(
    ffi.Pointer<ffi.Int8> tocode,
    ffi.Pointer<ffi.Int8> fromcode,
  ) {
    _SDL_iconv_open ??=
        _dylib.lookupFunction<_c_SDL_iconv_open, _dart_SDL_iconv_open>(
            'SDL_iconv_open');
    return _SDL_iconv_open(
      tocode,
      fromcode,
    );
  }

  _dart_SDL_iconv_open _SDL_iconv_open;

  int SDL_iconv_close(
    ffi.Pointer<_SDL_iconv_t> cd,
  ) {
    _SDL_iconv_close ??=
        _dylib.lookupFunction<_c_SDL_iconv_close, _dart_SDL_iconv_close>(
            'SDL_iconv_close');
    return _SDL_iconv_close(
      cd,
    );
  }

  _dart_SDL_iconv_close _SDL_iconv_close;

  int SDL_iconv(
    ffi.Pointer<_SDL_iconv_t> cd,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> inbuf,
    ffi.Pointer<ffi.Uint64> inbytesleft,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> outbuf,
    ffi.Pointer<ffi.Uint64> outbytesleft,
  ) {
    _SDL_iconv ??=
        _dylib.lookupFunction<_c_SDL_iconv, _dart_SDL_iconv>('SDL_iconv');
    return _SDL_iconv(
      cd,
      inbuf,
      inbytesleft,
      outbuf,
      outbytesleft,
    );
  }

  _dart_SDL_iconv _SDL_iconv;

  /// This function converts a string between encodings in one pass, returning a
  /// string that must be freed with SDL_free() or NULL on error.
  ffi.Pointer<ffi.Int8> SDL_iconv_string(
    ffi.Pointer<ffi.Int8> tocode,
    ffi.Pointer<ffi.Int8> fromcode,
    ffi.Pointer<ffi.Int8> inbuf,
    int inbytesleft,
  ) {
    _SDL_iconv_string ??=
        _dylib.lookupFunction<_c_SDL_iconv_string, _dart_SDL_iconv_string>(
            'SDL_iconv_string');
    return _SDL_iconv_string(
      tocode,
      fromcode,
      inbuf,
      inbytesleft,
    );
  }

  _dart_SDL_iconv_string _SDL_iconv_string;

  ffi.Pointer<ffi.Void> SDL_memcpy4(
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<ffi.Void> src,
    int dwords,
  ) {
    _SDL_memcpy4 ??=
        _dylib.lookupFunction<_c_SDL_memcpy4, _dart_SDL_memcpy4>('SDL_memcpy4');
    return _SDL_memcpy4(
      dst,
      src,
      dwords,
    );
  }

  _dart_SDL_memcpy4 _SDL_memcpy4;

  int SDL_SetError(
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    _SDL_SetError ??= _dylib
        .lookupFunction<_c_SDL_SetError, _dart_SDL_SetError>('SDL_SetError');
    return _SDL_SetError(
      fmt,
    );
  }

  _dart_SDL_SetError _SDL_SetError;

  ffi.Pointer<ffi.Int8> SDL_GetError() {
    _SDL_GetError ??= _dylib
        .lookupFunction<_c_SDL_GetError, _dart_SDL_GetError>('SDL_GetError');
    return _SDL_GetError();
  }

  _dart_SDL_GetError _SDL_GetError;

  void SDL_ClearError() {
    _SDL_ClearError ??=
        _dylib.lookupFunction<_c_SDL_ClearError, _dart_SDL_ClearError>(
            'SDL_ClearError');
    return _SDL_ClearError();
  }

  _dart_SDL_ClearError _SDL_ClearError;

  int SDL_Error(
    int code,
  ) {
    _SDL_Error ??=
        _dylib.lookupFunction<_c_SDL_Error, _dart_SDL_Error>('SDL_Error');
    return _SDL_Error(
      code,
    );
  }

  _dart_SDL_Error _SDL_Error;

  int SDL_Swap16(
    int x,
  ) {
    _SDL_Swap16 ??=
        _dylib.lookupFunction<_c_SDL_Swap16, _dart_SDL_Swap16>('SDL_Swap16');
    return _SDL_Swap16(
      x,
    );
  }

  _dart_SDL_Swap16 _SDL_Swap16;

  int SDL_Swap32(
    int x,
  ) {
    _SDL_Swap32 ??=
        _dylib.lookupFunction<_c_SDL_Swap32, _dart_SDL_Swap32>('SDL_Swap32');
    return _SDL_Swap32(
      x,
    );
  }

  _dart_SDL_Swap32 _SDL_Swap32;

  int SDL_Swap64(
    int x,
  ) {
    _SDL_Swap64 ??=
        _dylib.lookupFunction<_c_SDL_Swap64, _dart_SDL_Swap64>('SDL_Swap64');
    return _SDL_Swap64(
      x,
    );
  }

  _dart_SDL_Swap64 _SDL_Swap64;

  double SDL_SwapFloat(
    double x,
  ) {
    _SDL_SwapFloat ??= _dylib
        .lookupFunction<_c_SDL_SwapFloat, _dart_SDL_SwapFloat>('SDL_SwapFloat');
    return _SDL_SwapFloat(
      x,
    );
  }

  _dart_SDL_SwapFloat _SDL_SwapFloat;

  /// Create a mutex, initialized unlocked.
  ffi.Pointer<SDL_mutex> SDL_CreateMutex() {
    _SDL_CreateMutex ??=
        _dylib.lookupFunction<_c_SDL_CreateMutex, _dart_SDL_CreateMutex>(
            'SDL_CreateMutex');
    return _SDL_CreateMutex();
  }

  _dart_SDL_CreateMutex _SDL_CreateMutex;

  int SDL_LockMutex(
    ffi.Pointer<SDL_mutex> mutex,
  ) {
    _SDL_LockMutex ??= _dylib
        .lookupFunction<_c_SDL_LockMutex, _dart_SDL_LockMutex>('SDL_LockMutex');
    return _SDL_LockMutex(
      mutex,
    );
  }

  _dart_SDL_LockMutex _SDL_LockMutex;

  /// Try to lock the mutex
  ///
  /// \return 0, SDL_MUTEX_TIMEDOUT, or -1 on error
  int SDL_TryLockMutex(
    ffi.Pointer<SDL_mutex> mutex,
  ) {
    _SDL_TryLockMutex ??=
        _dylib.lookupFunction<_c_SDL_TryLockMutex, _dart_SDL_TryLockMutex>(
            'SDL_TryLockMutex');
    return _SDL_TryLockMutex(
      mutex,
    );
  }

  _dart_SDL_TryLockMutex _SDL_TryLockMutex;

  int SDL_UnlockMutex(
    ffi.Pointer<SDL_mutex> mutex,
  ) {
    _SDL_UnlockMutex ??=
        _dylib.lookupFunction<_c_SDL_UnlockMutex, _dart_SDL_UnlockMutex>(
            'SDL_UnlockMutex');
    return _SDL_UnlockMutex(
      mutex,
    );
  }

  _dart_SDL_UnlockMutex _SDL_UnlockMutex;

  /// Destroy a mutex.
  void SDL_DestroyMutex(
    ffi.Pointer<SDL_mutex> mutex,
  ) {
    _SDL_DestroyMutex ??=
        _dylib.lookupFunction<_c_SDL_DestroyMutex, _dart_SDL_DestroyMutex>(
            'SDL_DestroyMutex');
    return _SDL_DestroyMutex(
      mutex,
    );
  }

  _dart_SDL_DestroyMutex _SDL_DestroyMutex;

  /// Create a semaphore, initialized with value, returns NULL on failure.
  ffi.Pointer<SDL_semaphore> SDL_CreateSemaphore(
    int initial_value,
  ) {
    _SDL_CreateSemaphore ??= _dylib.lookupFunction<_c_SDL_CreateSemaphore,
        _dart_SDL_CreateSemaphore>('SDL_CreateSemaphore');
    return _SDL_CreateSemaphore(
      initial_value,
    );
  }

  _dart_SDL_CreateSemaphore _SDL_CreateSemaphore;

  /// Destroy a semaphore.
  void SDL_DestroySemaphore(
    ffi.Pointer<SDL_semaphore> sem,
  ) {
    _SDL_DestroySemaphore ??= _dylib.lookupFunction<_c_SDL_DestroySemaphore,
        _dart_SDL_DestroySemaphore>('SDL_DestroySemaphore');
    return _SDL_DestroySemaphore(
      sem,
    );
  }

  _dart_SDL_DestroySemaphore _SDL_DestroySemaphore;

  /// This function suspends the calling thread until the semaphore pointed
  /// to by \c sem has a positive count. It then atomically decreases the
  /// semaphore count.
  int SDL_SemWait(
    ffi.Pointer<SDL_semaphore> sem,
  ) {
    _SDL_SemWait ??=
        _dylib.lookupFunction<_c_SDL_SemWait, _dart_SDL_SemWait>('SDL_SemWait');
    return _SDL_SemWait(
      sem,
    );
  }

  _dart_SDL_SemWait _SDL_SemWait;

  /// Non-blocking variant of SDL_SemWait().
  ///
  /// \return 0 if the wait succeeds, ::SDL_MUTEX_TIMEDOUT if the wait would
  /// block, and -1 on error.
  int SDL_SemTryWait(
    ffi.Pointer<SDL_semaphore> sem,
  ) {
    _SDL_SemTryWait ??=
        _dylib.lookupFunction<_c_SDL_SemTryWait, _dart_SDL_SemTryWait>(
            'SDL_SemTryWait');
    return _SDL_SemTryWait(
      sem,
    );
  }

  _dart_SDL_SemTryWait _SDL_SemTryWait;

  /// Variant of SDL_SemWait() with a timeout in milliseconds.
  ///
  /// \return 0 if the wait succeeds, ::SDL_MUTEX_TIMEDOUT if the wait does not
  /// succeed in the allotted time, and -1 on error.
  ///
  /// \warning On some platforms this function is implemented by looping with a
  /// delay of 1 ms, and so should be avoided if possible.
  int SDL_SemWaitTimeout(
    ffi.Pointer<SDL_semaphore> sem,
    int ms,
  ) {
    _SDL_SemWaitTimeout ??=
        _dylib.lookupFunction<_c_SDL_SemWaitTimeout, _dart_SDL_SemWaitTimeout>(
            'SDL_SemWaitTimeout');
    return _SDL_SemWaitTimeout(
      sem,
      ms,
    );
  }

  _dart_SDL_SemWaitTimeout _SDL_SemWaitTimeout;

  /// Atomically increases the semaphore's count (not blocking).
  ///
  /// \return 0, or -1 on error.
  int SDL_SemPost(
    ffi.Pointer<SDL_semaphore> sem,
  ) {
    _SDL_SemPost ??=
        _dylib.lookupFunction<_c_SDL_SemPost, _dart_SDL_SemPost>('SDL_SemPost');
    return _SDL_SemPost(
      sem,
    );
  }

  _dart_SDL_SemPost _SDL_SemPost;

  /// Returns the current count of the semaphore.
  int SDL_SemValue(
    ffi.Pointer<SDL_semaphore> sem,
  ) {
    _SDL_SemValue ??= _dylib
        .lookupFunction<_c_SDL_SemValue, _dart_SDL_SemValue>('SDL_SemValue');
    return _SDL_SemValue(
      sem,
    );
  }

  _dart_SDL_SemValue _SDL_SemValue;

  /// Create a condition variable.
  ///
  /// Typical use of condition variables:
  ///
  /// Thread A:
  /// SDL_LockMutex(lock);
  /// while ( ! condition ) {
  /// SDL_CondWait(cond, lock);
  /// }
  /// SDL_UnlockMutex(lock);
  ///
  /// Thread B:
  /// SDL_LockMutex(lock);
  /// ...
  /// condition = true;
  /// ...
  /// SDL_CondSignal(cond);
  /// SDL_UnlockMutex(lock);
  ///
  /// There is some discussion whether to signal the condition variable
  /// with the mutex locked or not.  There is some potential performance
  /// benefit to unlocking first on some platforms, but there are some
  /// potential race conditions depending on how your code is structured.
  ///
  /// In general it's safer to signal the condition variable while the
  /// mutex is locked.
  ffi.Pointer<SDL_cond> SDL_CreateCond() {
    _SDL_CreateCond ??=
        _dylib.lookupFunction<_c_SDL_CreateCond, _dart_SDL_CreateCond>(
            'SDL_CreateCond');
    return _SDL_CreateCond();
  }

  _dart_SDL_CreateCond _SDL_CreateCond;

  /// Destroy a condition variable.
  void SDL_DestroyCond(
    ffi.Pointer<SDL_cond> cond,
  ) {
    _SDL_DestroyCond ??=
        _dylib.lookupFunction<_c_SDL_DestroyCond, _dart_SDL_DestroyCond>(
            'SDL_DestroyCond');
    return _SDL_DestroyCond(
      cond,
    );
  }

  _dart_SDL_DestroyCond _SDL_DestroyCond;

  /// Restart one of the threads that are waiting on the condition variable.
  ///
  /// \return 0 or -1 on error.
  int SDL_CondSignal(
    ffi.Pointer<SDL_cond> cond,
  ) {
    _SDL_CondSignal ??=
        _dylib.lookupFunction<_c_SDL_CondSignal, _dart_SDL_CondSignal>(
            'SDL_CondSignal');
    return _SDL_CondSignal(
      cond,
    );
  }

  _dart_SDL_CondSignal _SDL_CondSignal;

  /// Restart all threads that are waiting on the condition variable.
  ///
  /// \return 0 or -1 on error.
  int SDL_CondBroadcast(
    ffi.Pointer<SDL_cond> cond,
  ) {
    _SDL_CondBroadcast ??=
        _dylib.lookupFunction<_c_SDL_CondBroadcast, _dart_SDL_CondBroadcast>(
            'SDL_CondBroadcast');
    return _SDL_CondBroadcast(
      cond,
    );
  }

  _dart_SDL_CondBroadcast _SDL_CondBroadcast;

  /// Wait on the condition variable, unlocking the provided mutex.
  ///
  /// \warning The mutex must be locked before entering this function!
  ///
  /// The mutex is re-locked once the condition variable is signaled.
  ///
  /// \return 0 when it is signaled, or -1 on error.
  int SDL_CondWait(
    ffi.Pointer<SDL_cond> cond,
    ffi.Pointer<SDL_mutex> mutex,
  ) {
    _SDL_CondWait ??= _dylib
        .lookupFunction<_c_SDL_CondWait, _dart_SDL_CondWait>('SDL_CondWait');
    return _SDL_CondWait(
      cond,
      mutex,
    );
  }

  _dart_SDL_CondWait _SDL_CondWait;

  /// Waits for at most \c ms milliseconds, and returns 0 if the condition
  /// variable is signaled, ::SDL_MUTEX_TIMEDOUT if the condition is not
  /// signaled in the allotted time, and -1 on error.
  ///
  /// \warning On some platforms this function is implemented by looping with a
  /// delay of 1 ms, and so should be avoided if possible.
  int SDL_CondWaitTimeout(
    ffi.Pointer<SDL_cond> cond,
    ffi.Pointer<SDL_mutex> mutex,
    int ms,
  ) {
    _SDL_CondWaitTimeout ??= _dylib.lookupFunction<_c_SDL_CondWaitTimeout,
        _dart_SDL_CondWaitTimeout>('SDL_CondWaitTimeout');
    return _SDL_CondWaitTimeout(
      cond,
      mutex,
      ms,
    );
  }

  _dart_SDL_CondWaitTimeout _SDL_CondWaitTimeout;

  /// \brief Try to lock a spin lock by setting it to a non-zero value.
  ///
  /// \param lock Points to the lock.
  ///
  /// \return SDL_TRUE if the lock succeeded, SDL_FALSE if the lock is already held.
  int SDL_AtomicTryLock(
    ffi.Pointer<ffi.Int32> lock,
  ) {
    _SDL_AtomicTryLock ??=
        _dylib.lookupFunction<_c_SDL_AtomicTryLock, _dart_SDL_AtomicTryLock>(
            'SDL_AtomicTryLock');
    return _SDL_AtomicTryLock(
      lock,
    );
  }

  _dart_SDL_AtomicTryLock _SDL_AtomicTryLock;

  /// \brief Lock a spin lock by setting it to a non-zero value.
  ///
  /// \param lock Points to the lock.
  void SDL_AtomicLock(
    ffi.Pointer<ffi.Int32> lock,
  ) {
    _SDL_AtomicLock ??=
        _dylib.lookupFunction<_c_SDL_AtomicLock, _dart_SDL_AtomicLock>(
            'SDL_AtomicLock');
    return _SDL_AtomicLock(
      lock,
    );
  }

  _dart_SDL_AtomicLock _SDL_AtomicLock;

  /// \brief Unlock a spin lock by setting it to 0. Always returns immediately
  ///
  /// \param lock Points to the lock.
  void SDL_AtomicUnlock(
    ffi.Pointer<ffi.Int32> lock,
  ) {
    _SDL_AtomicUnlock ??=
        _dylib.lookupFunction<_c_SDL_AtomicUnlock, _dart_SDL_AtomicUnlock>(
            'SDL_AtomicUnlock');
    return _SDL_AtomicUnlock(
      lock,
    );
  }

  _dart_SDL_AtomicUnlock _SDL_AtomicUnlock;

  /// Memory barriers are designed to prevent reads and writes from being
  /// reordered by the compiler and being seen out of order on multi-core CPUs.
  ///
  /// A typical pattern would be for thread A to write some data and a flag,
  /// and for thread B to read the flag and get the data. In this case you
  /// would insert a release barrier between writing the data and the flag,
  /// guaranteeing that the data write completes no later than the flag is
  /// written, and you would insert an acquire barrier between reading the
  /// flag and reading the data, to ensure that all the reads associated
  /// with the flag have completed.
  ///
  /// In this pattern you should always see a release barrier paired with
  /// an acquire barrier and you should gate the data reads/writes with a
  /// single flag variable.
  ///
  /// For more information on these semantics, take a look at the blog post:
  /// http://preshing.com/20120913/acquire-and-release-semantics
  void SDL_MemoryBarrierReleaseFunction() {
    _SDL_MemoryBarrierReleaseFunction ??= _dylib.lookupFunction<
            _c_SDL_MemoryBarrierReleaseFunction,
            _dart_SDL_MemoryBarrierReleaseFunction>(
        'SDL_MemoryBarrierReleaseFunction');
    return _SDL_MemoryBarrierReleaseFunction();
  }

  _dart_SDL_MemoryBarrierReleaseFunction _SDL_MemoryBarrierReleaseFunction;

  void SDL_MemoryBarrierAcquireFunction() {
    _SDL_MemoryBarrierAcquireFunction ??= _dylib.lookupFunction<
            _c_SDL_MemoryBarrierAcquireFunction,
            _dart_SDL_MemoryBarrierAcquireFunction>(
        'SDL_MemoryBarrierAcquireFunction');
    return _SDL_MemoryBarrierAcquireFunction();
  }

  _dart_SDL_MemoryBarrierAcquireFunction _SDL_MemoryBarrierAcquireFunction;

  /// \brief Set an atomic variable to a new value if it is currently an old value.
  ///
  /// \return SDL_TRUE if the atomic variable was set, SDL_FALSE otherwise.
  ///
  /// \note If you don't know what this function is for, you shouldn't use it!
  int SDL_AtomicCAS(
    ffi.Pointer<SDL_atomic_t> a,
    int oldval,
    int newval,
  ) {
    _SDL_AtomicCAS ??= _dylib
        .lookupFunction<_c_SDL_AtomicCAS, _dart_SDL_AtomicCAS>('SDL_AtomicCAS');
    return _SDL_AtomicCAS(
      a,
      oldval,
      newval,
    );
  }

  _dart_SDL_AtomicCAS _SDL_AtomicCAS;

  /// \brief Set an atomic variable to a value.
  ///
  /// \return The previous value of the atomic variable.
  int SDL_AtomicSet(
    ffi.Pointer<SDL_atomic_t> a,
    int v,
  ) {
    _SDL_AtomicSet ??= _dylib
        .lookupFunction<_c_SDL_AtomicSet, _dart_SDL_AtomicSet>('SDL_AtomicSet');
    return _SDL_AtomicSet(
      a,
      v,
    );
  }

  _dart_SDL_AtomicSet _SDL_AtomicSet;

  /// \brief Get the value of an atomic variable
  int SDL_AtomicGet(
    ffi.Pointer<SDL_atomic_t> a,
  ) {
    _SDL_AtomicGet ??= _dylib
        .lookupFunction<_c_SDL_AtomicGet, _dart_SDL_AtomicGet>('SDL_AtomicGet');
    return _SDL_AtomicGet(
      a,
    );
  }

  _dart_SDL_AtomicGet _SDL_AtomicGet;

  /// \brief Add to an atomic variable.
  ///
  /// \return The previous value of the atomic variable.
  ///
  /// \note This same style can be used for any number operation
  int SDL_AtomicAdd(
    ffi.Pointer<SDL_atomic_t> a,
    int v,
  ) {
    _SDL_AtomicAdd ??= _dylib
        .lookupFunction<_c_SDL_AtomicAdd, _dart_SDL_AtomicAdd>('SDL_AtomicAdd');
    return _SDL_AtomicAdd(
      a,
      v,
    );
  }

  _dart_SDL_AtomicAdd _SDL_AtomicAdd;

  /// \brief Set a pointer to a new value if it is currently an old value.
  ///
  /// \return SDL_TRUE if the pointer was set, SDL_FALSE otherwise.
  ///
  /// \note If you don't know what this function is for, you shouldn't use it!
  int SDL_AtomicCASPtr(
    ffi.Pointer<ffi.Pointer<ffi.Void>> a,
    ffi.Pointer<ffi.Void> oldval,
    ffi.Pointer<ffi.Void> newval,
  ) {
    _SDL_AtomicCASPtr ??=
        _dylib.lookupFunction<_c_SDL_AtomicCASPtr, _dart_SDL_AtomicCASPtr>(
            'SDL_AtomicCASPtr');
    return _SDL_AtomicCASPtr(
      a,
      oldval,
      newval,
    );
  }

  _dart_SDL_AtomicCASPtr _SDL_AtomicCASPtr;

  /// \brief Set a pointer to a value atomically.
  ///
  /// \return The previous value of the pointer.
  ffi.Pointer<ffi.Void> SDL_AtomicSetPtr(
    ffi.Pointer<ffi.Pointer<ffi.Void>> a,
    ffi.Pointer<ffi.Void> v,
  ) {
    _SDL_AtomicSetPtr ??=
        _dylib.lookupFunction<_c_SDL_AtomicSetPtr, _dart_SDL_AtomicSetPtr>(
            'SDL_AtomicSetPtr');
    return _SDL_AtomicSetPtr(
      a,
      v,
    );
  }

  _dart_SDL_AtomicSetPtr _SDL_AtomicSetPtr;

  /// \brief Get the value of a pointer atomically.
  ffi.Pointer<ffi.Void> SDL_AtomicGetPtr(
    ffi.Pointer<ffi.Pointer<ffi.Void>> a,
  ) {
    _SDL_AtomicGetPtr ??=
        _dylib.lookupFunction<_c_SDL_AtomicGetPtr, _dart_SDL_AtomicGetPtr>(
            'SDL_AtomicGetPtr');
    return _SDL_AtomicGetPtr(
      a,
    );
  }

  _dart_SDL_AtomicGetPtr _SDL_AtomicGetPtr;

  /// Create a thread with a default stack size.
  ///
  /// This is equivalent to calling:
  /// SDL_CreateThreadWithStackSize(fn, name, 0, data);
  ffi.Pointer<SDL_Thread> SDL_CreateThread(
    ffi.Pointer<ffi.NativeFunction<SDL_ThreadFunction>> fn,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Void> data,
  ) {
    _SDL_CreateThread ??=
        _dylib.lookupFunction<_c_SDL_CreateThread, _dart_SDL_CreateThread>(
            'SDL_CreateThread');
    return _SDL_CreateThread(
      fn,
      name,
      data,
    );
  }

  _dart_SDL_CreateThread _SDL_CreateThread;

  /// Create a thread.
  ///
  /// Thread naming is a little complicated: Most systems have very small
  /// limits for the string length (Haiku has 32 bytes, Linux currently has 16,
  /// Visual C++ 6.0 has nine!), and possibly other arbitrary rules. You'll
  /// have to see what happens with your system's debugger. The name should be
  /// UTF-8 (but using the naming limits of C identifiers is a better bet).
  /// There are no requirements for thread naming conventions, so long as the
  /// string is null-terminated UTF-8, but these guidelines are helpful in
  /// choosing a name:
  ///
  /// http://stackoverflow.com/questions/149932/naming-conventions-for-threads
  ///
  /// If a system imposes requirements, SDL will try to munge the string for
  /// it (truncate, etc), but the original string contents will be available
  /// from SDL_GetThreadName().
  ///
  /// The size (in bytes) of the new stack can be specified. Zero means "use
  /// the system default" which might be wildly different between platforms
  /// (x86 Linux generally defaults to eight megabytes, an embedded device
  /// might be a few kilobytes instead).
  ///
  /// In SDL 2.1, stacksize will be folded into the original SDL_CreateThread
  /// function.
  ffi.Pointer<SDL_Thread> SDL_CreateThreadWithStackSize(
    ffi.Pointer<ffi.NativeFunction<SDL_ThreadFunction>> fn,
    ffi.Pointer<ffi.Int8> name,
    int stacksize,
    ffi.Pointer<ffi.Void> data,
  ) {
    _SDL_CreateThreadWithStackSize ??= _dylib.lookupFunction<
        _c_SDL_CreateThreadWithStackSize,
        _dart_SDL_CreateThreadWithStackSize>('SDL_CreateThreadWithStackSize');
    return _SDL_CreateThreadWithStackSize(
      fn,
      name,
      stacksize,
      data,
    );
  }

  _dart_SDL_CreateThreadWithStackSize _SDL_CreateThreadWithStackSize;

  /// Get the thread name, as it was specified in SDL_CreateThread().
  /// This function returns a pointer to a UTF-8 string that names the
  /// specified thread, or NULL if it doesn't have a name. This is internal
  /// memory, not to be free()'d by the caller, and remains valid until the
  /// specified thread is cleaned up by SDL_WaitThread().
  ffi.Pointer<ffi.Int8> SDL_GetThreadName(
    ffi.Pointer<SDL_Thread> thread,
  ) {
    _SDL_GetThreadName ??=
        _dylib.lookupFunction<_c_SDL_GetThreadName, _dart_SDL_GetThreadName>(
            'SDL_GetThreadName');
    return _SDL_GetThreadName(
      thread,
    );
  }

  _dart_SDL_GetThreadName _SDL_GetThreadName;

  /// Get the thread identifier for the current thread.
  int SDL_ThreadID() {
    _SDL_ThreadID ??= _dylib
        .lookupFunction<_c_SDL_ThreadID, _dart_SDL_ThreadID>('SDL_ThreadID');
    return _SDL_ThreadID();
  }

  _dart_SDL_ThreadID _SDL_ThreadID;

  /// Get the thread identifier for the specified thread.
  ///
  /// Equivalent to SDL_ThreadID() if the specified thread is NULL.
  int SDL_GetThreadID(
    ffi.Pointer<SDL_Thread> thread,
  ) {
    _SDL_GetThreadID ??=
        _dylib.lookupFunction<_c_SDL_GetThreadID, _dart_SDL_GetThreadID>(
            'SDL_GetThreadID');
    return _SDL_GetThreadID(
      thread,
    );
  }

  _dart_SDL_GetThreadID _SDL_GetThreadID;

  /// Set the priority for the current thread
  int SDL_SetThreadPriority(
    int priority,
  ) {
    _SDL_SetThreadPriority ??= _dylib.lookupFunction<_c_SDL_SetThreadPriority,
        _dart_SDL_SetThreadPriority>('SDL_SetThreadPriority');
    return _SDL_SetThreadPriority(
      priority,
    );
  }

  _dart_SDL_SetThreadPriority _SDL_SetThreadPriority;

  /// Wait for a thread to finish. Threads that haven't been detached will
  /// remain (as a "zombie") until this function cleans them up. Not doing so
  /// is a resource leak.
  ///
  /// Once a thread has been cleaned up through this function, the SDL_Thread
  /// that references it becomes invalid and should not be referenced again.
  /// As such, only one thread may call SDL_WaitThread() on another.
  ///
  /// The return code for the thread function is placed in the area
  /// pointed to by \c status, if \c status is not NULL.
  ///
  /// You may not wait on a thread that has been used in a call to
  /// SDL_DetachThread(). Use either that function or this one, but not
  /// both, or behavior is undefined.
  ///
  /// It is safe to pass NULL to this function; it is a no-op.
  void SDL_WaitThread(
    ffi.Pointer<SDL_Thread> thread,
    ffi.Pointer<ffi.Int32> status,
  ) {
    _SDL_WaitThread ??=
        _dylib.lookupFunction<_c_SDL_WaitThread, _dart_SDL_WaitThread>(
            'SDL_WaitThread');
    return _SDL_WaitThread(
      thread,
      status,
    );
  }

  _dart_SDL_WaitThread _SDL_WaitThread;

  /// A thread may be "detached" to signify that it should not remain until
  /// another thread has called SDL_WaitThread() on it. Detaching a thread
  /// is useful for long-running threads that nothing needs to synchronize
  /// with or further manage. When a detached thread is done, it simply
  /// goes away.
  ///
  /// There is no way to recover the return code of a detached thread. If you
  /// need this, don't detach the thread and instead use SDL_WaitThread().
  ///
  /// Once a thread is detached, you should usually assume the SDL_Thread isn't
  /// safe to reference again, as it will become invalid immediately upon
  /// the detached thread's exit, instead of remaining until someone has called
  /// SDL_WaitThread() to finally clean it up. As such, don't detach the same
  /// thread more than once.
  ///
  /// If a thread has already exited when passed to SDL_DetachThread(), it will
  /// stop waiting for a call to SDL_WaitThread() and clean up immediately.
  /// It is not safe to detach a thread that might be used with SDL_WaitThread().
  ///
  /// You may not call SDL_WaitThread() on a thread that has been detached.
  /// Use either that function or this one, but not both, or behavior is
  /// undefined.
  ///
  /// It is safe to pass NULL to this function; it is a no-op.
  void SDL_DetachThread(
    ffi.Pointer<SDL_Thread> thread,
  ) {
    _SDL_DetachThread ??=
        _dylib.lookupFunction<_c_SDL_DetachThread, _dart_SDL_DetachThread>(
            'SDL_DetachThread');
    return _SDL_DetachThread(
      thread,
    );
  }

  _dart_SDL_DetachThread _SDL_DetachThread;

  /// \brief Create an identifier that is globally visible to all threads but refers to data that is thread-specific.
  ///
  /// \return The newly created thread local storage identifier, or 0 on error
  ///
  /// \code
  /// static SDL_SpinLock tls_lock;
  /// static SDL_TLSID thread_local_storage;
  ///
  /// void SetMyThreadData(void *value)
  /// {
  /// if (!thread_local_storage) {
  /// SDL_AtomicLock(&tls_lock);
  /// if (!thread_local_storage) {
  /// thread_local_storage = SDL_TLSCreate();
  /// }
  /// SDL_AtomicUnlock(&tls_lock);
  /// }
  /// SDL_TLSSet(thread_local_storage, value, 0);
  /// }
  ///
  /// void *GetMyThreadData(void)
  /// {
  /// return SDL_TLSGet(thread_local_storage);
  /// }
  /// \endcode
  ///
  /// \sa SDL_TLSGet()
  /// \sa SDL_TLSSet()
  int SDL_TLSCreate() {
    _SDL_TLSCreate ??= _dylib
        .lookupFunction<_c_SDL_TLSCreate, _dart_SDL_TLSCreate>('SDL_TLSCreate');
    return _SDL_TLSCreate();
  }

  _dart_SDL_TLSCreate _SDL_TLSCreate;

  /// \brief Get the value associated with a thread local storage ID for the current thread.
  ///
  /// \param id The thread local storage ID
  ///
  /// \return The value associated with the ID for the current thread, or NULL if no value has been set.
  ///
  /// \sa SDL_TLSCreate()
  /// \sa SDL_TLSSet()
  ffi.Pointer<ffi.Void> SDL_TLSGet(
    int id,
  ) {
    _SDL_TLSGet ??=
        _dylib.lookupFunction<_c_SDL_TLSGet, _dart_SDL_TLSGet>('SDL_TLSGet');
    return _SDL_TLSGet(
      id,
    );
  }

  _dart_SDL_TLSGet _SDL_TLSGet;

  /// \brief Set the value associated with a thread local storage ID for the current thread.
  ///
  /// \param id The thread local storage ID
  /// \param value The value to associate with the ID for the current thread
  /// \param destructor A function called when the thread exits, to free the value.
  ///
  /// \return 0 on success, -1 on error
  ///
  /// \sa SDL_TLSCreate()
  /// \sa SDL_TLSGet()
  int SDL_TLSSet(
    int id,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.NativeFunction<_typedefC_5>> destructor,
  ) {
    _SDL_TLSSet ??=
        _dylib.lookupFunction<_c_SDL_TLSSet, _dart_SDL_TLSSet>('SDL_TLSSet');
    return _SDL_TLSSet(
      id,
      value,
      destructor,
    );
  }

  _dart_SDL_TLSSet _SDL_TLSSet;

  ffi.Pointer<SDL_RWops> SDL_RWFromFile(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int8> mode,
  ) {
    _SDL_RWFromFile ??=
        _dylib.lookupFunction<_c_SDL_RWFromFile, _dart_SDL_RWFromFile>(
            'SDL_RWFromFile');
    return _SDL_RWFromFile(
      file,
      mode,
    );
  }

  _dart_SDL_RWFromFile _SDL_RWFromFile;

  ffi.Pointer<SDL_RWops> SDL_RWFromFP(
    ffi.Pointer<_IO_FILE> fp,
    int autoclose,
  ) {
    _SDL_RWFromFP ??= _dylib
        .lookupFunction<_c_SDL_RWFromFP, _dart_SDL_RWFromFP>('SDL_RWFromFP');
    return _SDL_RWFromFP(
      fp,
      autoclose,
    );
  }

  _dart_SDL_RWFromFP _SDL_RWFromFP;

  ffi.Pointer<SDL_RWops> SDL_RWFromMem(
    ffi.Pointer<ffi.Void> mem,
    int size,
  ) {
    _SDL_RWFromMem ??= _dylib
        .lookupFunction<_c_SDL_RWFromMem, _dart_SDL_RWFromMem>('SDL_RWFromMem');
    return _SDL_RWFromMem(
      mem,
      size,
    );
  }

  _dart_SDL_RWFromMem _SDL_RWFromMem;

  ffi.Pointer<SDL_RWops> SDL_RWFromConstMem(
    ffi.Pointer<ffi.Void> mem,
    int size,
  ) {
    _SDL_RWFromConstMem ??=
        _dylib.lookupFunction<_c_SDL_RWFromConstMem, _dart_SDL_RWFromConstMem>(
            'SDL_RWFromConstMem');
    return _SDL_RWFromConstMem(
      mem,
      size,
    );
  }

  _dart_SDL_RWFromConstMem _SDL_RWFromConstMem;

  ffi.Pointer<SDL_RWops> SDL_AllocRW() {
    _SDL_AllocRW ??=
        _dylib.lookupFunction<_c_SDL_AllocRW, _dart_SDL_AllocRW>('SDL_AllocRW');
    return _SDL_AllocRW();
  }

  _dart_SDL_AllocRW _SDL_AllocRW;

  void SDL_FreeRW(
    ffi.Pointer<SDL_RWops> area,
  ) {
    _SDL_FreeRW ??=
        _dylib.lookupFunction<_c_SDL_FreeRW, _dart_SDL_FreeRW>('SDL_FreeRW');
    return _SDL_FreeRW(
      area,
    );
  }

  _dart_SDL_FreeRW _SDL_FreeRW;

  /// Return the size of the file in this rwops, or -1 if unknown
  int SDL_RWsize(
    ffi.Pointer<SDL_RWops> context,
  ) {
    _SDL_RWsize ??=
        _dylib.lookupFunction<_c_SDL_RWsize, _dart_SDL_RWsize>('SDL_RWsize');
    return _SDL_RWsize(
      context,
    );
  }

  _dart_SDL_RWsize _SDL_RWsize;

  /// Seek to \c offset relative to \c whence, one of stdio's whence values:
  /// RW_SEEK_SET, RW_SEEK_CUR, RW_SEEK_END
  ///
  /// \return the final offset in the data stream, or -1 on error.
  int SDL_RWseek(
    ffi.Pointer<SDL_RWops> context,
    int offset,
    int whence,
  ) {
    _SDL_RWseek ??=
        _dylib.lookupFunction<_c_SDL_RWseek, _dart_SDL_RWseek>('SDL_RWseek');
    return _SDL_RWseek(
      context,
      offset,
      whence,
    );
  }

  _dart_SDL_RWseek _SDL_RWseek;

  /// Return the current offset in the data stream, or -1 on error.
  int SDL_RWtell(
    ffi.Pointer<SDL_RWops> context,
  ) {
    _SDL_RWtell ??=
        _dylib.lookupFunction<_c_SDL_RWtell, _dart_SDL_RWtell>('SDL_RWtell');
    return _SDL_RWtell(
      context,
    );
  }

  _dart_SDL_RWtell _SDL_RWtell;

  /// Read up to \c maxnum objects each of size \c size from the data
  /// stream to the area pointed at by \c ptr.
  ///
  /// \return the number of objects read, or 0 at error or end of file.
  int SDL_RWread(
    ffi.Pointer<SDL_RWops> context,
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int maxnum,
  ) {
    _SDL_RWread ??=
        _dylib.lookupFunction<_c_SDL_RWread, _dart_SDL_RWread>('SDL_RWread');
    return _SDL_RWread(
      context,
      ptr,
      size,
      maxnum,
    );
  }

  _dart_SDL_RWread _SDL_RWread;

  /// Write exactly \c num objects each of size \c size from the area
  /// pointed at by \c ptr to data stream.
  ///
  /// \return the number of objects written, or 0 at error or end of file.
  int SDL_RWwrite(
    ffi.Pointer<SDL_RWops> context,
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int num,
  ) {
    _SDL_RWwrite ??=
        _dylib.lookupFunction<_c_SDL_RWwrite, _dart_SDL_RWwrite>('SDL_RWwrite');
    return _SDL_RWwrite(
      context,
      ptr,
      size,
      num,
    );
  }

  _dart_SDL_RWwrite _SDL_RWwrite;

  /// Close and free an allocated SDL_RWops structure.
  ///
  /// \return 0 if successful or -1 on write error when flushing data.
  int SDL_RWclose(
    ffi.Pointer<SDL_RWops> context,
  ) {
    _SDL_RWclose ??=
        _dylib.lookupFunction<_c_SDL_RWclose, _dart_SDL_RWclose>('SDL_RWclose');
    return _SDL_RWclose(
      context,
    );
  }

  _dart_SDL_RWclose _SDL_RWclose;

  /// Load all the data from an SDL data stream.
  ///
  /// The data is allocated with a zero byte at the end (null terminated)
  ///
  /// If \c datasize is not NULL, it is filled with the size of the data read.
  ///
  /// If \c freesrc is non-zero, the stream will be closed after being read.
  ///
  /// The data should be freed with SDL_free().
  ///
  /// \return the data, or NULL if there was an error.
  ffi.Pointer<ffi.Void> SDL_LoadFile_RW(
    ffi.Pointer<SDL_RWops> src,
    ffi.Pointer<ffi.Uint64> datasize,
    int freesrc,
  ) {
    _SDL_LoadFile_RW ??=
        _dylib.lookupFunction<_c_SDL_LoadFile_RW, _dart_SDL_LoadFile_RW>(
            'SDL_LoadFile_RW');
    return _SDL_LoadFile_RW(
      src,
      datasize,
      freesrc,
    );
  }

  _dart_SDL_LoadFile_RW _SDL_LoadFile_RW;

  /// Load an entire file.
  ///
  /// The data is allocated with a zero byte at the end (null terminated)
  ///
  /// If \c datasize is not NULL, it is filled with the size of the data read.
  ///
  /// If \c freesrc is non-zero, the stream will be closed after being read.
  ///
  /// The data should be freed with SDL_free().
  ///
  /// \return the data, or NULL if there was an error.
  ffi.Pointer<ffi.Void> SDL_LoadFile(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Uint64> datasize,
  ) {
    _SDL_LoadFile ??= _dylib
        .lookupFunction<_c_SDL_LoadFile, _dart_SDL_LoadFile>('SDL_LoadFile');
    return _SDL_LoadFile(
      file,
      datasize,
    );
  }

  _dart_SDL_LoadFile _SDL_LoadFile;

  int SDL_ReadU8(
    ffi.Pointer<SDL_RWops> src,
  ) {
    _SDL_ReadU8 ??=
        _dylib.lookupFunction<_c_SDL_ReadU8, _dart_SDL_ReadU8>('SDL_ReadU8');
    return _SDL_ReadU8(
      src,
    );
  }

  _dart_SDL_ReadU8 _SDL_ReadU8;

  int SDL_ReadLE16(
    ffi.Pointer<SDL_RWops> src,
  ) {
    _SDL_ReadLE16 ??= _dylib
        .lookupFunction<_c_SDL_ReadLE16, _dart_SDL_ReadLE16>('SDL_ReadLE16');
    return _SDL_ReadLE16(
      src,
    );
  }

  _dart_SDL_ReadLE16 _SDL_ReadLE16;

  int SDL_ReadBE16(
    ffi.Pointer<SDL_RWops> src,
  ) {
    _SDL_ReadBE16 ??= _dylib
        .lookupFunction<_c_SDL_ReadBE16, _dart_SDL_ReadBE16>('SDL_ReadBE16');
    return _SDL_ReadBE16(
      src,
    );
  }

  _dart_SDL_ReadBE16 _SDL_ReadBE16;

  int SDL_ReadLE32(
    ffi.Pointer<SDL_RWops> src,
  ) {
    _SDL_ReadLE32 ??= _dylib
        .lookupFunction<_c_SDL_ReadLE32, _dart_SDL_ReadLE32>('SDL_ReadLE32');
    return _SDL_ReadLE32(
      src,
    );
  }

  _dart_SDL_ReadLE32 _SDL_ReadLE32;

  int SDL_ReadBE32(
    ffi.Pointer<SDL_RWops> src,
  ) {
    _SDL_ReadBE32 ??= _dylib
        .lookupFunction<_c_SDL_ReadBE32, _dart_SDL_ReadBE32>('SDL_ReadBE32');
    return _SDL_ReadBE32(
      src,
    );
  }

  _dart_SDL_ReadBE32 _SDL_ReadBE32;

  int SDL_ReadLE64(
    ffi.Pointer<SDL_RWops> src,
  ) {
    _SDL_ReadLE64 ??= _dylib
        .lookupFunction<_c_SDL_ReadLE64, _dart_SDL_ReadLE64>('SDL_ReadLE64');
    return _SDL_ReadLE64(
      src,
    );
  }

  _dart_SDL_ReadLE64 _SDL_ReadLE64;

  int SDL_ReadBE64(
    ffi.Pointer<SDL_RWops> src,
  ) {
    _SDL_ReadBE64 ??= _dylib
        .lookupFunction<_c_SDL_ReadBE64, _dart_SDL_ReadBE64>('SDL_ReadBE64');
    return _SDL_ReadBE64(
      src,
    );
  }

  _dart_SDL_ReadBE64 _SDL_ReadBE64;

  int SDL_WriteU8(
    ffi.Pointer<SDL_RWops> dst,
    int value,
  ) {
    _SDL_WriteU8 ??=
        _dylib.lookupFunction<_c_SDL_WriteU8, _dart_SDL_WriteU8>('SDL_WriteU8');
    return _SDL_WriteU8(
      dst,
      value,
    );
  }

  _dart_SDL_WriteU8 _SDL_WriteU8;

  int SDL_WriteLE16(
    ffi.Pointer<SDL_RWops> dst,
    int value,
  ) {
    _SDL_WriteLE16 ??= _dylib
        .lookupFunction<_c_SDL_WriteLE16, _dart_SDL_WriteLE16>('SDL_WriteLE16');
    return _SDL_WriteLE16(
      dst,
      value,
    );
  }

  _dart_SDL_WriteLE16 _SDL_WriteLE16;

  int SDL_WriteBE16(
    ffi.Pointer<SDL_RWops> dst,
    int value,
  ) {
    _SDL_WriteBE16 ??= _dylib
        .lookupFunction<_c_SDL_WriteBE16, _dart_SDL_WriteBE16>('SDL_WriteBE16');
    return _SDL_WriteBE16(
      dst,
      value,
    );
  }

  _dart_SDL_WriteBE16 _SDL_WriteBE16;

  int SDL_WriteLE32(
    ffi.Pointer<SDL_RWops> dst,
    int value,
  ) {
    _SDL_WriteLE32 ??= _dylib
        .lookupFunction<_c_SDL_WriteLE32, _dart_SDL_WriteLE32>('SDL_WriteLE32');
    return _SDL_WriteLE32(
      dst,
      value,
    );
  }

  _dart_SDL_WriteLE32 _SDL_WriteLE32;

  int SDL_WriteBE32(
    ffi.Pointer<SDL_RWops> dst,
    int value,
  ) {
    _SDL_WriteBE32 ??= _dylib
        .lookupFunction<_c_SDL_WriteBE32, _dart_SDL_WriteBE32>('SDL_WriteBE32');
    return _SDL_WriteBE32(
      dst,
      value,
    );
  }

  _dart_SDL_WriteBE32 _SDL_WriteBE32;

  int SDL_WriteLE64(
    ffi.Pointer<SDL_RWops> dst,
    int value,
  ) {
    _SDL_WriteLE64 ??= _dylib
        .lookupFunction<_c_SDL_WriteLE64, _dart_SDL_WriteLE64>('SDL_WriteLE64');
    return _SDL_WriteLE64(
      dst,
      value,
    );
  }

  _dart_SDL_WriteLE64 _SDL_WriteLE64;

  int SDL_WriteBE64(
    ffi.Pointer<SDL_RWops> dst,
    int value,
  ) {
    _SDL_WriteBE64 ??= _dylib
        .lookupFunction<_c_SDL_WriteBE64, _dart_SDL_WriteBE64>('SDL_WriteBE64');
    return _SDL_WriteBE64(
      dst,
      value,
    );
  }

  _dart_SDL_WriteBE64 _SDL_WriteBE64;

  int SDL_GetNumAudioDrivers() {
    _SDL_GetNumAudioDrivers ??= _dylib.lookupFunction<_c_SDL_GetNumAudioDrivers,
        _dart_SDL_GetNumAudioDrivers>('SDL_GetNumAudioDrivers');
    return _SDL_GetNumAudioDrivers();
  }

  _dart_SDL_GetNumAudioDrivers _SDL_GetNumAudioDrivers;

  ffi.Pointer<ffi.Int8> SDL_GetAudioDriver(
    int index,
  ) {
    _SDL_GetAudioDriver ??=
        _dylib.lookupFunction<_c_SDL_GetAudioDriver, _dart_SDL_GetAudioDriver>(
            'SDL_GetAudioDriver');
    return _SDL_GetAudioDriver(
      index,
    );
  }

  _dart_SDL_GetAudioDriver _SDL_GetAudioDriver;

  int SDL_AudioInit(
    ffi.Pointer<ffi.Int8> driver_name,
  ) {
    _SDL_AudioInit ??= _dylib
        .lookupFunction<_c_SDL_AudioInit, _dart_SDL_AudioInit>('SDL_AudioInit');
    return _SDL_AudioInit(
      driver_name,
    );
  }

  _dart_SDL_AudioInit _SDL_AudioInit;

  void SDL_AudioQuit() {
    _SDL_AudioQuit ??= _dylib
        .lookupFunction<_c_SDL_AudioQuit, _dart_SDL_AudioQuit>('SDL_AudioQuit');
    return _SDL_AudioQuit();
  }

  _dart_SDL_AudioQuit _SDL_AudioQuit;

  /// This function returns the name of the current audio driver, or NULL
  /// if no driver has been initialized.
  ffi.Pointer<ffi.Int8> SDL_GetCurrentAudioDriver() {
    _SDL_GetCurrentAudioDriver ??= _dylib.lookupFunction<
        _c_SDL_GetCurrentAudioDriver,
        _dart_SDL_GetCurrentAudioDriver>('SDL_GetCurrentAudioDriver');
    return _SDL_GetCurrentAudioDriver();
  }

  _dart_SDL_GetCurrentAudioDriver _SDL_GetCurrentAudioDriver;

  /// This function opens the audio device with the desired parameters, and
  /// returns 0 if successful, placing the actual hardware parameters in the
  /// structure pointed to by \c obtained.  If \c obtained is NULL, the audio
  /// data passed to the callback function will be guaranteed to be in the
  /// requested format, and will be automatically converted to the hardware
  /// audio format if necessary.  This function returns -1 if it failed
  /// to open the audio device, or couldn't set up the audio thread.
  ///
  /// When filling in the desired audio spec structure,
  /// - \c desired->freq should be the desired audio frequency in samples-per-
  /// second.
  /// - \c desired->format should be the desired audio format.
  /// - \c desired->samples is the desired size of the audio buffer, in
  /// samples.  This number should be a power of two, and may be adjusted by
  /// the audio driver to a value more suitable for the hardware.  Good values
  /// seem to range between 512 and 8096 inclusive, depending on the
  /// application and CPU speed.  Smaller values yield faster response time,
  /// but can lead to underflow if the application is doing heavy processing
  /// and cannot fill the audio buffer in time.  A stereo sample consists of
  /// both right and left channels in LR ordering.
  /// Note that the number of samples is directly related to time by the
  /// following formula:  \code ms = (samples*1000)/freq \endcode
  /// - \c desired->size is the size in bytes of the audio buffer, and is
  /// calculated by SDL_OpenAudio().
  /// - \c desired->silence is the value used to set the buffer to silence,
  /// and is calculated by SDL_OpenAudio().
  /// - \c desired->callback should be set to a function that will be called
  /// when the audio device is ready for more data.  It is passed a pointer
  /// to the audio buffer, and the length in bytes of the audio buffer.
  /// This function usually runs in a separate thread, and so you should
  /// protect data structures that it accesses by calling SDL_LockAudio()
  /// and SDL_UnlockAudio() in your code. Alternately, you may pass a NULL
  /// pointer here, and call SDL_QueueAudio() with some frequency, to queue
  /// more audio samples to be played (or for capture devices, call
  /// SDL_DequeueAudio() with some frequency, to obtain audio samples).
  /// - \c desired->userdata is passed as the first parameter to your callback
  /// function. If you passed a NULL callback, this value is ignored.
  ///
  /// The audio device starts out playing silence when it's opened, and should
  /// be enabled for playing by calling \c SDL_PauseAudio(0) when you are ready
  /// for your audio callback function to be called.  Since the audio driver
  /// may modify the requested size of the audio buffer, you should allocate
  /// any local mixing buffers after you open the audio device.
  int SDL_OpenAudio(
    ffi.Pointer<SDL_AudioSpec> desired,
    ffi.Pointer<SDL_AudioSpec> obtained,
  ) {
    _SDL_OpenAudio ??= _dylib
        .lookupFunction<_c_SDL_OpenAudio, _dart_SDL_OpenAudio>('SDL_OpenAudio');
    return _SDL_OpenAudio(
      desired,
      obtained,
    );
  }

  _dart_SDL_OpenAudio _SDL_OpenAudio;

  /// Get the number of available devices exposed by the current driver.
  /// Only valid after a successfully initializing the audio subsystem.
  /// Returns -1 if an explicit list of devices can't be determined; this is
  /// not an error. For example, if SDL is set up to talk to a remote audio
  /// server, it can't list every one available on the Internet, but it will
  /// still allow a specific host to be specified to SDL_OpenAudioDevice().
  ///
  /// In many common cases, when this function returns a value <= 0, it can still
  /// successfully open the default device (NULL for first argument of
  /// SDL_OpenAudioDevice()).
  int SDL_GetNumAudioDevices(
    int iscapture,
  ) {
    _SDL_GetNumAudioDevices ??= _dylib.lookupFunction<_c_SDL_GetNumAudioDevices,
        _dart_SDL_GetNumAudioDevices>('SDL_GetNumAudioDevices');
    return _SDL_GetNumAudioDevices(
      iscapture,
    );
  }

  _dart_SDL_GetNumAudioDevices _SDL_GetNumAudioDevices;

  /// Get the human-readable name of a specific audio device.
  /// Must be a value between 0 and (number of audio devices-1).
  /// Only valid after a successfully initializing the audio subsystem.
  /// The values returned by this function reflect the latest call to
  /// SDL_GetNumAudioDevices(); recall that function to redetect available
  /// hardware.
  ///
  /// The string returned by this function is UTF-8 encoded, read-only, and
  /// managed internally. You are not to free it. If you need to keep the
  /// string for any length of time, you should make your own copy of it, as it
  /// will be invalid next time any of several other SDL functions is called.
  ffi.Pointer<ffi.Int8> SDL_GetAudioDeviceName(
    int index,
    int iscapture,
  ) {
    _SDL_GetAudioDeviceName ??= _dylib.lookupFunction<_c_SDL_GetAudioDeviceName,
        _dart_SDL_GetAudioDeviceName>('SDL_GetAudioDeviceName');
    return _SDL_GetAudioDeviceName(
      index,
      iscapture,
    );
  }

  _dart_SDL_GetAudioDeviceName _SDL_GetAudioDeviceName;

  /// Open a specific audio device. Passing in a device name of NULL requests
  /// the most reasonable default (and is equivalent to calling SDL_OpenAudio()).
  ///
  /// The device name is a UTF-8 string reported by SDL_GetAudioDeviceName(), but
  /// some drivers allow arbitrary and driver-specific strings, such as a
  /// hostname/IP address for a remote audio server, or a filename in the
  /// diskaudio driver.
  ///
  /// \return 0 on error, a valid device ID that is >= 2 on success.
  ///
  /// SDL_OpenAudio(), unlike this function, always acts on device ID 1.
  int SDL_OpenAudioDevice(
    ffi.Pointer<ffi.Int8> device,
    int iscapture,
    ffi.Pointer<SDL_AudioSpec> desired,
    ffi.Pointer<SDL_AudioSpec> obtained,
    int allowed_changes,
  ) {
    _SDL_OpenAudioDevice ??= _dylib.lookupFunction<_c_SDL_OpenAudioDevice,
        _dart_SDL_OpenAudioDevice>('SDL_OpenAudioDevice');
    return _SDL_OpenAudioDevice(
      device,
      iscapture,
      desired,
      obtained,
      allowed_changes,
    );
  }

  _dart_SDL_OpenAudioDevice _SDL_OpenAudioDevice;

  int SDL_GetAudioStatus() {
    _SDL_GetAudioStatus ??=
        _dylib.lookupFunction<_c_SDL_GetAudioStatus, _dart_SDL_GetAudioStatus>(
            'SDL_GetAudioStatus');
    return _SDL_GetAudioStatus();
  }

  _dart_SDL_GetAudioStatus _SDL_GetAudioStatus;

  int SDL_GetAudioDeviceStatus(
    int dev,
  ) {
    _SDL_GetAudioDeviceStatus ??= _dylib.lookupFunction<
        _c_SDL_GetAudioDeviceStatus,
        _dart_SDL_GetAudioDeviceStatus>('SDL_GetAudioDeviceStatus');
    return _SDL_GetAudioDeviceStatus(
      dev,
    );
  }

  _dart_SDL_GetAudioDeviceStatus _SDL_GetAudioDeviceStatus;

  void SDL_PauseAudio(
    int pause_on,
  ) {
    _SDL_PauseAudio ??=
        _dylib.lookupFunction<_c_SDL_PauseAudio, _dart_SDL_PauseAudio>(
            'SDL_PauseAudio');
    return _SDL_PauseAudio(
      pause_on,
    );
  }

  _dart_SDL_PauseAudio _SDL_PauseAudio;

  void SDL_PauseAudioDevice(
    int dev,
    int pause_on,
  ) {
    _SDL_PauseAudioDevice ??= _dylib.lookupFunction<_c_SDL_PauseAudioDevice,
        _dart_SDL_PauseAudioDevice>('SDL_PauseAudioDevice');
    return _SDL_PauseAudioDevice(
      dev,
      pause_on,
    );
  }

  _dart_SDL_PauseAudioDevice _SDL_PauseAudioDevice;

  /// \brief Load the audio data of a WAVE file into memory
  ///
  /// Loading a WAVE file requires \c src, \c spec, \c audio_buf and \c audio_len
  /// to be valid pointers. The entire data portion of the file is then loaded
  /// into memory and decoded if necessary.
  ///
  /// If \c freesrc is non-zero, the data source gets automatically closed and
  /// freed before the function returns.
  ///
  /// Supported are RIFF WAVE files with the formats PCM (8, 16, 24, and 32 bits),
  /// IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and A-law and
  /// µ-law (8 bits). Other formats are currently unsupported and cause an error.
  ///
  /// If this function succeeds, the pointer returned by it is equal to \c spec
  /// and the pointer to the audio data allocated by the function is written to
  /// \c audio_buf and its length in bytes to \c audio_len. The \ref SDL_AudioSpec
  /// members \c freq, \c channels, and \c format are set to the values of the
  /// audio data in the buffer. The \c samples member is set to a sane default and
  /// all others are set to zero.
  ///
  /// It's necessary to use SDL_FreeWAV() to free the audio data returned in
  /// \c audio_buf when it is no longer used.
  ///
  /// Because of the underspecification of the Waveform format, there are many
  /// problematic files in the wild that cause issues with strict decoders. To
  /// provide compatibility with these files, this decoder is lenient in regards
  /// to the truncation of the file, the fact chunk, and the size of the RIFF
  /// chunk. The hints SDL_HINT_WAVE_RIFF_CHUNK_SIZE, SDL_HINT_WAVE_TRUNCATION,
  /// and SDL_HINT_WAVE_FACT_CHUNK can be used to tune the behavior of the
  /// loading process.
  ///
  /// Any file that is invalid (due to truncation, corruption, or wrong values in
  /// the headers), too big, or unsupported causes an error. Additionally, any
  /// critical I/O error from the data source will terminate the loading process
  /// with an error. The function returns NULL on error and in all cases (with the
  /// exception of \c src being NULL), an appropriate error message will be set.
  ///
  /// It is required that the data source supports seeking.
  ///
  /// Example:
  /// \code
  /// SDL_LoadWAV_RW(SDL_RWFromFile("sample.wav", "rb"), 1, ...);
  /// \endcode
  ///
  /// \param src The data source with the WAVE data
  /// \param freesrc A integer value that makes the function close the data source if non-zero
  /// \param spec A pointer filled with the audio format of the audio data
  /// \param audio_buf A pointer filled with the audio data allocated by the function
  /// \param audio_len A pointer filled with the length of the audio data buffer in bytes
  /// \return NULL on error, or non-NULL on success.
  ffi.Pointer<SDL_AudioSpec> SDL_LoadWAV_RW(
    ffi.Pointer<SDL_RWops> src,
    int freesrc,
    ffi.Pointer<SDL_AudioSpec> spec,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> audio_buf,
    ffi.Pointer<ffi.Uint32> audio_len,
  ) {
    _SDL_LoadWAV_RW ??=
        _dylib.lookupFunction<_c_SDL_LoadWAV_RW, _dart_SDL_LoadWAV_RW>(
            'SDL_LoadWAV_RW');
    return _SDL_LoadWAV_RW(
      src,
      freesrc,
      spec,
      audio_buf,
      audio_len,
    );
  }

  _dart_SDL_LoadWAV_RW _SDL_LoadWAV_RW;

  /// This function frees data previously allocated with SDL_LoadWAV_RW()
  void SDL_FreeWAV(
    ffi.Pointer<ffi.Uint8> audio_buf,
  ) {
    _SDL_FreeWAV ??=
        _dylib.lookupFunction<_c_SDL_FreeWAV, _dart_SDL_FreeWAV>('SDL_FreeWAV');
    return _SDL_FreeWAV(
      audio_buf,
    );
  }

  _dart_SDL_FreeWAV _SDL_FreeWAV;

  /// This function takes a source format and rate and a destination format
  /// and rate, and initializes the \c cvt structure with information needed
  /// by SDL_ConvertAudio() to convert a buffer of audio data from one format
  /// to the other. An unsupported format causes an error and -1 will be returned.
  ///
  /// \return 0 if no conversion is needed, 1 if the audio filter is set up,
  /// or -1 on error.
  int SDL_BuildAudioCVT(
    ffi.Pointer<SDL_AudioCVT> cvt,
    int src_format,
    int src_channels,
    int src_rate,
    int dst_format,
    int dst_channels,
    int dst_rate,
  ) {
    _SDL_BuildAudioCVT ??=
        _dylib.lookupFunction<_c_SDL_BuildAudioCVT, _dart_SDL_BuildAudioCVT>(
            'SDL_BuildAudioCVT');
    return _SDL_BuildAudioCVT(
      cvt,
      src_format,
      src_channels,
      src_rate,
      dst_format,
      dst_channels,
      dst_rate,
    );
  }

  _dart_SDL_BuildAudioCVT _SDL_BuildAudioCVT;

  /// Once you have initialized the \c cvt structure using SDL_BuildAudioCVT(),
  /// created an audio buffer \c cvt->buf, and filled it with \c cvt->len bytes of
  /// audio data in the source format, this function will convert it in-place
  /// to the desired format.
  ///
  /// The data conversion may expand the size of the audio data, so the buffer
  /// \c cvt->buf should be allocated after the \c cvt structure is initialized by
  /// SDL_BuildAudioCVT(), and should be \c cvt->len*cvt->len_mult bytes long.
  ///
  /// \return 0 on success or -1 if \c cvt->buf is NULL.
  int SDL_ConvertAudio(
    ffi.Pointer<SDL_AudioCVT> cvt,
  ) {
    _SDL_ConvertAudio ??=
        _dylib.lookupFunction<_c_SDL_ConvertAudio, _dart_SDL_ConvertAudio>(
            'SDL_ConvertAudio');
    return _SDL_ConvertAudio(
      cvt,
    );
  }

  _dart_SDL_ConvertAudio _SDL_ConvertAudio;

  /// Create a new audio stream
  ///
  /// \param src_format The format of the source audio
  /// \param src_channels The number of channels of the source audio
  /// \param src_rate The sampling rate of the source audio
  /// \param dst_format The format of the desired audio output
  /// \param dst_channels The number of channels of the desired audio output
  /// \param dst_rate The sampling rate of the desired audio output
  /// \return 0 on success, or -1 on error.
  ///
  /// \sa SDL_AudioStreamPut
  /// \sa SDL_AudioStreamGet
  /// \sa SDL_AudioStreamAvailable
  /// \sa SDL_AudioStreamFlush
  /// \sa SDL_AudioStreamClear
  /// \sa SDL_FreeAudioStream
  ffi.Pointer<_SDL_AudioStream> SDL_NewAudioStream(
    int src_format,
    int src_channels,
    int src_rate,
    int dst_format,
    int dst_channels,
    int dst_rate,
  ) {
    _SDL_NewAudioStream ??=
        _dylib.lookupFunction<_c_SDL_NewAudioStream, _dart_SDL_NewAudioStream>(
            'SDL_NewAudioStream');
    return _SDL_NewAudioStream(
      src_format,
      src_channels,
      src_rate,
      dst_format,
      dst_channels,
      dst_rate,
    );
  }

  _dart_SDL_NewAudioStream _SDL_NewAudioStream;

  /// Add data to be converted/resampled to the stream
  ///
  /// \param stream The stream the audio data is being added to
  /// \param buf A pointer to the audio data to add
  /// \param len The number of bytes to write to the stream
  /// \return 0 on success, or -1 on error.
  ///
  /// \sa SDL_NewAudioStream
  /// \sa SDL_AudioStreamGet
  /// \sa SDL_AudioStreamAvailable
  /// \sa SDL_AudioStreamFlush
  /// \sa SDL_AudioStreamClear
  /// \sa SDL_FreeAudioStream
  int SDL_AudioStreamPut(
    ffi.Pointer<_SDL_AudioStream> stream,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    _SDL_AudioStreamPut ??=
        _dylib.lookupFunction<_c_SDL_AudioStreamPut, _dart_SDL_AudioStreamPut>(
            'SDL_AudioStreamPut');
    return _SDL_AudioStreamPut(
      stream,
      buf,
      len,
    );
  }

  _dart_SDL_AudioStreamPut _SDL_AudioStreamPut;

  /// Get converted/resampled data from the stream
  ///
  /// \param stream The stream the audio is being requested from
  /// \param buf A buffer to fill with audio data
  /// \param len The maximum number of bytes to fill
  /// \return The number of bytes read from the stream, or -1 on error
  ///
  /// \sa SDL_NewAudioStream
  /// \sa SDL_AudioStreamPut
  /// \sa SDL_AudioStreamAvailable
  /// \sa SDL_AudioStreamFlush
  /// \sa SDL_AudioStreamClear
  /// \sa SDL_FreeAudioStream
  int SDL_AudioStreamGet(
    ffi.Pointer<_SDL_AudioStream> stream,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    _SDL_AudioStreamGet ??=
        _dylib.lookupFunction<_c_SDL_AudioStreamGet, _dart_SDL_AudioStreamGet>(
            'SDL_AudioStreamGet');
    return _SDL_AudioStreamGet(
      stream,
      buf,
      len,
    );
  }

  _dart_SDL_AudioStreamGet _SDL_AudioStreamGet;

  /// Get the number of converted/resampled bytes available. The stream may be
  /// buffering data behind the scenes until it has enough to resample
  /// correctly, so this number might be lower than what you expect, or even
  /// be zero. Add more data or flush the stream if you need the data now.
  ///
  /// \sa SDL_NewAudioStream
  /// \sa SDL_AudioStreamPut
  /// \sa SDL_AudioStreamGet
  /// \sa SDL_AudioStreamFlush
  /// \sa SDL_AudioStreamClear
  /// \sa SDL_FreeAudioStream
  int SDL_AudioStreamAvailable(
    ffi.Pointer<_SDL_AudioStream> stream,
  ) {
    _SDL_AudioStreamAvailable ??= _dylib.lookupFunction<
        _c_SDL_AudioStreamAvailable,
        _dart_SDL_AudioStreamAvailable>('SDL_AudioStreamAvailable');
    return _SDL_AudioStreamAvailable(
      stream,
    );
  }

  _dart_SDL_AudioStreamAvailable _SDL_AudioStreamAvailable;

  /// Tell the stream that you're done sending data, and anything being buffered
  /// should be converted/resampled and made available immediately.
  ///
  /// It is legal to add more data to a stream after flushing, but there will
  /// be audio gaps in the output. Generally this is intended to signal the
  /// end of input, so the complete output becomes available.
  ///
  /// \sa SDL_NewAudioStream
  /// \sa SDL_AudioStreamPut
  /// \sa SDL_AudioStreamGet
  /// \sa SDL_AudioStreamAvailable
  /// \sa SDL_AudioStreamClear
  /// \sa SDL_FreeAudioStream
  int SDL_AudioStreamFlush(
    ffi.Pointer<_SDL_AudioStream> stream,
  ) {
    _SDL_AudioStreamFlush ??= _dylib.lookupFunction<_c_SDL_AudioStreamFlush,
        _dart_SDL_AudioStreamFlush>('SDL_AudioStreamFlush');
    return _SDL_AudioStreamFlush(
      stream,
    );
  }

  _dart_SDL_AudioStreamFlush _SDL_AudioStreamFlush;

  /// Clear any pending data in the stream without converting it
  ///
  /// \sa SDL_NewAudioStream
  /// \sa SDL_AudioStreamPut
  /// \sa SDL_AudioStreamGet
  /// \sa SDL_AudioStreamAvailable
  /// \sa SDL_AudioStreamFlush
  /// \sa SDL_FreeAudioStream
  void SDL_AudioStreamClear(
    ffi.Pointer<_SDL_AudioStream> stream,
  ) {
    _SDL_AudioStreamClear ??= _dylib.lookupFunction<_c_SDL_AudioStreamClear,
        _dart_SDL_AudioStreamClear>('SDL_AudioStreamClear');
    return _SDL_AudioStreamClear(
      stream,
    );
  }

  _dart_SDL_AudioStreamClear _SDL_AudioStreamClear;

  /// Free an audio stream
  ///
  /// \sa SDL_NewAudioStream
  /// \sa SDL_AudioStreamPut
  /// \sa SDL_AudioStreamGet
  /// \sa SDL_AudioStreamAvailable
  /// \sa SDL_AudioStreamFlush
  /// \sa SDL_AudioStreamClear
  void SDL_FreeAudioStream(
    ffi.Pointer<_SDL_AudioStream> stream,
  ) {
    _SDL_FreeAudioStream ??= _dylib.lookupFunction<_c_SDL_FreeAudioStream,
        _dart_SDL_FreeAudioStream>('SDL_FreeAudioStream');
    return _SDL_FreeAudioStream(
      stream,
    );
  }

  _dart_SDL_FreeAudioStream _SDL_FreeAudioStream;

  /// This takes two audio buffers of the playing audio format and mixes
  /// them, performing addition, volume adjustment, and overflow clipping.
  /// The volume ranges from 0 - 128, and should be set to ::SDL_MIX_MAXVOLUME
  /// for full audio volume.  Note this does not change hardware volume.
  /// This is provided for convenience -- you can mix your own audio data.
  void SDL_MixAudio(
    ffi.Pointer<ffi.Uint8> dst,
    ffi.Pointer<ffi.Uint8> src,
    int len,
    int volume,
  ) {
    _SDL_MixAudio ??= _dylib
        .lookupFunction<_c_SDL_MixAudio, _dart_SDL_MixAudio>('SDL_MixAudio');
    return _SDL_MixAudio(
      dst,
      src,
      len,
      volume,
    );
  }

  _dart_SDL_MixAudio _SDL_MixAudio;

  /// This works like SDL_MixAudio(), but you specify the audio format instead of
  /// using the format of audio device 1. Thus it can be used when no audio
  /// device is open at all.
  void SDL_MixAudioFormat(
    ffi.Pointer<ffi.Uint8> dst,
    ffi.Pointer<ffi.Uint8> src,
    int format,
    int len,
    int volume,
  ) {
    _SDL_MixAudioFormat ??=
        _dylib.lookupFunction<_c_SDL_MixAudioFormat, _dart_SDL_MixAudioFormat>(
            'SDL_MixAudioFormat');
    return _SDL_MixAudioFormat(
      dst,
      src,
      format,
      len,
      volume,
    );
  }

  _dart_SDL_MixAudioFormat _SDL_MixAudioFormat;

  /// Queue more audio on non-callback devices.
  ///
  /// (If you are looking to retrieve queued audio from a non-callback capture
  /// device, you want SDL_DequeueAudio() instead. This will return -1 to
  /// signify an error if you use it with capture devices.)
  ///
  /// SDL offers two ways to feed audio to the device: you can either supply a
  /// callback that SDL triggers with some frequency to obtain more audio
  /// (pull method), or you can supply no callback, and then SDL will expect
  /// you to supply data at regular intervals (push method) with this function.
  ///
  /// There are no limits on the amount of data you can queue, short of
  /// exhaustion of address space. Queued data will drain to the device as
  /// necessary without further intervention from you. If the device needs
  /// audio but there is not enough queued, it will play silence to make up
  /// the difference. This means you will have skips in your audio playback
  /// if you aren't routinely queueing sufficient data.
  ///
  /// This function copies the supplied data, so you are safe to free it when
  /// the function returns. This function is thread-safe, but queueing to the
  /// same device from two threads at once does not promise which buffer will
  /// be queued first.
  ///
  /// You may not queue audio on a device that is using an application-supplied
  /// callback; doing so returns an error. You have to use the audio callback
  /// or queue audio with this function, but not both.
  ///
  /// You should not call SDL_LockAudio() on the device before queueing; SDL
  /// handles locking internally for this function.
  ///
  /// \param dev The device ID to which we will queue audio.
  /// \param data The data to queue to the device for later playback.
  /// \param len The number of bytes (not samples!) to which (data) points.
  /// \return 0 on success, or -1 on error.
  ///
  /// \sa SDL_GetQueuedAudioSize
  /// \sa SDL_ClearQueuedAudio
  int SDL_QueueAudio(
    int dev,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    _SDL_QueueAudio ??=
        _dylib.lookupFunction<_c_SDL_QueueAudio, _dart_SDL_QueueAudio>(
            'SDL_QueueAudio');
    return _SDL_QueueAudio(
      dev,
      data,
      len,
    );
  }

  _dart_SDL_QueueAudio _SDL_QueueAudio;

  /// Dequeue more audio on non-callback devices.
  ///
  /// (If you are looking to queue audio for output on a non-callback playback
  /// device, you want SDL_QueueAudio() instead. This will always return 0
  /// if you use it with playback devices.)
  ///
  /// SDL offers two ways to retrieve audio from a capture device: you can
  /// either supply a callback that SDL triggers with some frequency as the
  /// device records more audio data, (push method), or you can supply no
  /// callback, and then SDL will expect you to retrieve data at regular
  /// intervals (pull method) with this function.
  ///
  /// There are no limits on the amount of data you can queue, short of
  /// exhaustion of address space. Data from the device will keep queuing as
  /// necessary without further intervention from you. This means you will
  /// eventually run out of memory if you aren't routinely dequeueing data.
  ///
  /// Capture devices will not queue data when paused; if you are expecting
  /// to not need captured audio for some length of time, use
  /// SDL_PauseAudioDevice() to stop the capture device from queueing more
  /// data. This can be useful during, say, level loading times. When
  /// unpaused, capture devices will start queueing data from that point,
  /// having flushed any capturable data available while paused.
  ///
  /// This function is thread-safe, but dequeueing from the same device from
  /// two threads at once does not promise which thread will dequeued data
  /// first.
  ///
  /// You may not dequeue audio from a device that is using an
  /// application-supplied callback; doing so returns an error. You have to use
  /// the audio callback, or dequeue audio with this function, but not both.
  ///
  /// You should not call SDL_LockAudio() on the device before queueing; SDL
  /// handles locking internally for this function.
  ///
  /// \param dev The device ID from which we will dequeue audio.
  /// \param data A pointer into where audio data should be copied.
  /// \param len The number of bytes (not samples!) to which (data) points.
  /// \return number of bytes dequeued, which could be less than requested.
  ///
  /// \sa SDL_GetQueuedAudioSize
  /// \sa SDL_ClearQueuedAudio
  int SDL_DequeueAudio(
    int dev,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    _SDL_DequeueAudio ??=
        _dylib.lookupFunction<_c_SDL_DequeueAudio, _dart_SDL_DequeueAudio>(
            'SDL_DequeueAudio');
    return _SDL_DequeueAudio(
      dev,
      data,
      len,
    );
  }

  _dart_SDL_DequeueAudio _SDL_DequeueAudio;

  /// Get the number of bytes of still-queued audio.
  ///
  /// For playback device:
  ///
  /// This is the number of bytes that have been queued for playback with
  /// SDL_QueueAudio(), but have not yet been sent to the hardware. This
  /// number may shrink at any time, so this only informs of pending data.
  ///
  /// Once we've sent it to the hardware, this function can not decide the
  /// exact byte boundary of what has been played. It's possible that we just
  /// gave the hardware several kilobytes right before you called this
  /// function, but it hasn't played any of it yet, or maybe half of it, etc.
  ///
  /// For capture devices:
  ///
  /// This is the number of bytes that have been captured by the device and
  /// are waiting for you to dequeue. This number may grow at any time, so
  /// this only informs of the lower-bound of available data.
  ///
  /// You may not queue audio on a device that is using an application-supplied
  /// callback; calling this function on such a device always returns 0.
  /// You have to queue audio with SDL_QueueAudio()/SDL_DequeueAudio(), or use
  /// the audio callback, but not both.
  ///
  /// You should not call SDL_LockAudio() on the device before querying; SDL
  /// handles locking internally for this function.
  ///
  /// \param dev The device ID of which we will query queued audio size.
  /// \return Number of bytes (not samples!) of queued audio.
  ///
  /// \sa SDL_QueueAudio
  /// \sa SDL_ClearQueuedAudio
  int SDL_GetQueuedAudioSize(
    int dev,
  ) {
    _SDL_GetQueuedAudioSize ??= _dylib.lookupFunction<_c_SDL_GetQueuedAudioSize,
        _dart_SDL_GetQueuedAudioSize>('SDL_GetQueuedAudioSize');
    return _SDL_GetQueuedAudioSize(
      dev,
    );
  }

  _dart_SDL_GetQueuedAudioSize _SDL_GetQueuedAudioSize;

  /// Drop any queued audio data. For playback devices, this is any queued data
  /// still waiting to be submitted to the hardware. For capture devices, this
  /// is any data that was queued by the device that hasn't yet been dequeued by
  /// the application.
  ///
  /// Immediately after this call, SDL_GetQueuedAudioSize() will return 0. For
  /// playback devices, the hardware will start playing silence if more audio
  /// isn't queued. Unpaused capture devices will start filling the queue again
  /// as soon as they have more data available (which, depending on the state
  /// of the hardware and the thread, could be before this function call
  /// returns!).
  ///
  /// This will not prevent playback of queued audio that's already been sent
  /// to the hardware, as we can not undo that, so expect there to be some
  /// fraction of a second of audio that might still be heard. This can be
  /// useful if you want to, say, drop any pending music during a level change
  /// in your game.
  ///
  /// You may not queue audio on a device that is using an application-supplied
  /// callback; calling this function on such a device is always a no-op.
  /// You have to queue audio with SDL_QueueAudio()/SDL_DequeueAudio(), or use
  /// the audio callback, but not both.
  ///
  /// You should not call SDL_LockAudio() on the device before clearing the
  /// queue; SDL handles locking internally for this function.
  ///
  /// This function always succeeds and thus returns void.
  ///
  /// \param dev The device ID of which to clear the audio queue.
  ///
  /// \sa SDL_QueueAudio
  /// \sa SDL_GetQueuedAudioSize
  void SDL_ClearQueuedAudio(
    int dev,
  ) {
    _SDL_ClearQueuedAudio ??= _dylib.lookupFunction<_c_SDL_ClearQueuedAudio,
        _dart_SDL_ClearQueuedAudio>('SDL_ClearQueuedAudio');
    return _SDL_ClearQueuedAudio(
      dev,
    );
  }

  _dart_SDL_ClearQueuedAudio _SDL_ClearQueuedAudio;

  void SDL_LockAudio() {
    _SDL_LockAudio ??= _dylib
        .lookupFunction<_c_SDL_LockAudio, _dart_SDL_LockAudio>('SDL_LockAudio');
    return _SDL_LockAudio();
  }

  _dart_SDL_LockAudio _SDL_LockAudio;

  void SDL_LockAudioDevice(
    int dev,
  ) {
    _SDL_LockAudioDevice ??= _dylib.lookupFunction<_c_SDL_LockAudioDevice,
        _dart_SDL_LockAudioDevice>('SDL_LockAudioDevice');
    return _SDL_LockAudioDevice(
      dev,
    );
  }

  _dart_SDL_LockAudioDevice _SDL_LockAudioDevice;

  void SDL_UnlockAudio() {
    _SDL_UnlockAudio ??=
        _dylib.lookupFunction<_c_SDL_UnlockAudio, _dart_SDL_UnlockAudio>(
            'SDL_UnlockAudio');
    return _SDL_UnlockAudio();
  }

  _dart_SDL_UnlockAudio _SDL_UnlockAudio;

  void SDL_UnlockAudioDevice(
    int dev,
  ) {
    _SDL_UnlockAudioDevice ??= _dylib.lookupFunction<_c_SDL_UnlockAudioDevice,
        _dart_SDL_UnlockAudioDevice>('SDL_UnlockAudioDevice');
    return _SDL_UnlockAudioDevice(
      dev,
    );
  }

  _dart_SDL_UnlockAudioDevice _SDL_UnlockAudioDevice;

  /// This function shuts down audio processing and closes the audio device.
  void SDL_CloseAudio() {
    _SDL_CloseAudio ??=
        _dylib.lookupFunction<_c_SDL_CloseAudio, _dart_SDL_CloseAudio>(
            'SDL_CloseAudio');
    return _SDL_CloseAudio();
  }

  _dart_SDL_CloseAudio _SDL_CloseAudio;

  void SDL_CloseAudioDevice(
    int dev,
  ) {
    _SDL_CloseAudioDevice ??= _dylib.lookupFunction<_c_SDL_CloseAudioDevice,
        _dart_SDL_CloseAudioDevice>('SDL_CloseAudioDevice');
    return _SDL_CloseAudioDevice(
      dev,
    );
  }

  _dart_SDL_CloseAudioDevice _SDL_CloseAudioDevice;

  /// \brief Get the human readable name of a pixel format
  ffi.Pointer<ffi.Int8> SDL_GetPixelFormatName(
    int format,
  ) {
    _SDL_GetPixelFormatName ??= _dylib.lookupFunction<_c_SDL_GetPixelFormatName,
        _dart_SDL_GetPixelFormatName>('SDL_GetPixelFormatName');
    return _SDL_GetPixelFormatName(
      format,
    );
  }

  _dart_SDL_GetPixelFormatName _SDL_GetPixelFormatName;

  /// \brief Convert one of the enumerated pixel formats to a bpp and RGBA masks.
  ///
  /// \return SDL_TRUE, or SDL_FALSE if the conversion wasn't possible.
  ///
  /// \sa SDL_MasksToPixelFormatEnum()
  int SDL_PixelFormatEnumToMasks(
    int format,
    ffi.Pointer<ffi.Int32> bpp,
    ffi.Pointer<ffi.Uint32> Rmask,
    ffi.Pointer<ffi.Uint32> Gmask,
    ffi.Pointer<ffi.Uint32> Bmask,
    ffi.Pointer<ffi.Uint32> Amask,
  ) {
    _SDL_PixelFormatEnumToMasks ??= _dylib.lookupFunction<
        _c_SDL_PixelFormatEnumToMasks,
        _dart_SDL_PixelFormatEnumToMasks>('SDL_PixelFormatEnumToMasks');
    return _SDL_PixelFormatEnumToMasks(
      format,
      bpp,
      Rmask,
      Gmask,
      Bmask,
      Amask,
    );
  }

  _dart_SDL_PixelFormatEnumToMasks _SDL_PixelFormatEnumToMasks;

  /// \brief Convert a bpp and RGBA masks to an enumerated pixel format.
  ///
  /// \return The pixel format, or ::SDL_PIXELFORMAT_UNKNOWN if the conversion
  /// wasn't possible.
  ///
  /// \sa SDL_PixelFormatEnumToMasks()
  int SDL_MasksToPixelFormatEnum(
    int bpp,
    int Rmask,
    int Gmask,
    int Bmask,
    int Amask,
  ) {
    _SDL_MasksToPixelFormatEnum ??= _dylib.lookupFunction<
        _c_SDL_MasksToPixelFormatEnum,
        _dart_SDL_MasksToPixelFormatEnum>('SDL_MasksToPixelFormatEnum');
    return _SDL_MasksToPixelFormatEnum(
      bpp,
      Rmask,
      Gmask,
      Bmask,
      Amask,
    );
  }

  _dart_SDL_MasksToPixelFormatEnum _SDL_MasksToPixelFormatEnum;

  /// \brief Create an SDL_PixelFormat structure from a pixel format enum.
  ffi.Pointer<SDL_PixelFormat> SDL_AllocFormat(
    int pixel_format,
  ) {
    _SDL_AllocFormat ??=
        _dylib.lookupFunction<_c_SDL_AllocFormat, _dart_SDL_AllocFormat>(
            'SDL_AllocFormat');
    return _SDL_AllocFormat(
      pixel_format,
    );
  }

  _dart_SDL_AllocFormat _SDL_AllocFormat;

  /// \brief Free an SDL_PixelFormat structure.
  void SDL_FreeFormat(
    ffi.Pointer<SDL_PixelFormat> format,
  ) {
    _SDL_FreeFormat ??=
        _dylib.lookupFunction<_c_SDL_FreeFormat, _dart_SDL_FreeFormat>(
            'SDL_FreeFormat');
    return _SDL_FreeFormat(
      format,
    );
  }

  _dart_SDL_FreeFormat _SDL_FreeFormat;

  /// \brief Create a palette structure with the specified number of color
  /// entries.
  ///
  /// \return A new palette, or NULL if there wasn't enough memory.
  ///
  /// \note The palette entries are initialized to white.
  ///
  /// \sa SDL_FreePalette()
  ffi.Pointer<SDL_Palette> SDL_AllocPalette(
    int ncolors,
  ) {
    _SDL_AllocPalette ??=
        _dylib.lookupFunction<_c_SDL_AllocPalette, _dart_SDL_AllocPalette>(
            'SDL_AllocPalette');
    return _SDL_AllocPalette(
      ncolors,
    );
  }

  _dart_SDL_AllocPalette _SDL_AllocPalette;

  /// \brief Set the palette for a pixel format structure.
  int SDL_SetPixelFormatPalette(
    ffi.Pointer<SDL_PixelFormat> format,
    ffi.Pointer<SDL_Palette> palette,
  ) {
    _SDL_SetPixelFormatPalette ??= _dylib.lookupFunction<
        _c_SDL_SetPixelFormatPalette,
        _dart_SDL_SetPixelFormatPalette>('SDL_SetPixelFormatPalette');
    return _SDL_SetPixelFormatPalette(
      format,
      palette,
    );
  }

  _dart_SDL_SetPixelFormatPalette _SDL_SetPixelFormatPalette;

  /// \brief Set a range of colors in a palette.
  ///
  /// \param palette    The palette to modify.
  /// \param colors     An array of colors to copy into the palette.
  /// \param firstcolor The index of the first palette entry to modify.
  /// \param ncolors    The number of entries to modify.
  ///
  /// \return 0 on success, or -1 if not all of the colors could be set.
  int SDL_SetPaletteColors(
    ffi.Pointer<SDL_Palette> palette,
    ffi.Pointer<SDL_Color> colors,
    int firstcolor,
    int ncolors,
  ) {
    _SDL_SetPaletteColors ??= _dylib.lookupFunction<_c_SDL_SetPaletteColors,
        _dart_SDL_SetPaletteColors>('SDL_SetPaletteColors');
    return _SDL_SetPaletteColors(
      palette,
      colors,
      firstcolor,
      ncolors,
    );
  }

  _dart_SDL_SetPaletteColors _SDL_SetPaletteColors;

  /// \brief Free a palette created with SDL_AllocPalette().
  ///
  /// \sa SDL_AllocPalette()
  void SDL_FreePalette(
    ffi.Pointer<SDL_Palette> palette,
  ) {
    _SDL_FreePalette ??=
        _dylib.lookupFunction<_c_SDL_FreePalette, _dart_SDL_FreePalette>(
            'SDL_FreePalette');
    return _SDL_FreePalette(
      palette,
    );
  }

  _dart_SDL_FreePalette _SDL_FreePalette;

  /// \brief Maps an RGB triple to an opaque pixel value for a given pixel format.
  ///
  /// \sa SDL_MapRGBA
  int SDL_MapRGB(
    ffi.Pointer<SDL_PixelFormat> format,
    int r,
    int g,
    int b,
  ) {
    _SDL_MapRGB ??=
        _dylib.lookupFunction<_c_SDL_MapRGB, _dart_SDL_MapRGB>('SDL_MapRGB');
    return _SDL_MapRGB(
      format,
      r,
      g,
      b,
    );
  }

  _dart_SDL_MapRGB _SDL_MapRGB;

  /// \brief Maps an RGBA quadruple to a pixel value for a given pixel format.
  ///
  /// \sa SDL_MapRGB
  int SDL_MapRGBA(
    ffi.Pointer<SDL_PixelFormat> format,
    int r,
    int g,
    int b,
    int a,
  ) {
    _SDL_MapRGBA ??=
        _dylib.lookupFunction<_c_SDL_MapRGBA, _dart_SDL_MapRGBA>('SDL_MapRGBA');
    return _SDL_MapRGBA(
      format,
      r,
      g,
      b,
      a,
    );
  }

  _dart_SDL_MapRGBA _SDL_MapRGBA;

  /// \brief Get the RGB components from a pixel of the specified format.
  ///
  /// \sa SDL_GetRGBA
  void SDL_GetRGB(
    int pixel,
    ffi.Pointer<SDL_PixelFormat> format,
    ffi.Pointer<ffi.Uint8> r,
    ffi.Pointer<ffi.Uint8> g,
    ffi.Pointer<ffi.Uint8> b,
  ) {
    _SDL_GetRGB ??=
        _dylib.lookupFunction<_c_SDL_GetRGB, _dart_SDL_GetRGB>('SDL_GetRGB');
    return _SDL_GetRGB(
      pixel,
      format,
      r,
      g,
      b,
    );
  }

  _dart_SDL_GetRGB _SDL_GetRGB;

  /// \brief Get the RGBA components from a pixel of the specified format.
  ///
  /// \sa SDL_GetRGB
  void SDL_GetRGBA(
    int pixel,
    ffi.Pointer<SDL_PixelFormat> format,
    ffi.Pointer<ffi.Uint8> r,
    ffi.Pointer<ffi.Uint8> g,
    ffi.Pointer<ffi.Uint8> b,
    ffi.Pointer<ffi.Uint8> a,
  ) {
    _SDL_GetRGBA ??=
        _dylib.lookupFunction<_c_SDL_GetRGBA, _dart_SDL_GetRGBA>('SDL_GetRGBA');
    return _SDL_GetRGBA(
      pixel,
      format,
      r,
      g,
      b,
      a,
    );
  }

  _dart_SDL_GetRGBA _SDL_GetRGBA;

  /// \brief Calculate a 256 entry gamma ramp for a gamma value.
  void SDL_CalculateGammaRamp(
    double gamma,
    ffi.Pointer<ffi.Uint16> ramp,
  ) {
    _SDL_CalculateGammaRamp ??= _dylib.lookupFunction<_c_SDL_CalculateGammaRamp,
        _dart_SDL_CalculateGammaRamp>('SDL_CalculateGammaRamp');
    return _SDL_CalculateGammaRamp(
      gamma,
      ramp,
    );
  }

  _dart_SDL_CalculateGammaRamp _SDL_CalculateGammaRamp;

  /// \brief Returns true if point resides inside a rectangle.
  int SDL_PointInRect(
    ffi.Pointer<SDL_Point> p,
    ffi.Pointer<SDL_Rect> r,
  ) {
    _SDL_PointInRect ??=
        _dylib.lookupFunction<_c_SDL_PointInRect, _dart_SDL_PointInRect>(
            'SDL_PointInRect');
    return _SDL_PointInRect(
      p,
      r,
    );
  }

  _dart_SDL_PointInRect _SDL_PointInRect;

  /// \brief Returns true if the rectangle has no area.
  int SDL_RectEmpty(
    ffi.Pointer<SDL_Rect> r,
  ) {
    _SDL_RectEmpty ??= _dylib
        .lookupFunction<_c_SDL_RectEmpty, _dart_SDL_RectEmpty>('SDL_RectEmpty');
    return _SDL_RectEmpty(
      r,
    );
  }

  _dart_SDL_RectEmpty _SDL_RectEmpty;

  /// \brief Returns true if the two rectangles are equal.
  int SDL_RectEquals(
    ffi.Pointer<SDL_Rect> a,
    ffi.Pointer<SDL_Rect> b,
  ) {
    _SDL_RectEquals ??=
        _dylib.lookupFunction<_c_SDL_RectEquals, _dart_SDL_RectEquals>(
            'SDL_RectEquals');
    return _SDL_RectEquals(
      a,
      b,
    );
  }

  _dart_SDL_RectEquals _SDL_RectEquals;

  /// \brief Determine whether two rectangles intersect.
  ///
  /// \return SDL_TRUE if there is an intersection, SDL_FALSE otherwise.
  int SDL_HasIntersection(
    ffi.Pointer<SDL_Rect> A,
    ffi.Pointer<SDL_Rect> B,
  ) {
    _SDL_HasIntersection ??= _dylib.lookupFunction<_c_SDL_HasIntersection,
        _dart_SDL_HasIntersection>('SDL_HasIntersection');
    return _SDL_HasIntersection(
      A,
      B,
    );
  }

  _dart_SDL_HasIntersection _SDL_HasIntersection;

  /// \brief Calculate the intersection of two rectangles.
  ///
  /// \return SDL_TRUE if there is an intersection, SDL_FALSE otherwise.
  int SDL_IntersectRect(
    ffi.Pointer<SDL_Rect> A,
    ffi.Pointer<SDL_Rect> B,
    ffi.Pointer<SDL_Rect> result,
  ) {
    _SDL_IntersectRect ??=
        _dylib.lookupFunction<_c_SDL_IntersectRect, _dart_SDL_IntersectRect>(
            'SDL_IntersectRect');
    return _SDL_IntersectRect(
      A,
      B,
      result,
    );
  }

  _dart_SDL_IntersectRect _SDL_IntersectRect;

  /// \brief Calculate the union of two rectangles.
  void SDL_UnionRect(
    ffi.Pointer<SDL_Rect> A,
    ffi.Pointer<SDL_Rect> B,
    ffi.Pointer<SDL_Rect> result,
  ) {
    _SDL_UnionRect ??= _dylib
        .lookupFunction<_c_SDL_UnionRect, _dart_SDL_UnionRect>('SDL_UnionRect');
    return _SDL_UnionRect(
      A,
      B,
      result,
    );
  }

  _dart_SDL_UnionRect _SDL_UnionRect;

  /// \brief Calculate a minimal rectangle enclosing a set of points
  ///
  /// \return SDL_TRUE if any points were within the clipping rect
  int SDL_EnclosePoints(
    ffi.Pointer<SDL_Point> points,
    int count,
    ffi.Pointer<SDL_Rect> clip,
    ffi.Pointer<SDL_Rect> result,
  ) {
    _SDL_EnclosePoints ??=
        _dylib.lookupFunction<_c_SDL_EnclosePoints, _dart_SDL_EnclosePoints>(
            'SDL_EnclosePoints');
    return _SDL_EnclosePoints(
      points,
      count,
      clip,
      result,
    );
  }

  _dart_SDL_EnclosePoints _SDL_EnclosePoints;

  /// \brief Calculate the intersection of a rectangle and line segment.
  ///
  /// \return SDL_TRUE if there is an intersection, SDL_FALSE otherwise.
  int SDL_IntersectRectAndLine(
    ffi.Pointer<SDL_Rect> rect,
    ffi.Pointer<ffi.Int32> X1,
    ffi.Pointer<ffi.Int32> Y1,
    ffi.Pointer<ffi.Int32> X2,
    ffi.Pointer<ffi.Int32> Y2,
  ) {
    _SDL_IntersectRectAndLine ??= _dylib.lookupFunction<
        _c_SDL_IntersectRectAndLine,
        _dart_SDL_IntersectRectAndLine>('SDL_IntersectRectAndLine');
    return _SDL_IntersectRectAndLine(
      rect,
      X1,
      Y1,
      X2,
      Y2,
    );
  }

  _dart_SDL_IntersectRectAndLine _SDL_IntersectRectAndLine;

  /// \brief Create a custom blend mode, which may or may not be supported by a given renderer
  ///
  /// \param srcColorFactor source color factor
  /// \param dstColorFactor destination color factor
  /// \param colorOperation color operation
  /// \param srcAlphaFactor source alpha factor
  /// \param dstAlphaFactor destination alpha factor
  /// \param alphaOperation alpha operation
  ///
  /// The result of the blend mode operation will be:
  /// dstRGB = dstRGB * dstColorFactor colorOperation srcRGB * srcColorFactor
  /// and
  /// dstA = dstA * dstAlphaFactor alphaOperation srcA * srcAlphaFactor
  int SDL_ComposeCustomBlendMode(
    int srcColorFactor,
    int dstColorFactor,
    int colorOperation,
    int srcAlphaFactor,
    int dstAlphaFactor,
    int alphaOperation,
  ) {
    _SDL_ComposeCustomBlendMode ??= _dylib.lookupFunction<
        _c_SDL_ComposeCustomBlendMode,
        _dart_SDL_ComposeCustomBlendMode>('SDL_ComposeCustomBlendMode');
    return _SDL_ComposeCustomBlendMode(
      srcColorFactor,
      dstColorFactor,
      colorOperation,
      srcAlphaFactor,
      dstAlphaFactor,
      alphaOperation,
    );
  }

  _dart_SDL_ComposeCustomBlendMode _SDL_ComposeCustomBlendMode;

  /// Allocate and free an RGB surface.
  ///
  /// If the depth is 4 or 8 bits, an empty palette is allocated for the surface.
  /// If the depth is greater than 8 bits, the pixel format is set using the
  /// flags '[RGB]mask'.
  ///
  /// If the function runs out of memory, it will return NULL.
  ///
  /// \param flags The \c flags are obsolete and should be set to 0.
  /// \param width The width in pixels of the surface to create.
  /// \param height The height in pixels of the surface to create.
  /// \param depth The depth in bits of the surface to create.
  /// \param Rmask The red mask of the surface to create.
  /// \param Gmask The green mask of the surface to create.
  /// \param Bmask The blue mask of the surface to create.
  /// \param Amask The alpha mask of the surface to create.
  ffi.Pointer<SDL_Surface> SDL_CreateRGBSurface(
    int flags,
    int width,
    int height,
    int depth,
    int Rmask,
    int Gmask,
    int Bmask,
    int Amask,
  ) {
    _SDL_CreateRGBSurface ??= _dylib.lookupFunction<_c_SDL_CreateRGBSurface,
        _dart_SDL_CreateRGBSurface>('SDL_CreateRGBSurface');
    return _SDL_CreateRGBSurface(
      flags,
      width,
      height,
      depth,
      Rmask,
      Gmask,
      Bmask,
      Amask,
    );
  }

  _dart_SDL_CreateRGBSurface _SDL_CreateRGBSurface;

  ffi.Pointer<SDL_Surface> SDL_CreateRGBSurfaceWithFormat(
    int flags,
    int width,
    int height,
    int depth,
    int format,
  ) {
    _SDL_CreateRGBSurfaceWithFormat ??= _dylib.lookupFunction<
        _c_SDL_CreateRGBSurfaceWithFormat,
        _dart_SDL_CreateRGBSurfaceWithFormat>('SDL_CreateRGBSurfaceWithFormat');
    return _SDL_CreateRGBSurfaceWithFormat(
      flags,
      width,
      height,
      depth,
      format,
    );
  }

  _dart_SDL_CreateRGBSurfaceWithFormat _SDL_CreateRGBSurfaceWithFormat;

  ffi.Pointer<SDL_Surface> SDL_CreateRGBSurfaceFrom(
    ffi.Pointer<ffi.Void> pixels,
    int width,
    int height,
    int depth,
    int pitch,
    int Rmask,
    int Gmask,
    int Bmask,
    int Amask,
  ) {
    _SDL_CreateRGBSurfaceFrom ??= _dylib.lookupFunction<
        _c_SDL_CreateRGBSurfaceFrom,
        _dart_SDL_CreateRGBSurfaceFrom>('SDL_CreateRGBSurfaceFrom');
    return _SDL_CreateRGBSurfaceFrom(
      pixels,
      width,
      height,
      depth,
      pitch,
      Rmask,
      Gmask,
      Bmask,
      Amask,
    );
  }

  _dart_SDL_CreateRGBSurfaceFrom _SDL_CreateRGBSurfaceFrom;

  ffi.Pointer<SDL_Surface> SDL_CreateRGBSurfaceWithFormatFrom(
    ffi.Pointer<ffi.Void> pixels,
    int width,
    int height,
    int depth,
    int pitch,
    int format,
  ) {
    _SDL_CreateRGBSurfaceWithFormatFrom ??= _dylib.lookupFunction<
            _c_SDL_CreateRGBSurfaceWithFormatFrom,
            _dart_SDL_CreateRGBSurfaceWithFormatFrom>(
        'SDL_CreateRGBSurfaceWithFormatFrom');
    return _SDL_CreateRGBSurfaceWithFormatFrom(
      pixels,
      width,
      height,
      depth,
      pitch,
      format,
    );
  }

  _dart_SDL_CreateRGBSurfaceWithFormatFrom _SDL_CreateRGBSurfaceWithFormatFrom;

  void SDL_FreeSurface(
    ffi.Pointer<SDL_Surface> surface,
  ) {
    _SDL_FreeSurface ??=
        _dylib.lookupFunction<_c_SDL_FreeSurface, _dart_SDL_FreeSurface>(
            'SDL_FreeSurface');
    return _SDL_FreeSurface(
      surface,
    );
  }

  _dart_SDL_FreeSurface _SDL_FreeSurface;

  /// \brief Set the palette used by a surface.
  ///
  /// \return 0, or -1 if the surface format doesn't use a palette.
  ///
  /// \note A single palette can be shared with many surfaces.
  int SDL_SetSurfacePalette(
    ffi.Pointer<SDL_Surface> surface,
    ffi.Pointer<SDL_Palette> palette,
  ) {
    _SDL_SetSurfacePalette ??= _dylib.lookupFunction<_c_SDL_SetSurfacePalette,
        _dart_SDL_SetSurfacePalette>('SDL_SetSurfacePalette');
    return _SDL_SetSurfacePalette(
      surface,
      palette,
    );
  }

  _dart_SDL_SetSurfacePalette _SDL_SetSurfacePalette;

  /// \brief Sets up a surface for directly accessing the pixels.
  ///
  /// Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write
  /// to and read from \c surface->pixels, using the pixel format stored in
  /// \c surface->format.  Once you are done accessing the surface, you should
  /// use SDL_UnlockSurface() to release it.
  ///
  /// Not all surfaces require locking.  If SDL_MUSTLOCK(surface) evaluates
  /// to 0, then you can read and write to the surface at any time, and the
  /// pixel format of the surface will not change.
  ///
  /// No operating system or library calls should be made between lock/unlock
  /// pairs, as critical system locks may be held during this time.
  ///
  /// SDL_LockSurface() returns 0, or -1 if the surface couldn't be locked.
  ///
  /// \sa SDL_UnlockSurface()
  int SDL_LockSurface(
    ffi.Pointer<SDL_Surface> surface,
  ) {
    _SDL_LockSurface ??=
        _dylib.lookupFunction<_c_SDL_LockSurface, _dart_SDL_LockSurface>(
            'SDL_LockSurface');
    return _SDL_LockSurface(
      surface,
    );
  }

  _dart_SDL_LockSurface _SDL_LockSurface;

  /// \sa SDL_LockSurface()
  void SDL_UnlockSurface(
    ffi.Pointer<SDL_Surface> surface,
  ) {
    _SDL_UnlockSurface ??=
        _dylib.lookupFunction<_c_SDL_UnlockSurface, _dart_SDL_UnlockSurface>(
            'SDL_UnlockSurface');
    return _SDL_UnlockSurface(
      surface,
    );
  }

  _dart_SDL_UnlockSurface _SDL_UnlockSurface;

  /// Load a surface from a seekable SDL data stream (memory or file).
  ///
  /// If \c freesrc is non-zero, the stream will be closed after being read.
  ///
  /// The new surface should be freed with SDL_FreeSurface().
  ///
  /// \return the new surface, or NULL if there was an error.
  ffi.Pointer<SDL_Surface> SDL_LoadBMP_RW(
    ffi.Pointer<SDL_RWops> src,
    int freesrc,
  ) {
    _SDL_LoadBMP_RW ??=
        _dylib.lookupFunction<_c_SDL_LoadBMP_RW, _dart_SDL_LoadBMP_RW>(
            'SDL_LoadBMP_RW');
    return _SDL_LoadBMP_RW(
      src,
      freesrc,
    );
  }

  _dart_SDL_LoadBMP_RW _SDL_LoadBMP_RW;

  /// Save a surface to a seekable SDL data stream (memory or file).
  ///
  /// Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the
  /// BMP directly. Other RGB formats with 8-bit or higher get converted to a
  /// 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit
  /// surface before they are saved. YUV and paletted 1-bit and 4-bit formats are
  /// not supported.
  ///
  /// If \c freedst is non-zero, the stream will be closed after being written.
  ///
  /// \return 0 if successful or -1 if there was an error.
  int SDL_SaveBMP_RW(
    ffi.Pointer<SDL_Surface> surface,
    ffi.Pointer<SDL_RWops> dst,
    int freedst,
  ) {
    _SDL_SaveBMP_RW ??=
        _dylib.lookupFunction<_c_SDL_SaveBMP_RW, _dart_SDL_SaveBMP_RW>(
            'SDL_SaveBMP_RW');
    return _SDL_SaveBMP_RW(
      surface,
      dst,
      freedst,
    );
  }

  _dart_SDL_SaveBMP_RW _SDL_SaveBMP_RW;

  /// \brief Sets the RLE acceleration hint for a surface.
  ///
  /// \return 0 on success, or -1 if the surface is not valid
  ///
  /// \note If RLE is enabled, colorkey and alpha blending blits are much faster,
  /// but the surface must be locked before directly accessing the pixels.
  int SDL_SetSurfaceRLE(
    ffi.Pointer<SDL_Surface> surface,
    int flag,
  ) {
    _SDL_SetSurfaceRLE ??=
        _dylib.lookupFunction<_c_SDL_SetSurfaceRLE, _dart_SDL_SetSurfaceRLE>(
            'SDL_SetSurfaceRLE');
    return _SDL_SetSurfaceRLE(
      surface,
      flag,
    );
  }

  _dart_SDL_SetSurfaceRLE _SDL_SetSurfaceRLE;

  /// \brief Sets the color key (transparent pixel) in a blittable surface.
  ///
  /// \param surface The surface to update
  /// \param flag Non-zero to enable colorkey and 0 to disable colorkey
  /// \param key The transparent pixel in the native surface format
  ///
  /// \return 0 on success, or -1 if the surface is not valid
  ///
  /// You can pass SDL_RLEACCEL to enable RLE accelerated blits.
  int SDL_SetColorKey(
    ffi.Pointer<SDL_Surface> surface,
    int flag,
    int key,
  ) {
    _SDL_SetColorKey ??=
        _dylib.lookupFunction<_c_SDL_SetColorKey, _dart_SDL_SetColorKey>(
            'SDL_SetColorKey');
    return _SDL_SetColorKey(
      surface,
      flag,
      key,
    );
  }

  _dart_SDL_SetColorKey _SDL_SetColorKey;

  /// \brief Returns whether the surface has a color key
  ///
  /// \return SDL_TRUE if the surface has a color key, or SDL_FALSE if the surface is NULL or has no color key
  int SDL_HasColorKey(
    ffi.Pointer<SDL_Surface> surface,
  ) {
    _SDL_HasColorKey ??=
        _dylib.lookupFunction<_c_SDL_HasColorKey, _dart_SDL_HasColorKey>(
            'SDL_HasColorKey');
    return _SDL_HasColorKey(
      surface,
    );
  }

  _dart_SDL_HasColorKey _SDL_HasColorKey;

  /// \brief Gets the color key (transparent pixel) in a blittable surface.
  ///
  /// \param surface The surface to update
  /// \param key A pointer filled in with the transparent pixel in the native
  /// surface format
  ///
  /// \return 0 on success, or -1 if the surface is not valid or colorkey is not
  /// enabled.
  int SDL_GetColorKey(
    ffi.Pointer<SDL_Surface> surface,
    ffi.Pointer<ffi.Uint32> key,
  ) {
    _SDL_GetColorKey ??=
        _dylib.lookupFunction<_c_SDL_GetColorKey, _dart_SDL_GetColorKey>(
            'SDL_GetColorKey');
    return _SDL_GetColorKey(
      surface,
      key,
    );
  }

  _dart_SDL_GetColorKey _SDL_GetColorKey;

  /// \brief Set an additional color value used in blit operations.
  ///
  /// \param surface The surface to update.
  /// \param r The red color value multiplied into blit operations.
  /// \param g The green color value multiplied into blit operations.
  /// \param b The blue color value multiplied into blit operations.
  ///
  /// \return 0 on success, or -1 if the surface is not valid.
  ///
  /// \sa SDL_GetSurfaceColorMod()
  int SDL_SetSurfaceColorMod(
    ffi.Pointer<SDL_Surface> surface,
    int r,
    int g,
    int b,
  ) {
    _SDL_SetSurfaceColorMod ??= _dylib.lookupFunction<_c_SDL_SetSurfaceColorMod,
        _dart_SDL_SetSurfaceColorMod>('SDL_SetSurfaceColorMod');
    return _SDL_SetSurfaceColorMod(
      surface,
      r,
      g,
      b,
    );
  }

  _dart_SDL_SetSurfaceColorMod _SDL_SetSurfaceColorMod;

  /// \brief Get the additional color value used in blit operations.
  ///
  /// \param surface The surface to query.
  /// \param r A pointer filled in with the current red color value.
  /// \param g A pointer filled in with the current green color value.
  /// \param b A pointer filled in with the current blue color value.
  ///
  /// \return 0 on success, or -1 if the surface is not valid.
  ///
  /// \sa SDL_SetSurfaceColorMod()
  int SDL_GetSurfaceColorMod(
    ffi.Pointer<SDL_Surface> surface,
    ffi.Pointer<ffi.Uint8> r,
    ffi.Pointer<ffi.Uint8> g,
    ffi.Pointer<ffi.Uint8> b,
  ) {
    _SDL_GetSurfaceColorMod ??= _dylib.lookupFunction<_c_SDL_GetSurfaceColorMod,
        _dart_SDL_GetSurfaceColorMod>('SDL_GetSurfaceColorMod');
    return _SDL_GetSurfaceColorMod(
      surface,
      r,
      g,
      b,
    );
  }

  _dart_SDL_GetSurfaceColorMod _SDL_GetSurfaceColorMod;

  /// \brief Set an additional alpha value used in blit operations.
  ///
  /// \param surface The surface to update.
  /// \param alpha The alpha value multiplied into blit operations.
  ///
  /// \return 0 on success, or -1 if the surface is not valid.
  ///
  /// \sa SDL_GetSurfaceAlphaMod()
  int SDL_SetSurfaceAlphaMod(
    ffi.Pointer<SDL_Surface> surface,
    int alpha,
  ) {
    _SDL_SetSurfaceAlphaMod ??= _dylib.lookupFunction<_c_SDL_SetSurfaceAlphaMod,
        _dart_SDL_SetSurfaceAlphaMod>('SDL_SetSurfaceAlphaMod');
    return _SDL_SetSurfaceAlphaMod(
      surface,
      alpha,
    );
  }

  _dart_SDL_SetSurfaceAlphaMod _SDL_SetSurfaceAlphaMod;

  /// \brief Get the additional alpha value used in blit operations.
  ///
  /// \param surface The surface to query.
  /// \param alpha A pointer filled in with the current alpha value.
  ///
  /// \return 0 on success, or -1 if the surface is not valid.
  ///
  /// \sa SDL_SetSurfaceAlphaMod()
  int SDL_GetSurfaceAlphaMod(
    ffi.Pointer<SDL_Surface> surface,
    ffi.Pointer<ffi.Uint8> alpha,
  ) {
    _SDL_GetSurfaceAlphaMod ??= _dylib.lookupFunction<_c_SDL_GetSurfaceAlphaMod,
        _dart_SDL_GetSurfaceAlphaMod>('SDL_GetSurfaceAlphaMod');
    return _SDL_GetSurfaceAlphaMod(
      surface,
      alpha,
    );
  }

  _dart_SDL_GetSurfaceAlphaMod _SDL_GetSurfaceAlphaMod;

  /// \brief Set the blend mode used for blit operations.
  ///
  /// \param surface The surface to update.
  /// \param blendMode ::SDL_BlendMode to use for blit blending.
  ///
  /// \return 0 on success, or -1 if the parameters are not valid.
  ///
  /// \sa SDL_GetSurfaceBlendMode()
  int SDL_SetSurfaceBlendMode(
    ffi.Pointer<SDL_Surface> surface,
    int blendMode,
  ) {
    _SDL_SetSurfaceBlendMode ??= _dylib.lookupFunction<
        _c_SDL_SetSurfaceBlendMode,
        _dart_SDL_SetSurfaceBlendMode>('SDL_SetSurfaceBlendMode');
    return _SDL_SetSurfaceBlendMode(
      surface,
      blendMode,
    );
  }

  _dart_SDL_SetSurfaceBlendMode _SDL_SetSurfaceBlendMode;

  /// \brief Get the blend mode used for blit operations.
  ///
  /// \param surface   The surface to query.
  /// \param blendMode A pointer filled in with the current blend mode.
  ///
  /// \return 0 on success, or -1 if the surface is not valid.
  ///
  /// \sa SDL_SetSurfaceBlendMode()
  int SDL_GetSurfaceBlendMode(
    ffi.Pointer<SDL_Surface> surface,
    ffi.Pointer<ffi.Int32> blendMode,
  ) {
    _SDL_GetSurfaceBlendMode ??= _dylib.lookupFunction<
        _c_SDL_GetSurfaceBlendMode,
        _dart_SDL_GetSurfaceBlendMode>('SDL_GetSurfaceBlendMode');
    return _SDL_GetSurfaceBlendMode(
      surface,
      blendMode,
    );
  }

  _dart_SDL_GetSurfaceBlendMode _SDL_GetSurfaceBlendMode;

  /// Sets the clipping rectangle for the destination surface in a blit.
  ///
  /// If the clip rectangle is NULL, clipping will be disabled.
  ///
  /// If the clip rectangle doesn't intersect the surface, the function will
  /// return SDL_FALSE and blits will be completely clipped.  Otherwise the
  /// function returns SDL_TRUE and blits to the surface will be clipped to
  /// the intersection of the surface area and the clipping rectangle.
  ///
  /// Note that blits are automatically clipped to the edges of the source
  /// and destination surfaces.
  int SDL_SetClipRect(
    ffi.Pointer<SDL_Surface> surface,
    ffi.Pointer<SDL_Rect> rect,
  ) {
    _SDL_SetClipRect ??=
        _dylib.lookupFunction<_c_SDL_SetClipRect, _dart_SDL_SetClipRect>(
            'SDL_SetClipRect');
    return _SDL_SetClipRect(
      surface,
      rect,
    );
  }

  _dart_SDL_SetClipRect _SDL_SetClipRect;

  /// Gets the clipping rectangle for the destination surface in a blit.
  ///
  /// \c rect must be a pointer to a valid rectangle which will be filled
  /// with the correct values.
  void SDL_GetClipRect(
    ffi.Pointer<SDL_Surface> surface,
    ffi.Pointer<SDL_Rect> rect,
  ) {
    _SDL_GetClipRect ??=
        _dylib.lookupFunction<_c_SDL_GetClipRect, _dart_SDL_GetClipRect>(
            'SDL_GetClipRect');
    return _SDL_GetClipRect(
      surface,
      rect,
    );
  }

  _dart_SDL_GetClipRect _SDL_GetClipRect;

  ffi.Pointer<SDL_Surface> SDL_DuplicateSurface(
    ffi.Pointer<SDL_Surface> surface,
  ) {
    _SDL_DuplicateSurface ??= _dylib.lookupFunction<_c_SDL_DuplicateSurface,
        _dart_SDL_DuplicateSurface>('SDL_DuplicateSurface');
    return _SDL_DuplicateSurface(
      surface,
    );
  }

  _dart_SDL_DuplicateSurface _SDL_DuplicateSurface;

  /// Creates a new surface of the specified format, and then copies and maps
  /// the given surface to it so the blit of the converted surface will be as
  /// fast as possible.  If this function fails, it returns NULL.
  ///
  /// The \c flags parameter is passed to SDL_CreateRGBSurface() and has those
  /// semantics.  You can also pass ::SDL_RLEACCEL in the flags parameter and
  /// SDL will try to RLE accelerate colorkey and alpha blits in the resulting
  /// surface.
  ffi.Pointer<SDL_Surface> SDL_ConvertSurface(
    ffi.Pointer<SDL_Surface> src,
    ffi.Pointer<SDL_PixelFormat> fmt,
    int flags,
  ) {
    _SDL_ConvertSurface ??=
        _dylib.lookupFunction<_c_SDL_ConvertSurface, _dart_SDL_ConvertSurface>(
            'SDL_ConvertSurface');
    return _SDL_ConvertSurface(
      src,
      fmt,
      flags,
    );
  }

  _dart_SDL_ConvertSurface _SDL_ConvertSurface;

  ffi.Pointer<SDL_Surface> SDL_ConvertSurfaceFormat(
    ffi.Pointer<SDL_Surface> src,
    int pixel_format,
    int flags,
  ) {
    _SDL_ConvertSurfaceFormat ??= _dylib.lookupFunction<
        _c_SDL_ConvertSurfaceFormat,
        _dart_SDL_ConvertSurfaceFormat>('SDL_ConvertSurfaceFormat');
    return _SDL_ConvertSurfaceFormat(
      src,
      pixel_format,
      flags,
    );
  }

  _dart_SDL_ConvertSurfaceFormat _SDL_ConvertSurfaceFormat;

  /// \brief Copy a block of pixels of one format to another format
  ///
  /// \return 0 on success, or -1 if there was an error
  int SDL_ConvertPixels(
    int width,
    int height,
    int src_format,
    ffi.Pointer<ffi.Void> src,
    int src_pitch,
    int dst_format,
    ffi.Pointer<ffi.Void> dst,
    int dst_pitch,
  ) {
    _SDL_ConvertPixels ??=
        _dylib.lookupFunction<_c_SDL_ConvertPixels, _dart_SDL_ConvertPixels>(
            'SDL_ConvertPixels');
    return _SDL_ConvertPixels(
      width,
      height,
      src_format,
      src,
      src_pitch,
      dst_format,
      dst,
      dst_pitch,
    );
  }

  _dart_SDL_ConvertPixels _SDL_ConvertPixels;

  /// Performs a fast fill of the given rectangle with \c color.
  ///
  /// If \c rect is NULL, the whole surface will be filled with \c color.
  ///
  /// The color should be a pixel of the format used by the surface, and
  /// can be generated by the SDL_MapRGB() function.
  ///
  /// \return 0 on success, or -1 on error.
  int SDL_FillRect(
    ffi.Pointer<SDL_Surface> dst,
    ffi.Pointer<SDL_Rect> rect,
    int color,
  ) {
    _SDL_FillRect ??= _dylib
        .lookupFunction<_c_SDL_FillRect, _dart_SDL_FillRect>('SDL_FillRect');
    return _SDL_FillRect(
      dst,
      rect,
      color,
    );
  }

  _dart_SDL_FillRect _SDL_FillRect;

  int SDL_FillRects(
    ffi.Pointer<SDL_Surface> dst,
    ffi.Pointer<SDL_Rect> rects,
    int count,
    int color,
  ) {
    _SDL_FillRects ??= _dylib
        .lookupFunction<_c_SDL_FillRects, _dart_SDL_FillRects>('SDL_FillRects');
    return _SDL_FillRects(
      dst,
      rects,
      count,
      color,
    );
  }

  _dart_SDL_FillRects _SDL_FillRects;

  /// This is the public blit function, SDL_BlitSurface(), and it performs
  /// rectangle validation and clipping before passing it to SDL_LowerBlit()
  int SDL_UpperBlit(
    ffi.Pointer<SDL_Surface> src,
    ffi.Pointer<SDL_Rect> srcrect,
    ffi.Pointer<SDL_Surface> dst,
    ffi.Pointer<SDL_Rect> dstrect,
  ) {
    _SDL_UpperBlit ??= _dylib
        .lookupFunction<_c_SDL_UpperBlit, _dart_SDL_UpperBlit>('SDL_UpperBlit');
    return _SDL_UpperBlit(
      src,
      srcrect,
      dst,
      dstrect,
    );
  }

  _dart_SDL_UpperBlit _SDL_UpperBlit;

  /// This is a semi-private blit function and it performs low-level surface
  /// blitting only.
  int SDL_LowerBlit(
    ffi.Pointer<SDL_Surface> src,
    ffi.Pointer<SDL_Rect> srcrect,
    ffi.Pointer<SDL_Surface> dst,
    ffi.Pointer<SDL_Rect> dstrect,
  ) {
    _SDL_LowerBlit ??= _dylib
        .lookupFunction<_c_SDL_LowerBlit, _dart_SDL_LowerBlit>('SDL_LowerBlit');
    return _SDL_LowerBlit(
      src,
      srcrect,
      dst,
      dstrect,
    );
  }

  _dart_SDL_LowerBlit _SDL_LowerBlit;

  /// \brief Perform a fast, low quality, stretch blit between two surfaces of the
  /// same pixel format.
  ///
  /// \note This function uses a static buffer, and is not thread-safe.
  int SDL_SoftStretch(
    ffi.Pointer<SDL_Surface> src,
    ffi.Pointer<SDL_Rect> srcrect,
    ffi.Pointer<SDL_Surface> dst,
    ffi.Pointer<SDL_Rect> dstrect,
  ) {
    _SDL_SoftStretch ??=
        _dylib.lookupFunction<_c_SDL_SoftStretch, _dart_SDL_SoftStretch>(
            'SDL_SoftStretch');
    return _SDL_SoftStretch(
      src,
      srcrect,
      dst,
      dstrect,
    );
  }

  _dart_SDL_SoftStretch _SDL_SoftStretch;

  /// This is the public scaled blit function, SDL_BlitScaled(), and it performs
  /// rectangle validation and clipping before passing it to SDL_LowerBlitScaled()
  int SDL_UpperBlitScaled(
    ffi.Pointer<SDL_Surface> src,
    ffi.Pointer<SDL_Rect> srcrect,
    ffi.Pointer<SDL_Surface> dst,
    ffi.Pointer<SDL_Rect> dstrect,
  ) {
    _SDL_UpperBlitScaled ??= _dylib.lookupFunction<_c_SDL_UpperBlitScaled,
        _dart_SDL_UpperBlitScaled>('SDL_UpperBlitScaled');
    return _SDL_UpperBlitScaled(
      src,
      srcrect,
      dst,
      dstrect,
    );
  }

  _dart_SDL_UpperBlitScaled _SDL_UpperBlitScaled;

  /// This is a semi-private blit function and it performs low-level surface
  /// scaled blitting only.
  int SDL_LowerBlitScaled(
    ffi.Pointer<SDL_Surface> src,
    ffi.Pointer<SDL_Rect> srcrect,
    ffi.Pointer<SDL_Surface> dst,
    ffi.Pointer<SDL_Rect> dstrect,
  ) {
    _SDL_LowerBlitScaled ??= _dylib.lookupFunction<_c_SDL_LowerBlitScaled,
        _dart_SDL_LowerBlitScaled>('SDL_LowerBlitScaled');
    return _SDL_LowerBlitScaled(
      src,
      srcrect,
      dst,
      dstrect,
    );
  }

  _dart_SDL_LowerBlitScaled _SDL_LowerBlitScaled;

  /// \brief Set the YUV conversion mode
  void SDL_SetYUVConversionMode(
    int mode,
  ) {
    _SDL_SetYUVConversionMode ??= _dylib.lookupFunction<
        _c_SDL_SetYUVConversionMode,
        _dart_SDL_SetYUVConversionMode>('SDL_SetYUVConversionMode');
    return _SDL_SetYUVConversionMode(
      mode,
    );
  }

  _dart_SDL_SetYUVConversionMode _SDL_SetYUVConversionMode;

  /// \brief Get the YUV conversion mode
  int SDL_GetYUVConversionMode() {
    _SDL_GetYUVConversionMode ??= _dylib.lookupFunction<
        _c_SDL_GetYUVConversionMode,
        _dart_SDL_GetYUVConversionMode>('SDL_GetYUVConversionMode');
    return _SDL_GetYUVConversionMode();
  }

  _dart_SDL_GetYUVConversionMode _SDL_GetYUVConversionMode;

  /// \brief Get the YUV conversion mode, returning the correct mode for the resolution when the current conversion mode is SDL_YUV_CONVERSION_AUTOMATIC
  int SDL_GetYUVConversionModeForResolution(
    int width,
    int height,
  ) {
    _SDL_GetYUVConversionModeForResolution ??= _dylib.lookupFunction<
            _c_SDL_GetYUVConversionModeForResolution,
            _dart_SDL_GetYUVConversionModeForResolution>(
        'SDL_GetYUVConversionModeForResolution');
    return _SDL_GetYUVConversionModeForResolution(
      width,
      height,
    );
  }

  _dart_SDL_GetYUVConversionModeForResolution
      _SDL_GetYUVConversionModeForResolution;

  /// \brief Get the number of video drivers compiled into SDL
  ///
  /// \sa SDL_GetVideoDriver()
  int SDL_GetNumVideoDrivers() {
    _SDL_GetNumVideoDrivers ??= _dylib.lookupFunction<_c_SDL_GetNumVideoDrivers,
        _dart_SDL_GetNumVideoDrivers>('SDL_GetNumVideoDrivers');
    return _SDL_GetNumVideoDrivers();
  }

  _dart_SDL_GetNumVideoDrivers _SDL_GetNumVideoDrivers;

  /// \brief Get the name of a built in video driver.
  ///
  /// \note The video drivers are presented in the order in which they are
  /// normally checked during initialization.
  ///
  /// \sa SDL_GetNumVideoDrivers()
  ffi.Pointer<ffi.Int8> SDL_GetVideoDriver(
    int index,
  ) {
    _SDL_GetVideoDriver ??=
        _dylib.lookupFunction<_c_SDL_GetVideoDriver, _dart_SDL_GetVideoDriver>(
            'SDL_GetVideoDriver');
    return _SDL_GetVideoDriver(
      index,
    );
  }

  _dart_SDL_GetVideoDriver _SDL_GetVideoDriver;

  /// \brief Initialize the video subsystem, optionally specifying a video driver.
  ///
  /// \param driver_name Initialize a specific driver by name, or NULL for the
  /// default video driver.
  ///
  /// \return 0 on success, -1 on error
  ///
  /// This function initializes the video subsystem; setting up a connection
  /// to the window manager, etc, and determines the available display modes
  /// and pixel formats, but does not initialize a window or graphics mode.
  ///
  /// \sa SDL_VideoQuit()
  int SDL_VideoInit(
    ffi.Pointer<ffi.Int8> driver_name,
  ) {
    _SDL_VideoInit ??= _dylib
        .lookupFunction<_c_SDL_VideoInit, _dart_SDL_VideoInit>('SDL_VideoInit');
    return _SDL_VideoInit(
      driver_name,
    );
  }

  _dart_SDL_VideoInit _SDL_VideoInit;

  /// \brief Shuts down the video subsystem.
  ///
  /// This function closes all windows, and restores the original video mode.
  ///
  /// \sa SDL_VideoInit()
  void SDL_VideoQuit() {
    _SDL_VideoQuit ??= _dylib
        .lookupFunction<_c_SDL_VideoQuit, _dart_SDL_VideoQuit>('SDL_VideoQuit');
    return _SDL_VideoQuit();
  }

  _dart_SDL_VideoQuit _SDL_VideoQuit;

  /// \brief Returns the name of the currently initialized video driver.
  ///
  /// \return The name of the current video driver or NULL if no driver
  /// has been initialized
  ///
  /// \sa SDL_GetNumVideoDrivers()
  /// \sa SDL_GetVideoDriver()
  ffi.Pointer<ffi.Int8> SDL_GetCurrentVideoDriver() {
    _SDL_GetCurrentVideoDriver ??= _dylib.lookupFunction<
        _c_SDL_GetCurrentVideoDriver,
        _dart_SDL_GetCurrentVideoDriver>('SDL_GetCurrentVideoDriver');
    return _SDL_GetCurrentVideoDriver();
  }

  _dart_SDL_GetCurrentVideoDriver _SDL_GetCurrentVideoDriver;

  /// \brief Returns the number of available video displays.
  ///
  /// \sa SDL_GetDisplayBounds()
  int SDL_GetNumVideoDisplays() {
    _SDL_GetNumVideoDisplays ??= _dylib.lookupFunction<
        _c_SDL_GetNumVideoDisplays,
        _dart_SDL_GetNumVideoDisplays>('SDL_GetNumVideoDisplays');
    return _SDL_GetNumVideoDisplays();
  }

  _dart_SDL_GetNumVideoDisplays _SDL_GetNumVideoDisplays;

  /// \brief Get the name of a display in UTF-8 encoding
  ///
  /// \return The name of a display, or NULL for an invalid display index.
  ///
  /// \sa SDL_GetNumVideoDisplays()
  ffi.Pointer<ffi.Int8> SDL_GetDisplayName(
    int displayIndex,
  ) {
    _SDL_GetDisplayName ??=
        _dylib.lookupFunction<_c_SDL_GetDisplayName, _dart_SDL_GetDisplayName>(
            'SDL_GetDisplayName');
    return _SDL_GetDisplayName(
      displayIndex,
    );
  }

  _dart_SDL_GetDisplayName _SDL_GetDisplayName;

  /// \brief Get the desktop area represented by a display, with the primary
  /// display located at 0,0
  ///
  /// \return 0 on success, or -1 if the index is out of range.
  ///
  /// \sa SDL_GetNumVideoDisplays()
  int SDL_GetDisplayBounds(
    int displayIndex,
    ffi.Pointer<SDL_Rect> rect,
  ) {
    _SDL_GetDisplayBounds ??= _dylib.lookupFunction<_c_SDL_GetDisplayBounds,
        _dart_SDL_GetDisplayBounds>('SDL_GetDisplayBounds');
    return _SDL_GetDisplayBounds(
      displayIndex,
      rect,
    );
  }

  _dart_SDL_GetDisplayBounds _SDL_GetDisplayBounds;

  /// \brief Get the usable desktop area represented by a display, with the
  /// primary display located at 0,0
  ///
  /// This is the same area as SDL_GetDisplayBounds() reports, but with portions
  /// reserved by the system removed. For example, on Mac OS X, this subtracts
  /// the area occupied by the menu bar and dock.
  ///
  /// Setting a window to be fullscreen generally bypasses these unusable areas,
  /// so these are good guidelines for the maximum space available to a
  /// non-fullscreen window.
  ///
  /// \return 0 on success, or -1 if the index is out of range.
  ///
  /// \sa SDL_GetDisplayBounds()
  /// \sa SDL_GetNumVideoDisplays()
  int SDL_GetDisplayUsableBounds(
    int displayIndex,
    ffi.Pointer<SDL_Rect> rect,
  ) {
    _SDL_GetDisplayUsableBounds ??= _dylib.lookupFunction<
        _c_SDL_GetDisplayUsableBounds,
        _dart_SDL_GetDisplayUsableBounds>('SDL_GetDisplayUsableBounds');
    return _SDL_GetDisplayUsableBounds(
      displayIndex,
      rect,
    );
  }

  _dart_SDL_GetDisplayUsableBounds _SDL_GetDisplayUsableBounds;

  /// \brief Get the dots/pixels-per-inch for a display
  ///
  /// \note Diagonal, horizontal and vertical DPI can all be optionally
  /// returned if the parameter is non-NULL.
  ///
  /// \return 0 on success, or -1 if no DPI information is available or the index is out of range.
  ///
  /// \sa SDL_GetNumVideoDisplays()
  int SDL_GetDisplayDPI(
    int displayIndex,
    ffi.Pointer<ffi.Float> ddpi,
    ffi.Pointer<ffi.Float> hdpi,
    ffi.Pointer<ffi.Float> vdpi,
  ) {
    _SDL_GetDisplayDPI ??=
        _dylib.lookupFunction<_c_SDL_GetDisplayDPI, _dart_SDL_GetDisplayDPI>(
            'SDL_GetDisplayDPI');
    return _SDL_GetDisplayDPI(
      displayIndex,
      ddpi,
      hdpi,
      vdpi,
    );
  }

  _dart_SDL_GetDisplayDPI _SDL_GetDisplayDPI;

  /// \brief Get the orientation of a display
  ///
  /// \return The orientation of the display, or SDL_ORIENTATION_UNKNOWN if it isn't available.
  ///
  /// \sa SDL_GetNumVideoDisplays()
  int SDL_GetDisplayOrientation(
    int displayIndex,
  ) {
    _SDL_GetDisplayOrientation ??= _dylib.lookupFunction<
        _c_SDL_GetDisplayOrientation,
        _dart_SDL_GetDisplayOrientation>('SDL_GetDisplayOrientation');
    return _SDL_GetDisplayOrientation(
      displayIndex,
    );
  }

  _dart_SDL_GetDisplayOrientation _SDL_GetDisplayOrientation;

  /// \brief Returns the number of available display modes.
  ///
  /// \sa SDL_GetDisplayMode()
  int SDL_GetNumDisplayModes(
    int displayIndex,
  ) {
    _SDL_GetNumDisplayModes ??= _dylib.lookupFunction<_c_SDL_GetNumDisplayModes,
        _dart_SDL_GetNumDisplayModes>('SDL_GetNumDisplayModes');
    return _SDL_GetNumDisplayModes(
      displayIndex,
    );
  }

  _dart_SDL_GetNumDisplayModes _SDL_GetNumDisplayModes;

  /// \brief Fill in information about a specific display mode.
  ///
  /// \note The display modes are sorted in this priority:
  /// \li bits per pixel -> more colors to fewer colors
  /// \li width -> largest to smallest
  /// \li height -> largest to smallest
  /// \li refresh rate -> highest to lowest
  ///
  /// \sa SDL_GetNumDisplayModes()
  int SDL_GetDisplayMode(
    int displayIndex,
    int modeIndex,
    ffi.Pointer<SDL_DisplayMode> mode,
  ) {
    _SDL_GetDisplayMode ??=
        _dylib.lookupFunction<_c_SDL_GetDisplayMode, _dart_SDL_GetDisplayMode>(
            'SDL_GetDisplayMode');
    return _SDL_GetDisplayMode(
      displayIndex,
      modeIndex,
      mode,
    );
  }

  _dart_SDL_GetDisplayMode _SDL_GetDisplayMode;

  /// \brief Fill in information about the desktop display mode.
  int SDL_GetDesktopDisplayMode(
    int displayIndex,
    ffi.Pointer<SDL_DisplayMode> mode,
  ) {
    _SDL_GetDesktopDisplayMode ??= _dylib.lookupFunction<
        _c_SDL_GetDesktopDisplayMode,
        _dart_SDL_GetDesktopDisplayMode>('SDL_GetDesktopDisplayMode');
    return _SDL_GetDesktopDisplayMode(
      displayIndex,
      mode,
    );
  }

  _dart_SDL_GetDesktopDisplayMode _SDL_GetDesktopDisplayMode;

  /// \brief Fill in information about the current display mode.
  int SDL_GetCurrentDisplayMode(
    int displayIndex,
    ffi.Pointer<SDL_DisplayMode> mode,
  ) {
    _SDL_GetCurrentDisplayMode ??= _dylib.lookupFunction<
        _c_SDL_GetCurrentDisplayMode,
        _dart_SDL_GetCurrentDisplayMode>('SDL_GetCurrentDisplayMode');
    return _SDL_GetCurrentDisplayMode(
      displayIndex,
      mode,
    );
  }

  _dart_SDL_GetCurrentDisplayMode _SDL_GetCurrentDisplayMode;

  /// \brief Get the closest match to the requested display mode.
  ///
  /// \param displayIndex The index of display from which mode should be queried.
  /// \param mode The desired display mode
  /// \param closest A pointer to a display mode to be filled in with the closest
  /// match of the available display modes.
  ///
  /// \return The passed in value \c closest, or NULL if no matching video mode
  /// was available.
  ///
  /// The available display modes are scanned, and \c closest is filled in with the
  /// closest mode matching the requested mode and returned.  The mode format and
  /// refresh_rate default to the desktop mode if they are 0.  The modes are
  /// scanned with size being first priority, format being second priority, and
  /// finally checking the refresh_rate.  If all the available modes are too
  /// small, then NULL is returned.
  ///
  /// \sa SDL_GetNumDisplayModes()
  /// \sa SDL_GetDisplayMode()
  ffi.Pointer<SDL_DisplayMode> SDL_GetClosestDisplayMode(
    int displayIndex,
    ffi.Pointer<SDL_DisplayMode> mode,
    ffi.Pointer<SDL_DisplayMode> closest,
  ) {
    _SDL_GetClosestDisplayMode ??= _dylib.lookupFunction<
        _c_SDL_GetClosestDisplayMode,
        _dart_SDL_GetClosestDisplayMode>('SDL_GetClosestDisplayMode');
    return _SDL_GetClosestDisplayMode(
      displayIndex,
      mode,
      closest,
    );
  }

  _dart_SDL_GetClosestDisplayMode _SDL_GetClosestDisplayMode;

  /// \brief Get the display index associated with a window.
  ///
  /// \return the display index of the display containing the center of the
  /// window, or -1 on error.
  int SDL_GetWindowDisplayIndex(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_GetWindowDisplayIndex ??= _dylib.lookupFunction<
        _c_SDL_GetWindowDisplayIndex,
        _dart_SDL_GetWindowDisplayIndex>('SDL_GetWindowDisplayIndex');
    return _SDL_GetWindowDisplayIndex(
      window,
    );
  }

  _dart_SDL_GetWindowDisplayIndex _SDL_GetWindowDisplayIndex;

  /// \brief Set the display mode used when a fullscreen window is visible.
  ///
  /// By default the window's dimensions and the desktop format and refresh rate
  /// are used.
  ///
  /// \param window The window for which the display mode should be set.
  /// \param mode The mode to use, or NULL for the default mode.
  ///
  /// \return 0 on success, or -1 if setting the display mode failed.
  ///
  /// \sa SDL_GetWindowDisplayMode()
  /// \sa SDL_SetWindowFullscreen()
  int SDL_SetWindowDisplayMode(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<SDL_DisplayMode> mode,
  ) {
    _SDL_SetWindowDisplayMode ??= _dylib.lookupFunction<
        _c_SDL_SetWindowDisplayMode,
        _dart_SDL_SetWindowDisplayMode>('SDL_SetWindowDisplayMode');
    return _SDL_SetWindowDisplayMode(
      window,
      mode,
    );
  }

  _dart_SDL_SetWindowDisplayMode _SDL_SetWindowDisplayMode;

  /// \brief Fill in information about the display mode used when a fullscreen
  /// window is visible.
  ///
  /// \sa SDL_SetWindowDisplayMode()
  /// \sa SDL_SetWindowFullscreen()
  int SDL_GetWindowDisplayMode(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<SDL_DisplayMode> mode,
  ) {
    _SDL_GetWindowDisplayMode ??= _dylib.lookupFunction<
        _c_SDL_GetWindowDisplayMode,
        _dart_SDL_GetWindowDisplayMode>('SDL_GetWindowDisplayMode');
    return _SDL_GetWindowDisplayMode(
      window,
      mode,
    );
  }

  _dart_SDL_GetWindowDisplayMode _SDL_GetWindowDisplayMode;

  /// \brief Get the pixel format associated with the window.
  int SDL_GetWindowPixelFormat(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_GetWindowPixelFormat ??= _dylib.lookupFunction<
        _c_SDL_GetWindowPixelFormat,
        _dart_SDL_GetWindowPixelFormat>('SDL_GetWindowPixelFormat');
    return _SDL_GetWindowPixelFormat(
      window,
    );
  }

  _dart_SDL_GetWindowPixelFormat _SDL_GetWindowPixelFormat;

  /// \brief Create a window with the specified position, dimensions, and flags.
  ///
  /// \param title The title of the window, in UTF-8 encoding.
  /// \param x     The x position of the window, ::SDL_WINDOWPOS_CENTERED, or
  /// ::SDL_WINDOWPOS_UNDEFINED.
  /// \param y     The y position of the window, ::SDL_WINDOWPOS_CENTERED, or
  /// ::SDL_WINDOWPOS_UNDEFINED.
  /// \param w     The width of the window, in screen coordinates.
  /// \param h     The height of the window, in screen coordinates.
  /// \param flags The flags for the window, a mask of any of the following:
  /// ::SDL_WINDOW_FULLSCREEN,    ::SDL_WINDOW_OPENGL,
  /// ::SDL_WINDOW_HIDDEN,        ::SDL_WINDOW_BORDERLESS,
  /// ::SDL_WINDOW_RESIZABLE,     ::SDL_WINDOW_MAXIMIZED,
  /// ::SDL_WINDOW_MINIMIZED,     ::SDL_WINDOW_INPUT_GRABBED,
  /// ::SDL_WINDOW_ALLOW_HIGHDPI, ::SDL_WINDOW_VULKAN.
  ///
  /// \return The created window, or NULL if window creation failed.
  ///
  /// If the window is created with the SDL_WINDOW_ALLOW_HIGHDPI flag, its size
  /// in pixels may differ from its size in screen coordinates on platforms with
  /// high-DPI support (e.g. iOS and Mac OS X). Use SDL_GetWindowSize() to query
  /// the client area's size in screen coordinates, and SDL_GL_GetDrawableSize(),
  /// SDL_Vulkan_GetDrawableSize(), or SDL_GetRendererOutputSize() to query the
  /// drawable size in pixels.
  ///
  /// If the window is created with any of the SDL_WINDOW_OPENGL or
  /// SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function
  /// (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the
  /// corresponding UnloadLibrary function is called by SDL_DestroyWindow().
  ///
  /// If SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,
  /// SDL_CreateWindow() will fail because SDL_Vulkan_LoadLibrary() will fail.
  ///
  /// \note On non-Apple devices, SDL requires you to either not link to the
  /// Vulkan loader or link to a dynamic library version. This limitation
  /// may be removed in a future version of SDL.
  ///
  /// \sa SDL_DestroyWindow()
  /// \sa SDL_GL_LoadLibrary()
  /// \sa SDL_Vulkan_LoadLibrary()
  ffi.Pointer<SDL_Window> SDL_CreateWindow(
    ffi.Pointer<ffi.Int8> title,
    int x,
    int y,
    int w,
    int h,
    int flags,
  ) {
    _SDL_CreateWindow ??=
        _dylib.lookupFunction<_c_SDL_CreateWindow, _dart_SDL_CreateWindow>(
            'SDL_CreateWindow');
    return _SDL_CreateWindow(
      title,
      x,
      y,
      w,
      h,
      flags,
    );
  }

  _dart_SDL_CreateWindow _SDL_CreateWindow;

  /// \brief Create an SDL window from an existing native window.
  ///
  /// \param data A pointer to driver-dependent window creation data
  ///
  /// \return The created window, or NULL if window creation failed.
  ///
  /// \sa SDL_DestroyWindow()
  ffi.Pointer<SDL_Window> SDL_CreateWindowFrom(
    ffi.Pointer<ffi.Void> data,
  ) {
    _SDL_CreateWindowFrom ??= _dylib.lookupFunction<_c_SDL_CreateWindowFrom,
        _dart_SDL_CreateWindowFrom>('SDL_CreateWindowFrom');
    return _SDL_CreateWindowFrom(
      data,
    );
  }

  _dart_SDL_CreateWindowFrom _SDL_CreateWindowFrom;

  /// \brief Get the numeric ID of a window, for logging purposes.
  int SDL_GetWindowID(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_GetWindowID ??=
        _dylib.lookupFunction<_c_SDL_GetWindowID, _dart_SDL_GetWindowID>(
            'SDL_GetWindowID');
    return _SDL_GetWindowID(
      window,
    );
  }

  _dart_SDL_GetWindowID _SDL_GetWindowID;

  /// \brief Get a window from a stored ID, or NULL if it doesn't exist.
  ffi.Pointer<SDL_Window> SDL_GetWindowFromID(
    int id,
  ) {
    _SDL_GetWindowFromID ??= _dylib.lookupFunction<_c_SDL_GetWindowFromID,
        _dart_SDL_GetWindowFromID>('SDL_GetWindowFromID');
    return _SDL_GetWindowFromID(
      id,
    );
  }

  _dart_SDL_GetWindowFromID _SDL_GetWindowFromID;

  /// \brief Get the window flags.
  int SDL_GetWindowFlags(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_GetWindowFlags ??=
        _dylib.lookupFunction<_c_SDL_GetWindowFlags, _dart_SDL_GetWindowFlags>(
            'SDL_GetWindowFlags');
    return _SDL_GetWindowFlags(
      window,
    );
  }

  _dart_SDL_GetWindowFlags _SDL_GetWindowFlags;

  /// \brief Set the title of a window, in UTF-8 format.
  ///
  /// \sa SDL_GetWindowTitle()
  void SDL_SetWindowTitle(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.Int8> title,
  ) {
    _SDL_SetWindowTitle ??=
        _dylib.lookupFunction<_c_SDL_SetWindowTitle, _dart_SDL_SetWindowTitle>(
            'SDL_SetWindowTitle');
    return _SDL_SetWindowTitle(
      window,
      title,
    );
  }

  _dart_SDL_SetWindowTitle _SDL_SetWindowTitle;

  /// \brief Get the title of a window, in UTF-8 format.
  ///
  /// \sa SDL_SetWindowTitle()
  ffi.Pointer<ffi.Int8> SDL_GetWindowTitle(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_GetWindowTitle ??=
        _dylib.lookupFunction<_c_SDL_GetWindowTitle, _dart_SDL_GetWindowTitle>(
            'SDL_GetWindowTitle');
    return _SDL_GetWindowTitle(
      window,
    );
  }

  _dart_SDL_GetWindowTitle _SDL_GetWindowTitle;

  /// \brief Set the icon for a window.
  ///
  /// \param window The window for which the icon should be set.
  /// \param icon The icon for the window.
  void SDL_SetWindowIcon(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<SDL_Surface> icon,
  ) {
    _SDL_SetWindowIcon ??=
        _dylib.lookupFunction<_c_SDL_SetWindowIcon, _dart_SDL_SetWindowIcon>(
            'SDL_SetWindowIcon');
    return _SDL_SetWindowIcon(
      window,
      icon,
    );
  }

  _dart_SDL_SetWindowIcon _SDL_SetWindowIcon;

  /// \brief Associate an arbitrary named pointer with a window.
  ///
  /// \param window   The window to associate with the pointer.
  /// \param name     The name of the pointer.
  /// \param userdata The associated pointer.
  ///
  /// \return The previous value associated with 'name'
  ///
  /// \note The name is case-sensitive.
  ///
  /// \sa SDL_GetWindowData()
  ffi.Pointer<ffi.Void> SDL_SetWindowData(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _SDL_SetWindowData ??=
        _dylib.lookupFunction<_c_SDL_SetWindowData, _dart_SDL_SetWindowData>(
            'SDL_SetWindowData');
    return _SDL_SetWindowData(
      window,
      name,
      userdata,
    );
  }

  _dart_SDL_SetWindowData _SDL_SetWindowData;

  /// \brief Retrieve the data pointer associated with a window.
  ///
  /// \param window   The window to query.
  /// \param name     The name of the pointer.
  ///
  /// \return The value associated with 'name'
  ///
  /// \sa SDL_SetWindowData()
  ffi.Pointer<ffi.Void> SDL_GetWindowData(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _SDL_GetWindowData ??=
        _dylib.lookupFunction<_c_SDL_GetWindowData, _dart_SDL_GetWindowData>(
            'SDL_GetWindowData');
    return _SDL_GetWindowData(
      window,
      name,
    );
  }

  _dart_SDL_GetWindowData _SDL_GetWindowData;

  /// \brief Set the position of a window.
  ///
  /// \param window   The window to reposition.
  /// \param x        The x coordinate of the window in screen coordinates, or
  /// ::SDL_WINDOWPOS_CENTERED or ::SDL_WINDOWPOS_UNDEFINED.
  /// \param y        The y coordinate of the window in screen coordinates, or
  /// ::SDL_WINDOWPOS_CENTERED or ::SDL_WINDOWPOS_UNDEFINED.
  ///
  /// \note The window coordinate origin is the upper left of the display.
  ///
  /// \sa SDL_GetWindowPosition()
  void SDL_SetWindowPosition(
    ffi.Pointer<SDL_Window> window,
    int x,
    int y,
  ) {
    _SDL_SetWindowPosition ??= _dylib.lookupFunction<_c_SDL_SetWindowPosition,
        _dart_SDL_SetWindowPosition>('SDL_SetWindowPosition');
    return _SDL_SetWindowPosition(
      window,
      x,
      y,
    );
  }

  _dart_SDL_SetWindowPosition _SDL_SetWindowPosition;

  /// \brief Get the position of a window.
  ///
  /// \param window   The window to query.
  /// \param x        Pointer to variable for storing the x position, in screen
  /// coordinates. May be NULL.
  /// \param y        Pointer to variable for storing the y position, in screen
  /// coordinates. May be NULL.
  ///
  /// \sa SDL_SetWindowPosition()
  void SDL_GetWindowPosition(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.Int32> x,
    ffi.Pointer<ffi.Int32> y,
  ) {
    _SDL_GetWindowPosition ??= _dylib.lookupFunction<_c_SDL_GetWindowPosition,
        _dart_SDL_GetWindowPosition>('SDL_GetWindowPosition');
    return _SDL_GetWindowPosition(
      window,
      x,
      y,
    );
  }

  _dart_SDL_GetWindowPosition _SDL_GetWindowPosition;

  /// \brief Set the size of a window's client area.
  ///
  /// \param window   The window to resize.
  /// \param w        The width of the window, in screen coordinates. Must be >0.
  /// \param h        The height of the window, in screen coordinates. Must be >0.
  ///
  /// \note Fullscreen windows automatically match the size of the display mode,
  /// and you should use SDL_SetWindowDisplayMode() to change their size.
  ///
  /// The window size in screen coordinates may differ from the size in pixels, if
  /// the window was created with SDL_WINDOW_ALLOW_HIGHDPI on a platform with
  /// high-dpi support (e.g. iOS or OS X). Use SDL_GL_GetDrawableSize() or
  /// SDL_GetRendererOutputSize() to get the real client area size in pixels.
  ///
  /// \sa SDL_GetWindowSize()
  /// \sa SDL_SetWindowDisplayMode()
  void SDL_SetWindowSize(
    ffi.Pointer<SDL_Window> window,
    int w,
    int h,
  ) {
    _SDL_SetWindowSize ??=
        _dylib.lookupFunction<_c_SDL_SetWindowSize, _dart_SDL_SetWindowSize>(
            'SDL_SetWindowSize');
    return _SDL_SetWindowSize(
      window,
      w,
      h,
    );
  }

  _dart_SDL_SetWindowSize _SDL_SetWindowSize;

  /// \brief Get the size of a window's client area.
  ///
  /// \param window   The window to query.
  /// \param w        Pointer to variable for storing the width, in screen
  /// coordinates. May be NULL.
  /// \param h        Pointer to variable for storing the height, in screen
  /// coordinates. May be NULL.
  ///
  /// The window size in screen coordinates may differ from the size in pixels, if
  /// the window was created with SDL_WINDOW_ALLOW_HIGHDPI on a platform with
  /// high-dpi support (e.g. iOS or OS X). Use SDL_GL_GetDrawableSize() or
  /// SDL_GetRendererOutputSize() to get the real client area size in pixels.
  ///
  /// \sa SDL_SetWindowSize()
  void SDL_GetWindowSize(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.Int32> w,
    ffi.Pointer<ffi.Int32> h,
  ) {
    _SDL_GetWindowSize ??=
        _dylib.lookupFunction<_c_SDL_GetWindowSize, _dart_SDL_GetWindowSize>(
            'SDL_GetWindowSize');
    return _SDL_GetWindowSize(
      window,
      w,
      h,
    );
  }

  _dart_SDL_GetWindowSize _SDL_GetWindowSize;

  /// \brief Get the size of a window's borders (decorations) around the client area.
  ///
  /// \param window The window to query.
  /// \param top Pointer to variable for storing the size of the top border. NULL is permitted.
  /// \param left Pointer to variable for storing the size of the left border. NULL is permitted.
  /// \param bottom Pointer to variable for storing the size of the bottom border. NULL is permitted.
  /// \param right Pointer to variable for storing the size of the right border. NULL is permitted.
  ///
  /// \return 0 on success, or -1 if getting this information is not supported.
  ///
  /// \note if this function fails (returns -1), the size values will be
  /// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as
  /// if the window in question was borderless.
  int SDL_GetWindowBordersSize(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.Int32> top,
    ffi.Pointer<ffi.Int32> left,
    ffi.Pointer<ffi.Int32> bottom,
    ffi.Pointer<ffi.Int32> right,
  ) {
    _SDL_GetWindowBordersSize ??= _dylib.lookupFunction<
        _c_SDL_GetWindowBordersSize,
        _dart_SDL_GetWindowBordersSize>('SDL_GetWindowBordersSize');
    return _SDL_GetWindowBordersSize(
      window,
      top,
      left,
      bottom,
      right,
    );
  }

  _dart_SDL_GetWindowBordersSize _SDL_GetWindowBordersSize;

  /// \brief Set the minimum size of a window's client area.
  ///
  /// \param window    The window to set a new minimum size.
  /// \param min_w     The minimum width of the window, must be >0
  /// \param min_h     The minimum height of the window, must be >0
  ///
  /// \note You can't change the minimum size of a fullscreen window, it
  /// automatically matches the size of the display mode.
  ///
  /// \sa SDL_GetWindowMinimumSize()
  /// \sa SDL_SetWindowMaximumSize()
  void SDL_SetWindowMinimumSize(
    ffi.Pointer<SDL_Window> window,
    int min_w,
    int min_h,
  ) {
    _SDL_SetWindowMinimumSize ??= _dylib.lookupFunction<
        _c_SDL_SetWindowMinimumSize,
        _dart_SDL_SetWindowMinimumSize>('SDL_SetWindowMinimumSize');
    return _SDL_SetWindowMinimumSize(
      window,
      min_w,
      min_h,
    );
  }

  _dart_SDL_SetWindowMinimumSize _SDL_SetWindowMinimumSize;

  /// \brief Get the minimum size of a window's client area.
  ///
  /// \param window   The window to query.
  /// \param w        Pointer to variable for storing the minimum width, may be NULL
  /// \param h        Pointer to variable for storing the minimum height, may be NULL
  ///
  /// \sa SDL_GetWindowMaximumSize()
  /// \sa SDL_SetWindowMinimumSize()
  void SDL_GetWindowMinimumSize(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.Int32> w,
    ffi.Pointer<ffi.Int32> h,
  ) {
    _SDL_GetWindowMinimumSize ??= _dylib.lookupFunction<
        _c_SDL_GetWindowMinimumSize,
        _dart_SDL_GetWindowMinimumSize>('SDL_GetWindowMinimumSize');
    return _SDL_GetWindowMinimumSize(
      window,
      w,
      h,
    );
  }

  _dart_SDL_GetWindowMinimumSize _SDL_GetWindowMinimumSize;

  /// \brief Set the maximum size of a window's client area.
  ///
  /// \param window    The window to set a new maximum size.
  /// \param max_w     The maximum width of the window, must be >0
  /// \param max_h     The maximum height of the window, must be >0
  ///
  /// \note You can't change the maximum size of a fullscreen window, it
  /// automatically matches the size of the display mode.
  ///
  /// \sa SDL_GetWindowMaximumSize()
  /// \sa SDL_SetWindowMinimumSize()
  void SDL_SetWindowMaximumSize(
    ffi.Pointer<SDL_Window> window,
    int max_w,
    int max_h,
  ) {
    _SDL_SetWindowMaximumSize ??= _dylib.lookupFunction<
        _c_SDL_SetWindowMaximumSize,
        _dart_SDL_SetWindowMaximumSize>('SDL_SetWindowMaximumSize');
    return _SDL_SetWindowMaximumSize(
      window,
      max_w,
      max_h,
    );
  }

  _dart_SDL_SetWindowMaximumSize _SDL_SetWindowMaximumSize;

  /// \brief Get the maximum size of a window's client area.
  ///
  /// \param window   The window to query.
  /// \param w        Pointer to variable for storing the maximum width, may be NULL
  /// \param h        Pointer to variable for storing the maximum height, may be NULL
  ///
  /// \sa SDL_GetWindowMinimumSize()
  /// \sa SDL_SetWindowMaximumSize()
  void SDL_GetWindowMaximumSize(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.Int32> w,
    ffi.Pointer<ffi.Int32> h,
  ) {
    _SDL_GetWindowMaximumSize ??= _dylib.lookupFunction<
        _c_SDL_GetWindowMaximumSize,
        _dart_SDL_GetWindowMaximumSize>('SDL_GetWindowMaximumSize');
    return _SDL_GetWindowMaximumSize(
      window,
      w,
      h,
    );
  }

  _dart_SDL_GetWindowMaximumSize _SDL_GetWindowMaximumSize;

  /// \brief Set the border state of a window.
  ///
  /// This will add or remove the window's SDL_WINDOW_BORDERLESS flag and
  /// add or remove the border from the actual window. This is a no-op if the
  /// window's border already matches the requested state.
  ///
  /// \param window The window of which to change the border state.
  /// \param bordered SDL_FALSE to remove border, SDL_TRUE to add border.
  ///
  /// \note You can't change the border state of a fullscreen window.
  ///
  /// \sa SDL_GetWindowFlags()
  void SDL_SetWindowBordered(
    ffi.Pointer<SDL_Window> window,
    int bordered,
  ) {
    _SDL_SetWindowBordered ??= _dylib.lookupFunction<_c_SDL_SetWindowBordered,
        _dart_SDL_SetWindowBordered>('SDL_SetWindowBordered');
    return _SDL_SetWindowBordered(
      window,
      bordered,
    );
  }

  _dart_SDL_SetWindowBordered _SDL_SetWindowBordered;

  /// \brief Set the user-resizable state of a window.
  ///
  /// This will add or remove the window's SDL_WINDOW_RESIZABLE flag and
  /// allow/disallow user resizing of the window. This is a no-op if the
  /// window's resizable state already matches the requested state.
  ///
  /// \param window The window of which to change the resizable state.
  /// \param resizable SDL_TRUE to allow resizing, SDL_FALSE to disallow.
  ///
  /// \note You can't change the resizable state of a fullscreen window.
  ///
  /// \sa SDL_GetWindowFlags()
  void SDL_SetWindowResizable(
    ffi.Pointer<SDL_Window> window,
    int resizable,
  ) {
    _SDL_SetWindowResizable ??= _dylib.lookupFunction<_c_SDL_SetWindowResizable,
        _dart_SDL_SetWindowResizable>('SDL_SetWindowResizable');
    return _SDL_SetWindowResizable(
      window,
      resizable,
    );
  }

  _dart_SDL_SetWindowResizable _SDL_SetWindowResizable;

  /// \brief Show a window.
  ///
  /// \sa SDL_HideWindow()
  void SDL_ShowWindow(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_ShowWindow ??=
        _dylib.lookupFunction<_c_SDL_ShowWindow, _dart_SDL_ShowWindow>(
            'SDL_ShowWindow');
    return _SDL_ShowWindow(
      window,
    );
  }

  _dart_SDL_ShowWindow _SDL_ShowWindow;

  /// \brief Hide a window.
  ///
  /// \sa SDL_ShowWindow()
  void SDL_HideWindow(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_HideWindow ??=
        _dylib.lookupFunction<_c_SDL_HideWindow, _dart_SDL_HideWindow>(
            'SDL_HideWindow');
    return _SDL_HideWindow(
      window,
    );
  }

  _dart_SDL_HideWindow _SDL_HideWindow;

  /// \brief Raise a window above other windows and set the input focus.
  void SDL_RaiseWindow(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_RaiseWindow ??=
        _dylib.lookupFunction<_c_SDL_RaiseWindow, _dart_SDL_RaiseWindow>(
            'SDL_RaiseWindow');
    return _SDL_RaiseWindow(
      window,
    );
  }

  _dart_SDL_RaiseWindow _SDL_RaiseWindow;

  /// \brief Make a window as large as possible.
  ///
  /// \sa SDL_RestoreWindow()
  void SDL_MaximizeWindow(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_MaximizeWindow ??=
        _dylib.lookupFunction<_c_SDL_MaximizeWindow, _dart_SDL_MaximizeWindow>(
            'SDL_MaximizeWindow');
    return _SDL_MaximizeWindow(
      window,
    );
  }

  _dart_SDL_MaximizeWindow _SDL_MaximizeWindow;

  /// \brief Minimize a window to an iconic representation.
  ///
  /// \sa SDL_RestoreWindow()
  void SDL_MinimizeWindow(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_MinimizeWindow ??=
        _dylib.lookupFunction<_c_SDL_MinimizeWindow, _dart_SDL_MinimizeWindow>(
            'SDL_MinimizeWindow');
    return _SDL_MinimizeWindow(
      window,
    );
  }

  _dart_SDL_MinimizeWindow _SDL_MinimizeWindow;

  /// \brief Restore the size and position of a minimized or maximized window.
  ///
  /// \sa SDL_MaximizeWindow()
  /// \sa SDL_MinimizeWindow()
  void SDL_RestoreWindow(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_RestoreWindow ??=
        _dylib.lookupFunction<_c_SDL_RestoreWindow, _dart_SDL_RestoreWindow>(
            'SDL_RestoreWindow');
    return _SDL_RestoreWindow(
      window,
    );
  }

  _dart_SDL_RestoreWindow _SDL_RestoreWindow;

  /// \brief Set a window's fullscreen state.
  ///
  /// \return 0 on success, or -1 if setting the display mode failed.
  ///
  /// \sa SDL_SetWindowDisplayMode()
  /// \sa SDL_GetWindowDisplayMode()
  int SDL_SetWindowFullscreen(
    ffi.Pointer<SDL_Window> window,
    int flags,
  ) {
    _SDL_SetWindowFullscreen ??= _dylib.lookupFunction<
        _c_SDL_SetWindowFullscreen,
        _dart_SDL_SetWindowFullscreen>('SDL_SetWindowFullscreen');
    return _SDL_SetWindowFullscreen(
      window,
      flags,
    );
  }

  _dart_SDL_SetWindowFullscreen _SDL_SetWindowFullscreen;

  /// \brief Get the SDL surface associated with the window.
  ///
  /// \return The window's framebuffer surface, or NULL on error.
  ///
  /// A new surface will be created with the optimal format for the window,
  /// if necessary. This surface will be freed when the window is destroyed.
  ///
  /// \note You may not combine this with 3D or the rendering API on this window.
  ///
  /// \sa SDL_UpdateWindowSurface()
  /// \sa SDL_UpdateWindowSurfaceRects()
  ffi.Pointer<SDL_Surface> SDL_GetWindowSurface(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_GetWindowSurface ??= _dylib.lookupFunction<_c_SDL_GetWindowSurface,
        _dart_SDL_GetWindowSurface>('SDL_GetWindowSurface');
    return _SDL_GetWindowSurface(
      window,
    );
  }

  _dart_SDL_GetWindowSurface _SDL_GetWindowSurface;

  /// \brief Copy the window surface to the screen.
  ///
  /// \return 0 on success, or -1 on error.
  ///
  /// \sa SDL_GetWindowSurface()
  /// \sa SDL_UpdateWindowSurfaceRects()
  int SDL_UpdateWindowSurface(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_UpdateWindowSurface ??= _dylib.lookupFunction<
        _c_SDL_UpdateWindowSurface,
        _dart_SDL_UpdateWindowSurface>('SDL_UpdateWindowSurface');
    return _SDL_UpdateWindowSurface(
      window,
    );
  }

  _dart_SDL_UpdateWindowSurface _SDL_UpdateWindowSurface;

  /// \brief Copy a number of rectangles on the window surface to the screen.
  ///
  /// \return 0 on success, or -1 on error.
  ///
  /// \sa SDL_GetWindowSurface()
  /// \sa SDL_UpdateWindowSurface()
  int SDL_UpdateWindowSurfaceRects(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<SDL_Rect> rects,
    int numrects,
  ) {
    _SDL_UpdateWindowSurfaceRects ??= _dylib.lookupFunction<
        _c_SDL_UpdateWindowSurfaceRects,
        _dart_SDL_UpdateWindowSurfaceRects>('SDL_UpdateWindowSurfaceRects');
    return _SDL_UpdateWindowSurfaceRects(
      window,
      rects,
      numrects,
    );
  }

  _dart_SDL_UpdateWindowSurfaceRects _SDL_UpdateWindowSurfaceRects;

  /// \brief Set a window's input grab mode.
  ///
  /// \param window The window for which the input grab mode should be set.
  /// \param grabbed This is SDL_TRUE to grab input, and SDL_FALSE to release input.
  ///
  /// If the caller enables a grab while another window is currently grabbed,
  /// the other window loses its grab in favor of the caller's window.
  ///
  /// \sa SDL_GetWindowGrab()
  void SDL_SetWindowGrab(
    ffi.Pointer<SDL_Window> window,
    int grabbed,
  ) {
    _SDL_SetWindowGrab ??=
        _dylib.lookupFunction<_c_SDL_SetWindowGrab, _dart_SDL_SetWindowGrab>(
            'SDL_SetWindowGrab');
    return _SDL_SetWindowGrab(
      window,
      grabbed,
    );
  }

  _dart_SDL_SetWindowGrab _SDL_SetWindowGrab;

  /// \brief Get a window's input grab mode.
  ///
  /// \return This returns SDL_TRUE if input is grabbed, and SDL_FALSE otherwise.
  ///
  /// \sa SDL_SetWindowGrab()
  int SDL_GetWindowGrab(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_GetWindowGrab ??=
        _dylib.lookupFunction<_c_SDL_GetWindowGrab, _dart_SDL_GetWindowGrab>(
            'SDL_GetWindowGrab');
    return _SDL_GetWindowGrab(
      window,
    );
  }

  _dart_SDL_GetWindowGrab _SDL_GetWindowGrab;

  /// \brief Get the window that currently has an input grab enabled.
  ///
  /// \return This returns the window if input is grabbed, and NULL otherwise.
  ///
  /// \sa SDL_SetWindowGrab()
  ffi.Pointer<SDL_Window> SDL_GetGrabbedWindow() {
    _SDL_GetGrabbedWindow ??= _dylib.lookupFunction<_c_SDL_GetGrabbedWindow,
        _dart_SDL_GetGrabbedWindow>('SDL_GetGrabbedWindow');
    return _SDL_GetGrabbedWindow();
  }

  _dart_SDL_GetGrabbedWindow _SDL_GetGrabbedWindow;

  /// \brief Set the brightness (gamma correction) for a window.
  ///
  /// \return 0 on success, or -1 if setting the brightness isn't supported.
  ///
  /// \sa SDL_GetWindowBrightness()
  /// \sa SDL_SetWindowGammaRamp()
  int SDL_SetWindowBrightness(
    ffi.Pointer<SDL_Window> window,
    double brightness,
  ) {
    _SDL_SetWindowBrightness ??= _dylib.lookupFunction<
        _c_SDL_SetWindowBrightness,
        _dart_SDL_SetWindowBrightness>('SDL_SetWindowBrightness');
    return _SDL_SetWindowBrightness(
      window,
      brightness,
    );
  }

  _dart_SDL_SetWindowBrightness _SDL_SetWindowBrightness;

  /// \brief Get the brightness (gamma correction) for a window.
  ///
  /// \return The last brightness value passed to SDL_SetWindowBrightness()
  ///
  /// \sa SDL_SetWindowBrightness()
  double SDL_GetWindowBrightness(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_GetWindowBrightness ??= _dylib.lookupFunction<
        _c_SDL_GetWindowBrightness,
        _dart_SDL_GetWindowBrightness>('SDL_GetWindowBrightness');
    return _SDL_GetWindowBrightness(
      window,
    );
  }

  _dart_SDL_GetWindowBrightness _SDL_GetWindowBrightness;

  /// \brief Set the opacity for a window
  ///
  /// \param window The window which will be made transparent or opaque
  /// \param opacity Opacity (0.0f - transparent, 1.0f - opaque) This will be
  /// clamped internally between 0.0f and 1.0f.
  ///
  /// \return 0 on success, or -1 if setting the opacity isn't supported.
  ///
  /// \sa SDL_GetWindowOpacity()
  int SDL_SetWindowOpacity(
    ffi.Pointer<SDL_Window> window,
    double opacity,
  ) {
    _SDL_SetWindowOpacity ??= _dylib.lookupFunction<_c_SDL_SetWindowOpacity,
        _dart_SDL_SetWindowOpacity>('SDL_SetWindowOpacity');
    return _SDL_SetWindowOpacity(
      window,
      opacity,
    );
  }

  _dart_SDL_SetWindowOpacity _SDL_SetWindowOpacity;

  /// \brief Get the opacity of a window.
  ///
  /// If transparency isn't supported on this platform, opacity will be reported
  /// as 1.0f without error.
  ///
  /// \param window The window in question.
  /// \param out_opacity Opacity (0.0f - transparent, 1.0f - opaque)
  ///
  /// \return 0 on success, or -1 on error (invalid window, etc).
  ///
  /// \sa SDL_SetWindowOpacity()
  int SDL_GetWindowOpacity(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.Float> out_opacity,
  ) {
    _SDL_GetWindowOpacity ??= _dylib.lookupFunction<_c_SDL_GetWindowOpacity,
        _dart_SDL_GetWindowOpacity>('SDL_GetWindowOpacity');
    return _SDL_GetWindowOpacity(
      window,
      out_opacity,
    );
  }

  _dart_SDL_GetWindowOpacity _SDL_GetWindowOpacity;

  /// \brief Sets the window as a modal for another window (TODO: reconsider this function and/or its name)
  ///
  /// \param modal_window The window that should be modal
  /// \param parent_window The parent window
  ///
  /// \return 0 on success, or -1 otherwise.
  int SDL_SetWindowModalFor(
    ffi.Pointer<SDL_Window> modal_window,
    ffi.Pointer<SDL_Window> parent_window,
  ) {
    _SDL_SetWindowModalFor ??= _dylib.lookupFunction<_c_SDL_SetWindowModalFor,
        _dart_SDL_SetWindowModalFor>('SDL_SetWindowModalFor');
    return _SDL_SetWindowModalFor(
      modal_window,
      parent_window,
    );
  }

  _dart_SDL_SetWindowModalFor _SDL_SetWindowModalFor;

  /// \brief Explicitly sets input focus to the window.
  ///
  /// You almost certainly want SDL_RaiseWindow() instead of this function. Use
  /// this with caution, as you might give focus to a window that's completely
  /// obscured by other windows.
  ///
  /// \param window The window that should get the input focus
  ///
  /// \return 0 on success, or -1 otherwise.
  /// \sa SDL_RaiseWindow()
  int SDL_SetWindowInputFocus(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_SetWindowInputFocus ??= _dylib.lookupFunction<
        _c_SDL_SetWindowInputFocus,
        _dart_SDL_SetWindowInputFocus>('SDL_SetWindowInputFocus');
    return _SDL_SetWindowInputFocus(
      window,
    );
  }

  _dart_SDL_SetWindowInputFocus _SDL_SetWindowInputFocus;

  /// \brief Set the gamma ramp for a window.
  ///
  /// \param window The window for which the gamma ramp should be set.
  /// \param red The translation table for the red channel, or NULL.
  /// \param green The translation table for the green channel, or NULL.
  /// \param blue The translation table for the blue channel, or NULL.
  ///
  /// \return 0 on success, or -1 if gamma ramps are unsupported.
  ///
  /// Set the gamma translation table for the red, green, and blue channels
  /// of the video hardware.  Each table is an array of 256 16-bit quantities,
  /// representing a mapping between the input and output for that channel.
  /// The input is the index into the array, and the output is the 16-bit
  /// gamma value at that index, scaled to the output color precision.
  ///
  /// \sa SDL_GetWindowGammaRamp()
  int SDL_SetWindowGammaRamp(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.Uint16> red,
    ffi.Pointer<ffi.Uint16> green,
    ffi.Pointer<ffi.Uint16> blue,
  ) {
    _SDL_SetWindowGammaRamp ??= _dylib.lookupFunction<_c_SDL_SetWindowGammaRamp,
        _dart_SDL_SetWindowGammaRamp>('SDL_SetWindowGammaRamp');
    return _SDL_SetWindowGammaRamp(
      window,
      red,
      green,
      blue,
    );
  }

  _dart_SDL_SetWindowGammaRamp _SDL_SetWindowGammaRamp;

  /// \brief Get the gamma ramp for a window.
  ///
  /// \param window The window from which the gamma ramp should be queried.
  /// \param red   A pointer to a 256 element array of 16-bit quantities to hold
  /// the translation table for the red channel, or NULL.
  /// \param green A pointer to a 256 element array of 16-bit quantities to hold
  /// the translation table for the green channel, or NULL.
  /// \param blue  A pointer to a 256 element array of 16-bit quantities to hold
  /// the translation table for the blue channel, or NULL.
  ///
  /// \return 0 on success, or -1 if gamma ramps are unsupported.
  ///
  /// \sa SDL_SetWindowGammaRamp()
  int SDL_GetWindowGammaRamp(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.Uint16> red,
    ffi.Pointer<ffi.Uint16> green,
    ffi.Pointer<ffi.Uint16> blue,
  ) {
    _SDL_GetWindowGammaRamp ??= _dylib.lookupFunction<_c_SDL_GetWindowGammaRamp,
        _dart_SDL_GetWindowGammaRamp>('SDL_GetWindowGammaRamp');
    return _SDL_GetWindowGammaRamp(
      window,
      red,
      green,
      blue,
    );
  }

  _dart_SDL_GetWindowGammaRamp _SDL_GetWindowGammaRamp;

  /// \brief Provide a callback that decides if a window region has special properties.
  ///
  /// Normally windows are dragged and resized by decorations provided by the
  /// system window manager (a title bar, borders, etc), but for some apps, it
  /// makes sense to drag them from somewhere else inside the window itself; for
  /// example, one might have a borderless window that wants to be draggable
  /// from any part, or simulate its own title bar, etc.
  ///
  /// This function lets the app provide a callback that designates pieces of
  /// a given window as special. This callback is run during event processing
  /// if we need to tell the OS to treat a region of the window specially; the
  /// use of this callback is known as "hit testing."
  ///
  /// Mouse input may not be delivered to your application if it is within
  /// a special area; the OS will often apply that input to moving the window or
  /// resizing the window and not deliver it to the application.
  ///
  /// Specifying NULL for a callback disables hit-testing. Hit-testing is
  /// disabled by default.
  ///
  /// Platforms that don't support this functionality will return -1
  /// unconditionally, even if you're attempting to disable hit-testing.
  ///
  /// Your callback may fire at any time, and its firing does not indicate any
  /// specific behavior (for example, on Windows, this certainly might fire
  /// when the OS is deciding whether to drag your window, but it fires for lots
  /// of other reasons, too, some unrelated to anything you probably care about
  /// _and when the mouse isn't actually at the location it is testing_).
  /// Since this can fire at any time, you should try to keep your callback
  /// efficient, devoid of allocations, etc.
  ///
  /// \param window The window to set hit-testing on.
  /// \param callback The callback to call when doing a hit-test.
  /// \param callback_data An app-defined void pointer passed to the callback.
  /// \return 0 on success, -1 on error (including unsupported).
  int SDL_SetWindowHitTest(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.NativeFunction<SDL_HitTest>> callback,
    ffi.Pointer<ffi.Void> callback_data,
  ) {
    _SDL_SetWindowHitTest ??= _dylib.lookupFunction<_c_SDL_SetWindowHitTest,
        _dart_SDL_SetWindowHitTest>('SDL_SetWindowHitTest');
    return _SDL_SetWindowHitTest(
      window,
      callback,
      callback_data,
    );
  }

  _dart_SDL_SetWindowHitTest _SDL_SetWindowHitTest;

  /// \brief Destroy a window.
  void SDL_DestroyWindow(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_DestroyWindow ??=
        _dylib.lookupFunction<_c_SDL_DestroyWindow, _dart_SDL_DestroyWindow>(
            'SDL_DestroyWindow');
    return _SDL_DestroyWindow(
      window,
    );
  }

  _dart_SDL_DestroyWindow _SDL_DestroyWindow;

  /// \brief Returns whether the screensaver is currently enabled (default off).
  ///
  /// \sa SDL_EnableScreenSaver()
  /// \sa SDL_DisableScreenSaver()
  int SDL_IsScreenSaverEnabled() {
    _SDL_IsScreenSaverEnabled ??= _dylib.lookupFunction<
        _c_SDL_IsScreenSaverEnabled,
        _dart_SDL_IsScreenSaverEnabled>('SDL_IsScreenSaverEnabled');
    return _SDL_IsScreenSaverEnabled();
  }

  _dart_SDL_IsScreenSaverEnabled _SDL_IsScreenSaverEnabled;

  /// \brief Allow the screen to be blanked by a screensaver
  ///
  /// \sa SDL_IsScreenSaverEnabled()
  /// \sa SDL_DisableScreenSaver()
  void SDL_EnableScreenSaver() {
    _SDL_EnableScreenSaver ??= _dylib.lookupFunction<_c_SDL_EnableScreenSaver,
        _dart_SDL_EnableScreenSaver>('SDL_EnableScreenSaver');
    return _SDL_EnableScreenSaver();
  }

  _dart_SDL_EnableScreenSaver _SDL_EnableScreenSaver;

  /// \brief Prevent the screen from being blanked by a screensaver
  ///
  /// \sa SDL_IsScreenSaverEnabled()
  /// \sa SDL_EnableScreenSaver()
  void SDL_DisableScreenSaver() {
    _SDL_DisableScreenSaver ??= _dylib.lookupFunction<_c_SDL_DisableScreenSaver,
        _dart_SDL_DisableScreenSaver>('SDL_DisableScreenSaver');
    return _SDL_DisableScreenSaver();
  }

  _dart_SDL_DisableScreenSaver _SDL_DisableScreenSaver;

  /// \brief Dynamically load an OpenGL library.
  ///
  /// \param path The platform dependent OpenGL library name, or NULL to open the
  /// default OpenGL library.
  ///
  /// \return 0 on success, or -1 if the library couldn't be loaded.
  ///
  /// This should be done after initializing the video driver, but before
  /// creating any OpenGL windows.  If no OpenGL library is loaded, the default
  /// library will be loaded upon creation of the first OpenGL window.
  ///
  /// \note If you do this, you need to retrieve all of the GL functions used in
  /// your program from the dynamic library using SDL_GL_GetProcAddress().
  ///
  /// \sa SDL_GL_GetProcAddress()
  /// \sa SDL_GL_UnloadLibrary()
  int SDL_GL_LoadLibrary(
    ffi.Pointer<ffi.Int8> path,
  ) {
    _SDL_GL_LoadLibrary ??=
        _dylib.lookupFunction<_c_SDL_GL_LoadLibrary, _dart_SDL_GL_LoadLibrary>(
            'SDL_GL_LoadLibrary');
    return _SDL_GL_LoadLibrary(
      path,
    );
  }

  _dart_SDL_GL_LoadLibrary _SDL_GL_LoadLibrary;

  /// \brief Get the address of an OpenGL function.
  ffi.Pointer<ffi.Void> SDL_GL_GetProcAddress(
    ffi.Pointer<ffi.Int8> proc,
  ) {
    _SDL_GL_GetProcAddress ??= _dylib.lookupFunction<_c_SDL_GL_GetProcAddress,
        _dart_SDL_GL_GetProcAddress>('SDL_GL_GetProcAddress');
    return _SDL_GL_GetProcAddress(
      proc,
    );
  }

  _dart_SDL_GL_GetProcAddress _SDL_GL_GetProcAddress;

  /// \brief Unload the OpenGL library previously loaded by SDL_GL_LoadLibrary().
  ///
  /// \sa SDL_GL_LoadLibrary()
  void SDL_GL_UnloadLibrary() {
    _SDL_GL_UnloadLibrary ??= _dylib.lookupFunction<_c_SDL_GL_UnloadLibrary,
        _dart_SDL_GL_UnloadLibrary>('SDL_GL_UnloadLibrary');
    return _SDL_GL_UnloadLibrary();
  }

  _dart_SDL_GL_UnloadLibrary _SDL_GL_UnloadLibrary;

  /// \brief Return true if an OpenGL extension is supported for the current
  /// context.
  int SDL_GL_ExtensionSupported(
    ffi.Pointer<ffi.Int8> extension_1,
  ) {
    _SDL_GL_ExtensionSupported ??= _dylib.lookupFunction<
        _c_SDL_GL_ExtensionSupported,
        _dart_SDL_GL_ExtensionSupported>('SDL_GL_ExtensionSupported');
    return _SDL_GL_ExtensionSupported(
      extension_1,
    );
  }

  _dart_SDL_GL_ExtensionSupported _SDL_GL_ExtensionSupported;

  /// \brief Reset all previously set OpenGL context attributes to their default values
  void SDL_GL_ResetAttributes() {
    _SDL_GL_ResetAttributes ??= _dylib.lookupFunction<_c_SDL_GL_ResetAttributes,
        _dart_SDL_GL_ResetAttributes>('SDL_GL_ResetAttributes');
    return _SDL_GL_ResetAttributes();
  }

  _dart_SDL_GL_ResetAttributes _SDL_GL_ResetAttributes;

  /// \brief Set an OpenGL window attribute before window creation.
  ///
  /// \return 0 on success, or -1 if the attribute could not be set.
  int SDL_GL_SetAttribute(
    int attr,
    int value,
  ) {
    _SDL_GL_SetAttribute ??= _dylib.lookupFunction<_c_SDL_GL_SetAttribute,
        _dart_SDL_GL_SetAttribute>('SDL_GL_SetAttribute');
    return _SDL_GL_SetAttribute(
      attr,
      value,
    );
  }

  _dart_SDL_GL_SetAttribute _SDL_GL_SetAttribute;

  /// \brief Get the actual value for an attribute from the current context.
  ///
  /// \return 0 on success, or -1 if the attribute could not be retrieved.
  /// The integer at \c value will be modified in either case.
  int SDL_GL_GetAttribute(
    int attr,
    ffi.Pointer<ffi.Int32> value,
  ) {
    _SDL_GL_GetAttribute ??= _dylib.lookupFunction<_c_SDL_GL_GetAttribute,
        _dart_SDL_GL_GetAttribute>('SDL_GL_GetAttribute');
    return _SDL_GL_GetAttribute(
      attr,
      value,
    );
  }

  _dart_SDL_GL_GetAttribute _SDL_GL_GetAttribute;

  /// \brief Create an OpenGL context for use with an OpenGL window, and make it
  /// current.
  ///
  /// \sa SDL_GL_DeleteContext()
  ffi.Pointer<ffi.Void> SDL_GL_CreateContext(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_GL_CreateContext ??= _dylib.lookupFunction<_c_SDL_GL_CreateContext,
        _dart_SDL_GL_CreateContext>('SDL_GL_CreateContext');
    return _SDL_GL_CreateContext(
      window,
    );
  }

  _dart_SDL_GL_CreateContext _SDL_GL_CreateContext;

  /// \brief Set up an OpenGL context for rendering into an OpenGL window.
  ///
  /// \note The context must have been created with a compatible window.
  int SDL_GL_MakeCurrent(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.Void> context,
  ) {
    _SDL_GL_MakeCurrent ??=
        _dylib.lookupFunction<_c_SDL_GL_MakeCurrent, _dart_SDL_GL_MakeCurrent>(
            'SDL_GL_MakeCurrent');
    return _SDL_GL_MakeCurrent(
      window,
      context,
    );
  }

  _dart_SDL_GL_MakeCurrent _SDL_GL_MakeCurrent;

  /// \brief Get the currently active OpenGL window.
  ffi.Pointer<SDL_Window> SDL_GL_GetCurrentWindow() {
    _SDL_GL_GetCurrentWindow ??= _dylib.lookupFunction<
        _c_SDL_GL_GetCurrentWindow,
        _dart_SDL_GL_GetCurrentWindow>('SDL_GL_GetCurrentWindow');
    return _SDL_GL_GetCurrentWindow();
  }

  _dart_SDL_GL_GetCurrentWindow _SDL_GL_GetCurrentWindow;

  /// \brief Get the currently active OpenGL context.
  ffi.Pointer<ffi.Void> SDL_GL_GetCurrentContext() {
    _SDL_GL_GetCurrentContext ??= _dylib.lookupFunction<
        _c_SDL_GL_GetCurrentContext,
        _dart_SDL_GL_GetCurrentContext>('SDL_GL_GetCurrentContext');
    return _SDL_GL_GetCurrentContext();
  }

  _dart_SDL_GL_GetCurrentContext _SDL_GL_GetCurrentContext;

  /// \brief Get the size of a window's underlying drawable in pixels (for use
  /// with glViewport).
  ///
  /// \param window   Window from which the drawable size should be queried
  /// \param w        Pointer to variable for storing the width in pixels, may be NULL
  /// \param h        Pointer to variable for storing the height in pixels, may be NULL
  ///
  /// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI
  /// drawable, i.e. the window was created with SDL_WINDOW_ALLOW_HIGHDPI on a
  /// platform with high-DPI support (Apple calls this "Retina"), and not disabled
  /// by the SDL_HINT_VIDEO_HIGHDPI_DISABLED hint.
  ///
  /// \sa SDL_GetWindowSize()
  /// \sa SDL_CreateWindow()
  void SDL_GL_GetDrawableSize(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.Int32> w,
    ffi.Pointer<ffi.Int32> h,
  ) {
    _SDL_GL_GetDrawableSize ??= _dylib.lookupFunction<_c_SDL_GL_GetDrawableSize,
        _dart_SDL_GL_GetDrawableSize>('SDL_GL_GetDrawableSize');
    return _SDL_GL_GetDrawableSize(
      window,
      w,
      h,
    );
  }

  _dart_SDL_GL_GetDrawableSize _SDL_GL_GetDrawableSize;

  /// \brief Set the swap interval for the current OpenGL context.
  ///
  /// \param interval 0 for immediate updates, 1 for updates synchronized with the
  /// vertical retrace. If the system supports it, you may
  /// specify -1 to allow late swaps to happen immediately
  /// instead of waiting for the next retrace.
  ///
  /// \return 0 on success, or -1 if setting the swap interval is not supported.
  ///
  /// \sa SDL_GL_GetSwapInterval()
  int SDL_GL_SetSwapInterval(
    int interval,
  ) {
    _SDL_GL_SetSwapInterval ??= _dylib.lookupFunction<_c_SDL_GL_SetSwapInterval,
        _dart_SDL_GL_SetSwapInterval>('SDL_GL_SetSwapInterval');
    return _SDL_GL_SetSwapInterval(
      interval,
    );
  }

  _dart_SDL_GL_SetSwapInterval _SDL_GL_SetSwapInterval;

  /// \brief Get the swap interval for the current OpenGL context.
  ///
  /// \return 0 if there is no vertical retrace synchronization, 1 if the buffer
  /// swap is synchronized with the vertical retrace, and -1 if late
  /// swaps happen immediately instead of waiting for the next retrace.
  /// If the system can't determine the swap interval, or there isn't a
  /// valid current context, this will return 0 as a safe default.
  ///
  /// \sa SDL_GL_SetSwapInterval()
  int SDL_GL_GetSwapInterval() {
    _SDL_GL_GetSwapInterval ??= _dylib.lookupFunction<_c_SDL_GL_GetSwapInterval,
        _dart_SDL_GL_GetSwapInterval>('SDL_GL_GetSwapInterval');
    return _SDL_GL_GetSwapInterval();
  }

  _dart_SDL_GL_GetSwapInterval _SDL_GL_GetSwapInterval;

  /// \brief Swap the OpenGL buffers for a window, if double-buffering is
  /// supported.
  void SDL_GL_SwapWindow(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_GL_SwapWindow ??=
        _dylib.lookupFunction<_c_SDL_GL_SwapWindow, _dart_SDL_GL_SwapWindow>(
            'SDL_GL_SwapWindow');
    return _SDL_GL_SwapWindow(
      window,
    );
  }

  _dart_SDL_GL_SwapWindow _SDL_GL_SwapWindow;

  /// \brief Delete an OpenGL context.
  ///
  /// \sa SDL_GL_CreateContext()
  void SDL_GL_DeleteContext(
    ffi.Pointer<ffi.Void> context,
  ) {
    _SDL_GL_DeleteContext ??= _dylib.lookupFunction<_c_SDL_GL_DeleteContext,
        _dart_SDL_GL_DeleteContext>('SDL_GL_DeleteContext');
    return _SDL_GL_DeleteContext(
      context,
    );
  }

  _dart_SDL_GL_DeleteContext _SDL_GL_DeleteContext;

  /// \brief Get the window which currently has keyboard focus.
  ffi.Pointer<SDL_Window> SDL_GetKeyboardFocus() {
    _SDL_GetKeyboardFocus ??= _dylib.lookupFunction<_c_SDL_GetKeyboardFocus,
        _dart_SDL_GetKeyboardFocus>('SDL_GetKeyboardFocus');
    return _SDL_GetKeyboardFocus();
  }

  _dart_SDL_GetKeyboardFocus _SDL_GetKeyboardFocus;

  /// \brief Get a snapshot of the current state of the keyboard.
  ///
  /// \param numkeys if non-NULL, receives the length of the returned array.
  ///
  /// \return An array of key states. Indexes into this array are obtained by using ::SDL_Scancode values.
  ///
  /// \b Example:
  /// \code
  /// const Uint8 *state = SDL_GetKeyboardState(NULL);
  /// if ( state[SDL_SCANCODE_RETURN] )   {
  /// printf("<RETURN> is pressed.\n");
  /// }
  /// \endcode
  ffi.Pointer<ffi.Uint8> SDL_GetKeyboardState(
    ffi.Pointer<ffi.Int32> numkeys,
  ) {
    _SDL_GetKeyboardState ??= _dylib.lookupFunction<_c_SDL_GetKeyboardState,
        _dart_SDL_GetKeyboardState>('SDL_GetKeyboardState');
    return _SDL_GetKeyboardState(
      numkeys,
    );
  }

  _dart_SDL_GetKeyboardState _SDL_GetKeyboardState;

  /// \brief Get the current key modifier state for the keyboard.
  int SDL_GetModState() {
    _SDL_GetModState ??=
        _dylib.lookupFunction<_c_SDL_GetModState, _dart_SDL_GetModState>(
            'SDL_GetModState');
    return _SDL_GetModState();
  }

  _dart_SDL_GetModState _SDL_GetModState;

  /// \brief Set the current key modifier state for the keyboard.
  ///
  /// \note This does not change the keyboard state, only the key modifier flags.
  void SDL_SetModState(
    int modstate,
  ) {
    _SDL_SetModState ??=
        _dylib.lookupFunction<_c_SDL_SetModState, _dart_SDL_SetModState>(
            'SDL_SetModState');
    return _SDL_SetModState(
      modstate,
    );
  }

  _dart_SDL_SetModState _SDL_SetModState;

  /// \brief Get the key code corresponding to the given scancode according
  /// to the current keyboard layout.
  ///
  /// See ::SDL_Keycode for details.
  ///
  /// \sa SDL_GetKeyName()
  int SDL_GetKeyFromScancode(
    int scancode,
  ) {
    _SDL_GetKeyFromScancode ??= _dylib.lookupFunction<_c_SDL_GetKeyFromScancode,
        _dart_SDL_GetKeyFromScancode>('SDL_GetKeyFromScancode');
    return _SDL_GetKeyFromScancode(
      scancode,
    );
  }

  _dart_SDL_GetKeyFromScancode _SDL_GetKeyFromScancode;

  /// \brief Get the scancode corresponding to the given key code according to the
  /// current keyboard layout.
  ///
  /// See ::SDL_Scancode for details.
  ///
  /// \sa SDL_GetScancodeName()
  int SDL_GetScancodeFromKey(
    int key,
  ) {
    _SDL_GetScancodeFromKey ??= _dylib.lookupFunction<_c_SDL_GetScancodeFromKey,
        _dart_SDL_GetScancodeFromKey>('SDL_GetScancodeFromKey');
    return _SDL_GetScancodeFromKey(
      key,
    );
  }

  _dart_SDL_GetScancodeFromKey _SDL_GetScancodeFromKey;

  /// \brief Get a human-readable name for a scancode.
  ///
  /// \return A pointer to the name for the scancode.
  /// If the scancode doesn't have a name, this function returns
  /// an empty string ("").
  ///
  /// \sa SDL_Scancode
  ffi.Pointer<ffi.Int8> SDL_GetScancodeName(
    int scancode,
  ) {
    _SDL_GetScancodeName ??= _dylib.lookupFunction<_c_SDL_GetScancodeName,
        _dart_SDL_GetScancodeName>('SDL_GetScancodeName');
    return _SDL_GetScancodeName(
      scancode,
    );
  }

  _dart_SDL_GetScancodeName _SDL_GetScancodeName;

  /// \brief Get a scancode from a human-readable name
  ///
  /// \return scancode, or SDL_SCANCODE_UNKNOWN if the name wasn't recognized
  ///
  /// \sa SDL_Scancode
  int SDL_GetScancodeFromName(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _SDL_GetScancodeFromName ??= _dylib.lookupFunction<
        _c_SDL_GetScancodeFromName,
        _dart_SDL_GetScancodeFromName>('SDL_GetScancodeFromName');
    return _SDL_GetScancodeFromName(
      name,
    );
  }

  _dart_SDL_GetScancodeFromName _SDL_GetScancodeFromName;

  /// \brief Get a human-readable name for a key.
  ///
  /// \return A pointer to a UTF-8 string that stays valid at least until the next
  /// call to this function. If you need it around any longer, you must
  /// copy it.  If the key doesn't have a name, this function returns an
  /// empty string ("").
  ///
  /// \sa SDL_Keycode
  ffi.Pointer<ffi.Int8> SDL_GetKeyName(
    int key,
  ) {
    _SDL_GetKeyName ??=
        _dylib.lookupFunction<_c_SDL_GetKeyName, _dart_SDL_GetKeyName>(
            'SDL_GetKeyName');
    return _SDL_GetKeyName(
      key,
    );
  }

  _dart_SDL_GetKeyName _SDL_GetKeyName;

  /// \brief Get a key code from a human-readable name
  ///
  /// \return key code, or SDLK_UNKNOWN if the name wasn't recognized
  ///
  /// \sa SDL_Keycode
  int SDL_GetKeyFromName(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _SDL_GetKeyFromName ??=
        _dylib.lookupFunction<_c_SDL_GetKeyFromName, _dart_SDL_GetKeyFromName>(
            'SDL_GetKeyFromName');
    return _SDL_GetKeyFromName(
      name,
    );
  }

  _dart_SDL_GetKeyFromName _SDL_GetKeyFromName;

  /// \brief Start accepting Unicode text input events.
  /// This function will show the on-screen keyboard if supported.
  ///
  /// \sa SDL_StopTextInput()
  /// \sa SDL_SetTextInputRect()
  /// \sa SDL_HasScreenKeyboardSupport()
  void SDL_StartTextInput() {
    _SDL_StartTextInput ??=
        _dylib.lookupFunction<_c_SDL_StartTextInput, _dart_SDL_StartTextInput>(
            'SDL_StartTextInput');
    return _SDL_StartTextInput();
  }

  _dart_SDL_StartTextInput _SDL_StartTextInput;

  /// \brief Return whether or not Unicode text input events are enabled.
  ///
  /// \sa SDL_StartTextInput()
  /// \sa SDL_StopTextInput()
  int SDL_IsTextInputActive() {
    _SDL_IsTextInputActive ??= _dylib.lookupFunction<_c_SDL_IsTextInputActive,
        _dart_SDL_IsTextInputActive>('SDL_IsTextInputActive');
    return _SDL_IsTextInputActive();
  }

  _dart_SDL_IsTextInputActive _SDL_IsTextInputActive;

  /// \brief Stop receiving any text input events.
  /// This function will hide the on-screen keyboard if supported.
  ///
  /// \sa SDL_StartTextInput()
  /// \sa SDL_HasScreenKeyboardSupport()
  void SDL_StopTextInput() {
    _SDL_StopTextInput ??=
        _dylib.lookupFunction<_c_SDL_StopTextInput, _dart_SDL_StopTextInput>(
            'SDL_StopTextInput');
    return _SDL_StopTextInput();
  }

  _dart_SDL_StopTextInput _SDL_StopTextInput;

  /// \brief Set the rectangle used to type Unicode text inputs.
  /// This is used as a hint for IME and on-screen keyboard placement.
  ///
  /// \sa SDL_StartTextInput()
  void SDL_SetTextInputRect(
    ffi.Pointer<SDL_Rect> rect,
  ) {
    _SDL_SetTextInputRect ??= _dylib.lookupFunction<_c_SDL_SetTextInputRect,
        _dart_SDL_SetTextInputRect>('SDL_SetTextInputRect');
    return _SDL_SetTextInputRect(
      rect,
    );
  }

  _dart_SDL_SetTextInputRect _SDL_SetTextInputRect;

  /// \brief Returns whether the platform has some screen keyboard support.
  ///
  /// \return SDL_TRUE if some keyboard support is available else SDL_FALSE.
  ///
  /// \note Not all screen keyboard functions are supported on all platforms.
  ///
  /// \sa SDL_IsScreenKeyboardShown()
  int SDL_HasScreenKeyboardSupport() {
    _SDL_HasScreenKeyboardSupport ??= _dylib.lookupFunction<
        _c_SDL_HasScreenKeyboardSupport,
        _dart_SDL_HasScreenKeyboardSupport>('SDL_HasScreenKeyboardSupport');
    return _SDL_HasScreenKeyboardSupport();
  }

  _dart_SDL_HasScreenKeyboardSupport _SDL_HasScreenKeyboardSupport;

  /// \brief Returns whether the screen keyboard is shown for given window.
  ///
  /// \param window The window for which screen keyboard should be queried.
  ///
  /// \return SDL_TRUE if screen keyboard is shown else SDL_FALSE.
  ///
  /// \sa SDL_HasScreenKeyboardSupport()
  int SDL_IsScreenKeyboardShown(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_IsScreenKeyboardShown ??= _dylib.lookupFunction<
        _c_SDL_IsScreenKeyboardShown,
        _dart_SDL_IsScreenKeyboardShown>('SDL_IsScreenKeyboardShown');
    return _SDL_IsScreenKeyboardShown(
      window,
    );
  }

  _dart_SDL_IsScreenKeyboardShown _SDL_IsScreenKeyboardShown;

  /// \brief Create a CAMetalLayer-backed NSView/UIView and attach it to the
  /// specified window.
  ///
  /// On macOS, this does *not* associate a MTLDevice with the CAMetalLayer on its
  /// own. It is up to user code to do that.
  ///
  /// The returned handle can be casted directly to a NSView or UIView, and the
  /// CAMetalLayer can be accessed from the view's 'layer' property.
  ///
  /// \code
  /// SDL_MetalView metalview = SDL_Metal_CreateView(window);
  /// UIView *uiview = (__bridge UIView *)metalview;
  /// CAMetalLayer *metallayer = (CAMetalLayer *)uiview.layer;
  /// // [...]
  /// SDL_Metal_DestroyView(metalview);
  /// \endcode
  ///
  /// \sa SDL_Metal_DestroyView
  ffi.Pointer<ffi.Void> SDL_Metal_CreateView(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_Metal_CreateView ??= _dylib.lookupFunction<_c_SDL_Metal_CreateView,
        _dart_SDL_Metal_CreateView>('SDL_Metal_CreateView');
    return _SDL_Metal_CreateView(
      window,
    );
  }

  _dart_SDL_Metal_CreateView _SDL_Metal_CreateView;

  /// \brief Destroy an existing SDL_MetalView object.
  ///
  /// This should be called before SDL_DestroyWindow, if SDL_Metal_CreateView was
  /// called after SDL_CreateWindow.
  ///
  /// \sa SDL_Metal_CreateView
  void SDL_Metal_DestroyView(
    ffi.Pointer<ffi.Void> view,
  ) {
    _SDL_Metal_DestroyView ??= _dylib.lookupFunction<_c_SDL_Metal_DestroyView,
        _dart_SDL_Metal_DestroyView>('SDL_Metal_DestroyView');
    return _SDL_Metal_DestroyView(
      view,
    );
  }

  _dart_SDL_Metal_DestroyView _SDL_Metal_DestroyView;

  /// \brief Generates a random run seed string for the harness. The generated seed will contain alphanumeric characters (0-9A-Z).
  ///
  /// Note: The returned string needs to be deallocated by the caller.
  ///
  /// \param length The length of the seed string to generate
  ///
  /// \returns The generated seed string
  ffi.Pointer<ffi.Int8> SDLTest_GenerateRunSeed(
    int length,
  ) {
    _SDLTest_GenerateRunSeed ??= _dylib.lookupFunction<
        _c_SDLTest_GenerateRunSeed,
        _dart_SDLTest_GenerateRunSeed>('SDLTest_GenerateRunSeed');
    return _SDLTest_GenerateRunSeed(
      length,
    );
  }

  _dart_SDLTest_GenerateRunSeed _SDLTest_GenerateRunSeed;

  /// \brief Execute a test suite using the given run seed and execution key.
  ///
  /// \param testSuites Suites containing the test case.
  /// \param userRunSeed Custom run seed provided by user, or NULL to autogenerate one.
  /// \param userExecKey Custom execution key provided by user, or 0 to autogenerate one.
  /// \param filter Filter specification. NULL disables. Case sensitive.
  /// \param testIterations Number of iterations to run each test case.
  ///
  /// \returns Test run result; 0 when all tests passed, 1 if any tests failed.
  int SDLTest_RunSuites(
    ffi.Pointer<ffi.Pointer<SDLTest_TestSuiteReference>> testSuites,
    ffi.Pointer<ffi.Int8> userRunSeed,
    int userExecKey,
    ffi.Pointer<ffi.Int8> filter,
    int testIterations,
  ) {
    _SDLTest_RunSuites ??=
        _dylib.lookupFunction<_c_SDLTest_RunSuites, _dart_SDLTest_RunSuites>(
            'SDLTest_RunSuites');
    return _SDLTest_RunSuites(
      testSuites,
      userRunSeed,
      userExecKey,
      filter,
      testIterations,
    );
  }

  _dart_SDLTest_RunSuites _SDLTest_RunSuites;

  int SDL_main(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ) {
    _SDL_main ??=
        _dylib.lookupFunction<_c_SDL_main, _dart_SDL_main>('SDL_main');
    return _SDL_main(
      argc,
      argv,
    );
  }

  _dart_SDL_main _SDL_main;

  /// This is called by the real SDL main function to let the rest of the
  /// library know that initialization was done properly.
  ///
  /// Calling this yourself without knowing what you're doing can cause
  /// crashes and hard to diagnose problems with your application.
  void SDL_SetMainReady() {
    _SDL_SetMainReady ??=
        _dylib.lookupFunction<_c_SDL_SetMainReady, _dart_SDL_SetMainReady>(
            'SDL_SetMainReady');
    return _SDL_SetMainReady();
  }

  _dart_SDL_SetMainReady _SDL_SetMainReady;

  int SDL_ReportAssertion(
    ffi.Pointer<SDL_AssertData> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
  ) {
    _SDL_ReportAssertion ??= _dylib.lookupFunction<_c_SDL_ReportAssertion,
        _dart_SDL_ReportAssertion>('SDL_ReportAssertion');
    return _SDL_ReportAssertion(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_SDL_ReportAssertion _SDL_ReportAssertion;

  /// \brief Set an application-defined assertion handler.
  ///
  /// This allows an app to show its own assertion UI and/or force the
  /// response to an assertion failure. If the app doesn't provide this, SDL
  /// will try to do the right thing, popping up a system-specific GUI dialog,
  /// and probably minimizing any fullscreen windows.
  ///
  /// This callback may fire from any thread, but it runs wrapped in a mutex, so
  /// it will only fire from one thread at a time.
  ///
  /// Setting the callback to NULL restores SDL's original internal handler.
  ///
  /// This callback is NOT reset to SDL's internal handler upon SDL_Quit()!
  ///
  /// Return SDL_AssertState value of how to handle the assertion failure.
  ///
  /// \param handler Callback function, called when an assertion fails.
  /// \param userdata A pointer passed to the callback as-is.
  void SDL_SetAssertionHandler(
    ffi.Pointer<ffi.NativeFunction<SDL_AssertionHandler>> handler,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _SDL_SetAssertionHandler ??= _dylib.lookupFunction<
        _c_SDL_SetAssertionHandler,
        _dart_SDL_SetAssertionHandler>('SDL_SetAssertionHandler');
    return _SDL_SetAssertionHandler(
      handler,
      userdata,
    );
  }

  _dart_SDL_SetAssertionHandler _SDL_SetAssertionHandler;

  /// \brief Get the default assertion handler.
  ///
  /// This returns the function pointer that is called by default when an
  /// assertion is triggered. This is an internal function provided by SDL,
  /// that is used for assertions when SDL_SetAssertionHandler() hasn't been
  /// used to provide a different function.
  ///
  /// \return The default SDL_AssertionHandler that is called when an assert triggers.
  ffi.Pointer<ffi.NativeFunction<SDL_AssertionHandler>>
      SDL_GetDefaultAssertionHandler() {
    _SDL_GetDefaultAssertionHandler ??= _dylib.lookupFunction<
        _c_SDL_GetDefaultAssertionHandler,
        _dart_SDL_GetDefaultAssertionHandler>('SDL_GetDefaultAssertionHandler');
    return _SDL_GetDefaultAssertionHandler();
  }

  _dart_SDL_GetDefaultAssertionHandler _SDL_GetDefaultAssertionHandler;

  /// \brief Get the current assertion handler.
  ///
  /// This returns the function pointer that is called when an assertion is
  /// triggered. This is either the value last passed to
  /// SDL_SetAssertionHandler(), or if no application-specified function is
  /// set, is equivalent to calling SDL_GetDefaultAssertionHandler().
  ///
  /// \param puserdata Pointer to a void*, which will store the "userdata"
  /// pointer that was passed to SDL_SetAssertionHandler().
  /// This value will always be NULL for the default handler.
  /// If you don't care about this data, it is safe to pass
  /// a NULL pointer to this function to ignore it.
  /// \return The SDL_AssertionHandler that is called when an assert triggers.
  ffi.Pointer<ffi.NativeFunction<SDL_AssertionHandler>> SDL_GetAssertionHandler(
    ffi.Pointer<ffi.Pointer<ffi.Void>> puserdata,
  ) {
    _SDL_GetAssertionHandler ??= _dylib.lookupFunction<
        _c_SDL_GetAssertionHandler,
        _dart_SDL_GetAssertionHandler>('SDL_GetAssertionHandler');
    return _SDL_GetAssertionHandler(
      puserdata,
    );
  }

  _dart_SDL_GetAssertionHandler _SDL_GetAssertionHandler;

  /// \brief Get a list of all assertion failures.
  ///
  /// Get all assertions triggered since last call to SDL_ResetAssertionReport(),
  /// or the start of the program.
  ///
  /// The proper way to examine this data looks something like this:
  ///
  /// <code>
  /// const SDL_AssertData *item = SDL_GetAssertionReport();
  /// while (item) {
  /// printf("'%s', %s (%s:%d), triggered %u times, always ignore: %s.\\n",
  /// item->condition, item->function, item->filename,
  /// item->linenum, item->trigger_count,
  /// item->always_ignore ? "yes" : "no");
  /// item = item->next;
  /// }
  /// </code>
  ///
  /// \return List of all assertions.
  /// \sa SDL_ResetAssertionReport
  ffi.Pointer<SDL_AssertData> SDL_GetAssertionReport() {
    _SDL_GetAssertionReport ??= _dylib.lookupFunction<_c_SDL_GetAssertionReport,
        _dart_SDL_GetAssertionReport>('SDL_GetAssertionReport');
    return _SDL_GetAssertionReport();
  }

  _dart_SDL_GetAssertionReport _SDL_GetAssertionReport;

  /// \brief Reset the list of all assertion failures.
  ///
  /// Reset list of all assertions triggered.
  ///
  /// \sa SDL_GetAssertionReport
  void SDL_ResetAssertionReport() {
    _SDL_ResetAssertionReport ??= _dylib.lookupFunction<
        _c_SDL_ResetAssertionReport,
        _dart_SDL_ResetAssertionReport>('SDL_ResetAssertionReport');
    return _SDL_ResetAssertionReport();
  }

  _dart_SDL_ResetAssertionReport _SDL_ResetAssertionReport;

  /// \brief Put UTF-8 text into the clipboard
  ///
  /// \sa SDL_GetClipboardText()
  int SDL_SetClipboardText(
    ffi.Pointer<ffi.Int8> text,
  ) {
    _SDL_SetClipboardText ??= _dylib.lookupFunction<_c_SDL_SetClipboardText,
        _dart_SDL_SetClipboardText>('SDL_SetClipboardText');
    return _SDL_SetClipboardText(
      text,
    );
  }

  _dart_SDL_SetClipboardText _SDL_SetClipboardText;

  /// \brief Get UTF-8 text from the clipboard, which must be freed with SDL_free()
  ///
  /// \sa SDL_SetClipboardText()
  ffi.Pointer<ffi.Int8> SDL_GetClipboardText() {
    _SDL_GetClipboardText ??= _dylib.lookupFunction<_c_SDL_GetClipboardText,
        _dart_SDL_GetClipboardText>('SDL_GetClipboardText');
    return _SDL_GetClipboardText();
  }

  _dart_SDL_GetClipboardText _SDL_GetClipboardText;

  /// \brief Returns a flag indicating whether the clipboard exists and contains a text string that is non-empty
  ///
  /// \sa SDL_GetClipboardText()
  int SDL_HasClipboardText() {
    _SDL_HasClipboardText ??= _dylib.lookupFunction<_c_SDL_HasClipboardText,
        _dart_SDL_HasClipboardText>('SDL_HasClipboardText');
    return _SDL_HasClipboardText();
  }

  _dart_SDL_HasClipboardText _SDL_HasClipboardText;

  void _mm_empty() {
    __mm_empty ??=
        _dylib.lookupFunction<_c__mm_empty, _dart__mm_empty>('_mm_empty');
    return __mm_empty();
  }

  _dart__mm_empty __mm_empty;

  ffi.Pointer<ffi.Void> _mm_malloc(
    int __size,
    int __align,
  ) {
    __mm_malloc ??=
        _dylib.lookupFunction<_c__mm_malloc, _dart__mm_malloc>('_mm_malloc');
    return __mm_malloc(
      __size,
      __align,
    );
  }

  _dart__mm_malloc __mm_malloc;

  void _mm_free(
    ffi.Pointer<ffi.Void> __p,
  ) {
    __mm_free ??=
        _dylib.lookupFunction<_c__mm_free, _dart__mm_free>('_mm_free');
    return __mm_free(
      __p,
    );
  }

  _dart__mm_free __mm_free;

  void _mm_sfence() {
    __mm_sfence ??=
        _dylib.lookupFunction<_c__mm_sfence, _dart__mm_sfence>('_mm_sfence');
    return __mm_sfence();
  }

  _dart__mm_sfence __mm_sfence;

  int _mm_getcsr() {
    __mm_getcsr ??=
        _dylib.lookupFunction<_c__mm_getcsr, _dart__mm_getcsr>('_mm_getcsr');
    return __mm_getcsr();
  }

  _dart__mm_getcsr __mm_getcsr;

  void _mm_setcsr(
    int __i,
  ) {
    __mm_setcsr ??=
        _dylib.lookupFunction<_c__mm_setcsr, _dart__mm_setcsr>('_mm_setcsr');
    return __mm_setcsr(
      __i,
    );
  }

  _dart__mm_setcsr __mm_setcsr;

  void _mm_stream_si32(
    ffi.Pointer<ffi.Int32> __p,
    int __a,
  ) {
    __mm_stream_si32 ??=
        _dylib.lookupFunction<_c__mm_stream_si32, _dart__mm_stream_si32>(
            '_mm_stream_si32');
    return __mm_stream_si32(
      __p,
      __a,
    );
  }

  _dart__mm_stream_si32 __mm_stream_si32;

  void _mm_stream_si64(
    ffi.Pointer<ffi.Int64> __p,
    int __a,
  ) {
    __mm_stream_si64 ??=
        _dylib.lookupFunction<_c__mm_stream_si64, _dart__mm_stream_si64>(
            '_mm_stream_si64');
    return __mm_stream_si64(
      __p,
      __a,
    );
  }

  _dart__mm_stream_si64 __mm_stream_si64;

  void _mm_clflush(
    ffi.Pointer<ffi.Void> __p,
  ) {
    __mm_clflush ??=
        _dylib.lookupFunction<_c__mm_clflush, _dart__mm_clflush>('_mm_clflush');
    return __mm_clflush(
      __p,
    );
  }

  _dart__mm_clflush __mm_clflush;

  void _mm_lfence() {
    __mm_lfence ??=
        _dylib.lookupFunction<_c__mm_lfence, _dart__mm_lfence>('_mm_lfence');
    return __mm_lfence();
  }

  _dart__mm_lfence __mm_lfence;

  void _mm_mfence() {
    __mm_mfence ??=
        _dylib.lookupFunction<_c__mm_mfence, _dart__mm_mfence>('_mm_mfence');
    return __mm_mfence();
  }

  _dart__mm_mfence __mm_mfence;

  void _mm_pause() {
    __mm_pause ??=
        _dylib.lookupFunction<_c__mm_pause, _dart__mm_pause>('_mm_pause');
    return __mm_pause();
  }

  _dart__mm_pause __mm_pause;

  void _mm_monitor(
    ffi.Pointer<ffi.Void> __p,
    int __extensions,
    int __hints,
  ) {
    __mm_monitor ??=
        _dylib.lookupFunction<_c__mm_monitor, _dart__mm_monitor>('_mm_monitor');
    return __mm_monitor(
      __p,
      __extensions,
      __hints,
    );
  }

  _dart__mm_monitor __mm_monitor;

  void _mm_mwait(
    int __extensions,
    int __hints,
  ) {
    __mm_mwait ??=
        _dylib.lookupFunction<_c__mm_mwait, _dart__mm_mwait>('_mm_mwait');
    return __mm_mwait(
      __extensions,
      __hints,
    );
  }

  _dart__mm_mwait __mm_mwait;

  int _mm_crc32_u8(
    int __C,
    int __D,
  ) {
    __mm_crc32_u8 ??= _dylib
        .lookupFunction<_c__mm_crc32_u8, _dart__mm_crc32_u8>('_mm_crc32_u8');
    return __mm_crc32_u8(
      __C,
      __D,
    );
  }

  _dart__mm_crc32_u8 __mm_crc32_u8;

  int _mm_crc32_u16(
    int __C,
    int __D,
  ) {
    __mm_crc32_u16 ??= _dylib
        .lookupFunction<_c__mm_crc32_u16, _dart__mm_crc32_u16>('_mm_crc32_u16');
    return __mm_crc32_u16(
      __C,
      __D,
    );
  }

  _dart__mm_crc32_u16 __mm_crc32_u16;

  int _mm_crc32_u32(
    int __C,
    int __D,
  ) {
    __mm_crc32_u32 ??= _dylib
        .lookupFunction<_c__mm_crc32_u32, _dart__mm_crc32_u32>('_mm_crc32_u32');
    return __mm_crc32_u32(
      __C,
      __D,
    );
  }

  _dart__mm_crc32_u32 __mm_crc32_u32;

  int _mm_crc32_u64(
    int __C,
    int __D,
  ) {
    __mm_crc32_u64 ??= _dylib
        .lookupFunction<_c__mm_crc32_u64, _dart__mm_crc32_u64>('_mm_crc32_u64');
    return __mm_crc32_u64(
      __C,
      __D,
    );
  }

  _dart__mm_crc32_u64 __mm_crc32_u64;

  int _mm_popcnt_u32(
    int __A,
  ) {
    __mm_popcnt_u32 ??=
        _dylib.lookupFunction<_c__mm_popcnt_u32, _dart__mm_popcnt_u32>(
            '_mm_popcnt_u32');
    return __mm_popcnt_u32(
      __A,
    );
  }

  _dart__mm_popcnt_u32 __mm_popcnt_u32;

  int _mm_popcnt_u64(
    int __A,
  ) {
    __mm_popcnt_u64 ??=
        _dylib.lookupFunction<_c__mm_popcnt_u64, _dart__mm_popcnt_u64>(
            '_mm_popcnt_u64');
    return __mm_popcnt_u64(
      __A,
    );
  }

  _dart__mm_popcnt_u64 __mm_popcnt_u64;

  void _mm_clflushopt(
    ffi.Pointer<ffi.Void> __m,
  ) {
    __mm_clflushopt ??=
        _dylib.lookupFunction<_c__mm_clflushopt, _dart__mm_clflushopt>(
            '_mm_clflushopt');
    return __mm_clflushopt(
      __m,
    );
  }

  _dart__mm_clflushopt __mm_clflushopt;

  void _mm_clwb(
    ffi.Pointer<ffi.Void> __p,
  ) {
    __mm_clwb ??=
        _dylib.lookupFunction<_c__mm_clwb, _dart__mm_clwb>('_mm_clwb');
    return __mm_clwb(
      __p,
    );
  }

  _dart__mm_clwb __mm_clwb;

  void _mm256_zeroall() {
    __mm256_zeroall ??=
        _dylib.lookupFunction<_c__mm256_zeroall, _dart__mm256_zeroall>(
            '_mm256_zeroall');
    return __mm256_zeroall();
  }

  _dart__mm256_zeroall __mm256_zeroall;

  void _mm256_zeroupper() {
    __mm256_zeroupper ??=
        _dylib.lookupFunction<_c__mm256_zeroupper, _dart__mm256_zeroupper>(
            '_mm256_zeroupper');
    return __mm256_zeroupper();
  }

  _dart__mm256_zeroupper __mm256_zeroupper;

  double _cvtsh_ss(
    int __a,
  ) {
    __cvtsh_ss ??=
        _dylib.lookupFunction<_c__cvtsh_ss, _dart__cvtsh_ss>('_cvtsh_ss');
    return __cvtsh_ss(
      __a,
    );
  }

  _dart__cvtsh_ss __cvtsh_ss;

  int __tzcnt_u16(
    int __X,
  ) {
    ___tzcnt_u16 ??=
        _dylib.lookupFunction<_c___tzcnt_u16, _dart___tzcnt_u16>('__tzcnt_u16');
    return ___tzcnt_u16(
      __X,
    );
  }

  _dart___tzcnt_u16 ___tzcnt_u16;

  int __tzcnt_u32(
    int __X,
  ) {
    ___tzcnt_u32 ??=
        _dylib.lookupFunction<_c___tzcnt_u32, _dart___tzcnt_u32>('__tzcnt_u32');
    return ___tzcnt_u32(
      __X,
    );
  }

  _dart___tzcnt_u32 ___tzcnt_u32;

  int _mm_tzcnt_32(
    int __X,
  ) {
    __mm_tzcnt_32 ??= _dylib
        .lookupFunction<_c__mm_tzcnt_32, _dart__mm_tzcnt_32>('_mm_tzcnt_32');
    return __mm_tzcnt_32(
      __X,
    );
  }

  _dart__mm_tzcnt_32 __mm_tzcnt_32;

  int __tzcnt_u64(
    int __X,
  ) {
    ___tzcnt_u64 ??=
        _dylib.lookupFunction<_c___tzcnt_u64, _dart___tzcnt_u64>('__tzcnt_u64');
    return ___tzcnt_u64(
      __X,
    );
  }

  _dart___tzcnt_u64 ___tzcnt_u64;

  int _mm_tzcnt_64(
    int __X,
  ) {
    __mm_tzcnt_64 ??= _dylib
        .lookupFunction<_c__mm_tzcnt_64, _dart__mm_tzcnt_64>('_mm_tzcnt_64');
    return __mm_tzcnt_64(
      __X,
    );
  }

  _dart__mm_tzcnt_64 __mm_tzcnt_64;

  int __andn_u32(
    int __X,
    int __Y,
  ) {
    ___andn_u32 ??=
        _dylib.lookupFunction<_c___andn_u32, _dart___andn_u32>('__andn_u32');
    return ___andn_u32(
      __X,
      __Y,
    );
  }

  _dart___andn_u32 ___andn_u32;

  int __bextr_u32(
    int __X,
    int __Y,
  ) {
    ___bextr_u32 ??=
        _dylib.lookupFunction<_c___bextr_u32, _dart___bextr_u32>('__bextr_u32');
    return ___bextr_u32(
      __X,
      __Y,
    );
  }

  _dart___bextr_u32 ___bextr_u32;

  int _bextr_u32(
    int __X,
    int __Y,
    int __Z,
  ) {
    __bextr_u32_1 ??=
        _dylib.lookupFunction<_c__bextr_u32, _dart__bextr_u32>('_bextr_u32');
    return __bextr_u32_1(
      __X,
      __Y,
      __Z,
    );
  }

  _dart__bextr_u32 __bextr_u32_1;

  int _bextr2_u32(
    int __X,
    int __Y,
  ) {
    __bextr2_u32 ??=
        _dylib.lookupFunction<_c__bextr2_u32, _dart__bextr2_u32>('_bextr2_u32');
    return __bextr2_u32(
      __X,
      __Y,
    );
  }

  _dart__bextr2_u32 __bextr2_u32;

  int __blsi_u32(
    int __X,
  ) {
    ___blsi_u32 ??=
        _dylib.lookupFunction<_c___blsi_u32, _dart___blsi_u32>('__blsi_u32');
    return ___blsi_u32(
      __X,
    );
  }

  _dart___blsi_u32 ___blsi_u32;

  int __blsmsk_u32(
    int __X,
  ) {
    ___blsmsk_u32 ??= _dylib
        .lookupFunction<_c___blsmsk_u32, _dart___blsmsk_u32>('__blsmsk_u32');
    return ___blsmsk_u32(
      __X,
    );
  }

  _dart___blsmsk_u32 ___blsmsk_u32;

  int __blsr_u32(
    int __X,
  ) {
    ___blsr_u32 ??=
        _dylib.lookupFunction<_c___blsr_u32, _dart___blsr_u32>('__blsr_u32');
    return ___blsr_u32(
      __X,
    );
  }

  _dart___blsr_u32 ___blsr_u32;

  int __andn_u64(
    int __X,
    int __Y,
  ) {
    ___andn_u64 ??=
        _dylib.lookupFunction<_c___andn_u64, _dart___andn_u64>('__andn_u64');
    return ___andn_u64(
      __X,
      __Y,
    );
  }

  _dart___andn_u64 ___andn_u64;

  int __bextr_u64(
    int __X,
    int __Y,
  ) {
    ___bextr_u64 ??=
        _dylib.lookupFunction<_c___bextr_u64, _dart___bextr_u64>('__bextr_u64');
    return ___bextr_u64(
      __X,
      __Y,
    );
  }

  _dart___bextr_u64 ___bextr_u64;

  int _bextr_u64(
    int __X,
    int __Y,
    int __Z,
  ) {
    __bextr_u64_1 ??=
        _dylib.lookupFunction<_c__bextr_u64, _dart__bextr_u64>('_bextr_u64');
    return __bextr_u64_1(
      __X,
      __Y,
      __Z,
    );
  }

  _dart__bextr_u64 __bextr_u64_1;

  int _bextr2_u64(
    int __X,
    int __Y,
  ) {
    __bextr2_u64 ??=
        _dylib.lookupFunction<_c__bextr2_u64, _dart__bextr2_u64>('_bextr2_u64');
    return __bextr2_u64(
      __X,
      __Y,
    );
  }

  _dart__bextr2_u64 __bextr2_u64;

  int __blsi_u64(
    int __X,
  ) {
    ___blsi_u64 ??=
        _dylib.lookupFunction<_c___blsi_u64, _dart___blsi_u64>('__blsi_u64');
    return ___blsi_u64(
      __X,
    );
  }

  _dart___blsi_u64 ___blsi_u64;

  int __blsmsk_u64(
    int __X,
  ) {
    ___blsmsk_u64 ??= _dylib
        .lookupFunction<_c___blsmsk_u64, _dart___blsmsk_u64>('__blsmsk_u64');
    return ___blsmsk_u64(
      __X,
    );
  }

  _dart___blsmsk_u64 ___blsmsk_u64;

  int __blsr_u64(
    int __X,
  ) {
    ___blsr_u64 ??=
        _dylib.lookupFunction<_c___blsr_u64, _dart___blsr_u64>('__blsr_u64');
    return ___blsr_u64(
      __X,
    );
  }

  _dart___blsr_u64 ___blsr_u64;

  int _bzhi_u32(
    int __X,
    int __Y,
  ) {
    __bzhi_u32 ??=
        _dylib.lookupFunction<_c__bzhi_u32, _dart__bzhi_u32>('_bzhi_u32');
    return __bzhi_u32(
      __X,
      __Y,
    );
  }

  _dart__bzhi_u32 __bzhi_u32;

  int _pdep_u32(
    int __X,
    int __Y,
  ) {
    __pdep_u32 ??=
        _dylib.lookupFunction<_c__pdep_u32, _dart__pdep_u32>('_pdep_u32');
    return __pdep_u32(
      __X,
      __Y,
    );
  }

  _dart__pdep_u32 __pdep_u32;

  int _pext_u32(
    int __X,
    int __Y,
  ) {
    __pext_u32 ??=
        _dylib.lookupFunction<_c__pext_u32, _dart__pext_u32>('_pext_u32');
    return __pext_u32(
      __X,
      __Y,
    );
  }

  _dart__pext_u32 __pext_u32;

  int _bzhi_u64(
    int __X,
    int __Y,
  ) {
    __bzhi_u64 ??=
        _dylib.lookupFunction<_c__bzhi_u64, _dart__bzhi_u64>('_bzhi_u64');
    return __bzhi_u64(
      __X,
      __Y,
    );
  }

  _dart__bzhi_u64 __bzhi_u64;

  int _pdep_u64(
    int __X,
    int __Y,
  ) {
    __pdep_u64 ??=
        _dylib.lookupFunction<_c__pdep_u64, _dart__pdep_u64>('_pdep_u64');
    return __pdep_u64(
      __X,
      __Y,
    );
  }

  _dart__pdep_u64 __pdep_u64;

  int _pext_u64(
    int __X,
    int __Y,
  ) {
    __pext_u64 ??=
        _dylib.lookupFunction<_c__pext_u64, _dart__pext_u64>('_pext_u64');
    return __pext_u64(
      __X,
      __Y,
    );
  }

  _dart__pext_u64 __pext_u64;

  int _mulx_u64(
    int __X,
    int __Y,
    ffi.Pointer<ffi.Uint64> __P,
  ) {
    __mulx_u64 ??=
        _dylib.lookupFunction<_c__mulx_u64, _dart__mulx_u64>('_mulx_u64');
    return __mulx_u64(
      __X,
      __Y,
      __P,
    );
  }

  _dart__mulx_u64 __mulx_u64;

  int __lzcnt32(
    int __X,
  ) {
    ___lzcnt32 ??=
        _dylib.lookupFunction<_c___lzcnt32, _dart___lzcnt32>('__lzcnt32');
    return ___lzcnt32(
      __X,
    );
  }

  _dart___lzcnt32 ___lzcnt32;

  int _lzcnt_u32(
    int __X,
  ) {
    __lzcnt_u32 ??=
        _dylib.lookupFunction<_c__lzcnt_u32, _dart__lzcnt_u32>('_lzcnt_u32');
    return __lzcnt_u32(
      __X,
    );
  }

  _dart__lzcnt_u32 __lzcnt_u32;

  int _lzcnt_u64(
    int __X,
  ) {
    __lzcnt_u64 ??=
        _dylib.lookupFunction<_c__lzcnt_u64, _dart__lzcnt_u64>('_lzcnt_u64');
    return __lzcnt_u64(
      __X,
    );
  }

  _dart__lzcnt_u64 __lzcnt_u64;

  int _mm512_int2mask(
    int __a,
  ) {
    __mm512_int2mask ??=
        _dylib.lookupFunction<_c__mm512_int2mask, _dart__mm512_int2mask>(
            '_mm512_int2mask');
    return __mm512_int2mask(
      __a,
    );
  }

  _dart__mm512_int2mask __mm512_int2mask;

  int _mm512_mask2int(
    int __a,
  ) {
    __mm512_mask2int ??=
        _dylib.lookupFunction<_c__mm512_mask2int, _dart__mm512_mask2int>(
            '_mm512_mask2int');
    return __mm512_mask2int(
      __a,
    );
  }

  _dart__mm512_mask2int __mm512_mask2int;

  int _mm512_knot(
    int __M,
  ) {
    __mm512_knot ??=
        _dylib.lookupFunction<_c__mm512_knot, _dart__mm512_knot>('_mm512_knot');
    return __mm512_knot(
      __M,
    );
  }

  _dart__mm512_knot __mm512_knot;

  int _mm512_kmov(
    int __A,
  ) {
    __mm512_kmov ??=
        _dylib.lookupFunction<_c__mm512_kmov, _dart__mm512_kmov>('_mm512_kmov');
    return __mm512_kmov(
      __A,
    );
  }

  _dart__mm512_kmov __mm512_kmov;

  int _mm512_kand(
    int __A,
    int __B,
  ) {
    __mm512_kand ??=
        _dylib.lookupFunction<_c__mm512_kand, _dart__mm512_kand>('_mm512_kand');
    return __mm512_kand(
      __A,
      __B,
    );
  }

  _dart__mm512_kand __mm512_kand;

  int _mm512_kandn(
    int __A,
    int __B,
  ) {
    __mm512_kandn ??= _dylib
        .lookupFunction<_c__mm512_kandn, _dart__mm512_kandn>('_mm512_kandn');
    return __mm512_kandn(
      __A,
      __B,
    );
  }

  _dart__mm512_kandn __mm512_kandn;

  int _mm512_kor(
    int __A,
    int __B,
  ) {
    __mm512_kor ??=
        _dylib.lookupFunction<_c__mm512_kor, _dart__mm512_kor>('_mm512_kor');
    return __mm512_kor(
      __A,
      __B,
    );
  }

  _dart__mm512_kor __mm512_kor;

  int _mm512_kortestc(
    int __A,
    int __B,
  ) {
    __mm512_kortestc ??=
        _dylib.lookupFunction<_c__mm512_kortestc, _dart__mm512_kortestc>(
            '_mm512_kortestc');
    return __mm512_kortestc(
      __A,
      __B,
    );
  }

  _dart__mm512_kortestc __mm512_kortestc;

  int _mm512_kortestz(
    int __A,
    int __B,
  ) {
    __mm512_kortestz ??=
        _dylib.lookupFunction<_c__mm512_kortestz, _dart__mm512_kortestz>(
            '_mm512_kortestz');
    return __mm512_kortestz(
      __A,
      __B,
    );
  }

  _dart__mm512_kortestz __mm512_kortestz;

  int _kortestc_mask16_u8(
    int __A,
    int __B,
  ) {
    __kortestc_mask16_u8 ??= _dylib.lookupFunction<_c__kortestc_mask16_u8,
        _dart__kortestc_mask16_u8>('_kortestc_mask16_u8');
    return __kortestc_mask16_u8(
      __A,
      __B,
    );
  }

  _dart__kortestc_mask16_u8 __kortestc_mask16_u8;

  int _kortestz_mask16_u8(
    int __A,
    int __B,
  ) {
    __kortestz_mask16_u8 ??= _dylib.lookupFunction<_c__kortestz_mask16_u8,
        _dart__kortestz_mask16_u8>('_kortestz_mask16_u8');
    return __kortestz_mask16_u8(
      __A,
      __B,
    );
  }

  _dart__kortestz_mask16_u8 __kortestz_mask16_u8;

  int _kortest_mask16_u8(
    int __A,
    int __B,
    ffi.Pointer<ffi.Uint8> __C,
  ) {
    __kortest_mask16_u8 ??=
        _dylib.lookupFunction<_c__kortest_mask16_u8, _dart__kortest_mask16_u8>(
            '_kortest_mask16_u8');
    return __kortest_mask16_u8(
      __A,
      __B,
      __C,
    );
  }

  _dart__kortest_mask16_u8 __kortest_mask16_u8;

  int _mm512_kunpackb(
    int __A,
    int __B,
  ) {
    __mm512_kunpackb ??=
        _dylib.lookupFunction<_c__mm512_kunpackb, _dart__mm512_kunpackb>(
            '_mm512_kunpackb');
    return __mm512_kunpackb(
      __A,
      __B,
    );
  }

  _dart__mm512_kunpackb __mm512_kunpackb;

  int _mm512_kxnor(
    int __A,
    int __B,
  ) {
    __mm512_kxnor ??= _dylib
        .lookupFunction<_c__mm512_kxnor, _dart__mm512_kxnor>('_mm512_kxnor');
    return __mm512_kxnor(
      __A,
      __B,
    );
  }

  _dart__mm512_kxnor __mm512_kxnor;

  int _mm512_kxor(
    int __A,
    int __B,
  ) {
    __mm512_kxor ??=
        _dylib.lookupFunction<_c__mm512_kxor, _dart__mm512_kxor>('_mm512_kxor');
    return __mm512_kxor(
      __A,
      __B,
    );
  }

  _dart__mm512_kxor __mm512_kxor;

  int _cvtmask16_u32(
    int __A,
  ) {
    __cvtmask16_u32 ??=
        _dylib.lookupFunction<_c__cvtmask16_u32, _dart__cvtmask16_u32>(
            '_cvtmask16_u32');
    return __cvtmask16_u32(
      __A,
    );
  }

  _dart__cvtmask16_u32 __cvtmask16_u32;

  int _cvtu32_mask16(
    int __A,
  ) {
    __cvtu32_mask16 ??=
        _dylib.lookupFunction<_c__cvtu32_mask16, _dart__cvtu32_mask16>(
            '_cvtu32_mask16');
    return __cvtu32_mask16(
      __A,
    );
  }

  _dart__cvtu32_mask16 __cvtu32_mask16;

  int _load_mask16(
    ffi.Pointer<ffi.Uint16> __A,
  ) {
    __load_mask16 ??= _dylib
        .lookupFunction<_c__load_mask16, _dart__load_mask16>('_load_mask16');
    return __load_mask16(
      __A,
    );
  }

  _dart__load_mask16 __load_mask16;

  void _store_mask16(
    ffi.Pointer<ffi.Uint16> __A,
    int __B,
  ) {
    __store_mask16 ??= _dylib
        .lookupFunction<_c__store_mask16, _dart__store_mask16>('_store_mask16');
    return __store_mask16(
      __A,
      __B,
    );
  }

  _dart__store_mask16 __store_mask16;

  int _knot_mask32(
    int __M,
  ) {
    __knot_mask32 ??= _dylib
        .lookupFunction<_c__knot_mask32, _dart__knot_mask32>('_knot_mask32');
    return __knot_mask32(
      __M,
    );
  }

  _dart__knot_mask32 __knot_mask32;

  int _knot_mask64(
    int __M,
  ) {
    __knot_mask64 ??= _dylib
        .lookupFunction<_c__knot_mask64, _dart__knot_mask64>('_knot_mask64');
    return __knot_mask64(
      __M,
    );
  }

  _dart__knot_mask64 __knot_mask64;

  int _kand_mask32(
    int __A,
    int __B,
  ) {
    __kand_mask32 ??= _dylib
        .lookupFunction<_c__kand_mask32, _dart__kand_mask32>('_kand_mask32');
    return __kand_mask32(
      __A,
      __B,
    );
  }

  _dart__kand_mask32 __kand_mask32;

  int _kand_mask64(
    int __A,
    int __B,
  ) {
    __kand_mask64 ??= _dylib
        .lookupFunction<_c__kand_mask64, _dart__kand_mask64>('_kand_mask64');
    return __kand_mask64(
      __A,
      __B,
    );
  }

  _dart__kand_mask64 __kand_mask64;

  int _kandn_mask32(
    int __A,
    int __B,
  ) {
    __kandn_mask32 ??= _dylib
        .lookupFunction<_c__kandn_mask32, _dart__kandn_mask32>('_kandn_mask32');
    return __kandn_mask32(
      __A,
      __B,
    );
  }

  _dart__kandn_mask32 __kandn_mask32;

  int _kandn_mask64(
    int __A,
    int __B,
  ) {
    __kandn_mask64 ??= _dylib
        .lookupFunction<_c__kandn_mask64, _dart__kandn_mask64>('_kandn_mask64');
    return __kandn_mask64(
      __A,
      __B,
    );
  }

  _dart__kandn_mask64 __kandn_mask64;

  int _kor_mask32(
    int __A,
    int __B,
  ) {
    __kor_mask32 ??=
        _dylib.lookupFunction<_c__kor_mask32, _dart__kor_mask32>('_kor_mask32');
    return __kor_mask32(
      __A,
      __B,
    );
  }

  _dart__kor_mask32 __kor_mask32;

  int _kor_mask64(
    int __A,
    int __B,
  ) {
    __kor_mask64 ??=
        _dylib.lookupFunction<_c__kor_mask64, _dart__kor_mask64>('_kor_mask64');
    return __kor_mask64(
      __A,
      __B,
    );
  }

  _dart__kor_mask64 __kor_mask64;

  int _kxnor_mask32(
    int __A,
    int __B,
  ) {
    __kxnor_mask32 ??= _dylib
        .lookupFunction<_c__kxnor_mask32, _dart__kxnor_mask32>('_kxnor_mask32');
    return __kxnor_mask32(
      __A,
      __B,
    );
  }

  _dart__kxnor_mask32 __kxnor_mask32;

  int _kxnor_mask64(
    int __A,
    int __B,
  ) {
    __kxnor_mask64 ??= _dylib
        .lookupFunction<_c__kxnor_mask64, _dart__kxnor_mask64>('_kxnor_mask64');
    return __kxnor_mask64(
      __A,
      __B,
    );
  }

  _dart__kxnor_mask64 __kxnor_mask64;

  int _kxor_mask32(
    int __A,
    int __B,
  ) {
    __kxor_mask32 ??= _dylib
        .lookupFunction<_c__kxor_mask32, _dart__kxor_mask32>('_kxor_mask32');
    return __kxor_mask32(
      __A,
      __B,
    );
  }

  _dart__kxor_mask32 __kxor_mask32;

  int _kxor_mask64(
    int __A,
    int __B,
  ) {
    __kxor_mask64 ??= _dylib
        .lookupFunction<_c__kxor_mask64, _dart__kxor_mask64>('_kxor_mask64');
    return __kxor_mask64(
      __A,
      __B,
    );
  }

  _dart__kxor_mask64 __kxor_mask64;

  int _kortestc_mask32_u8(
    int __A,
    int __B,
  ) {
    __kortestc_mask32_u8 ??= _dylib.lookupFunction<_c__kortestc_mask32_u8,
        _dart__kortestc_mask32_u8>('_kortestc_mask32_u8');
    return __kortestc_mask32_u8(
      __A,
      __B,
    );
  }

  _dart__kortestc_mask32_u8 __kortestc_mask32_u8;

  int _kortestz_mask32_u8(
    int __A,
    int __B,
  ) {
    __kortestz_mask32_u8 ??= _dylib.lookupFunction<_c__kortestz_mask32_u8,
        _dart__kortestz_mask32_u8>('_kortestz_mask32_u8');
    return __kortestz_mask32_u8(
      __A,
      __B,
    );
  }

  _dart__kortestz_mask32_u8 __kortestz_mask32_u8;

  int _kortest_mask32_u8(
    int __A,
    int __B,
    ffi.Pointer<ffi.Uint8> __C,
  ) {
    __kortest_mask32_u8 ??=
        _dylib.lookupFunction<_c__kortest_mask32_u8, _dart__kortest_mask32_u8>(
            '_kortest_mask32_u8');
    return __kortest_mask32_u8(
      __A,
      __B,
      __C,
    );
  }

  _dart__kortest_mask32_u8 __kortest_mask32_u8;

  int _kortestc_mask64_u8(
    int __A,
    int __B,
  ) {
    __kortestc_mask64_u8 ??= _dylib.lookupFunction<_c__kortestc_mask64_u8,
        _dart__kortestc_mask64_u8>('_kortestc_mask64_u8');
    return __kortestc_mask64_u8(
      __A,
      __B,
    );
  }

  _dart__kortestc_mask64_u8 __kortestc_mask64_u8;

  int _kortestz_mask64_u8(
    int __A,
    int __B,
  ) {
    __kortestz_mask64_u8 ??= _dylib.lookupFunction<_c__kortestz_mask64_u8,
        _dart__kortestz_mask64_u8>('_kortestz_mask64_u8');
    return __kortestz_mask64_u8(
      __A,
      __B,
    );
  }

  _dart__kortestz_mask64_u8 __kortestz_mask64_u8;

  int _kortest_mask64_u8(
    int __A,
    int __B,
    ffi.Pointer<ffi.Uint8> __C,
  ) {
    __kortest_mask64_u8 ??=
        _dylib.lookupFunction<_c__kortest_mask64_u8, _dart__kortest_mask64_u8>(
            '_kortest_mask64_u8');
    return __kortest_mask64_u8(
      __A,
      __B,
      __C,
    );
  }

  _dart__kortest_mask64_u8 __kortest_mask64_u8;

  int _ktestc_mask32_u8(
    int __A,
    int __B,
  ) {
    __ktestc_mask32_u8 ??=
        _dylib.lookupFunction<_c__ktestc_mask32_u8, _dart__ktestc_mask32_u8>(
            '_ktestc_mask32_u8');
    return __ktestc_mask32_u8(
      __A,
      __B,
    );
  }

  _dart__ktestc_mask32_u8 __ktestc_mask32_u8;

  int _ktestz_mask32_u8(
    int __A,
    int __B,
  ) {
    __ktestz_mask32_u8 ??=
        _dylib.lookupFunction<_c__ktestz_mask32_u8, _dart__ktestz_mask32_u8>(
            '_ktestz_mask32_u8');
    return __ktestz_mask32_u8(
      __A,
      __B,
    );
  }

  _dart__ktestz_mask32_u8 __ktestz_mask32_u8;

  int _ktest_mask32_u8(
    int __A,
    int __B,
    ffi.Pointer<ffi.Uint8> __C,
  ) {
    __ktest_mask32_u8 ??=
        _dylib.lookupFunction<_c__ktest_mask32_u8, _dart__ktest_mask32_u8>(
            '_ktest_mask32_u8');
    return __ktest_mask32_u8(
      __A,
      __B,
      __C,
    );
  }

  _dart__ktest_mask32_u8 __ktest_mask32_u8;

  int _ktestc_mask64_u8(
    int __A,
    int __B,
  ) {
    __ktestc_mask64_u8 ??=
        _dylib.lookupFunction<_c__ktestc_mask64_u8, _dart__ktestc_mask64_u8>(
            '_ktestc_mask64_u8');
    return __ktestc_mask64_u8(
      __A,
      __B,
    );
  }

  _dart__ktestc_mask64_u8 __ktestc_mask64_u8;

  int _ktestz_mask64_u8(
    int __A,
    int __B,
  ) {
    __ktestz_mask64_u8 ??=
        _dylib.lookupFunction<_c__ktestz_mask64_u8, _dart__ktestz_mask64_u8>(
            '_ktestz_mask64_u8');
    return __ktestz_mask64_u8(
      __A,
      __B,
    );
  }

  _dart__ktestz_mask64_u8 __ktestz_mask64_u8;

  int _ktest_mask64_u8(
    int __A,
    int __B,
    ffi.Pointer<ffi.Uint8> __C,
  ) {
    __ktest_mask64_u8 ??=
        _dylib.lookupFunction<_c__ktest_mask64_u8, _dart__ktest_mask64_u8>(
            '_ktest_mask64_u8');
    return __ktest_mask64_u8(
      __A,
      __B,
      __C,
    );
  }

  _dart__ktest_mask64_u8 __ktest_mask64_u8;

  int _kadd_mask32(
    int __A,
    int __B,
  ) {
    __kadd_mask32 ??= _dylib
        .lookupFunction<_c__kadd_mask32, _dart__kadd_mask32>('_kadd_mask32');
    return __kadd_mask32(
      __A,
      __B,
    );
  }

  _dart__kadd_mask32 __kadd_mask32;

  int _kadd_mask64(
    int __A,
    int __B,
  ) {
    __kadd_mask64 ??= _dylib
        .lookupFunction<_c__kadd_mask64, _dart__kadd_mask64>('_kadd_mask64');
    return __kadd_mask64(
      __A,
      __B,
    );
  }

  _dart__kadd_mask64 __kadd_mask64;

  int _cvtmask32_u32(
    int __A,
  ) {
    __cvtmask32_u32 ??=
        _dylib.lookupFunction<_c__cvtmask32_u32, _dart__cvtmask32_u32>(
            '_cvtmask32_u32');
    return __cvtmask32_u32(
      __A,
    );
  }

  _dart__cvtmask32_u32 __cvtmask32_u32;

  int _cvtmask64_u64(
    int __A,
  ) {
    __cvtmask64_u64 ??=
        _dylib.lookupFunction<_c__cvtmask64_u64, _dart__cvtmask64_u64>(
            '_cvtmask64_u64');
    return __cvtmask64_u64(
      __A,
    );
  }

  _dart__cvtmask64_u64 __cvtmask64_u64;

  int _cvtu32_mask32(
    int __A,
  ) {
    __cvtu32_mask32 ??=
        _dylib.lookupFunction<_c__cvtu32_mask32, _dart__cvtu32_mask32>(
            '_cvtu32_mask32');
    return __cvtu32_mask32(
      __A,
    );
  }

  _dart__cvtu32_mask32 __cvtu32_mask32;

  int _cvtu64_mask64(
    int __A,
  ) {
    __cvtu64_mask64 ??=
        _dylib.lookupFunction<_c__cvtu64_mask64, _dart__cvtu64_mask64>(
            '_cvtu64_mask64');
    return __cvtu64_mask64(
      __A,
    );
  }

  _dart__cvtu64_mask64 __cvtu64_mask64;

  int _load_mask32(
    ffi.Pointer<ffi.Uint32> __A,
  ) {
    __load_mask32 ??= _dylib
        .lookupFunction<_c__load_mask32, _dart__load_mask32>('_load_mask32');
    return __load_mask32(
      __A,
    );
  }

  _dart__load_mask32 __load_mask32;

  int _load_mask64(
    ffi.Pointer<ffi.Uint64> __A,
  ) {
    __load_mask64 ??= _dylib
        .lookupFunction<_c__load_mask64, _dart__load_mask64>('_load_mask64');
    return __load_mask64(
      __A,
    );
  }

  _dart__load_mask64 __load_mask64;

  void _store_mask32(
    ffi.Pointer<ffi.Uint32> __A,
    int __B,
  ) {
    __store_mask32 ??= _dylib
        .lookupFunction<_c__store_mask32, _dart__store_mask32>('_store_mask32');
    return __store_mask32(
      __A,
      __B,
    );
  }

  _dart__store_mask32 __store_mask32;

  void _store_mask64(
    ffi.Pointer<ffi.Uint64> __A,
    int __B,
  ) {
    __store_mask64 ??= _dylib
        .lookupFunction<_c__store_mask64, _dart__store_mask64>('_store_mask64');
    return __store_mask64(
      __A,
      __B,
    );
  }

  _dart__store_mask64 __store_mask64;

  int _mm512_kunpackd(
    int __A,
    int __B,
  ) {
    __mm512_kunpackd ??=
        _dylib.lookupFunction<_c__mm512_kunpackd, _dart__mm512_kunpackd>(
            '_mm512_kunpackd');
    return __mm512_kunpackd(
      __A,
      __B,
    );
  }

  _dart__mm512_kunpackd __mm512_kunpackd;

  int _mm512_kunpackw(
    int __A,
    int __B,
  ) {
    __mm512_kunpackw ??=
        _dylib.lookupFunction<_c__mm512_kunpackw, _dart__mm512_kunpackw>(
            '_mm512_kunpackw');
    return __mm512_kunpackw(
      __A,
      __B,
    );
  }

  _dart__mm512_kunpackw __mm512_kunpackw;

  int _knot_mask8(
    int __M,
  ) {
    __knot_mask8 ??=
        _dylib.lookupFunction<_c__knot_mask8, _dart__knot_mask8>('_knot_mask8');
    return __knot_mask8(
      __M,
    );
  }

  _dart__knot_mask8 __knot_mask8;

  int _kand_mask8(
    int __A,
    int __B,
  ) {
    __kand_mask8 ??=
        _dylib.lookupFunction<_c__kand_mask8, _dart__kand_mask8>('_kand_mask8');
    return __kand_mask8(
      __A,
      __B,
    );
  }

  _dart__kand_mask8 __kand_mask8;

  int _kandn_mask8(
    int __A,
    int __B,
  ) {
    __kandn_mask8 ??= _dylib
        .lookupFunction<_c__kandn_mask8, _dart__kandn_mask8>('_kandn_mask8');
    return __kandn_mask8(
      __A,
      __B,
    );
  }

  _dart__kandn_mask8 __kandn_mask8;

  int _kor_mask8(
    int __A,
    int __B,
  ) {
    __kor_mask8 ??=
        _dylib.lookupFunction<_c__kor_mask8, _dart__kor_mask8>('_kor_mask8');
    return __kor_mask8(
      __A,
      __B,
    );
  }

  _dart__kor_mask8 __kor_mask8;

  int _kxnor_mask8(
    int __A,
    int __B,
  ) {
    __kxnor_mask8 ??= _dylib
        .lookupFunction<_c__kxnor_mask8, _dart__kxnor_mask8>('_kxnor_mask8');
    return __kxnor_mask8(
      __A,
      __B,
    );
  }

  _dart__kxnor_mask8 __kxnor_mask8;

  int _kxor_mask8(
    int __A,
    int __B,
  ) {
    __kxor_mask8 ??=
        _dylib.lookupFunction<_c__kxor_mask8, _dart__kxor_mask8>('_kxor_mask8');
    return __kxor_mask8(
      __A,
      __B,
    );
  }

  _dart__kxor_mask8 __kxor_mask8;

  int _kortestc_mask8_u8(
    int __A,
    int __B,
  ) {
    __kortestc_mask8_u8 ??=
        _dylib.lookupFunction<_c__kortestc_mask8_u8, _dart__kortestc_mask8_u8>(
            '_kortestc_mask8_u8');
    return __kortestc_mask8_u8(
      __A,
      __B,
    );
  }

  _dart__kortestc_mask8_u8 __kortestc_mask8_u8;

  int _kortestz_mask8_u8(
    int __A,
    int __B,
  ) {
    __kortestz_mask8_u8 ??=
        _dylib.lookupFunction<_c__kortestz_mask8_u8, _dart__kortestz_mask8_u8>(
            '_kortestz_mask8_u8');
    return __kortestz_mask8_u8(
      __A,
      __B,
    );
  }

  _dart__kortestz_mask8_u8 __kortestz_mask8_u8;

  int _kortest_mask8_u8(
    int __A,
    int __B,
    ffi.Pointer<ffi.Uint8> __C,
  ) {
    __kortest_mask8_u8 ??=
        _dylib.lookupFunction<_c__kortest_mask8_u8, _dart__kortest_mask8_u8>(
            '_kortest_mask8_u8');
    return __kortest_mask8_u8(
      __A,
      __B,
      __C,
    );
  }

  _dart__kortest_mask8_u8 __kortest_mask8_u8;

  int _ktestc_mask8_u8(
    int __A,
    int __B,
  ) {
    __ktestc_mask8_u8 ??=
        _dylib.lookupFunction<_c__ktestc_mask8_u8, _dart__ktestc_mask8_u8>(
            '_ktestc_mask8_u8');
    return __ktestc_mask8_u8(
      __A,
      __B,
    );
  }

  _dart__ktestc_mask8_u8 __ktestc_mask8_u8;

  int _ktestz_mask8_u8(
    int __A,
    int __B,
  ) {
    __ktestz_mask8_u8 ??=
        _dylib.lookupFunction<_c__ktestz_mask8_u8, _dart__ktestz_mask8_u8>(
            '_ktestz_mask8_u8');
    return __ktestz_mask8_u8(
      __A,
      __B,
    );
  }

  _dart__ktestz_mask8_u8 __ktestz_mask8_u8;

  int _ktest_mask8_u8(
    int __A,
    int __B,
    ffi.Pointer<ffi.Uint8> __C,
  ) {
    __ktest_mask8_u8 ??=
        _dylib.lookupFunction<_c__ktest_mask8_u8, _dart__ktest_mask8_u8>(
            '_ktest_mask8_u8');
    return __ktest_mask8_u8(
      __A,
      __B,
      __C,
    );
  }

  _dart__ktest_mask8_u8 __ktest_mask8_u8;

  int _ktestc_mask16_u8(
    int __A,
    int __B,
  ) {
    __ktestc_mask16_u8 ??=
        _dylib.lookupFunction<_c__ktestc_mask16_u8, _dart__ktestc_mask16_u8>(
            '_ktestc_mask16_u8');
    return __ktestc_mask16_u8(
      __A,
      __B,
    );
  }

  _dart__ktestc_mask16_u8 __ktestc_mask16_u8;

  int _ktestz_mask16_u8(
    int __A,
    int __B,
  ) {
    __ktestz_mask16_u8 ??=
        _dylib.lookupFunction<_c__ktestz_mask16_u8, _dart__ktestz_mask16_u8>(
            '_ktestz_mask16_u8');
    return __ktestz_mask16_u8(
      __A,
      __B,
    );
  }

  _dart__ktestz_mask16_u8 __ktestz_mask16_u8;

  int _ktest_mask16_u8(
    int __A,
    int __B,
    ffi.Pointer<ffi.Uint8> __C,
  ) {
    __ktest_mask16_u8 ??=
        _dylib.lookupFunction<_c__ktest_mask16_u8, _dart__ktest_mask16_u8>(
            '_ktest_mask16_u8');
    return __ktest_mask16_u8(
      __A,
      __B,
      __C,
    );
  }

  _dart__ktest_mask16_u8 __ktest_mask16_u8;

  int _kadd_mask8(
    int __A,
    int __B,
  ) {
    __kadd_mask8 ??=
        _dylib.lookupFunction<_c__kadd_mask8, _dart__kadd_mask8>('_kadd_mask8');
    return __kadd_mask8(
      __A,
      __B,
    );
  }

  _dart__kadd_mask8 __kadd_mask8;

  int _kadd_mask16(
    int __A,
    int __B,
  ) {
    __kadd_mask16 ??= _dylib
        .lookupFunction<_c__kadd_mask16, _dart__kadd_mask16>('_kadd_mask16');
    return __kadd_mask16(
      __A,
      __B,
    );
  }

  _dart__kadd_mask16 __kadd_mask16;

  int _cvtmask8_u32(
    int __A,
  ) {
    __cvtmask8_u32 ??= _dylib
        .lookupFunction<_c__cvtmask8_u32, _dart__cvtmask8_u32>('_cvtmask8_u32');
    return __cvtmask8_u32(
      __A,
    );
  }

  _dart__cvtmask8_u32 __cvtmask8_u32;

  int _cvtu32_mask8(
    int __A,
  ) {
    __cvtu32_mask8 ??= _dylib
        .lookupFunction<_c__cvtu32_mask8, _dart__cvtu32_mask8>('_cvtu32_mask8');
    return __cvtu32_mask8(
      __A,
    );
  }

  _dart__cvtu32_mask8 __cvtu32_mask8;

  int _load_mask8(
    ffi.Pointer<ffi.Uint8> __A,
  ) {
    __load_mask8 ??=
        _dylib.lookupFunction<_c__load_mask8, _dart__load_mask8>('_load_mask8');
    return __load_mask8(
      __A,
    );
  }

  _dart__load_mask8 __load_mask8;

  void _store_mask8(
    ffi.Pointer<ffi.Uint8> __A,
    int __B,
  ) {
    __store_mask8 ??= _dylib
        .lookupFunction<_c__store_mask8, _dart__store_mask8>('_store_mask8');
    return __store_mask8(
      __A,
      __B,
    );
  }

  _dart__store_mask8 __store_mask8;

  double _mm_cvtsbh_ss(
    int __A,
  ) {
    __mm_cvtsbh_ss ??= _dylib
        .lookupFunction<_c__mm_cvtsbh_ss, _dart__mm_cvtsbh_ss>('_mm_cvtsbh_ss');
    return __mm_cvtsbh_ss(
      __A,
    );
  }

  _dart__mm_cvtsbh_ss __mm_cvtsbh_ss;

  int _mm_cvtness_sbh(
    double __A,
  ) {
    __mm_cvtness_sbh ??=
        _dylib.lookupFunction<_c__mm_cvtness_sbh, _dart__mm_cvtness_sbh>(
            '_mm_cvtness_sbh');
    return __mm_cvtness_sbh(
      __A,
    );
  }

  _dart__mm_cvtness_sbh __mm_cvtness_sbh;

  int _rdpkru_u32() {
    __rdpkru_u32 ??=
        _dylib.lookupFunction<_c__rdpkru_u32, _dart__rdpkru_u32>('_rdpkru_u32');
    return __rdpkru_u32();
  }

  _dart__rdpkru_u32 __rdpkru_u32;

  void _wrpkru(
    int __val,
  ) {
    __wrpkru ??= _dylib.lookupFunction<_c__wrpkru, _dart__wrpkru>('_wrpkru');
    return __wrpkru(
      __val,
    );
  }

  _dart__wrpkru __wrpkru;

  int _rdpid_u32() {
    __rdpid_u32 ??=
        _dylib.lookupFunction<_c__rdpid_u32, _dart__rdpid_u32>('_rdpid_u32');
    return __rdpid_u32();
  }

  _dart__rdpid_u32 __rdpid_u32;

  int _rdrand16_step(
    ffi.Pointer<ffi.Uint16> __p,
  ) {
    __rdrand16_step ??=
        _dylib.lookupFunction<_c__rdrand16_step, _dart__rdrand16_step>(
            '_rdrand16_step');
    return __rdrand16_step(
      __p,
    );
  }

  _dart__rdrand16_step __rdrand16_step;

  int _rdrand32_step(
    ffi.Pointer<ffi.Uint32> __p,
  ) {
    __rdrand32_step ??=
        _dylib.lookupFunction<_c__rdrand32_step, _dart__rdrand32_step>(
            '_rdrand32_step');
    return __rdrand32_step(
      __p,
    );
  }

  _dart__rdrand32_step __rdrand32_step;

  int _rdrand64_step(
    ffi.Pointer<ffi.Uint64> __p,
  ) {
    __rdrand64_step ??=
        _dylib.lookupFunction<_c__rdrand64_step, _dart__rdrand64_step>(
            '_rdrand64_step');
    return __rdrand64_step(
      __p,
    );
  }

  _dart__rdrand64_step __rdrand64_step;

  int _readfsbase_u32() {
    __readfsbase_u32 ??=
        _dylib.lookupFunction<_c__readfsbase_u32, _dart__readfsbase_u32>(
            '_readfsbase_u32');
    return __readfsbase_u32();
  }

  _dart__readfsbase_u32 __readfsbase_u32;

  int _readfsbase_u64() {
    __readfsbase_u64 ??=
        _dylib.lookupFunction<_c__readfsbase_u64, _dart__readfsbase_u64>(
            '_readfsbase_u64');
    return __readfsbase_u64();
  }

  _dart__readfsbase_u64 __readfsbase_u64;

  int _readgsbase_u32() {
    __readgsbase_u32 ??=
        _dylib.lookupFunction<_c__readgsbase_u32, _dart__readgsbase_u32>(
            '_readgsbase_u32');
    return __readgsbase_u32();
  }

  _dart__readgsbase_u32 __readgsbase_u32;

  int _readgsbase_u64() {
    __readgsbase_u64 ??=
        _dylib.lookupFunction<_c__readgsbase_u64, _dart__readgsbase_u64>(
            '_readgsbase_u64');
    return __readgsbase_u64();
  }

  _dart__readgsbase_u64 __readgsbase_u64;

  void _writefsbase_u32(
    int __V,
  ) {
    __writefsbase_u32 ??=
        _dylib.lookupFunction<_c__writefsbase_u32, _dart__writefsbase_u32>(
            '_writefsbase_u32');
    return __writefsbase_u32(
      __V,
    );
  }

  _dart__writefsbase_u32 __writefsbase_u32;

  void _writefsbase_u64(
    int __V,
  ) {
    __writefsbase_u64 ??=
        _dylib.lookupFunction<_c__writefsbase_u64, _dart__writefsbase_u64>(
            '_writefsbase_u64');
    return __writefsbase_u64(
      __V,
    );
  }

  _dart__writefsbase_u64 __writefsbase_u64;

  void _writegsbase_u32(
    int __V,
  ) {
    __writegsbase_u32 ??=
        _dylib.lookupFunction<_c__writegsbase_u32, _dart__writegsbase_u32>(
            '_writegsbase_u32');
    return __writegsbase_u32(
      __V,
    );
  }

  _dart__writegsbase_u32 __writegsbase_u32;

  void _writegsbase_u64(
    int __V,
  ) {
    __writegsbase_u64 ??=
        _dylib.lookupFunction<_c__writegsbase_u64, _dart__writegsbase_u64>(
            '_writegsbase_u64');
    return __writegsbase_u64(
      __V,
    );
  }

  _dart__writegsbase_u64 __writegsbase_u64;

  int _loadbe_i16(
    ffi.Pointer<ffi.Void> __P,
  ) {
    __loadbe_i16 ??=
        _dylib.lookupFunction<_c__loadbe_i16, _dart__loadbe_i16>('_loadbe_i16');
    return __loadbe_i16(
      __P,
    );
  }

  _dart__loadbe_i16 __loadbe_i16;

  void _storebe_i16(
    ffi.Pointer<ffi.Void> __P,
    int __D,
  ) {
    __storebe_i16 ??= _dylib
        .lookupFunction<_c__storebe_i16, _dart__storebe_i16>('_storebe_i16');
    return __storebe_i16(
      __P,
      __D,
    );
  }

  _dart__storebe_i16 __storebe_i16;

  int _loadbe_i32(
    ffi.Pointer<ffi.Void> __P,
  ) {
    __loadbe_i32 ??=
        _dylib.lookupFunction<_c__loadbe_i32, _dart__loadbe_i32>('_loadbe_i32');
    return __loadbe_i32(
      __P,
    );
  }

  _dart__loadbe_i32 __loadbe_i32;

  void _storebe_i32(
    ffi.Pointer<ffi.Void> __P,
    int __D,
  ) {
    __storebe_i32 ??= _dylib
        .lookupFunction<_c__storebe_i32, _dart__storebe_i32>('_storebe_i32');
    return __storebe_i32(
      __P,
      __D,
    );
  }

  _dart__storebe_i32 __storebe_i32;

  int _loadbe_i64(
    ffi.Pointer<ffi.Void> __P,
  ) {
    __loadbe_i64 ??=
        _dylib.lookupFunction<_c__loadbe_i64, _dart__loadbe_i64>('_loadbe_i64');
    return __loadbe_i64(
      __P,
    );
  }

  _dart__loadbe_i64 __loadbe_i64;

  void _storebe_i64(
    ffi.Pointer<ffi.Void> __P,
    int __D,
  ) {
    __storebe_i64 ??= _dylib
        .lookupFunction<_c__storebe_i64, _dart__storebe_i64>('_storebe_i64');
    return __storebe_i64(
      __P,
      __D,
    );
  }

  _dart__storebe_i64 __storebe_i64;

  int _xbegin() {
    __xbegin ??= _dylib.lookupFunction<_c__xbegin, _dart__xbegin>('_xbegin');
    return __xbegin();
  }

  _dart__xbegin __xbegin;

  void _xend() {
    __xend ??= _dylib.lookupFunction<_c__xend, _dart__xend>('_xend');
    return __xend();
  }

  _dart__xend __xend;

  int _xtest() {
    __xtest ??= _dylib.lookupFunction<_c__xtest, _dart__xtest>('_xtest');
    return __xtest();
  }

  _dart__xtest __xtest;

  void _fxsave(
    ffi.Pointer<ffi.Void> __p,
  ) {
    __fxsave ??= _dylib.lookupFunction<_c__fxsave, _dart__fxsave>('_fxsave');
    return __fxsave(
      __p,
    );
  }

  _dart__fxsave __fxsave;

  void _fxrstor(
    ffi.Pointer<ffi.Void> __p,
  ) {
    __fxrstor ??=
        _dylib.lookupFunction<_c__fxrstor, _dart__fxrstor>('_fxrstor');
    return __fxrstor(
      __p,
    );
  }

  _dart__fxrstor __fxrstor;

  void _fxsave64(
    ffi.Pointer<ffi.Void> __p,
  ) {
    __fxsave64 ??=
        _dylib.lookupFunction<_c__fxsave64, _dart__fxsave64>('_fxsave64');
    return __fxsave64(
      __p,
    );
  }

  _dart__fxsave64 __fxsave64;

  void _fxrstor64(
    ffi.Pointer<ffi.Void> __p,
  ) {
    __fxrstor64 ??=
        _dylib.lookupFunction<_c__fxrstor64, _dart__fxrstor64>('_fxrstor64');
    return __fxrstor64(
      __p,
    );
  }

  _dart__fxrstor64 __fxrstor64;

  void _xsave(
    ffi.Pointer<ffi.Void> __p,
    int __m,
  ) {
    __xsave ??= _dylib.lookupFunction<_c__xsave, _dart__xsave>('_xsave');
    return __xsave(
      __p,
      __m,
    );
  }

  _dart__xsave __xsave;

  void _xrstor(
    ffi.Pointer<ffi.Void> __p,
    int __m,
  ) {
    __xrstor ??= _dylib.lookupFunction<_c__xrstor, _dart__xrstor>('_xrstor');
    return __xrstor(
      __p,
      __m,
    );
  }

  _dart__xrstor __xrstor;

  void _xsave64(
    ffi.Pointer<ffi.Void> __p,
    int __m,
  ) {
    __xsave64 ??=
        _dylib.lookupFunction<_c__xsave64, _dart__xsave64>('_xsave64');
    return __xsave64(
      __p,
      __m,
    );
  }

  _dart__xsave64 __xsave64;

  void _xrstor64(
    ffi.Pointer<ffi.Void> __p,
    int __m,
  ) {
    __xrstor64 ??=
        _dylib.lookupFunction<_c__xrstor64, _dart__xrstor64>('_xrstor64');
    return __xrstor64(
      __p,
      __m,
    );
  }

  _dart__xrstor64 __xrstor64;

  void _xsaveopt(
    ffi.Pointer<ffi.Void> __p,
    int __m,
  ) {
    __xsaveopt ??=
        _dylib.lookupFunction<_c__xsaveopt, _dart__xsaveopt>('_xsaveopt');
    return __xsaveopt(
      __p,
      __m,
    );
  }

  _dart__xsaveopt __xsaveopt;

  void _xsaveopt64(
    ffi.Pointer<ffi.Void> __p,
    int __m,
  ) {
    __xsaveopt64 ??=
        _dylib.lookupFunction<_c__xsaveopt64, _dart__xsaveopt64>('_xsaveopt64');
    return __xsaveopt64(
      __p,
      __m,
    );
  }

  _dart__xsaveopt64 __xsaveopt64;

  void _xsavec(
    ffi.Pointer<ffi.Void> __p,
    int __m,
  ) {
    __xsavec ??= _dylib.lookupFunction<_c__xsavec, _dart__xsavec>('_xsavec');
    return __xsavec(
      __p,
      __m,
    );
  }

  _dart__xsavec __xsavec;

  void _xsavec64(
    ffi.Pointer<ffi.Void> __p,
    int __m,
  ) {
    __xsavec64 ??=
        _dylib.lookupFunction<_c__xsavec64, _dart__xsavec64>('_xsavec64');
    return __xsavec64(
      __p,
      __m,
    );
  }

  _dart__xsavec64 __xsavec64;

  void _xsaves(
    ffi.Pointer<ffi.Void> __p,
    int __m,
  ) {
    __xsaves ??= _dylib.lookupFunction<_c__xsaves, _dart__xsaves>('_xsaves');
    return __xsaves(
      __p,
      __m,
    );
  }

  _dart__xsaves __xsaves;

  void _xrstors(
    ffi.Pointer<ffi.Void> __p,
    int __m,
  ) {
    __xrstors ??=
        _dylib.lookupFunction<_c__xrstors, _dart__xrstors>('_xrstors');
    return __xrstors(
      __p,
      __m,
    );
  }

  _dart__xrstors __xrstors;

  void _xrstors64(
    ffi.Pointer<ffi.Void> __p,
    int __m,
  ) {
    __xrstors64 ??=
        _dylib.lookupFunction<_c__xrstors64, _dart__xrstors64>('_xrstors64');
    return __xrstors64(
      __p,
      __m,
    );
  }

  _dart__xrstors64 __xrstors64;

  void _xsaves64(
    ffi.Pointer<ffi.Void> __p,
    int __m,
  ) {
    __xsaves64 ??=
        _dylib.lookupFunction<_c__xsaves64, _dart__xsaves64>('_xsaves64');
    return __xsaves64(
      __p,
      __m,
    );
  }

  _dart__xsaves64 __xsaves64;

  void _incsspd(
    int __a,
  ) {
    __incsspd ??=
        _dylib.lookupFunction<_c__incsspd, _dart__incsspd>('_incsspd');
    return __incsspd(
      __a,
    );
  }

  _dart__incsspd __incsspd;

  void _incsspq(
    int __a,
  ) {
    __incsspq ??=
        _dylib.lookupFunction<_c__incsspq, _dart__incsspq>('_incsspq');
    return __incsspq(
      __a,
    );
  }

  _dart__incsspq __incsspq;

  void _inc_ssp(
    int __a,
  ) {
    __inc_ssp ??=
        _dylib.lookupFunction<_c__inc_ssp, _dart__inc_ssp>('_inc_ssp');
    return __inc_ssp(
      __a,
    );
  }

  _dart__inc_ssp __inc_ssp;

  int _rdsspd(
    int __a,
  ) {
    __rdsspd ??= _dylib.lookupFunction<_c__rdsspd, _dart__rdsspd>('_rdsspd');
    return __rdsspd(
      __a,
    );
  }

  _dart__rdsspd __rdsspd;

  int _rdsspq(
    int __a,
  ) {
    __rdsspq ??= _dylib.lookupFunction<_c__rdsspq, _dart__rdsspq>('_rdsspq');
    return __rdsspq(
      __a,
    );
  }

  _dart__rdsspq __rdsspq;

  int _get_ssp() {
    __get_ssp ??=
        _dylib.lookupFunction<_c__get_ssp, _dart__get_ssp>('_get_ssp');
    return __get_ssp();
  }

  _dart__get_ssp __get_ssp;

  void _saveprevssp() {
    __saveprevssp ??= _dylib
        .lookupFunction<_c__saveprevssp, _dart__saveprevssp>('_saveprevssp');
    return __saveprevssp();
  }

  _dart__saveprevssp __saveprevssp;

  void _rstorssp(
    ffi.Pointer<ffi.Void> __p,
  ) {
    __rstorssp ??=
        _dylib.lookupFunction<_c__rstorssp, _dart__rstorssp>('_rstorssp');
    return __rstorssp(
      __p,
    );
  }

  _dart__rstorssp __rstorssp;

  void _wrssd(
    int __a,
    ffi.Pointer<ffi.Void> __p,
  ) {
    __wrssd ??= _dylib.lookupFunction<_c__wrssd, _dart__wrssd>('_wrssd');
    return __wrssd(
      __a,
      __p,
    );
  }

  _dart__wrssd __wrssd;

  void _wrssq(
    int __a,
    ffi.Pointer<ffi.Void> __p,
  ) {
    __wrssq ??= _dylib.lookupFunction<_c__wrssq, _dart__wrssq>('_wrssq');
    return __wrssq(
      __a,
      __p,
    );
  }

  _dart__wrssq __wrssq;

  void _wrussd(
    int __a,
    ffi.Pointer<ffi.Void> __p,
  ) {
    __wrussd ??= _dylib.lookupFunction<_c__wrussd, _dart__wrussd>('_wrussd');
    return __wrussd(
      __a,
      __p,
    );
  }

  _dart__wrussd __wrussd;

  void _wrussq(
    int __a,
    ffi.Pointer<ffi.Void> __p,
  ) {
    __wrussq ??= _dylib.lookupFunction<_c__wrussq, _dart__wrussq>('_wrussq');
    return __wrussq(
      __a,
      __p,
    );
  }

  _dart__wrussq __wrussq;

  void _setssbsy() {
    __setssbsy ??=
        _dylib.lookupFunction<_c__setssbsy, _dart__setssbsy>('_setssbsy');
    return __setssbsy();
  }

  _dart__setssbsy __setssbsy;

  void _clrssbsy(
    ffi.Pointer<ffi.Void> __p,
  ) {
    __clrssbsy ??=
        _dylib.lookupFunction<_c__clrssbsy, _dart__clrssbsy>('_clrssbsy');
    return __clrssbsy(
      __p,
    );
  }

  _dart__clrssbsy __clrssbsy;

  int _addcarryx_u32(
    int __cf,
    int __x,
    int __y,
    ffi.Pointer<ffi.Uint32> __p,
  ) {
    __addcarryx_u32 ??=
        _dylib.lookupFunction<_c__addcarryx_u32, _dart__addcarryx_u32>(
            '_addcarryx_u32');
    return __addcarryx_u32(
      __cf,
      __x,
      __y,
      __p,
    );
  }

  _dart__addcarryx_u32 __addcarryx_u32;

  int _addcarryx_u64(
    int __cf,
    int __x,
    int __y,
    ffi.Pointer<ffi.Uint64> __p,
  ) {
    __addcarryx_u64 ??=
        _dylib.lookupFunction<_c__addcarryx_u64, _dart__addcarryx_u64>(
            '_addcarryx_u64');
    return __addcarryx_u64(
      __cf,
      __x,
      __y,
      __p,
    );
  }

  _dart__addcarryx_u64 __addcarryx_u64;

  int _addcarry_u32(
    int __cf,
    int __x,
    int __y,
    ffi.Pointer<ffi.Uint32> __p,
  ) {
    __addcarry_u32 ??= _dylib
        .lookupFunction<_c__addcarry_u32, _dart__addcarry_u32>('_addcarry_u32');
    return __addcarry_u32(
      __cf,
      __x,
      __y,
      __p,
    );
  }

  _dart__addcarry_u32 __addcarry_u32;

  int _addcarry_u64(
    int __cf,
    int __x,
    int __y,
    ffi.Pointer<ffi.Uint64> __p,
  ) {
    __addcarry_u64 ??= _dylib
        .lookupFunction<_c__addcarry_u64, _dart__addcarry_u64>('_addcarry_u64');
    return __addcarry_u64(
      __cf,
      __x,
      __y,
      __p,
    );
  }

  _dart__addcarry_u64 __addcarry_u64;

  int _subborrow_u32(
    int __cf,
    int __x,
    int __y,
    ffi.Pointer<ffi.Uint32> __p,
  ) {
    __subborrow_u32 ??=
        _dylib.lookupFunction<_c__subborrow_u32, _dart__subborrow_u32>(
            '_subborrow_u32');
    return __subborrow_u32(
      __cf,
      __x,
      __y,
      __p,
    );
  }

  _dart__subborrow_u32 __subborrow_u32;

  int _subborrow_u64(
    int __cf,
    int __x,
    int __y,
    ffi.Pointer<ffi.Uint64> __p,
  ) {
    __subborrow_u64 ??=
        _dylib.lookupFunction<_c__subborrow_u64, _dart__subborrow_u64>(
            '_subborrow_u64');
    return __subborrow_u64(
      __cf,
      __x,
      __y,
      __p,
    );
  }

  _dart__subborrow_u64 __subborrow_u64;

  int _rdseed16_step(
    ffi.Pointer<ffi.Uint16> __p,
  ) {
    __rdseed16_step ??=
        _dylib.lookupFunction<_c__rdseed16_step, _dart__rdseed16_step>(
            '_rdseed16_step');
    return __rdseed16_step(
      __p,
    );
  }

  _dart__rdseed16_step __rdseed16_step;

  int _rdseed32_step(
    ffi.Pointer<ffi.Uint32> __p,
  ) {
    __rdseed32_step ??=
        _dylib.lookupFunction<_c__rdseed32_step, _dart__rdseed32_step>(
            '_rdseed32_step');
    return __rdseed32_step(
      __p,
    );
  }

  _dart__rdseed32_step __rdseed32_step;

  int _rdseed64_step(
    ffi.Pointer<ffi.Uint64> __p,
  ) {
    __rdseed64_step ??=
        _dylib.lookupFunction<_c__rdseed64_step, _dart__rdseed64_step>(
            '_rdseed64_step');
    return __rdseed64_step(
      __p,
    );
  }

  _dart__rdseed64_step __rdseed64_step;

  void _wbnoinvd() {
    __wbnoinvd ??=
        _dylib.lookupFunction<_c__wbnoinvd, _dart__wbnoinvd>('_wbnoinvd');
    return __wbnoinvd();
  }

  _dart__wbnoinvd __wbnoinvd;

  void _cldemote(
    ffi.Pointer<ffi.Void> __P,
  ) {
    __cldemote ??=
        _dylib.lookupFunction<_c__cldemote, _dart__cldemote>('_cldemote');
    return __cldemote(
      __P,
    );
  }

  _dart__cldemote __cldemote;

  void _umonitor(
    ffi.Pointer<ffi.Void> __address,
  ) {
    __umonitor ??=
        _dylib.lookupFunction<_c__umonitor, _dart__umonitor>('_umonitor');
    return __umonitor(
      __address,
    );
  }

  _dart__umonitor __umonitor;

  int _umwait(
    int __control,
    int __counter,
  ) {
    __umwait ??= _dylib.lookupFunction<_c__umwait, _dart__umwait>('_umwait');
    return __umwait(
      __control,
      __counter,
    );
  }

  _dart__umwait __umwait;

  int _tpause(
    int __control,
    int __counter,
  ) {
    __tpause ??= _dylib.lookupFunction<_c__tpause, _dart__tpause>('_tpause');
    return __tpause(
      __control,
      __counter,
    );
  }

  _dart__tpause __tpause;

  void _directstoreu_u32(
    ffi.Pointer<ffi.Void> __dst,
    int __value,
  ) {
    __directstoreu_u32 ??=
        _dylib.lookupFunction<_c__directstoreu_u32, _dart__directstoreu_u32>(
            '_directstoreu_u32');
    return __directstoreu_u32(
      __dst,
      __value,
    );
  }

  _dart__directstoreu_u32 __directstoreu_u32;

  void _directstoreu_u64(
    ffi.Pointer<ffi.Void> __dst,
    int __value,
  ) {
    __directstoreu_u64 ??=
        _dylib.lookupFunction<_c__directstoreu_u64, _dart__directstoreu_u64>(
            '_directstoreu_u64');
    return __directstoreu_u64(
      __dst,
      __value,
    );
  }

  _dart__directstoreu_u64 __directstoreu_u64;

  void _movdir64b(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
  ) {
    __movdir64b ??=
        _dylib.lookupFunction<_c__movdir64b, _dart__movdir64b>('_movdir64b');
    return __movdir64b(
      __dst,
      __src,
    );
  }

  _dart__movdir64b __movdir64b;

  int _pconfig_u32(
    int __leaf,
    ffi.Pointer<ffi.Uint64> __d,
  ) {
    __pconfig_u32 ??= _dylib
        .lookupFunction<_c__pconfig_u32, _dart__pconfig_u32>('_pconfig_u32');
    return __pconfig_u32(
      __leaf,
      __d,
    );
  }

  _dart__pconfig_u32 __pconfig_u32;

  int _enclu_u32(
    int __leaf,
    ffi.Pointer<ffi.Uint64> __d,
  ) {
    __enclu_u32 ??=
        _dylib.lookupFunction<_c__enclu_u32, _dart__enclu_u32>('_enclu_u32');
    return __enclu_u32(
      __leaf,
      __d,
    );
  }

  _dart__enclu_u32 __enclu_u32;

  int _encls_u32(
    int __leaf,
    ffi.Pointer<ffi.Uint64> __d,
  ) {
    __encls_u32 ??=
        _dylib.lookupFunction<_c__encls_u32, _dart__encls_u32>('_encls_u32');
    return __encls_u32(
      __leaf,
      __d,
    );
  }

  _dart__encls_u32 __encls_u32;

  int _enclv_u32(
    int __leaf,
    ffi.Pointer<ffi.Uint64> __d,
  ) {
    __enclv_u32 ??=
        _dylib.lookupFunction<_c__enclv_u32, _dart__enclv_u32>('_enclv_u32');
    return __enclv_u32(
      __leaf,
      __d,
    );
  }

  _dart__enclv_u32 __enclv_u32;

  void _ptwrite32(
    int __value,
  ) {
    __ptwrite32 ??=
        _dylib.lookupFunction<_c__ptwrite32, _dart__ptwrite32>('_ptwrite32');
    return __ptwrite32(
      __value,
    );
  }

  _dart__ptwrite32 __ptwrite32;

  void _ptwrite64(
    int __value,
  ) {
    __ptwrite64 ??=
        _dylib.lookupFunction<_c__ptwrite64, _dart__ptwrite64>('_ptwrite64');
    return __ptwrite64(
      __value,
    );
  }

  _dart__ptwrite64 __ptwrite64;

  void _invpcid(
    int __type,
    ffi.Pointer<ffi.Void> __descriptor,
  ) {
    __invpcid ??=
        _dylib.lookupFunction<_c__invpcid, _dart__invpcid>('_invpcid');
    return __invpcid(
      __type,
      __descriptor,
    );
  }

  _dart__invpcid __invpcid;

  void _tile_loadconfig(
    ffi.Pointer<ffi.Void> __config,
  ) {
    __tile_loadconfig ??=
        _dylib.lookupFunction<_c__tile_loadconfig, _dart__tile_loadconfig>(
            '_tile_loadconfig');
    return __tile_loadconfig(
      __config,
    );
  }

  _dart__tile_loadconfig __tile_loadconfig;

  void _tile_storeconfig(
    ffi.Pointer<ffi.Void> __config,
  ) {
    __tile_storeconfig ??=
        _dylib.lookupFunction<_c__tile_storeconfig, _dart__tile_storeconfig>(
            '_tile_storeconfig');
    return __tile_storeconfig(
      __config,
    );
  }

  _dart__tile_storeconfig __tile_storeconfig;

  void _tile_release() {
    __tile_release ??= _dylib
        .lookupFunction<_c__tile_release, _dart__tile_release>('_tile_release');
    return __tile_release();
  }

  _dart__tile_release __tile_release;

  int _enqcmd(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
  ) {
    __enqcmd ??= _dylib.lookupFunction<_c__enqcmd, _dart__enqcmd>('_enqcmd');
    return __enqcmd(
      __dst,
      __src,
    );
  }

  _dart__enqcmd __enqcmd;

  int _enqcmds(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
  ) {
    __enqcmds ??=
        _dylib.lookupFunction<_c__enqcmds, _dart__enqcmds>('_enqcmds');
    return __enqcmds(
      __dst,
      __src,
    );
  }

  _dart__enqcmds __enqcmds;

  void _serialize() {
    __serialize ??=
        _dylib.lookupFunction<_c__serialize, _dart__serialize>('_serialize');
    return __serialize();
  }

  _dart__serialize __serialize;

  void _xsusldtrk() {
    __xsusldtrk ??=
        _dylib.lookupFunction<_c__xsusldtrk, _dart__xsusldtrk>('_xsusldtrk');
    return __xsusldtrk();
  }

  _dart__xsusldtrk __xsusldtrk;

  void _xresldtrk() {
    __xresldtrk ??=
        _dylib.lookupFunction<_c__xresldtrk, _dart__xresldtrk>('_xresldtrk');
    return __xresldtrk();
  }

  _dart__xresldtrk __xresldtrk;

  /// This function returns the number of CPU cores available.
  int SDL_GetCPUCount() {
    _SDL_GetCPUCount ??=
        _dylib.lookupFunction<_c_SDL_GetCPUCount, _dart_SDL_GetCPUCount>(
            'SDL_GetCPUCount');
    return _SDL_GetCPUCount();
  }

  _dart_SDL_GetCPUCount _SDL_GetCPUCount;

  /// This function returns the L1 cache line size of the CPU
  ///
  /// This is useful for determining multi-threaded structure padding
  /// or SIMD prefetch sizes.
  int SDL_GetCPUCacheLineSize() {
    _SDL_GetCPUCacheLineSize ??= _dylib.lookupFunction<
        _c_SDL_GetCPUCacheLineSize,
        _dart_SDL_GetCPUCacheLineSize>('SDL_GetCPUCacheLineSize');
    return _SDL_GetCPUCacheLineSize();
  }

  _dart_SDL_GetCPUCacheLineSize _SDL_GetCPUCacheLineSize;

  /// This function returns true if the CPU has the RDTSC instruction.
  int SDL_HasRDTSC() {
    _SDL_HasRDTSC ??= _dylib
        .lookupFunction<_c_SDL_HasRDTSC, _dart_SDL_HasRDTSC>('SDL_HasRDTSC');
    return _SDL_HasRDTSC();
  }

  _dart_SDL_HasRDTSC _SDL_HasRDTSC;

  /// This function returns true if the CPU has AltiVec features.
  int SDL_HasAltiVec() {
    _SDL_HasAltiVec ??=
        _dylib.lookupFunction<_c_SDL_HasAltiVec, _dart_SDL_HasAltiVec>(
            'SDL_HasAltiVec');
    return _SDL_HasAltiVec();
  }

  _dart_SDL_HasAltiVec _SDL_HasAltiVec;

  /// This function returns true if the CPU has MMX features.
  int SDL_HasMMX() {
    _SDL_HasMMX ??=
        _dylib.lookupFunction<_c_SDL_HasMMX, _dart_SDL_HasMMX>('SDL_HasMMX');
    return _SDL_HasMMX();
  }

  _dart_SDL_HasMMX _SDL_HasMMX;

  /// This function returns true if the CPU has 3DNow! features.
  int SDL_Has3DNow() {
    _SDL_Has3DNow ??= _dylib
        .lookupFunction<_c_SDL_Has3DNow, _dart_SDL_Has3DNow>('SDL_Has3DNow');
    return _SDL_Has3DNow();
  }

  _dart_SDL_Has3DNow _SDL_Has3DNow;

  /// This function returns true if the CPU has SSE features.
  int SDL_HasSSE() {
    _SDL_HasSSE ??=
        _dylib.lookupFunction<_c_SDL_HasSSE, _dart_SDL_HasSSE>('SDL_HasSSE');
    return _SDL_HasSSE();
  }

  _dart_SDL_HasSSE _SDL_HasSSE;

  /// This function returns true if the CPU has SSE2 features.
  int SDL_HasSSE2() {
    _SDL_HasSSE2 ??=
        _dylib.lookupFunction<_c_SDL_HasSSE2, _dart_SDL_HasSSE2>('SDL_HasSSE2');
    return _SDL_HasSSE2();
  }

  _dart_SDL_HasSSE2 _SDL_HasSSE2;

  /// This function returns true if the CPU has SSE3 features.
  int SDL_HasSSE3() {
    _SDL_HasSSE3 ??=
        _dylib.lookupFunction<_c_SDL_HasSSE3, _dart_SDL_HasSSE3>('SDL_HasSSE3');
    return _SDL_HasSSE3();
  }

  _dart_SDL_HasSSE3 _SDL_HasSSE3;

  /// This function returns true if the CPU has SSE4.1 features.
  int SDL_HasSSE41() {
    _SDL_HasSSE41 ??= _dylib
        .lookupFunction<_c_SDL_HasSSE41, _dart_SDL_HasSSE41>('SDL_HasSSE41');
    return _SDL_HasSSE41();
  }

  _dart_SDL_HasSSE41 _SDL_HasSSE41;

  /// This function returns true if the CPU has SSE4.2 features.
  int SDL_HasSSE42() {
    _SDL_HasSSE42 ??= _dylib
        .lookupFunction<_c_SDL_HasSSE42, _dart_SDL_HasSSE42>('SDL_HasSSE42');
    return _SDL_HasSSE42();
  }

  _dart_SDL_HasSSE42 _SDL_HasSSE42;

  /// This function returns true if the CPU has AVX features.
  int SDL_HasAVX() {
    _SDL_HasAVX ??=
        _dylib.lookupFunction<_c_SDL_HasAVX, _dart_SDL_HasAVX>('SDL_HasAVX');
    return _SDL_HasAVX();
  }

  _dart_SDL_HasAVX _SDL_HasAVX;

  /// This function returns true if the CPU has AVX2 features.
  int SDL_HasAVX2() {
    _SDL_HasAVX2 ??=
        _dylib.lookupFunction<_c_SDL_HasAVX2, _dart_SDL_HasAVX2>('SDL_HasAVX2');
    return _SDL_HasAVX2();
  }

  _dart_SDL_HasAVX2 _SDL_HasAVX2;

  /// This function returns true if the CPU has AVX-512F (foundation) features.
  int SDL_HasAVX512F() {
    _SDL_HasAVX512F ??=
        _dylib.lookupFunction<_c_SDL_HasAVX512F, _dart_SDL_HasAVX512F>(
            'SDL_HasAVX512F');
    return _SDL_HasAVX512F();
  }

  _dart_SDL_HasAVX512F _SDL_HasAVX512F;

  /// This function returns true if the CPU has ARM SIMD (ARMv6) features.
  int SDL_HasARMSIMD() {
    _SDL_HasARMSIMD ??=
        _dylib.lookupFunction<_c_SDL_HasARMSIMD, _dart_SDL_HasARMSIMD>(
            'SDL_HasARMSIMD');
    return _SDL_HasARMSIMD();
  }

  _dart_SDL_HasARMSIMD _SDL_HasARMSIMD;

  /// This function returns true if the CPU has NEON (ARM SIMD) features.
  int SDL_HasNEON() {
    _SDL_HasNEON ??=
        _dylib.lookupFunction<_c_SDL_HasNEON, _dart_SDL_HasNEON>('SDL_HasNEON');
    return _SDL_HasNEON();
  }

  _dart_SDL_HasNEON _SDL_HasNEON;

  /// This function returns the amount of RAM configured in the system, in MB.
  int SDL_GetSystemRAM() {
    _SDL_GetSystemRAM ??=
        _dylib.lookupFunction<_c_SDL_GetSystemRAM, _dart_SDL_GetSystemRAM>(
            'SDL_GetSystemRAM');
    return _SDL_GetSystemRAM();
  }

  _dart_SDL_GetSystemRAM _SDL_GetSystemRAM;

  /// \brief Report the alignment this system needs for SIMD allocations.
  ///
  /// This will return the minimum number of bytes to which a pointer must be
  /// aligned to be compatible with SIMD instructions on the current machine.
  /// For example, if the machine supports SSE only, it will return 16, but if
  /// it supports AVX-512F, it'll return 64 (etc). This only reports values for
  /// instruction sets SDL knows about, so if your SDL build doesn't have
  /// SDL_HasAVX512F(), then it might return 16 for the SSE support it sees and
  /// not 64 for the AVX-512 instructions that exist but SDL doesn't know about.
  /// Plan accordingly.
  int SDL_SIMDGetAlignment() {
    _SDL_SIMDGetAlignment ??= _dylib.lookupFunction<_c_SDL_SIMDGetAlignment,
        _dart_SDL_SIMDGetAlignment>('SDL_SIMDGetAlignment');
    return _SDL_SIMDGetAlignment();
  }

  _dart_SDL_SIMDGetAlignment _SDL_SIMDGetAlignment;

  /// \brief Allocate memory in a SIMD-friendly way.
  ///
  /// This will allocate a block of memory that is suitable for use with SIMD
  /// instructions. Specifically, it will be properly aligned and padded for
  /// the system's supported vector instructions.
  ///
  /// The memory returned will be padded such that it is safe to read or write
  /// an incomplete vector at the end of the memory block. This can be useful
  /// so you don't have to drop back to a scalar fallback at the end of your
  /// SIMD processing loop to deal with the final elements without overflowing
  /// the allocated buffer.
  ///
  /// You must free this memory with SDL_FreeSIMD(), not free() or SDL_free()
  /// or delete[], etc.
  ///
  /// Note that SDL will only deal with SIMD instruction sets it is aware of;
  /// for example, SDL 2.0.8 knows that SSE wants 16-byte vectors
  /// (SDL_HasSSE()), and AVX2 wants 32 bytes (SDL_HasAVX2()), but doesn't
  /// know that AVX-512 wants 64. To be clear: if you can't decide to use an
  /// instruction set with an SDL_Has*() function, don't use that instruction
  /// set with memory allocated through here.
  ///
  /// SDL_AllocSIMD(0) will return a non-NULL pointer, assuming the system isn't
  /// out of memory.
  ///
  /// \param len The length, in bytes, of the block to allocated. The actual
  /// allocated block might be larger due to padding, etc.
  /// \return Pointer to newly-allocated block, NULL if out of memory.
  ///
  /// \sa SDL_SIMDAlignment
  /// \sa SDL_SIMDFree
  ffi.Pointer<ffi.Void> SDL_SIMDAlloc(
    int len,
  ) {
    _SDL_SIMDAlloc ??= _dylib
        .lookupFunction<_c_SDL_SIMDAlloc, _dart_SDL_SIMDAlloc>('SDL_SIMDAlloc');
    return _SDL_SIMDAlloc(
      len,
    );
  }

  _dart_SDL_SIMDAlloc _SDL_SIMDAlloc;

  /// \brief Deallocate memory obtained from SDL_SIMDAlloc
  ///
  /// It is not valid to use this function on a pointer from anything but
  /// SDL_SIMDAlloc(). It can't be used on pointers from malloc, realloc,
  /// SDL_malloc, memalign, new[], etc.
  ///
  /// However, SDL_SIMDFree(NULL) is a legal no-op.
  ///
  /// \sa SDL_SIMDAlloc
  void SDL_SIMDFree(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    _SDL_SIMDFree ??= _dylib
        .lookupFunction<_c_SDL_SIMDFree, _dart_SDL_SIMDFree>('SDL_SIMDFree');
    return _SDL_SIMDFree(
      ptr,
    );
  }

  _dart_SDL_SIMDFree _SDL_SIMDFree;

  /// \brief Get the window which currently has mouse focus.
  ffi.Pointer<SDL_Window> SDL_GetMouseFocus() {
    _SDL_GetMouseFocus ??=
        _dylib.lookupFunction<_c_SDL_GetMouseFocus, _dart_SDL_GetMouseFocus>(
            'SDL_GetMouseFocus');
    return _SDL_GetMouseFocus();
  }

  _dart_SDL_GetMouseFocus _SDL_GetMouseFocus;

  /// \brief Retrieve the current state of the mouse.
  ///
  /// The current button state is returned as a button bitmask, which can
  /// be tested using the SDL_BUTTON(X) macros, and x and y are set to the
  /// mouse cursor position relative to the focus window for the currently
  /// selected mouse.  You can pass NULL for either x or y.
  int SDL_GetMouseState(
    ffi.Pointer<ffi.Int32> x,
    ffi.Pointer<ffi.Int32> y,
  ) {
    _SDL_GetMouseState ??=
        _dylib.lookupFunction<_c_SDL_GetMouseState, _dart_SDL_GetMouseState>(
            'SDL_GetMouseState');
    return _SDL_GetMouseState(
      x,
      y,
    );
  }

  _dart_SDL_GetMouseState _SDL_GetMouseState;

  /// \brief Get the current state of the mouse, in relation to the desktop
  ///
  /// This works just like SDL_GetMouseState(), but the coordinates will be
  /// reported relative to the top-left of the desktop. This can be useful if
  /// you need to track the mouse outside of a specific window and
  /// SDL_CaptureMouse() doesn't fit your needs. For example, it could be
  /// useful if you need to track the mouse while dragging a window, where
  /// coordinates relative to a window might not be in sync at all times.
  ///
  /// \note SDL_GetMouseState() returns the mouse position as SDL understands
  /// it from the last pump of the event queue. This function, however,
  /// queries the OS for the current mouse position, and as such, might
  /// be a slightly less efficient function. Unless you know what you're
  /// doing and have a good reason to use this function, you probably want
  /// SDL_GetMouseState() instead.
  ///
  /// \param x Returns the current X coord, relative to the desktop. Can be NULL.
  /// \param y Returns the current Y coord, relative to the desktop. Can be NULL.
  /// \return The current button state as a bitmask, which can be tested using the SDL_BUTTON(X) macros.
  ///
  /// \sa SDL_GetMouseState
  int SDL_GetGlobalMouseState(
    ffi.Pointer<ffi.Int32> x,
    ffi.Pointer<ffi.Int32> y,
  ) {
    _SDL_GetGlobalMouseState ??= _dylib.lookupFunction<
        _c_SDL_GetGlobalMouseState,
        _dart_SDL_GetGlobalMouseState>('SDL_GetGlobalMouseState');
    return _SDL_GetGlobalMouseState(
      x,
      y,
    );
  }

  _dart_SDL_GetGlobalMouseState _SDL_GetGlobalMouseState;

  /// \brief Retrieve the relative state of the mouse.
  ///
  /// The current button state is returned as a button bitmask, which can
  /// be tested using the SDL_BUTTON(X) macros, and x and y are set to the
  /// mouse deltas since the last call to SDL_GetRelativeMouseState().
  int SDL_GetRelativeMouseState(
    ffi.Pointer<ffi.Int32> x,
    ffi.Pointer<ffi.Int32> y,
  ) {
    _SDL_GetRelativeMouseState ??= _dylib.lookupFunction<
        _c_SDL_GetRelativeMouseState,
        _dart_SDL_GetRelativeMouseState>('SDL_GetRelativeMouseState');
    return _SDL_GetRelativeMouseState(
      x,
      y,
    );
  }

  _dart_SDL_GetRelativeMouseState _SDL_GetRelativeMouseState;

  /// \brief Moves the mouse to the given position within the window.
  ///
  /// \param window The window to move the mouse into, or NULL for the current mouse focus
  /// \param x The x coordinate within the window
  /// \param y The y coordinate within the window
  ///
  /// \note This function generates a mouse motion event
  void SDL_WarpMouseInWindow(
    ffi.Pointer<SDL_Window> window,
    int x,
    int y,
  ) {
    _SDL_WarpMouseInWindow ??= _dylib.lookupFunction<_c_SDL_WarpMouseInWindow,
        _dart_SDL_WarpMouseInWindow>('SDL_WarpMouseInWindow');
    return _SDL_WarpMouseInWindow(
      window,
      x,
      y,
    );
  }

  _dart_SDL_WarpMouseInWindow _SDL_WarpMouseInWindow;

  /// \brief Moves the mouse to the given position in global screen space.
  ///
  /// \param x The x coordinate
  /// \param y The y coordinate
  /// \return 0 on success, -1 on error (usually: unsupported by a platform).
  ///
  /// \note This function generates a mouse motion event
  int SDL_WarpMouseGlobal(
    int x,
    int y,
  ) {
    _SDL_WarpMouseGlobal ??= _dylib.lookupFunction<_c_SDL_WarpMouseGlobal,
        _dart_SDL_WarpMouseGlobal>('SDL_WarpMouseGlobal');
    return _SDL_WarpMouseGlobal(
      x,
      y,
    );
  }

  _dart_SDL_WarpMouseGlobal _SDL_WarpMouseGlobal;

  /// \brief Set relative mouse mode.
  ///
  /// \param enabled Whether or not to enable relative mode
  ///
  /// \return 0 on success, or -1 if relative mode is not supported.
  ///
  /// While the mouse is in relative mode, the cursor is hidden, and the
  /// driver will try to report continuous motion in the current window.
  /// Only relative motion events will be delivered, the mouse position
  /// will not change.
  ///
  /// \note This function will flush any pending mouse motion.
  ///
  /// \sa SDL_GetRelativeMouseMode()
  int SDL_SetRelativeMouseMode(
    int enabled,
  ) {
    _SDL_SetRelativeMouseMode ??= _dylib.lookupFunction<
        _c_SDL_SetRelativeMouseMode,
        _dart_SDL_SetRelativeMouseMode>('SDL_SetRelativeMouseMode');
    return _SDL_SetRelativeMouseMode(
      enabled,
    );
  }

  _dart_SDL_SetRelativeMouseMode _SDL_SetRelativeMouseMode;

  /// \brief Capture the mouse, to track input outside an SDL window.
  ///
  /// \param enabled Whether or not to enable capturing
  ///
  /// Capturing enables your app to obtain mouse events globally, instead of
  /// just within your window. Not all video targets support this function.
  /// When capturing is enabled, the current window will get all mouse events,
  /// but unlike relative mode, no change is made to the cursor and it is
  /// not restrained to your window.
  ///
  /// This function may also deny mouse input to other windows--both those in
  /// your application and others on the system--so you should use this
  /// function sparingly, and in small bursts. For example, you might want to
  /// track the mouse while the user is dragging something, until the user
  /// releases a mouse button. It is not recommended that you capture the mouse
  /// for long periods of time, such as the entire time your app is running.
  ///
  /// While captured, mouse events still report coordinates relative to the
  /// current (foreground) window, but those coordinates may be outside the
  /// bounds of the window (including negative values). Capturing is only
  /// allowed for the foreground window. If the window loses focus while
  /// capturing, the capture will be disabled automatically.
  ///
  /// While capturing is enabled, the current window will have the
  /// SDL_WINDOW_MOUSE_CAPTURE flag set.
  ///
  /// \return 0 on success, or -1 if not supported.
  int SDL_CaptureMouse(
    int enabled,
  ) {
    _SDL_CaptureMouse ??=
        _dylib.lookupFunction<_c_SDL_CaptureMouse, _dart_SDL_CaptureMouse>(
            'SDL_CaptureMouse');
    return _SDL_CaptureMouse(
      enabled,
    );
  }

  _dart_SDL_CaptureMouse _SDL_CaptureMouse;

  /// \brief Query whether relative mouse mode is enabled.
  ///
  /// \sa SDL_SetRelativeMouseMode()
  int SDL_GetRelativeMouseMode() {
    _SDL_GetRelativeMouseMode ??= _dylib.lookupFunction<
        _c_SDL_GetRelativeMouseMode,
        _dart_SDL_GetRelativeMouseMode>('SDL_GetRelativeMouseMode');
    return _SDL_GetRelativeMouseMode();
  }

  _dart_SDL_GetRelativeMouseMode _SDL_GetRelativeMouseMode;

  /// \brief Create a cursor, using the specified bitmap data and
  /// mask (in MSB format).
  ///
  /// The cursor width must be a multiple of 8 bits.
  ///
  /// The cursor is created in black and white according to the following:
  /// <table>
  /// <tr><td> data </td><td> mask </td><td> resulting pixel on screen </td></tr>
  /// <tr><td>  0   </td><td>  1   </td><td> White </td></tr>
  /// <tr><td>  1   </td><td>  1   </td><td> Black </td></tr>
  /// <tr><td>  0   </td><td>  0   </td><td> Transparent </td></tr>
  /// <tr><td>  1   </td><td>  0   </td><td> Inverted color if possible, black
  /// if not. </td></tr>
  /// </table>
  ///
  /// \sa SDL_FreeCursor()
  ffi.Pointer<SDL_Cursor> SDL_CreateCursor(
    ffi.Pointer<ffi.Uint8> data,
    ffi.Pointer<ffi.Uint8> mask,
    int w,
    int h,
    int hot_x,
    int hot_y,
  ) {
    _SDL_CreateCursor ??=
        _dylib.lookupFunction<_c_SDL_CreateCursor, _dart_SDL_CreateCursor>(
            'SDL_CreateCursor');
    return _SDL_CreateCursor(
      data,
      mask,
      w,
      h,
      hot_x,
      hot_y,
    );
  }

  _dart_SDL_CreateCursor _SDL_CreateCursor;

  /// \brief Create a color cursor.
  ///
  /// \sa SDL_FreeCursor()
  ffi.Pointer<SDL_Cursor> SDL_CreateColorCursor(
    ffi.Pointer<SDL_Surface> surface,
    int hot_x,
    int hot_y,
  ) {
    _SDL_CreateColorCursor ??= _dylib.lookupFunction<_c_SDL_CreateColorCursor,
        _dart_SDL_CreateColorCursor>('SDL_CreateColorCursor');
    return _SDL_CreateColorCursor(
      surface,
      hot_x,
      hot_y,
    );
  }

  _dart_SDL_CreateColorCursor _SDL_CreateColorCursor;

  /// \brief Create a system cursor.
  ///
  /// \sa SDL_FreeCursor()
  ffi.Pointer<SDL_Cursor> SDL_CreateSystemCursor(
    int id,
  ) {
    _SDL_CreateSystemCursor ??= _dylib.lookupFunction<_c_SDL_CreateSystemCursor,
        _dart_SDL_CreateSystemCursor>('SDL_CreateSystemCursor');
    return _SDL_CreateSystemCursor(
      id,
    );
  }

  _dart_SDL_CreateSystemCursor _SDL_CreateSystemCursor;

  /// \brief Set the active cursor.
  void SDL_SetCursor(
    ffi.Pointer<SDL_Cursor> cursor,
  ) {
    _SDL_SetCursor ??= _dylib
        .lookupFunction<_c_SDL_SetCursor, _dart_SDL_SetCursor>('SDL_SetCursor');
    return _SDL_SetCursor(
      cursor,
    );
  }

  _dart_SDL_SetCursor _SDL_SetCursor;

  /// \brief Return the active cursor.
  ffi.Pointer<SDL_Cursor> SDL_GetCursor() {
    _SDL_GetCursor ??= _dylib
        .lookupFunction<_c_SDL_GetCursor, _dart_SDL_GetCursor>('SDL_GetCursor');
    return _SDL_GetCursor();
  }

  _dart_SDL_GetCursor _SDL_GetCursor;

  /// \brief Return the default cursor.
  ffi.Pointer<SDL_Cursor> SDL_GetDefaultCursor() {
    _SDL_GetDefaultCursor ??= _dylib.lookupFunction<_c_SDL_GetDefaultCursor,
        _dart_SDL_GetDefaultCursor>('SDL_GetDefaultCursor');
    return _SDL_GetDefaultCursor();
  }

  _dart_SDL_GetDefaultCursor _SDL_GetDefaultCursor;

  /// \brief Frees a cursor created with SDL_CreateCursor() or similar functions.
  ///
  /// \sa SDL_CreateCursor()
  /// \sa SDL_CreateColorCursor()
  /// \sa SDL_CreateSystemCursor()
  void SDL_FreeCursor(
    ffi.Pointer<SDL_Cursor> cursor,
  ) {
    _SDL_FreeCursor ??=
        _dylib.lookupFunction<_c_SDL_FreeCursor, _dart_SDL_FreeCursor>(
            'SDL_FreeCursor');
    return _SDL_FreeCursor(
      cursor,
    );
  }

  _dart_SDL_FreeCursor _SDL_FreeCursor;

  /// \brief Toggle whether or not the cursor is shown.
  ///
  /// \param toggle 1 to show the cursor, 0 to hide it, -1 to query the current
  /// state.
  ///
  /// \return 1 if the cursor is shown, or 0 if the cursor is hidden.
  int SDL_ShowCursor(
    int toggle,
  ) {
    _SDL_ShowCursor ??=
        _dylib.lookupFunction<_c_SDL_ShowCursor, _dart_SDL_ShowCursor>(
            'SDL_ShowCursor');
    return _SDL_ShowCursor(
      toggle,
    );
  }

  _dart_SDL_ShowCursor _SDL_ShowCursor;

  /// Locking for multi-threaded access to the joystick API
  ///
  /// If you are using the joystick API or handling events from multiple threads
  /// you should use these locking functions to protect access to the joysticks.
  ///
  /// In particular, you are guaranteed that the joystick list won't change, so
  /// the API functions that take a joystick index will be valid, and joystick
  /// and game controller events will not be delivered.
  void SDL_LockJoysticks() {
    _SDL_LockJoysticks ??=
        _dylib.lookupFunction<_c_SDL_LockJoysticks, _dart_SDL_LockJoysticks>(
            'SDL_LockJoysticks');
    return _SDL_LockJoysticks();
  }

  _dart_SDL_LockJoysticks _SDL_LockJoysticks;

  void SDL_UnlockJoysticks() {
    _SDL_UnlockJoysticks ??= _dylib.lookupFunction<_c_SDL_UnlockJoysticks,
        _dart_SDL_UnlockJoysticks>('SDL_UnlockJoysticks');
    return _SDL_UnlockJoysticks();
  }

  _dart_SDL_UnlockJoysticks _SDL_UnlockJoysticks;

  /// Count the number of joysticks attached to the system right now
  int SDL_NumJoysticks() {
    _SDL_NumJoysticks ??=
        _dylib.lookupFunction<_c_SDL_NumJoysticks, _dart_SDL_NumJoysticks>(
            'SDL_NumJoysticks');
    return _SDL_NumJoysticks();
  }

  _dart_SDL_NumJoysticks _SDL_NumJoysticks;

  /// Get the implementation dependent name of a joystick.
  /// This can be called before any joysticks are opened.
  /// If no name can be found, this function returns NULL.
  ffi.Pointer<ffi.Int8> SDL_JoystickNameForIndex(
    int device_index,
  ) {
    _SDL_JoystickNameForIndex ??= _dylib.lookupFunction<
        _c_SDL_JoystickNameForIndex,
        _dart_SDL_JoystickNameForIndex>('SDL_JoystickNameForIndex');
    return _SDL_JoystickNameForIndex(
      device_index,
    );
  }

  _dart_SDL_JoystickNameForIndex _SDL_JoystickNameForIndex;

  /// Get the player index of a joystick, or -1 if it's not available
  /// This can be called before any joysticks are opened.
  int SDL_JoystickGetDevicePlayerIndex(
    int device_index,
  ) {
    _SDL_JoystickGetDevicePlayerIndex ??= _dylib.lookupFunction<
            _c_SDL_JoystickGetDevicePlayerIndex,
            _dart_SDL_JoystickGetDevicePlayerIndex>(
        'SDL_JoystickGetDevicePlayerIndex');
    return _SDL_JoystickGetDevicePlayerIndex(
      device_index,
    );
  }

  _dart_SDL_JoystickGetDevicePlayerIndex _SDL_JoystickGetDevicePlayerIndex;

  /// Get the USB vendor ID of a joystick, if available.
  /// This can be called before any joysticks are opened.
  /// If the vendor ID isn't available this function returns 0.
  int SDL_JoystickGetDeviceVendor(
    int device_index,
  ) {
    _SDL_JoystickGetDeviceVendor ??= _dylib.lookupFunction<
        _c_SDL_JoystickGetDeviceVendor,
        _dart_SDL_JoystickGetDeviceVendor>('SDL_JoystickGetDeviceVendor');
    return _SDL_JoystickGetDeviceVendor(
      device_index,
    );
  }

  _dart_SDL_JoystickGetDeviceVendor _SDL_JoystickGetDeviceVendor;

  /// Get the USB product ID of a joystick, if available.
  /// This can be called before any joysticks are opened.
  /// If the product ID isn't available this function returns 0.
  int SDL_JoystickGetDeviceProduct(
    int device_index,
  ) {
    _SDL_JoystickGetDeviceProduct ??= _dylib.lookupFunction<
        _c_SDL_JoystickGetDeviceProduct,
        _dart_SDL_JoystickGetDeviceProduct>('SDL_JoystickGetDeviceProduct');
    return _SDL_JoystickGetDeviceProduct(
      device_index,
    );
  }

  _dart_SDL_JoystickGetDeviceProduct _SDL_JoystickGetDeviceProduct;

  /// Get the product version of a joystick, if available.
  /// This can be called before any joysticks are opened.
  /// If the product version isn't available this function returns 0.
  int SDL_JoystickGetDeviceProductVersion(
    int device_index,
  ) {
    _SDL_JoystickGetDeviceProductVersion ??= _dylib.lookupFunction<
            _c_SDL_JoystickGetDeviceProductVersion,
            _dart_SDL_JoystickGetDeviceProductVersion>(
        'SDL_JoystickGetDeviceProductVersion');
    return _SDL_JoystickGetDeviceProductVersion(
      device_index,
    );
  }

  _dart_SDL_JoystickGetDeviceProductVersion
      _SDL_JoystickGetDeviceProductVersion;

  /// Get the type of a joystick, if available.
  /// This can be called before any joysticks are opened.
  int SDL_JoystickGetDeviceType(
    int device_index,
  ) {
    _SDL_JoystickGetDeviceType ??= _dylib.lookupFunction<
        _c_SDL_JoystickGetDeviceType,
        _dart_SDL_JoystickGetDeviceType>('SDL_JoystickGetDeviceType');
    return _SDL_JoystickGetDeviceType(
      device_index,
    );
  }

  _dart_SDL_JoystickGetDeviceType _SDL_JoystickGetDeviceType;

  /// Get the instance ID of a joystick.
  /// This can be called before any joysticks are opened.
  /// If the index is out of range, this function will return -1.
  int SDL_JoystickGetDeviceInstanceID(
    int device_index,
  ) {
    _SDL_JoystickGetDeviceInstanceID ??= _dylib.lookupFunction<
            _c_SDL_JoystickGetDeviceInstanceID,
            _dart_SDL_JoystickGetDeviceInstanceID>(
        'SDL_JoystickGetDeviceInstanceID');
    return _SDL_JoystickGetDeviceInstanceID(
      device_index,
    );
  }

  _dart_SDL_JoystickGetDeviceInstanceID _SDL_JoystickGetDeviceInstanceID;

  /// Open a joystick for use.
  /// The index passed as an argument refers to the N'th joystick on the system.
  /// This index is not the value which will identify this joystick in future
  /// joystick events.  The joystick's instance id (::SDL_JoystickID) will be used
  /// there instead.
  ///
  /// \return A joystick identifier, or NULL if an error occurred.
  ffi.Pointer<_SDL_Joystick> SDL_JoystickOpen(
    int device_index,
  ) {
    _SDL_JoystickOpen ??=
        _dylib.lookupFunction<_c_SDL_JoystickOpen, _dart_SDL_JoystickOpen>(
            'SDL_JoystickOpen');
    return _SDL_JoystickOpen(
      device_index,
    );
  }

  _dart_SDL_JoystickOpen _SDL_JoystickOpen;

  /// Return the SDL_Joystick associated with an instance id.
  ffi.Pointer<_SDL_Joystick> SDL_JoystickFromInstanceID(
    int instance_id,
  ) {
    _SDL_JoystickFromInstanceID ??= _dylib.lookupFunction<
        _c_SDL_JoystickFromInstanceID,
        _dart_SDL_JoystickFromInstanceID>('SDL_JoystickFromInstanceID');
    return _SDL_JoystickFromInstanceID(
      instance_id,
    );
  }

  _dart_SDL_JoystickFromInstanceID _SDL_JoystickFromInstanceID;

  /// Return the SDL_Joystick associated with a player index.
  ffi.Pointer<_SDL_Joystick> SDL_JoystickFromPlayerIndex(
    int player_index,
  ) {
    _SDL_JoystickFromPlayerIndex ??= _dylib.lookupFunction<
        _c_SDL_JoystickFromPlayerIndex,
        _dart_SDL_JoystickFromPlayerIndex>('SDL_JoystickFromPlayerIndex');
    return _SDL_JoystickFromPlayerIndex(
      player_index,
    );
  }

  _dart_SDL_JoystickFromPlayerIndex _SDL_JoystickFromPlayerIndex;

  /// Return the name for this currently opened joystick.
  /// If no name can be found, this function returns NULL.
  ffi.Pointer<ffi.Int8> SDL_JoystickName(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_JoystickName ??=
        _dylib.lookupFunction<_c_SDL_JoystickName, _dart_SDL_JoystickName>(
            'SDL_JoystickName');
    return _SDL_JoystickName(
      joystick,
    );
  }

  _dart_SDL_JoystickName _SDL_JoystickName;

  /// Get the player index of an opened joystick, or -1 if it's not available
  ///
  /// For XInput controllers this returns the XInput user index.
  int SDL_JoystickGetPlayerIndex(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_JoystickGetPlayerIndex ??= _dylib.lookupFunction<
        _c_SDL_JoystickGetPlayerIndex,
        _dart_SDL_JoystickGetPlayerIndex>('SDL_JoystickGetPlayerIndex');
    return _SDL_JoystickGetPlayerIndex(
      joystick,
    );
  }

  _dart_SDL_JoystickGetPlayerIndex _SDL_JoystickGetPlayerIndex;

  /// Set the player index of an opened joystick
  void SDL_JoystickSetPlayerIndex(
    ffi.Pointer<_SDL_Joystick> joystick,
    int player_index,
  ) {
    _SDL_JoystickSetPlayerIndex ??= _dylib.lookupFunction<
        _c_SDL_JoystickSetPlayerIndex,
        _dart_SDL_JoystickSetPlayerIndex>('SDL_JoystickSetPlayerIndex');
    return _SDL_JoystickSetPlayerIndex(
      joystick,
      player_index,
    );
  }

  _dart_SDL_JoystickSetPlayerIndex _SDL_JoystickSetPlayerIndex;

  /// Get the USB vendor ID of an opened joystick, if available.
  /// If the vendor ID isn't available this function returns 0.
  int SDL_JoystickGetVendor(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_JoystickGetVendor ??= _dylib.lookupFunction<_c_SDL_JoystickGetVendor,
        _dart_SDL_JoystickGetVendor>('SDL_JoystickGetVendor');
    return _SDL_JoystickGetVendor(
      joystick,
    );
  }

  _dart_SDL_JoystickGetVendor _SDL_JoystickGetVendor;

  /// Get the USB product ID of an opened joystick, if available.
  /// If the product ID isn't available this function returns 0.
  int SDL_JoystickGetProduct(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_JoystickGetProduct ??= _dylib.lookupFunction<_c_SDL_JoystickGetProduct,
        _dart_SDL_JoystickGetProduct>('SDL_JoystickGetProduct');
    return _SDL_JoystickGetProduct(
      joystick,
    );
  }

  _dart_SDL_JoystickGetProduct _SDL_JoystickGetProduct;

  /// Get the product version of an opened joystick, if available.
  /// If the product version isn't available this function returns 0.
  int SDL_JoystickGetProductVersion(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_JoystickGetProductVersion ??= _dylib.lookupFunction<
        _c_SDL_JoystickGetProductVersion,
        _dart_SDL_JoystickGetProductVersion>('SDL_JoystickGetProductVersion');
    return _SDL_JoystickGetProductVersion(
      joystick,
    );
  }

  _dart_SDL_JoystickGetProductVersion _SDL_JoystickGetProductVersion;

  /// Get the type of an opened joystick.
  int SDL_JoystickGetType(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_JoystickGetType ??= _dylib.lookupFunction<_c_SDL_JoystickGetType,
        _dart_SDL_JoystickGetType>('SDL_JoystickGetType');
    return _SDL_JoystickGetType(
      joystick,
    );
  }

  _dart_SDL_JoystickGetType _SDL_JoystickGetType;

  /// Returns SDL_TRUE if the joystick has been opened and currently connected, or SDL_FALSE if it has not.
  int SDL_JoystickGetAttached(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_JoystickGetAttached ??= _dylib.lookupFunction<
        _c_SDL_JoystickGetAttached,
        _dart_SDL_JoystickGetAttached>('SDL_JoystickGetAttached');
    return _SDL_JoystickGetAttached(
      joystick,
    );
  }

  _dart_SDL_JoystickGetAttached _SDL_JoystickGetAttached;

  /// Get the instance ID of an opened joystick or -1 if the joystick is invalid.
  int SDL_JoystickInstanceID(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_JoystickInstanceID ??= _dylib.lookupFunction<_c_SDL_JoystickInstanceID,
        _dart_SDL_JoystickInstanceID>('SDL_JoystickInstanceID');
    return _SDL_JoystickInstanceID(
      joystick,
    );
  }

  _dart_SDL_JoystickInstanceID _SDL_JoystickInstanceID;

  /// Get the number of general axis controls on a joystick.
  int SDL_JoystickNumAxes(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_JoystickNumAxes ??= _dylib.lookupFunction<_c_SDL_JoystickNumAxes,
        _dart_SDL_JoystickNumAxes>('SDL_JoystickNumAxes');
    return _SDL_JoystickNumAxes(
      joystick,
    );
  }

  _dart_SDL_JoystickNumAxes _SDL_JoystickNumAxes;

  /// Get the number of trackballs on a joystick.
  ///
  /// Joystick trackballs have only relative motion events associated
  /// with them and their state cannot be polled.
  int SDL_JoystickNumBalls(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_JoystickNumBalls ??= _dylib.lookupFunction<_c_SDL_JoystickNumBalls,
        _dart_SDL_JoystickNumBalls>('SDL_JoystickNumBalls');
    return _SDL_JoystickNumBalls(
      joystick,
    );
  }

  _dart_SDL_JoystickNumBalls _SDL_JoystickNumBalls;

  /// Get the number of POV hats on a joystick.
  int SDL_JoystickNumHats(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_JoystickNumHats ??= _dylib.lookupFunction<_c_SDL_JoystickNumHats,
        _dart_SDL_JoystickNumHats>('SDL_JoystickNumHats');
    return _SDL_JoystickNumHats(
      joystick,
    );
  }

  _dart_SDL_JoystickNumHats _SDL_JoystickNumHats;

  /// Get the number of buttons on a joystick.
  int SDL_JoystickNumButtons(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_JoystickNumButtons ??= _dylib.lookupFunction<_c_SDL_JoystickNumButtons,
        _dart_SDL_JoystickNumButtons>('SDL_JoystickNumButtons');
    return _SDL_JoystickNumButtons(
      joystick,
    );
  }

  _dart_SDL_JoystickNumButtons _SDL_JoystickNumButtons;

  /// Update the current state of the open joysticks.
  ///
  /// This is called automatically by the event loop if any joystick
  /// events are enabled.
  void SDL_JoystickUpdate() {
    _SDL_JoystickUpdate ??=
        _dylib.lookupFunction<_c_SDL_JoystickUpdate, _dart_SDL_JoystickUpdate>(
            'SDL_JoystickUpdate');
    return _SDL_JoystickUpdate();
  }

  _dart_SDL_JoystickUpdate _SDL_JoystickUpdate;

  /// Enable/disable joystick event polling.
  ///
  /// If joystick events are disabled, you must call SDL_JoystickUpdate()
  /// yourself and check the state of the joystick when you want joystick
  /// information.
  ///
  /// The state can be one of ::SDL_QUERY, ::SDL_ENABLE or ::SDL_IGNORE.
  int SDL_JoystickEventState(
    int state,
  ) {
    _SDL_JoystickEventState ??= _dylib.lookupFunction<_c_SDL_JoystickEventState,
        _dart_SDL_JoystickEventState>('SDL_JoystickEventState');
    return _SDL_JoystickEventState(
      state,
    );
  }

  _dart_SDL_JoystickEventState _SDL_JoystickEventState;

  /// Get the current state of an axis control on a joystick.
  ///
  /// The state is a value ranging from -32768 to 32767.
  ///
  /// The axis indices start at index 0.
  int SDL_JoystickGetAxis(
    ffi.Pointer<_SDL_Joystick> joystick,
    int axis,
  ) {
    _SDL_JoystickGetAxis ??= _dylib.lookupFunction<_c_SDL_JoystickGetAxis,
        _dart_SDL_JoystickGetAxis>('SDL_JoystickGetAxis');
    return _SDL_JoystickGetAxis(
      joystick,
      axis,
    );
  }

  _dart_SDL_JoystickGetAxis _SDL_JoystickGetAxis;

  /// Get the initial state of an axis control on a joystick.
  ///
  /// The state is a value ranging from -32768 to 32767.
  ///
  /// The axis indices start at index 0.
  ///
  /// \return SDL_TRUE if this axis has any initial value, or SDL_FALSE if not.
  int SDL_JoystickGetAxisInitialState(
    ffi.Pointer<_SDL_Joystick> joystick,
    int axis,
    ffi.Pointer<ffi.Int16> state,
  ) {
    _SDL_JoystickGetAxisInitialState ??= _dylib.lookupFunction<
            _c_SDL_JoystickGetAxisInitialState,
            _dart_SDL_JoystickGetAxisInitialState>(
        'SDL_JoystickGetAxisInitialState');
    return _SDL_JoystickGetAxisInitialState(
      joystick,
      axis,
      state,
    );
  }

  _dart_SDL_JoystickGetAxisInitialState _SDL_JoystickGetAxisInitialState;

  /// Get the current state of a POV hat on a joystick.
  ///
  /// The hat indices start at index 0.
  ///
  /// \return The return value is one of the following positions:
  /// - ::SDL_HAT_CENTERED
  /// - ::SDL_HAT_UP
  /// - ::SDL_HAT_RIGHT
  /// - ::SDL_HAT_DOWN
  /// - ::SDL_HAT_LEFT
  /// - ::SDL_HAT_RIGHTUP
  /// - ::SDL_HAT_RIGHTDOWN
  /// - ::SDL_HAT_LEFTUP
  /// - ::SDL_HAT_LEFTDOWN
  int SDL_JoystickGetHat(
    ffi.Pointer<_SDL_Joystick> joystick,
    int hat,
  ) {
    _SDL_JoystickGetHat ??=
        _dylib.lookupFunction<_c_SDL_JoystickGetHat, _dart_SDL_JoystickGetHat>(
            'SDL_JoystickGetHat');
    return _SDL_JoystickGetHat(
      joystick,
      hat,
    );
  }

  _dart_SDL_JoystickGetHat _SDL_JoystickGetHat;

  /// Get the ball axis change since the last poll.
  ///
  /// \return 0, or -1 if you passed it invalid parameters.
  ///
  /// The ball indices start at index 0.
  int SDL_JoystickGetBall(
    ffi.Pointer<_SDL_Joystick> joystick,
    int ball,
    ffi.Pointer<ffi.Int32> dx,
    ffi.Pointer<ffi.Int32> dy,
  ) {
    _SDL_JoystickGetBall ??= _dylib.lookupFunction<_c_SDL_JoystickGetBall,
        _dart_SDL_JoystickGetBall>('SDL_JoystickGetBall');
    return _SDL_JoystickGetBall(
      joystick,
      ball,
      dx,
      dy,
    );
  }

  _dart_SDL_JoystickGetBall _SDL_JoystickGetBall;

  /// Get the current state of a button on a joystick.
  ///
  /// The button indices start at index 0.
  int SDL_JoystickGetButton(
    ffi.Pointer<_SDL_Joystick> joystick,
    int button,
  ) {
    _SDL_JoystickGetButton ??= _dylib.lookupFunction<_c_SDL_JoystickGetButton,
        _dart_SDL_JoystickGetButton>('SDL_JoystickGetButton');
    return _SDL_JoystickGetButton(
      joystick,
      button,
    );
  }

  _dart_SDL_JoystickGetButton _SDL_JoystickGetButton;

  /// Trigger a rumble effect
  /// Each call to this function cancels any previous rumble effect, and calling it with 0 intensity stops any rumbling.
  ///
  /// \param joystick The joystick to vibrate
  /// \param low_frequency_rumble The intensity of the low frequency (left) rumble motor, from 0 to 0xFFFF
  /// \param high_frequency_rumble The intensity of the high frequency (right) rumble motor, from 0 to 0xFFFF
  /// \param duration_ms The duration of the rumble effect, in milliseconds
  ///
  /// \return 0, or -1 if rumble isn't supported on this joystick
  int SDL_JoystickRumble(
    ffi.Pointer<_SDL_Joystick> joystick,
    int low_frequency_rumble,
    int high_frequency_rumble,
    int duration_ms,
  ) {
    _SDL_JoystickRumble ??=
        _dylib.lookupFunction<_c_SDL_JoystickRumble, _dart_SDL_JoystickRumble>(
            'SDL_JoystickRumble');
    return _SDL_JoystickRumble(
      joystick,
      low_frequency_rumble,
      high_frequency_rumble,
      duration_ms,
    );
  }

  _dart_SDL_JoystickRumble _SDL_JoystickRumble;

  /// Close a joystick previously opened with SDL_JoystickOpen().
  void SDL_JoystickClose(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_JoystickClose ??=
        _dylib.lookupFunction<_c_SDL_JoystickClose, _dart_SDL_JoystickClose>(
            'SDL_JoystickClose');
    return _SDL_JoystickClose(
      joystick,
    );
  }

  _dart_SDL_JoystickClose _SDL_JoystickClose;

  /// Return the battery level of this joystick
  int SDL_JoystickCurrentPowerLevel(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_JoystickCurrentPowerLevel ??= _dylib.lookupFunction<
        _c_SDL_JoystickCurrentPowerLevel,
        _dart_SDL_JoystickCurrentPowerLevel>('SDL_JoystickCurrentPowerLevel');
    return _SDL_JoystickCurrentPowerLevel(
      joystick,
    );
  }

  _dart_SDL_JoystickCurrentPowerLevel _SDL_JoystickCurrentPowerLevel;

  /// Load a set of mappings from a seekable SDL data stream (memory or file), filtered by the current SDL_GetPlatform()
  /// A community sourced database of controllers is available at https://raw.github.com/gabomdq/SDL_GameControllerDB/master/gamecontrollerdb.txt
  ///
  /// If \c freerw is non-zero, the stream will be closed after being read.
  ///
  /// \return number of mappings added, -1 on error
  int SDL_GameControllerAddMappingsFromRW(
    ffi.Pointer<SDL_RWops> rw,
    int freerw,
  ) {
    _SDL_GameControllerAddMappingsFromRW ??= _dylib.lookupFunction<
            _c_SDL_GameControllerAddMappingsFromRW,
            _dart_SDL_GameControllerAddMappingsFromRW>(
        'SDL_GameControllerAddMappingsFromRW');
    return _SDL_GameControllerAddMappingsFromRW(
      rw,
      freerw,
    );
  }

  _dart_SDL_GameControllerAddMappingsFromRW
      _SDL_GameControllerAddMappingsFromRW;

  /// Add or update an existing mapping configuration
  ///
  /// \return 1 if mapping is added, 0 if updated, -1 on error
  int SDL_GameControllerAddMapping(
    ffi.Pointer<ffi.Int8> mappingString,
  ) {
    _SDL_GameControllerAddMapping ??= _dylib.lookupFunction<
        _c_SDL_GameControllerAddMapping,
        _dart_SDL_GameControllerAddMapping>('SDL_GameControllerAddMapping');
    return _SDL_GameControllerAddMapping(
      mappingString,
    );
  }

  _dart_SDL_GameControllerAddMapping _SDL_GameControllerAddMapping;

  /// Get the number of mappings installed
  ///
  /// \return the number of mappings
  int SDL_GameControllerNumMappings() {
    _SDL_GameControllerNumMappings ??= _dylib.lookupFunction<
        _c_SDL_GameControllerNumMappings,
        _dart_SDL_GameControllerNumMappings>('SDL_GameControllerNumMappings');
    return _SDL_GameControllerNumMappings();
  }

  _dart_SDL_GameControllerNumMappings _SDL_GameControllerNumMappings;

  /// Get the mapping at a particular index.
  ///
  /// \return the mapping string.  Must be freed with SDL_free().  Returns NULL if the index is out of range.
  ffi.Pointer<ffi.Int8> SDL_GameControllerMappingForIndex(
    int mapping_index,
  ) {
    _SDL_GameControllerMappingForIndex ??= _dylib.lookupFunction<
            _c_SDL_GameControllerMappingForIndex,
            _dart_SDL_GameControllerMappingForIndex>(
        'SDL_GameControllerMappingForIndex');
    return _SDL_GameControllerMappingForIndex(
      mapping_index,
    );
  }

  _dart_SDL_GameControllerMappingForIndex _SDL_GameControllerMappingForIndex;

  /// Get a mapping string for an open GameController
  ///
  /// \return the mapping string.  Must be freed with SDL_free().  Returns NULL if no mapping is available
  ffi.Pointer<ffi.Int8> SDL_GameControllerMapping(
    ffi.Pointer<_SDL_GameController> gamecontroller,
  ) {
    _SDL_GameControllerMapping ??= _dylib.lookupFunction<
        _c_SDL_GameControllerMapping,
        _dart_SDL_GameControllerMapping>('SDL_GameControllerMapping');
    return _SDL_GameControllerMapping(
      gamecontroller,
    );
  }

  _dart_SDL_GameControllerMapping _SDL_GameControllerMapping;

  /// Is the joystick on this index supported by the game controller interface?
  int SDL_IsGameController(
    int joystick_index,
  ) {
    _SDL_IsGameController ??= _dylib.lookupFunction<_c_SDL_IsGameController,
        _dart_SDL_IsGameController>('SDL_IsGameController');
    return _SDL_IsGameController(
      joystick_index,
    );
  }

  _dart_SDL_IsGameController _SDL_IsGameController;

  /// Get the implementation dependent name of a game controller.
  /// This can be called before any controllers are opened.
  /// If no name can be found, this function returns NULL.
  ffi.Pointer<ffi.Int8> SDL_GameControllerNameForIndex(
    int joystick_index,
  ) {
    _SDL_GameControllerNameForIndex ??= _dylib.lookupFunction<
        _c_SDL_GameControllerNameForIndex,
        _dart_SDL_GameControllerNameForIndex>('SDL_GameControllerNameForIndex');
    return _SDL_GameControllerNameForIndex(
      joystick_index,
    );
  }

  _dart_SDL_GameControllerNameForIndex _SDL_GameControllerNameForIndex;

  /// Get the type of a game controller.
  /// This can be called before any controllers are opened.
  int SDL_GameControllerTypeForIndex(
    int joystick_index,
  ) {
    _SDL_GameControllerTypeForIndex ??= _dylib.lookupFunction<
        _c_SDL_GameControllerTypeForIndex,
        _dart_SDL_GameControllerTypeForIndex>('SDL_GameControllerTypeForIndex');
    return _SDL_GameControllerTypeForIndex(
      joystick_index,
    );
  }

  _dart_SDL_GameControllerTypeForIndex _SDL_GameControllerTypeForIndex;

  /// Get the mapping of a game controller.
  /// This can be called before any controllers are opened.
  ///
  /// \return the mapping string.  Must be freed with SDL_free().  Returns NULL if no mapping is available
  ffi.Pointer<ffi.Int8> SDL_GameControllerMappingForDeviceIndex(
    int joystick_index,
  ) {
    _SDL_GameControllerMappingForDeviceIndex ??= _dylib.lookupFunction<
            _c_SDL_GameControllerMappingForDeviceIndex,
            _dart_SDL_GameControllerMappingForDeviceIndex>(
        'SDL_GameControllerMappingForDeviceIndex');
    return _SDL_GameControllerMappingForDeviceIndex(
      joystick_index,
    );
  }

  _dart_SDL_GameControllerMappingForDeviceIndex
      _SDL_GameControllerMappingForDeviceIndex;

  /// Open a game controller for use.
  /// The index passed as an argument refers to the N'th game controller on the system.
  /// This index is not the value which will identify this controller in future
  /// controller events.  The joystick's instance id (::SDL_JoystickID) will be
  /// used there instead.
  ///
  /// \return A controller identifier, or NULL if an error occurred.
  ffi.Pointer<_SDL_GameController> SDL_GameControllerOpen(
    int joystick_index,
  ) {
    _SDL_GameControllerOpen ??= _dylib.lookupFunction<_c_SDL_GameControllerOpen,
        _dart_SDL_GameControllerOpen>('SDL_GameControllerOpen');
    return _SDL_GameControllerOpen(
      joystick_index,
    );
  }

  _dart_SDL_GameControllerOpen _SDL_GameControllerOpen;

  /// Return the SDL_GameController associated with an instance id.
  ffi.Pointer<_SDL_GameController> SDL_GameControllerFromInstanceID(
    int joyid,
  ) {
    _SDL_GameControllerFromInstanceID ??= _dylib.lookupFunction<
            _c_SDL_GameControllerFromInstanceID,
            _dart_SDL_GameControllerFromInstanceID>(
        'SDL_GameControllerFromInstanceID');
    return _SDL_GameControllerFromInstanceID(
      joyid,
    );
  }

  _dart_SDL_GameControllerFromInstanceID _SDL_GameControllerFromInstanceID;

  /// Return the SDL_GameController associated with a player index.
  ffi.Pointer<_SDL_GameController> SDL_GameControllerFromPlayerIndex(
    int player_index,
  ) {
    _SDL_GameControllerFromPlayerIndex ??= _dylib.lookupFunction<
            _c_SDL_GameControllerFromPlayerIndex,
            _dart_SDL_GameControllerFromPlayerIndex>(
        'SDL_GameControllerFromPlayerIndex');
    return _SDL_GameControllerFromPlayerIndex(
      player_index,
    );
  }

  _dart_SDL_GameControllerFromPlayerIndex _SDL_GameControllerFromPlayerIndex;

  /// Return the name for this currently opened controller
  ffi.Pointer<ffi.Int8> SDL_GameControllerName(
    ffi.Pointer<_SDL_GameController> gamecontroller,
  ) {
    _SDL_GameControllerName ??= _dylib.lookupFunction<_c_SDL_GameControllerName,
        _dart_SDL_GameControllerName>('SDL_GameControllerName');
    return _SDL_GameControllerName(
      gamecontroller,
    );
  }

  _dart_SDL_GameControllerName _SDL_GameControllerName;

  /// Return the type of this currently opened controller
  int SDL_GameControllerGetType(
    ffi.Pointer<_SDL_GameController> gamecontroller,
  ) {
    _SDL_GameControllerGetType ??= _dylib.lookupFunction<
        _c_SDL_GameControllerGetType,
        _dart_SDL_GameControllerGetType>('SDL_GameControllerGetType');
    return _SDL_GameControllerGetType(
      gamecontroller,
    );
  }

  _dart_SDL_GameControllerGetType _SDL_GameControllerGetType;

  /// Get the player index of an opened game controller, or -1 if it's not available
  ///
  /// For XInput controllers this returns the XInput user index.
  int SDL_GameControllerGetPlayerIndex(
    ffi.Pointer<_SDL_GameController> gamecontroller,
  ) {
    _SDL_GameControllerGetPlayerIndex ??= _dylib.lookupFunction<
            _c_SDL_GameControllerGetPlayerIndex,
            _dart_SDL_GameControllerGetPlayerIndex>(
        'SDL_GameControllerGetPlayerIndex');
    return _SDL_GameControllerGetPlayerIndex(
      gamecontroller,
    );
  }

  _dart_SDL_GameControllerGetPlayerIndex _SDL_GameControllerGetPlayerIndex;

  /// Set the player index of an opened game controller
  void SDL_GameControllerSetPlayerIndex(
    ffi.Pointer<_SDL_GameController> gamecontroller,
    int player_index,
  ) {
    _SDL_GameControllerSetPlayerIndex ??= _dylib.lookupFunction<
            _c_SDL_GameControllerSetPlayerIndex,
            _dart_SDL_GameControllerSetPlayerIndex>(
        'SDL_GameControllerSetPlayerIndex');
    return _SDL_GameControllerSetPlayerIndex(
      gamecontroller,
      player_index,
    );
  }

  _dart_SDL_GameControllerSetPlayerIndex _SDL_GameControllerSetPlayerIndex;

  /// Get the USB vendor ID of an opened controller, if available.
  /// If the vendor ID isn't available this function returns 0.
  int SDL_GameControllerGetVendor(
    ffi.Pointer<_SDL_GameController> gamecontroller,
  ) {
    _SDL_GameControllerGetVendor ??= _dylib.lookupFunction<
        _c_SDL_GameControllerGetVendor,
        _dart_SDL_GameControllerGetVendor>('SDL_GameControllerGetVendor');
    return _SDL_GameControllerGetVendor(
      gamecontroller,
    );
  }

  _dart_SDL_GameControllerGetVendor _SDL_GameControllerGetVendor;

  /// Get the USB product ID of an opened controller, if available.
  /// If the product ID isn't available this function returns 0.
  int SDL_GameControllerGetProduct(
    ffi.Pointer<_SDL_GameController> gamecontroller,
  ) {
    _SDL_GameControllerGetProduct ??= _dylib.lookupFunction<
        _c_SDL_GameControllerGetProduct,
        _dart_SDL_GameControllerGetProduct>('SDL_GameControllerGetProduct');
    return _SDL_GameControllerGetProduct(
      gamecontroller,
    );
  }

  _dart_SDL_GameControllerGetProduct _SDL_GameControllerGetProduct;

  /// Get the product version of an opened controller, if available.
  /// If the product version isn't available this function returns 0.
  int SDL_GameControllerGetProductVersion(
    ffi.Pointer<_SDL_GameController> gamecontroller,
  ) {
    _SDL_GameControllerGetProductVersion ??= _dylib.lookupFunction<
            _c_SDL_GameControllerGetProductVersion,
            _dart_SDL_GameControllerGetProductVersion>(
        'SDL_GameControllerGetProductVersion');
    return _SDL_GameControllerGetProductVersion(
      gamecontroller,
    );
  }

  _dart_SDL_GameControllerGetProductVersion
      _SDL_GameControllerGetProductVersion;

  /// Returns SDL_TRUE if the controller has been opened and currently connected,
  /// or SDL_FALSE if it has not.
  int SDL_GameControllerGetAttached(
    ffi.Pointer<_SDL_GameController> gamecontroller,
  ) {
    _SDL_GameControllerGetAttached ??= _dylib.lookupFunction<
        _c_SDL_GameControllerGetAttached,
        _dart_SDL_GameControllerGetAttached>('SDL_GameControllerGetAttached');
    return _SDL_GameControllerGetAttached(
      gamecontroller,
    );
  }

  _dart_SDL_GameControllerGetAttached _SDL_GameControllerGetAttached;

  /// Get the underlying joystick object used by a controller
  ffi.Pointer<_SDL_Joystick> SDL_GameControllerGetJoystick(
    ffi.Pointer<_SDL_GameController> gamecontroller,
  ) {
    _SDL_GameControllerGetJoystick ??= _dylib.lookupFunction<
        _c_SDL_GameControllerGetJoystick,
        _dart_SDL_GameControllerGetJoystick>('SDL_GameControllerGetJoystick');
    return _SDL_GameControllerGetJoystick(
      gamecontroller,
    );
  }

  _dart_SDL_GameControllerGetJoystick _SDL_GameControllerGetJoystick;

  /// Enable/disable controller event polling.
  ///
  /// If controller events are disabled, you must call SDL_GameControllerUpdate()
  /// yourself and check the state of the controller when you want controller
  /// information.
  ///
  /// The state can be one of ::SDL_QUERY, ::SDL_ENABLE or ::SDL_IGNORE.
  int SDL_GameControllerEventState(
    int state,
  ) {
    _SDL_GameControllerEventState ??= _dylib.lookupFunction<
        _c_SDL_GameControllerEventState,
        _dart_SDL_GameControllerEventState>('SDL_GameControllerEventState');
    return _SDL_GameControllerEventState(
      state,
    );
  }

  _dart_SDL_GameControllerEventState _SDL_GameControllerEventState;

  /// Update the current state of the open game controllers.
  ///
  /// This is called automatically by the event loop if any game controller
  /// events are enabled.
  void SDL_GameControllerUpdate() {
    _SDL_GameControllerUpdate ??= _dylib.lookupFunction<
        _c_SDL_GameControllerUpdate,
        _dart_SDL_GameControllerUpdate>('SDL_GameControllerUpdate');
    return _SDL_GameControllerUpdate();
  }

  _dart_SDL_GameControllerUpdate _SDL_GameControllerUpdate;

  /// turn this string into a axis mapping
  int SDL_GameControllerGetAxisFromString(
    ffi.Pointer<ffi.Int8> pchString,
  ) {
    _SDL_GameControllerGetAxisFromString ??= _dylib.lookupFunction<
            _c_SDL_GameControllerGetAxisFromString,
            _dart_SDL_GameControllerGetAxisFromString>(
        'SDL_GameControllerGetAxisFromString');
    return _SDL_GameControllerGetAxisFromString(
      pchString,
    );
  }

  _dart_SDL_GameControllerGetAxisFromString
      _SDL_GameControllerGetAxisFromString;

  /// turn this axis enum into a string mapping
  ffi.Pointer<ffi.Int8> SDL_GameControllerGetStringForAxis(
    int axis,
  ) {
    _SDL_GameControllerGetStringForAxis ??= _dylib.lookupFunction<
            _c_SDL_GameControllerGetStringForAxis,
            _dart_SDL_GameControllerGetStringForAxis>(
        'SDL_GameControllerGetStringForAxis');
    return _SDL_GameControllerGetStringForAxis(
      axis,
    );
  }

  _dart_SDL_GameControllerGetStringForAxis _SDL_GameControllerGetStringForAxis;

  /// Get the current state of an axis control on a game controller.
  ///
  /// The state is a value ranging from -32768 to 32767 (except for the triggers,
  /// which range from 0 to 32767).
  ///
  /// The axis indices start at index 0.
  int SDL_GameControllerGetAxis(
    ffi.Pointer<_SDL_GameController> gamecontroller,
    int axis,
  ) {
    _SDL_GameControllerGetAxis ??= _dylib.lookupFunction<
        _c_SDL_GameControllerGetAxis,
        _dart_SDL_GameControllerGetAxis>('SDL_GameControllerGetAxis');
    return _SDL_GameControllerGetAxis(
      gamecontroller,
      axis,
    );
  }

  _dart_SDL_GameControllerGetAxis _SDL_GameControllerGetAxis;

  /// turn this string into a button mapping
  int SDL_GameControllerGetButtonFromString(
    ffi.Pointer<ffi.Int8> pchString,
  ) {
    _SDL_GameControllerGetButtonFromString ??= _dylib.lookupFunction<
            _c_SDL_GameControllerGetButtonFromString,
            _dart_SDL_GameControllerGetButtonFromString>(
        'SDL_GameControllerGetButtonFromString');
    return _SDL_GameControllerGetButtonFromString(
      pchString,
    );
  }

  _dart_SDL_GameControllerGetButtonFromString
      _SDL_GameControllerGetButtonFromString;

  /// turn this button enum into a string mapping
  ffi.Pointer<ffi.Int8> SDL_GameControllerGetStringForButton(
    int button,
  ) {
    _SDL_GameControllerGetStringForButton ??= _dylib.lookupFunction<
            _c_SDL_GameControllerGetStringForButton,
            _dart_SDL_GameControllerGetStringForButton>(
        'SDL_GameControllerGetStringForButton');
    return _SDL_GameControllerGetStringForButton(
      button,
    );
  }

  _dart_SDL_GameControllerGetStringForButton
      _SDL_GameControllerGetStringForButton;

  /// Get the current state of a button on a game controller.
  ///
  /// The button indices start at index 0.
  int SDL_GameControllerGetButton(
    ffi.Pointer<_SDL_GameController> gamecontroller,
    int button,
  ) {
    _SDL_GameControllerGetButton ??= _dylib.lookupFunction<
        _c_SDL_GameControllerGetButton,
        _dart_SDL_GameControllerGetButton>('SDL_GameControllerGetButton');
    return _SDL_GameControllerGetButton(
      gamecontroller,
      button,
    );
  }

  _dart_SDL_GameControllerGetButton _SDL_GameControllerGetButton;

  /// Trigger a rumble effect
  /// Each call to this function cancels any previous rumble effect, and calling it with 0 intensity stops any rumbling.
  ///
  /// \param gamecontroller The controller to vibrate
  /// \param low_frequency_rumble The intensity of the low frequency (left) rumble motor, from 0 to 0xFFFF
  /// \param high_frequency_rumble The intensity of the high frequency (right) rumble motor, from 0 to 0xFFFF
  /// \param duration_ms The duration of the rumble effect, in milliseconds
  ///
  /// \return 0, or -1 if rumble isn't supported on this joystick
  int SDL_GameControllerRumble(
    ffi.Pointer<_SDL_GameController> gamecontroller,
    int low_frequency_rumble,
    int high_frequency_rumble,
    int duration_ms,
  ) {
    _SDL_GameControllerRumble ??= _dylib.lookupFunction<
        _c_SDL_GameControllerRumble,
        _dart_SDL_GameControllerRumble>('SDL_GameControllerRumble');
    return _SDL_GameControllerRumble(
      gamecontroller,
      low_frequency_rumble,
      high_frequency_rumble,
      duration_ms,
    );
  }

  _dart_SDL_GameControllerRumble _SDL_GameControllerRumble;

  /// Close a controller previously opened with SDL_GameControllerOpen().
  void SDL_GameControllerClose(
    ffi.Pointer<_SDL_GameController> gamecontroller,
  ) {
    _SDL_GameControllerClose ??= _dylib.lookupFunction<
        _c_SDL_GameControllerClose,
        _dart_SDL_GameControllerClose>('SDL_GameControllerClose');
    return _SDL_GameControllerClose(
      gamecontroller,
    );
  }

  _dart_SDL_GameControllerClose _SDL_GameControllerClose;

  /// \brief Get the number of registered touch devices.
  int SDL_GetNumTouchDevices() {
    _SDL_GetNumTouchDevices ??= _dylib.lookupFunction<_c_SDL_GetNumTouchDevices,
        _dart_SDL_GetNumTouchDevices>('SDL_GetNumTouchDevices');
    return _SDL_GetNumTouchDevices();
  }

  _dart_SDL_GetNumTouchDevices _SDL_GetNumTouchDevices;

  /// \brief Get the touch ID with the given index, or 0 if the index is invalid.
  int SDL_GetTouchDevice(
    int index,
  ) {
    _SDL_GetTouchDevice ??=
        _dylib.lookupFunction<_c_SDL_GetTouchDevice, _dart_SDL_GetTouchDevice>(
            'SDL_GetTouchDevice');
    return _SDL_GetTouchDevice(
      index,
    );
  }

  _dart_SDL_GetTouchDevice _SDL_GetTouchDevice;

  /// \brief Get the type of the given touch device.
  int SDL_GetTouchDeviceType(
    int touchID,
  ) {
    _SDL_GetTouchDeviceType ??= _dylib.lookupFunction<_c_SDL_GetTouchDeviceType,
        _dart_SDL_GetTouchDeviceType>('SDL_GetTouchDeviceType');
    return _SDL_GetTouchDeviceType(
      touchID,
    );
  }

  _dart_SDL_GetTouchDeviceType _SDL_GetTouchDeviceType;

  /// \brief Get the number of active fingers for a given touch device.
  int SDL_GetNumTouchFingers(
    int touchID,
  ) {
    _SDL_GetNumTouchFingers ??= _dylib.lookupFunction<_c_SDL_GetNumTouchFingers,
        _dart_SDL_GetNumTouchFingers>('SDL_GetNumTouchFingers');
    return _SDL_GetNumTouchFingers(
      touchID,
    );
  }

  _dart_SDL_GetNumTouchFingers _SDL_GetNumTouchFingers;

  /// \brief Get the finger object of the given touch, with the given index.
  ffi.Pointer<SDL_Finger> SDL_GetTouchFinger(
    int touchID,
    int index,
  ) {
    _SDL_GetTouchFinger ??=
        _dylib.lookupFunction<_c_SDL_GetTouchFinger, _dart_SDL_GetTouchFinger>(
            'SDL_GetTouchFinger');
    return _SDL_GetTouchFinger(
      touchID,
      index,
    );
  }

  _dart_SDL_GetTouchFinger _SDL_GetTouchFinger;

  /// \brief Begin Recording a gesture on the specified touch, or all touches (-1)
  int SDL_RecordGesture(
    int touchId,
  ) {
    _SDL_RecordGesture ??=
        _dylib.lookupFunction<_c_SDL_RecordGesture, _dart_SDL_RecordGesture>(
            'SDL_RecordGesture');
    return _SDL_RecordGesture(
      touchId,
    );
  }

  _dart_SDL_RecordGesture _SDL_RecordGesture;

  /// \brief Save all currently loaded Dollar Gesture templates
  int SDL_SaveAllDollarTemplates(
    ffi.Pointer<SDL_RWops> dst,
  ) {
    _SDL_SaveAllDollarTemplates ??= _dylib.lookupFunction<
        _c_SDL_SaveAllDollarTemplates,
        _dart_SDL_SaveAllDollarTemplates>('SDL_SaveAllDollarTemplates');
    return _SDL_SaveAllDollarTemplates(
      dst,
    );
  }

  _dart_SDL_SaveAllDollarTemplates _SDL_SaveAllDollarTemplates;

  /// \brief Save a currently loaded Dollar Gesture template
  int SDL_SaveDollarTemplate(
    int gestureId,
    ffi.Pointer<SDL_RWops> dst,
  ) {
    _SDL_SaveDollarTemplate ??= _dylib.lookupFunction<_c_SDL_SaveDollarTemplate,
        _dart_SDL_SaveDollarTemplate>('SDL_SaveDollarTemplate');
    return _SDL_SaveDollarTemplate(
      gestureId,
      dst,
    );
  }

  _dart_SDL_SaveDollarTemplate _SDL_SaveDollarTemplate;

  /// \brief Load Dollar Gesture templates from a file
  int SDL_LoadDollarTemplates(
    int touchId,
    ffi.Pointer<SDL_RWops> src,
  ) {
    _SDL_LoadDollarTemplates ??= _dylib.lookupFunction<
        _c_SDL_LoadDollarTemplates,
        _dart_SDL_LoadDollarTemplates>('SDL_LoadDollarTemplates');
    return _SDL_LoadDollarTemplates(
      touchId,
      src,
    );
  }

  _dart_SDL_LoadDollarTemplates _SDL_LoadDollarTemplates;

  /// Pumps the event loop, gathering events from the input devices.
  ///
  /// This function updates the event queue and internal input device state.
  ///
  /// This should only be run in the thread that sets the video mode.
  void SDL_PumpEvents() {
    _SDL_PumpEvents ??=
        _dylib.lookupFunction<_c_SDL_PumpEvents, _dart_SDL_PumpEvents>(
            'SDL_PumpEvents');
    return _SDL_PumpEvents();
  }

  _dart_SDL_PumpEvents _SDL_PumpEvents;

  /// Checks to see if certain event types are in the event queue.
  int SDL_HasEvent(
    int type,
  ) {
    _SDL_HasEvent ??= _dylib
        .lookupFunction<_c_SDL_HasEvent, _dart_SDL_HasEvent>('SDL_HasEvent');
    return _SDL_HasEvent(
      type,
    );
  }

  _dart_SDL_HasEvent _SDL_HasEvent;

  int SDL_HasEvents(
    int minType,
    int maxType,
  ) {
    _SDL_HasEvents ??= _dylib
        .lookupFunction<_c_SDL_HasEvents, _dart_SDL_HasEvents>('SDL_HasEvents');
    return _SDL_HasEvents(
      minType,
      maxType,
    );
  }

  _dart_SDL_HasEvents _SDL_HasEvents;

  /// This function clears events from the event queue
  /// This function only affects currently queued events. If you want to make
  /// sure that all pending OS events are flushed, you can call SDL_PumpEvents()
  /// on the main thread immediately before the flush call.
  void SDL_FlushEvent(
    int type,
  ) {
    _SDL_FlushEvent ??=
        _dylib.lookupFunction<_c_SDL_FlushEvent, _dart_SDL_FlushEvent>(
            'SDL_FlushEvent');
    return _SDL_FlushEvent(
      type,
    );
  }

  _dart_SDL_FlushEvent _SDL_FlushEvent;

  void SDL_FlushEvents(
    int minType,
    int maxType,
  ) {
    _SDL_FlushEvents ??=
        _dylib.lookupFunction<_c_SDL_FlushEvents, _dart_SDL_FlushEvents>(
            'SDL_FlushEvents');
    return _SDL_FlushEvents(
      minType,
      maxType,
    );
  }

  _dart_SDL_FlushEvents _SDL_FlushEvents;

  /// This function allows you to set the state of processing certain events.
  /// - If \c state is set to ::SDL_IGNORE, that event will be automatically
  /// dropped from the event queue and will not be filtered.
  /// - If \c state is set to ::SDL_ENABLE, that event will be processed
  /// normally.
  /// - If \c state is set to ::SDL_QUERY, SDL_EventState() will return the
  /// current processing state of the specified event.
  int SDL_EventState(
    int type,
    int state,
  ) {
    _SDL_EventState ??=
        _dylib.lookupFunction<_c_SDL_EventState, _dart_SDL_EventState>(
            'SDL_EventState');
    return _SDL_EventState(
      type,
      state,
    );
  }

  _dart_SDL_EventState _SDL_EventState;

  /// This function allocates a set of user-defined events, and returns
  /// the beginning event number for that set of events.
  ///
  /// If there aren't enough user-defined events left, this function
  /// returns (Uint32)-1
  int SDL_RegisterEvents(
    int numevents,
  ) {
    _SDL_RegisterEvents ??=
        _dylib.lookupFunction<_c_SDL_RegisterEvents, _dart_SDL_RegisterEvents>(
            'SDL_RegisterEvents');
    return _SDL_RegisterEvents(
      numevents,
    );
  }

  _dart_SDL_RegisterEvents _SDL_RegisterEvents;

  /// \brief Get the path where the application resides.
  ///
  /// Get the "base path". This is the directory where the application was run
  /// from, which is probably the installation directory, and may or may not
  /// be the process's current working directory.
  ///
  /// This returns an absolute path in UTF-8 encoding, and is guaranteed to
  /// end with a path separator ('\\' on Windows, '/' most other places).
  ///
  /// The pointer returned by this function is owned by you. Please call
  /// SDL_free() on the pointer when you are done with it, or it will be a
  /// memory leak. This is not necessarily a fast call, though, so you should
  /// call this once near startup and save the string if you need it.
  ///
  /// Some platforms can't determine the application's path, and on other
  /// platforms, this might be meaningless. In such cases, this function will
  /// return NULL.
  ///
  /// \return String of base dir in UTF-8 encoding, or NULL on error.
  ///
  /// \sa SDL_GetPrefPath
  ffi.Pointer<ffi.Int8> SDL_GetBasePath() {
    _SDL_GetBasePath ??=
        _dylib.lookupFunction<_c_SDL_GetBasePath, _dart_SDL_GetBasePath>(
            'SDL_GetBasePath');
    return _SDL_GetBasePath();
  }

  _dart_SDL_GetBasePath _SDL_GetBasePath;

  /// \brief Get the user-and-app-specific path where files can be written.
  ///
  /// Get the "pref dir". This is meant to be where users can write personal
  /// files (preferences and save games, etc) that are specific to your
  /// application. This directory is unique per user, per application.
  ///
  /// This function will decide the appropriate location in the native filesystem,
  /// create the directory if necessary, and return a string of the absolute
  /// path to the directory in UTF-8 encoding.
  ///
  /// On Windows, the string might look like:
  /// "C:\\Users\\bob\\AppData\\Roaming\\My Company\\My Program Name\\"
  ///
  /// On Linux, the string might look like:
  /// "/home/bob/.local/share/My Program Name/"
  ///
  /// On Mac OS X, the string might look like:
  /// "/Users/bob/Library/Application Support/My Program Name/"
  ///
  /// (etc.)
  ///
  /// You specify the name of your organization (if it's not a real organization,
  /// your name or an Internet domain you own might do) and the name of your
  /// application. These should be untranslated proper names.
  ///
  /// Both the org and app strings may become part of a directory name, so
  /// please follow these rules:
  ///
  /// - Try to use the same org string (including case-sensitivity) for
  /// all your applications that use this function.
  /// - Always use a unique app string for each one, and make sure it never
  /// changes for an app once you've decided on it.
  /// - Unicode characters are legal, as long as it's UTF-8 encoded, but...
  /// - ...only use letters, numbers, and spaces. Avoid punctuation like
  /// "Game Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.
  ///
  /// This returns an absolute path in UTF-8 encoding, and is guaranteed to
  /// end with a path separator ('\\' on Windows, '/' most other places).
  ///
  /// The pointer returned by this function is owned by you. Please call
  /// SDL_free() on the pointer when you are done with it, or it will be a
  /// memory leak. This is not necessarily a fast call, though, so you should
  /// call this once near startup and save the string if you need it.
  ///
  /// You should assume the path returned by this function is the only safe
  /// place to write files (and that SDL_GetBasePath(), while it might be
  /// writable, or even the parent of the returned path, aren't where you
  /// should be writing things).
  ///
  /// Some platforms can't determine the pref path, and on other
  /// platforms, this might be meaningless. In such cases, this function will
  /// return NULL.
  ///
  /// \param org The name of your organization.
  /// \param app The name of your application.
  /// \return UTF-8 string of user dir in platform-dependent notation. NULL
  /// if there's a problem (creating directory failed, etc).
  ///
  /// \sa SDL_GetBasePath
  ffi.Pointer<ffi.Int8> SDL_GetPrefPath(
    ffi.Pointer<ffi.Int8> org,
    ffi.Pointer<ffi.Int8> app,
  ) {
    _SDL_GetPrefPath ??=
        _dylib.lookupFunction<_c_SDL_GetPrefPath, _dart_SDL_GetPrefPath>(
            'SDL_GetPrefPath');
    return _SDL_GetPrefPath(
      org,
      app,
    );
  }

  _dart_SDL_GetPrefPath _SDL_GetPrefPath;

  /// \brief Count the number of haptic devices attached to the system.
  ///
  /// \return Number of haptic devices detected on the system.
  int SDL_NumHaptics() {
    _SDL_NumHaptics ??=
        _dylib.lookupFunction<_c_SDL_NumHaptics, _dart_SDL_NumHaptics>(
            'SDL_NumHaptics');
    return _SDL_NumHaptics();
  }

  _dart_SDL_NumHaptics _SDL_NumHaptics;

  /// \brief Get the implementation dependent name of a haptic device.
  ///
  /// This can be called before any joysticks are opened.
  /// If no name can be found, this function returns NULL.
  ///
  /// \param device_index Index of the device to get its name.
  /// \return Name of the device or NULL on error.
  ///
  /// \sa SDL_NumHaptics
  ffi.Pointer<ffi.Int8> SDL_HapticName(
    int device_index,
  ) {
    _SDL_HapticName ??=
        _dylib.lookupFunction<_c_SDL_HapticName, _dart_SDL_HapticName>(
            'SDL_HapticName');
    return _SDL_HapticName(
      device_index,
    );
  }

  _dart_SDL_HapticName _SDL_HapticName;

  /// \brief Opens a haptic device for use.
  ///
  /// The index passed as an argument refers to the N'th haptic device on this
  /// system.
  ///
  /// When opening a haptic device, its gain will be set to maximum and
  /// autocenter will be disabled.  To modify these values use
  /// SDL_HapticSetGain() and SDL_HapticSetAutocenter().
  ///
  /// \param device_index Index of the device to open.
  /// \return Device identifier or NULL on error.
  ///
  /// \sa SDL_HapticIndex
  /// \sa SDL_HapticOpenFromMouse
  /// \sa SDL_HapticOpenFromJoystick
  /// \sa SDL_HapticClose
  /// \sa SDL_HapticSetGain
  /// \sa SDL_HapticSetAutocenter
  /// \sa SDL_HapticPause
  /// \sa SDL_HapticStopAll
  ffi.Pointer<_SDL_Haptic> SDL_HapticOpen(
    int device_index,
  ) {
    _SDL_HapticOpen ??=
        _dylib.lookupFunction<_c_SDL_HapticOpen, _dart_SDL_HapticOpen>(
            'SDL_HapticOpen');
    return _SDL_HapticOpen(
      device_index,
    );
  }

  _dart_SDL_HapticOpen _SDL_HapticOpen;

  /// \brief Checks if the haptic device at index has been opened.
  ///
  /// \param device_index Index to check to see if it has been opened.
  /// \return 1 if it has been opened or 0 if it hasn't.
  ///
  /// \sa SDL_HapticOpen
  /// \sa SDL_HapticIndex
  int SDL_HapticOpened(
    int device_index,
  ) {
    _SDL_HapticOpened ??=
        _dylib.lookupFunction<_c_SDL_HapticOpened, _dart_SDL_HapticOpened>(
            'SDL_HapticOpened');
    return _SDL_HapticOpened(
      device_index,
    );
  }

  _dart_SDL_HapticOpened _SDL_HapticOpened;

  /// \brief Gets the index of a haptic device.
  ///
  /// \param haptic Haptic device to get the index of.
  /// \return The index of the haptic device or -1 on error.
  ///
  /// \sa SDL_HapticOpen
  /// \sa SDL_HapticOpened
  int SDL_HapticIndex(
    ffi.Pointer<_SDL_Haptic> haptic,
  ) {
    _SDL_HapticIndex ??=
        _dylib.lookupFunction<_c_SDL_HapticIndex, _dart_SDL_HapticIndex>(
            'SDL_HapticIndex');
    return _SDL_HapticIndex(
      haptic,
    );
  }

  _dart_SDL_HapticIndex _SDL_HapticIndex;

  /// \brief Gets whether or not the current mouse has haptic capabilities.
  ///
  /// \return SDL_TRUE if the mouse is haptic, SDL_FALSE if it isn't.
  ///
  /// \sa SDL_HapticOpenFromMouse
  int SDL_MouseIsHaptic() {
    _SDL_MouseIsHaptic ??=
        _dylib.lookupFunction<_c_SDL_MouseIsHaptic, _dart_SDL_MouseIsHaptic>(
            'SDL_MouseIsHaptic');
    return _SDL_MouseIsHaptic();
  }

  _dart_SDL_MouseIsHaptic _SDL_MouseIsHaptic;

  /// \brief Tries to open a haptic device from the current mouse.
  ///
  /// \return The haptic device identifier or NULL on error.
  ///
  /// \sa SDL_MouseIsHaptic
  /// \sa SDL_HapticOpen
  ffi.Pointer<_SDL_Haptic> SDL_HapticOpenFromMouse() {
    _SDL_HapticOpenFromMouse ??= _dylib.lookupFunction<
        _c_SDL_HapticOpenFromMouse,
        _dart_SDL_HapticOpenFromMouse>('SDL_HapticOpenFromMouse');
    return _SDL_HapticOpenFromMouse();
  }

  _dart_SDL_HapticOpenFromMouse _SDL_HapticOpenFromMouse;

  /// \brief Checks to see if a joystick has haptic features.
  ///
  /// \param joystick Joystick to test for haptic capabilities.
  /// \return SDL_TRUE if the joystick is haptic, SDL_FALSE if it isn't
  /// or -1 if an error occurred.
  ///
  /// \sa SDL_HapticOpenFromJoystick
  int SDL_JoystickIsHaptic(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_JoystickIsHaptic ??= _dylib.lookupFunction<_c_SDL_JoystickIsHaptic,
        _dart_SDL_JoystickIsHaptic>('SDL_JoystickIsHaptic');
    return _SDL_JoystickIsHaptic(
      joystick,
    );
  }

  _dart_SDL_JoystickIsHaptic _SDL_JoystickIsHaptic;

  /// \brief Opens a haptic device for use from a joystick device.
  ///
  /// You must still close the haptic device separately.  It will not be closed
  /// with the joystick.
  ///
  /// When opening from a joystick you should first close the haptic device before
  /// closing the joystick device.  If not, on some implementations the haptic
  /// device will also get unallocated and you'll be unable to use force feedback
  /// on that device.
  ///
  /// \param joystick Joystick to create a haptic device from.
  /// \return A valid haptic device identifier on success or NULL on error.
  ///
  /// \sa SDL_HapticOpen
  /// \sa SDL_HapticClose
  ffi.Pointer<_SDL_Haptic> SDL_HapticOpenFromJoystick(
    ffi.Pointer<_SDL_Joystick> joystick,
  ) {
    _SDL_HapticOpenFromJoystick ??= _dylib.lookupFunction<
        _c_SDL_HapticOpenFromJoystick,
        _dart_SDL_HapticOpenFromJoystick>('SDL_HapticOpenFromJoystick');
    return _SDL_HapticOpenFromJoystick(
      joystick,
    );
  }

  _dart_SDL_HapticOpenFromJoystick _SDL_HapticOpenFromJoystick;

  /// \brief Closes a haptic device previously opened with SDL_HapticOpen().
  ///
  /// \param haptic Haptic device to close.
  void SDL_HapticClose(
    ffi.Pointer<_SDL_Haptic> haptic,
  ) {
    _SDL_HapticClose ??=
        _dylib.lookupFunction<_c_SDL_HapticClose, _dart_SDL_HapticClose>(
            'SDL_HapticClose');
    return _SDL_HapticClose(
      haptic,
    );
  }

  _dart_SDL_HapticClose _SDL_HapticClose;

  /// \brief Returns the number of effects a haptic device can store.
  ///
  /// On some platforms this isn't fully supported, and therefore is an
  /// approximation.  Always check to see if your created effect was actually
  /// created and do not rely solely on SDL_HapticNumEffects().
  ///
  /// \param haptic The haptic device to query effect max.
  /// \return The number of effects the haptic device can store or
  /// -1 on error.
  ///
  /// \sa SDL_HapticNumEffectsPlaying
  /// \sa SDL_HapticQuery
  int SDL_HapticNumEffects(
    ffi.Pointer<_SDL_Haptic> haptic,
  ) {
    _SDL_HapticNumEffects ??= _dylib.lookupFunction<_c_SDL_HapticNumEffects,
        _dart_SDL_HapticNumEffects>('SDL_HapticNumEffects');
    return _SDL_HapticNumEffects(
      haptic,
    );
  }

  _dart_SDL_HapticNumEffects _SDL_HapticNumEffects;

  /// \brief Returns the number of effects a haptic device can play at the same
  /// time.
  ///
  /// This is not supported on all platforms, but will always return a value.
  /// Added here for the sake of completeness.
  ///
  /// \param haptic The haptic device to query maximum playing effects.
  /// \return The number of effects the haptic device can play at the same time
  /// or -1 on error.
  ///
  /// \sa SDL_HapticNumEffects
  /// \sa SDL_HapticQuery
  int SDL_HapticNumEffectsPlaying(
    ffi.Pointer<_SDL_Haptic> haptic,
  ) {
    _SDL_HapticNumEffectsPlaying ??= _dylib.lookupFunction<
        _c_SDL_HapticNumEffectsPlaying,
        _dart_SDL_HapticNumEffectsPlaying>('SDL_HapticNumEffectsPlaying');
    return _SDL_HapticNumEffectsPlaying(
      haptic,
    );
  }

  _dart_SDL_HapticNumEffectsPlaying _SDL_HapticNumEffectsPlaying;

  /// \brief Gets the haptic device's supported features in bitwise manner.
  ///
  /// Example:
  /// \code
  /// if (SDL_HapticQuery(haptic) & SDL_HAPTIC_CONSTANT) {
  /// printf("We have constant haptic effect!\n");
  /// }
  /// \endcode
  ///
  /// \param haptic The haptic device to query.
  /// \return Haptic features in bitwise manner (OR'd).
  ///
  /// \sa SDL_HapticNumEffects
  /// \sa SDL_HapticEffectSupported
  int SDL_HapticQuery(
    ffi.Pointer<_SDL_Haptic> haptic,
  ) {
    _SDL_HapticQuery ??=
        _dylib.lookupFunction<_c_SDL_HapticQuery, _dart_SDL_HapticQuery>(
            'SDL_HapticQuery');
    return _SDL_HapticQuery(
      haptic,
    );
  }

  _dart_SDL_HapticQuery _SDL_HapticQuery;

  /// \brief Gets the number of haptic axes the device has.
  ///
  /// \sa SDL_HapticDirection
  int SDL_HapticNumAxes(
    ffi.Pointer<_SDL_Haptic> haptic,
  ) {
    _SDL_HapticNumAxes ??=
        _dylib.lookupFunction<_c_SDL_HapticNumAxes, _dart_SDL_HapticNumAxes>(
            'SDL_HapticNumAxes');
    return _SDL_HapticNumAxes(
      haptic,
    );
  }

  _dart_SDL_HapticNumAxes _SDL_HapticNumAxes;

  /// \brief Runs the haptic effect on its associated haptic device.
  ///
  /// If iterations are ::SDL_HAPTIC_INFINITY, it'll run the effect over and over
  /// repeating the envelope (attack and fade) every time.  If you only want the
  /// effect to last forever, set ::SDL_HAPTIC_INFINITY in the effect's length
  /// parameter.
  ///
  /// \param haptic Haptic device to run the effect on.
  /// \param effect Identifier of the haptic effect to run.
  /// \param iterations Number of iterations to run the effect. Use
  /// ::SDL_HAPTIC_INFINITY for infinity.
  /// \return 0 on success or -1 on error.
  ///
  /// \sa SDL_HapticStopEffect
  /// \sa SDL_HapticDestroyEffect
  /// \sa SDL_HapticGetEffectStatus
  int SDL_HapticRunEffect(
    ffi.Pointer<_SDL_Haptic> haptic,
    int effect,
    int iterations,
  ) {
    _SDL_HapticRunEffect ??= _dylib.lookupFunction<_c_SDL_HapticRunEffect,
        _dart_SDL_HapticRunEffect>('SDL_HapticRunEffect');
    return _SDL_HapticRunEffect(
      haptic,
      effect,
      iterations,
    );
  }

  _dart_SDL_HapticRunEffect _SDL_HapticRunEffect;

  /// \brief Stops the haptic effect on its associated haptic device.
  ///
  /// \param haptic Haptic device to stop the effect on.
  /// \param effect Identifier of the effect to stop.
  /// \return 0 on success or -1 on error.
  ///
  /// \sa SDL_HapticRunEffect
  /// \sa SDL_HapticDestroyEffect
  int SDL_HapticStopEffect(
    ffi.Pointer<_SDL_Haptic> haptic,
    int effect,
  ) {
    _SDL_HapticStopEffect ??= _dylib.lookupFunction<_c_SDL_HapticStopEffect,
        _dart_SDL_HapticStopEffect>('SDL_HapticStopEffect');
    return _SDL_HapticStopEffect(
      haptic,
      effect,
    );
  }

  _dart_SDL_HapticStopEffect _SDL_HapticStopEffect;

  /// \brief Destroys a haptic effect on the device.
  ///
  /// This will stop the effect if it's running.  Effects are automatically
  /// destroyed when the device is closed.
  ///
  /// \param haptic Device to destroy the effect on.
  /// \param effect Identifier of the effect to destroy.
  ///
  /// \sa SDL_HapticNewEffect
  void SDL_HapticDestroyEffect(
    ffi.Pointer<_SDL_Haptic> haptic,
    int effect,
  ) {
    _SDL_HapticDestroyEffect ??= _dylib.lookupFunction<
        _c_SDL_HapticDestroyEffect,
        _dart_SDL_HapticDestroyEffect>('SDL_HapticDestroyEffect');
    return _SDL_HapticDestroyEffect(
      haptic,
      effect,
    );
  }

  _dart_SDL_HapticDestroyEffect _SDL_HapticDestroyEffect;

  /// \brief Gets the status of the current effect on the haptic device.
  ///
  /// Device must support the ::SDL_HAPTIC_STATUS feature.
  ///
  /// \param haptic Haptic device to query the effect status on.
  /// \param effect Identifier of the effect to query its status.
  /// \return 0 if it isn't playing, 1 if it is playing or -1 on error.
  ///
  /// \sa SDL_HapticRunEffect
  /// \sa SDL_HapticStopEffect
  int SDL_HapticGetEffectStatus(
    ffi.Pointer<_SDL_Haptic> haptic,
    int effect,
  ) {
    _SDL_HapticGetEffectStatus ??= _dylib.lookupFunction<
        _c_SDL_HapticGetEffectStatus,
        _dart_SDL_HapticGetEffectStatus>('SDL_HapticGetEffectStatus');
    return _SDL_HapticGetEffectStatus(
      haptic,
      effect,
    );
  }

  _dart_SDL_HapticGetEffectStatus _SDL_HapticGetEffectStatus;

  /// \brief Sets the global gain of the device.
  ///
  /// Device must support the ::SDL_HAPTIC_GAIN feature.
  ///
  /// The user may specify the maximum gain by setting the environment variable
  /// SDL_HAPTIC_GAIN_MAX which should be between 0 and 100.  All calls to
  /// SDL_HapticSetGain() will scale linearly using SDL_HAPTIC_GAIN_MAX as the
  /// maximum.
  ///
  /// \param haptic Haptic device to set the gain on.
  /// \param gain Value to set the gain to, should be between 0 and 100.
  /// \return 0 on success or -1 on error.
  ///
  /// \sa SDL_HapticQuery
  int SDL_HapticSetGain(
    ffi.Pointer<_SDL_Haptic> haptic,
    int gain,
  ) {
    _SDL_HapticSetGain ??=
        _dylib.lookupFunction<_c_SDL_HapticSetGain, _dart_SDL_HapticSetGain>(
            'SDL_HapticSetGain');
    return _SDL_HapticSetGain(
      haptic,
      gain,
    );
  }

  _dart_SDL_HapticSetGain _SDL_HapticSetGain;

  /// \brief Sets the global autocenter of the device.
  ///
  /// Autocenter should be between 0 and 100.  Setting it to 0 will disable
  /// autocentering.
  ///
  /// Device must support the ::SDL_HAPTIC_AUTOCENTER feature.
  ///
  /// \param haptic Haptic device to set autocentering on.
  /// \param autocenter Value to set autocenter to, 0 disables autocentering.
  /// \return 0 on success or -1 on error.
  ///
  /// \sa SDL_HapticQuery
  int SDL_HapticSetAutocenter(
    ffi.Pointer<_SDL_Haptic> haptic,
    int autocenter,
  ) {
    _SDL_HapticSetAutocenter ??= _dylib.lookupFunction<
        _c_SDL_HapticSetAutocenter,
        _dart_SDL_HapticSetAutocenter>('SDL_HapticSetAutocenter');
    return _SDL_HapticSetAutocenter(
      haptic,
      autocenter,
    );
  }

  _dart_SDL_HapticSetAutocenter _SDL_HapticSetAutocenter;

  /// \brief Pauses a haptic device.
  ///
  /// Device must support the ::SDL_HAPTIC_PAUSE feature.  Call
  /// SDL_HapticUnpause() to resume playback.
  ///
  /// Do not modify the effects nor add new ones while the device is paused.
  /// That can cause all sorts of weird errors.
  ///
  /// \param haptic Haptic device to pause.
  /// \return 0 on success or -1 on error.
  ///
  /// \sa SDL_HapticUnpause
  int SDL_HapticPause(
    ffi.Pointer<_SDL_Haptic> haptic,
  ) {
    _SDL_HapticPause ??=
        _dylib.lookupFunction<_c_SDL_HapticPause, _dart_SDL_HapticPause>(
            'SDL_HapticPause');
    return _SDL_HapticPause(
      haptic,
    );
  }

  _dart_SDL_HapticPause _SDL_HapticPause;

  /// \brief Unpauses a haptic device.
  ///
  /// Call to unpause after SDL_HapticPause().
  ///
  /// \param haptic Haptic device to unpause.
  /// \return 0 on success or -1 on error.
  ///
  /// \sa SDL_HapticPause
  int SDL_HapticUnpause(
    ffi.Pointer<_SDL_Haptic> haptic,
  ) {
    _SDL_HapticUnpause ??=
        _dylib.lookupFunction<_c_SDL_HapticUnpause, _dart_SDL_HapticUnpause>(
            'SDL_HapticUnpause');
    return _SDL_HapticUnpause(
      haptic,
    );
  }

  _dart_SDL_HapticUnpause _SDL_HapticUnpause;

  /// \brief Stops all the currently playing effects on a haptic device.
  ///
  /// \param haptic Haptic device to stop.
  /// \return 0 on success or -1 on error.
  int SDL_HapticStopAll(
    ffi.Pointer<_SDL_Haptic> haptic,
  ) {
    _SDL_HapticStopAll ??=
        _dylib.lookupFunction<_c_SDL_HapticStopAll, _dart_SDL_HapticStopAll>(
            'SDL_HapticStopAll');
    return _SDL_HapticStopAll(
      haptic,
    );
  }

  _dart_SDL_HapticStopAll _SDL_HapticStopAll;

  /// \brief Checks to see if rumble is supported on a haptic device.
  ///
  /// \param haptic Haptic device to check to see if it supports rumble.
  /// \return SDL_TRUE if effect is supported, SDL_FALSE if it isn't or -1 on error.
  ///
  /// \sa SDL_HapticRumbleInit
  /// \sa SDL_HapticRumblePlay
  /// \sa SDL_HapticRumbleStop
  int SDL_HapticRumbleSupported(
    ffi.Pointer<_SDL_Haptic> haptic,
  ) {
    _SDL_HapticRumbleSupported ??= _dylib.lookupFunction<
        _c_SDL_HapticRumbleSupported,
        _dart_SDL_HapticRumbleSupported>('SDL_HapticRumbleSupported');
    return _SDL_HapticRumbleSupported(
      haptic,
    );
  }

  _dart_SDL_HapticRumbleSupported _SDL_HapticRumbleSupported;

  /// \brief Initializes the haptic device for simple rumble playback.
  ///
  /// \param haptic Haptic device to initialize for simple rumble playback.
  /// \return 0 on success or -1 on error.
  ///
  /// \sa SDL_HapticOpen
  /// \sa SDL_HapticRumbleSupported
  /// \sa SDL_HapticRumblePlay
  /// \sa SDL_HapticRumbleStop
  int SDL_HapticRumbleInit(
    ffi.Pointer<_SDL_Haptic> haptic,
  ) {
    _SDL_HapticRumbleInit ??= _dylib.lookupFunction<_c_SDL_HapticRumbleInit,
        _dart_SDL_HapticRumbleInit>('SDL_HapticRumbleInit');
    return _SDL_HapticRumbleInit(
      haptic,
    );
  }

  _dart_SDL_HapticRumbleInit _SDL_HapticRumbleInit;

  /// \brief Runs simple rumble on a haptic device
  ///
  /// \param haptic Haptic device to play rumble effect on.
  /// \param strength Strength of the rumble to play as a 0-1 float value.
  /// \param length Length of the rumble to play in milliseconds.
  /// \return 0 on success or -1 on error.
  ///
  /// \sa SDL_HapticRumbleSupported
  /// \sa SDL_HapticRumbleInit
  /// \sa SDL_HapticRumbleStop
  int SDL_HapticRumblePlay(
    ffi.Pointer<_SDL_Haptic> haptic,
    double strength,
    int length,
  ) {
    _SDL_HapticRumblePlay ??= _dylib.lookupFunction<_c_SDL_HapticRumblePlay,
        _dart_SDL_HapticRumblePlay>('SDL_HapticRumblePlay');
    return _SDL_HapticRumblePlay(
      haptic,
      strength,
      length,
    );
  }

  _dart_SDL_HapticRumblePlay _SDL_HapticRumblePlay;

  /// \brief Stops the simple rumble on a haptic device.
  ///
  /// \param haptic Haptic to stop the rumble on.
  /// \return 0 on success or -1 on error.
  ///
  /// \sa SDL_HapticRumbleSupported
  /// \sa SDL_HapticRumbleInit
  /// \sa SDL_HapticRumblePlay
  int SDL_HapticRumbleStop(
    ffi.Pointer<_SDL_Haptic> haptic,
  ) {
    _SDL_HapticRumbleStop ??= _dylib.lookupFunction<_c_SDL_HapticRumbleStop,
        _dart_SDL_HapticRumbleStop>('SDL_HapticRumbleStop');
    return _SDL_HapticRumbleStop(
      haptic,
    );
  }

  _dart_SDL_HapticRumbleStop _SDL_HapticRumbleStop;

  /// \brief Set a hint with a specific priority
  ///
  /// The priority controls the behavior when setting a hint that already
  /// has a value.  Hints will replace existing hints of their priority and
  /// lower.  Environment variables are considered to have override priority.
  ///
  /// \return SDL_TRUE if the hint was set, SDL_FALSE otherwise
  int SDL_SetHintWithPriority(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> value,
    int priority,
  ) {
    _SDL_SetHintWithPriority ??= _dylib.lookupFunction<
        _c_SDL_SetHintWithPriority,
        _dart_SDL_SetHintWithPriority>('SDL_SetHintWithPriority');
    return _SDL_SetHintWithPriority(
      name,
      value,
      priority,
    );
  }

  _dart_SDL_SetHintWithPriority _SDL_SetHintWithPriority;

  /// \brief Set a hint with normal priority
  ///
  /// \return SDL_TRUE if the hint was set, SDL_FALSE otherwise
  int SDL_SetHint(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> value,
  ) {
    _SDL_SetHint ??=
        _dylib.lookupFunction<_c_SDL_SetHint, _dart_SDL_SetHint>('SDL_SetHint');
    return _SDL_SetHint(
      name,
      value,
    );
  }

  _dart_SDL_SetHint _SDL_SetHint;

  /// \brief Get a hint
  ///
  /// \return The string value of a hint variable.
  ffi.Pointer<ffi.Int8> SDL_GetHint(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _SDL_GetHint ??=
        _dylib.lookupFunction<_c_SDL_GetHint, _dart_SDL_GetHint>('SDL_GetHint');
    return _SDL_GetHint(
      name,
    );
  }

  _dart_SDL_GetHint _SDL_GetHint;

  /// \brief Get a hint
  ///
  /// \return The boolean value of a hint variable.
  int SDL_GetHintBoolean(
    ffi.Pointer<ffi.Int8> name,
    int default_value,
  ) {
    _SDL_GetHintBoolean ??=
        _dylib.lookupFunction<_c_SDL_GetHintBoolean, _dart_SDL_GetHintBoolean>(
            'SDL_GetHintBoolean');
    return _SDL_GetHintBoolean(
      name,
      default_value,
    );
  }

  _dart_SDL_GetHintBoolean _SDL_GetHintBoolean;

  /// \brief Add a function to watch a particular hint
  ///
  /// \param name The hint to watch
  /// \param callback The function to call when the hint value changes
  /// \param userdata A pointer to pass to the callback function
  void SDL_AddHintCallback(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.NativeFunction<SDL_HintCallback>> callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _SDL_AddHintCallback ??= _dylib.lookupFunction<_c_SDL_AddHintCallback,
        _dart_SDL_AddHintCallback>('SDL_AddHintCallback');
    return _SDL_AddHintCallback(
      name,
      callback,
      userdata,
    );
  }

  _dart_SDL_AddHintCallback _SDL_AddHintCallback;

  /// \brief Remove a function watching a particular hint
  ///
  /// \param name The hint being watched
  /// \param callback The function being called when the hint value changes
  /// \param userdata A pointer being passed to the callback function
  void SDL_DelHintCallback(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.NativeFunction<SDL_HintCallback>> callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _SDL_DelHintCallback ??= _dylib.lookupFunction<_c_SDL_DelHintCallback,
        _dart_SDL_DelHintCallback>('SDL_DelHintCallback');
    return _SDL_DelHintCallback(
      name,
      callback,
      userdata,
    );
  }

  _dart_SDL_DelHintCallback _SDL_DelHintCallback;

  /// \brief  Clear all hints
  ///
  /// This function is called during SDL_Quit() to free stored hints.
  void SDL_ClearHints() {
    _SDL_ClearHints ??=
        _dylib.lookupFunction<_c_SDL_ClearHints, _dart_SDL_ClearHints>(
            'SDL_ClearHints');
    return _SDL_ClearHints();
  }

  _dart_SDL_ClearHints _SDL_ClearHints;

  /// This function dynamically loads a shared object and returns a pointer
  /// to the object handle (or NULL if there was an error).
  /// The 'sofile' parameter is a system dependent name of the object file.
  ffi.Pointer<ffi.Void> SDL_LoadObject(
    ffi.Pointer<ffi.Int8> sofile,
  ) {
    _SDL_LoadObject ??=
        _dylib.lookupFunction<_c_SDL_LoadObject, _dart_SDL_LoadObject>(
            'SDL_LoadObject');
    return _SDL_LoadObject(
      sofile,
    );
  }

  _dart_SDL_LoadObject _SDL_LoadObject;

  /// Given an object handle, this function looks up the address of the
  /// named function in the shared object and returns it.  This address
  /// is no longer valid after calling SDL_UnloadObject().
  ffi.Pointer<ffi.Void> SDL_LoadFunction(
    ffi.Pointer<ffi.Void> handle,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _SDL_LoadFunction ??=
        _dylib.lookupFunction<_c_SDL_LoadFunction, _dart_SDL_LoadFunction>(
            'SDL_LoadFunction');
    return _SDL_LoadFunction(
      handle,
      name,
    );
  }

  _dart_SDL_LoadFunction _SDL_LoadFunction;

  /// Unload a shared object from memory.
  void SDL_UnloadObject(
    ffi.Pointer<ffi.Void> handle,
  ) {
    _SDL_UnloadObject ??=
        _dylib.lookupFunction<_c_SDL_UnloadObject, _dart_SDL_UnloadObject>(
            'SDL_UnloadObject');
    return _SDL_UnloadObject(
      handle,
    );
  }

  _dart_SDL_UnloadObject _SDL_UnloadObject;

  /// \brief Set the priority of all log categories
  void SDL_LogSetAllPriority(
    int priority,
  ) {
    _SDL_LogSetAllPriority ??= _dylib.lookupFunction<_c_SDL_LogSetAllPriority,
        _dart_SDL_LogSetAllPriority>('SDL_LogSetAllPriority');
    return _SDL_LogSetAllPriority(
      priority,
    );
  }

  _dart_SDL_LogSetAllPriority _SDL_LogSetAllPriority;

  /// \brief Set the priority of a particular log category
  void SDL_LogSetPriority(
    int category,
    int priority,
  ) {
    _SDL_LogSetPriority ??=
        _dylib.lookupFunction<_c_SDL_LogSetPriority, _dart_SDL_LogSetPriority>(
            'SDL_LogSetPriority');
    return _SDL_LogSetPriority(
      category,
      priority,
    );
  }

  _dart_SDL_LogSetPriority _SDL_LogSetPriority;

  /// \brief Get the priority of a particular log category
  int SDL_LogGetPriority(
    int category,
  ) {
    _SDL_LogGetPriority ??=
        _dylib.lookupFunction<_c_SDL_LogGetPriority, _dart_SDL_LogGetPriority>(
            'SDL_LogGetPriority');
    return _SDL_LogGetPriority(
      category,
    );
  }

  _dart_SDL_LogGetPriority _SDL_LogGetPriority;

  /// \brief Reset all priorities to default.
  ///
  /// \note This is called in SDL_Quit().
  void SDL_LogResetPriorities() {
    _SDL_LogResetPriorities ??= _dylib.lookupFunction<_c_SDL_LogResetPriorities,
        _dart_SDL_LogResetPriorities>('SDL_LogResetPriorities');
    return _SDL_LogResetPriorities();
  }

  _dart_SDL_LogResetPriorities _SDL_LogResetPriorities;

  /// \brief Log a message with SDL_LOG_CATEGORY_APPLICATION and SDL_LOG_PRIORITY_INFO
  void SDL_Log(
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    _SDL_Log ??= _dylib.lookupFunction<_c_SDL_Log, _dart_SDL_Log>('SDL_Log');
    return _SDL_Log(
      fmt,
    );
  }

  _dart_SDL_Log _SDL_Log;

  /// \brief Log a message with SDL_LOG_PRIORITY_VERBOSE
  void SDL_LogVerbose(
    int category,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    _SDL_LogVerbose ??=
        _dylib.lookupFunction<_c_SDL_LogVerbose, _dart_SDL_LogVerbose>(
            'SDL_LogVerbose');
    return _SDL_LogVerbose(
      category,
      fmt,
    );
  }

  _dart_SDL_LogVerbose _SDL_LogVerbose;

  /// \brief Log a message with SDL_LOG_PRIORITY_DEBUG
  void SDL_LogDebug(
    int category,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    _SDL_LogDebug ??= _dylib
        .lookupFunction<_c_SDL_LogDebug, _dart_SDL_LogDebug>('SDL_LogDebug');
    return _SDL_LogDebug(
      category,
      fmt,
    );
  }

  _dart_SDL_LogDebug _SDL_LogDebug;

  /// \brief Log a message with SDL_LOG_PRIORITY_INFO
  void SDL_LogInfo(
    int category,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    _SDL_LogInfo ??=
        _dylib.lookupFunction<_c_SDL_LogInfo, _dart_SDL_LogInfo>('SDL_LogInfo');
    return _SDL_LogInfo(
      category,
      fmt,
    );
  }

  _dart_SDL_LogInfo _SDL_LogInfo;

  /// \brief Log a message with SDL_LOG_PRIORITY_WARN
  void SDL_LogWarn(
    int category,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    _SDL_LogWarn ??=
        _dylib.lookupFunction<_c_SDL_LogWarn, _dart_SDL_LogWarn>('SDL_LogWarn');
    return _SDL_LogWarn(
      category,
      fmt,
    );
  }

  _dart_SDL_LogWarn _SDL_LogWarn;

  /// \brief Log a message with SDL_LOG_PRIORITY_ERROR
  void SDL_LogError(
    int category,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    _SDL_LogError ??= _dylib
        .lookupFunction<_c_SDL_LogError, _dart_SDL_LogError>('SDL_LogError');
    return _SDL_LogError(
      category,
      fmt,
    );
  }

  _dart_SDL_LogError _SDL_LogError;

  /// \brief Log a message with SDL_LOG_PRIORITY_CRITICAL
  void SDL_LogCritical(
    int category,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    _SDL_LogCritical ??=
        _dylib.lookupFunction<_c_SDL_LogCritical, _dart_SDL_LogCritical>(
            'SDL_LogCritical');
    return _SDL_LogCritical(
      category,
      fmt,
    );
  }

  _dart_SDL_LogCritical _SDL_LogCritical;

  /// \brief Log a message with the specified category and priority.
  void SDL_LogMessage(
    int category,
    int priority,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    _SDL_LogMessage ??=
        _dylib.lookupFunction<_c_SDL_LogMessage, _dart_SDL_LogMessage>(
            'SDL_LogMessage');
    return _SDL_LogMessage(
      category,
      priority,
      fmt,
    );
  }

  _dart_SDL_LogMessage _SDL_LogMessage;

  /// \brief Log a message with the specified category and priority.
  void SDL_LogMessageV(
    int category,
    int priority,
    ffi.Pointer<ffi.Int8> fmt,
    ffi.Pointer<__va_list_tag> ap,
  ) {
    _SDL_LogMessageV ??=
        _dylib.lookupFunction<_c_SDL_LogMessageV, _dart_SDL_LogMessageV>(
            'SDL_LogMessageV');
    return _SDL_LogMessageV(
      category,
      priority,
      fmt,
      ap,
    );
  }

  _dart_SDL_LogMessageV _SDL_LogMessageV;

  /// \brief Get the current log output function.
  void SDL_LogGetOutputFunction(
    ffi.Pointer<ffi.Pointer<ffi.NativeFunction<SDL_LogOutputFunction>>>
        callback,
    ffi.Pointer<ffi.Pointer<ffi.Void>> userdata,
  ) {
    _SDL_LogGetOutputFunction ??= _dylib.lookupFunction<
        _c_SDL_LogGetOutputFunction,
        _dart_SDL_LogGetOutputFunction>('SDL_LogGetOutputFunction');
    return _SDL_LogGetOutputFunction(
      callback,
      userdata,
    );
  }

  _dart_SDL_LogGetOutputFunction _SDL_LogGetOutputFunction;

  /// \brief This function allows you to replace the default log output
  /// function with one of your own.
  void SDL_LogSetOutputFunction(
    ffi.Pointer<ffi.NativeFunction<SDL_LogOutputFunction>> callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _SDL_LogSetOutputFunction ??= _dylib.lookupFunction<
        _c_SDL_LogSetOutputFunction,
        _dart_SDL_LogSetOutputFunction>('SDL_LogSetOutputFunction');
    return _SDL_LogSetOutputFunction(
      callback,
      userdata,
    );
  }

  _dart_SDL_LogSetOutputFunction _SDL_LogSetOutputFunction;

  /// \brief Create a modal message box.
  ///
  /// \param messageboxdata The SDL_MessageBoxData structure with title, text, etc.
  /// \param buttonid The pointer to which user id of hit button should be copied.
  ///
  /// \return -1 on error, otherwise 0 and buttonid contains user id of button
  /// hit or -1 if dialog was closed.
  ///
  /// \note This function should be called on the thread that created the parent
  /// window, or on the main thread if the messagebox has no parent.  It will
  /// block execution of that thread until the user clicks a button or
  /// closes the messagebox.
  int SDL_ShowMessageBox(
    ffi.Pointer<SDL_MessageBoxData> messageboxdata,
    ffi.Pointer<ffi.Int32> buttonid,
  ) {
    _SDL_ShowMessageBox ??=
        _dylib.lookupFunction<_c_SDL_ShowMessageBox, _dart_SDL_ShowMessageBox>(
            'SDL_ShowMessageBox');
    return _SDL_ShowMessageBox(
      messageboxdata,
      buttonid,
    );
  }

  _dart_SDL_ShowMessageBox _SDL_ShowMessageBox;

  /// \brief Create a simple modal message box
  ///
  /// \param flags    ::SDL_MessageBoxFlags
  /// \param title    UTF-8 title text
  /// \param message  UTF-8 message text
  /// \param window   The parent window, or NULL for no parent
  ///
  /// \return 0 on success, -1 on error
  ///
  /// \sa SDL_ShowMessageBox
  int SDL_ShowSimpleMessageBox(
    int flags,
    ffi.Pointer<ffi.Int8> title,
    ffi.Pointer<ffi.Int8> message,
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_ShowSimpleMessageBox ??= _dylib.lookupFunction<
        _c_SDL_ShowSimpleMessageBox,
        _dart_SDL_ShowSimpleMessageBox>('SDL_ShowSimpleMessageBox');
    return _SDL_ShowSimpleMessageBox(
      flags,
      title,
      message,
      window,
    );
  }

  _dart_SDL_ShowSimpleMessageBox _SDL_ShowSimpleMessageBox;

  /// \brief Get the current power supply details.
  ///
  /// \param secs Seconds of battery life left. You can pass a NULL here if
  /// you don't care. Will return -1 if we can't determine a
  /// value, or we're not running on a battery.
  ///
  /// \param pct Percentage of battery life left, between 0 and 100. You can
  /// pass a NULL here if you don't care. Will return -1 if we
  /// can't determine a value, or we're not running on a battery.
  ///
  /// \return The state of the battery (if any).
  int SDL_GetPowerInfo(
    ffi.Pointer<ffi.Int32> secs,
    ffi.Pointer<ffi.Int32> pct,
  ) {
    _SDL_GetPowerInfo ??=
        _dylib.lookupFunction<_c_SDL_GetPowerInfo, _dart_SDL_GetPowerInfo>(
            'SDL_GetPowerInfo');
    return _SDL_GetPowerInfo(
      secs,
      pct,
    );
  }

  _dart_SDL_GetPowerInfo _SDL_GetPowerInfo;

  /// \brief Get the number of 2D rendering drivers available for the current
  /// display.
  ///
  /// A render driver is a set of code that handles rendering and texture
  /// management on a particular display.  Normally there is only one, but
  /// some drivers may have several available with different capabilities.
  ///
  /// \sa SDL_GetRenderDriverInfo()
  /// \sa SDL_CreateRenderer()
  int SDL_GetNumRenderDrivers() {
    _SDL_GetNumRenderDrivers ??= _dylib.lookupFunction<
        _c_SDL_GetNumRenderDrivers,
        _dart_SDL_GetNumRenderDrivers>('SDL_GetNumRenderDrivers');
    return _SDL_GetNumRenderDrivers();
  }

  _dart_SDL_GetNumRenderDrivers _SDL_GetNumRenderDrivers;

  /// \brief Get information about a specific 2D rendering driver for the current
  /// display.
  ///
  /// \param index The index of the driver to query information about.
  /// \param info  A pointer to an SDL_RendererInfo struct to be filled with
  /// information on the rendering driver.
  ///
  /// \return 0 on success, -1 if the index was out of range.
  ///
  /// \sa SDL_CreateRenderer()
  int SDL_GetRenderDriverInfo(
    int index,
    ffi.Pointer<SDL_RendererInfo> info,
  ) {
    _SDL_GetRenderDriverInfo ??= _dylib.lookupFunction<
        _c_SDL_GetRenderDriverInfo,
        _dart_SDL_GetRenderDriverInfo>('SDL_GetRenderDriverInfo');
    return _SDL_GetRenderDriverInfo(
      index,
      info,
    );
  }

  _dart_SDL_GetRenderDriverInfo _SDL_GetRenderDriverInfo;

  /// \brief Create a window and default renderer
  ///
  /// \param width    The width of the window
  /// \param height   The height of the window
  /// \param window_flags The flags used to create the window
  /// \param window   A pointer filled with the window, or NULL on error
  /// \param renderer A pointer filled with the renderer, or NULL on error
  ///
  /// \return 0 on success, or -1 on error
  int SDL_CreateWindowAndRenderer(
    int width,
    int height,
    int window_flags,
    ffi.Pointer<ffi.Pointer<SDL_Window>> window,
    ffi.Pointer<ffi.Pointer<SDL_Renderer>> renderer,
  ) {
    _SDL_CreateWindowAndRenderer ??= _dylib.lookupFunction<
        _c_SDL_CreateWindowAndRenderer,
        _dart_SDL_CreateWindowAndRenderer>('SDL_CreateWindowAndRenderer');
    return _SDL_CreateWindowAndRenderer(
      width,
      height,
      window_flags,
      window,
      renderer,
    );
  }

  _dart_SDL_CreateWindowAndRenderer _SDL_CreateWindowAndRenderer;

  /// \brief Create a 2D rendering context for a window.
  ///
  /// \param window The window where rendering is displayed.
  /// \param index    The index of the rendering driver to initialize, or -1 to
  /// initialize the first one supporting the requested flags.
  /// \param flags    ::SDL_RendererFlags.
  ///
  /// \return A valid rendering context or NULL if there was an error.
  ///
  /// \sa SDL_CreateSoftwareRenderer()
  /// \sa SDL_GetRendererInfo()
  /// \sa SDL_DestroyRenderer()
  ffi.Pointer<SDL_Renderer> SDL_CreateRenderer(
    ffi.Pointer<SDL_Window> window,
    int index,
    int flags,
  ) {
    _SDL_CreateRenderer ??=
        _dylib.lookupFunction<_c_SDL_CreateRenderer, _dart_SDL_CreateRenderer>(
            'SDL_CreateRenderer');
    return _SDL_CreateRenderer(
      window,
      index,
      flags,
    );
  }

  _dart_SDL_CreateRenderer _SDL_CreateRenderer;

  /// \brief Create a 2D software rendering context for a surface.
  ///
  /// \param surface The surface where rendering is done.
  ///
  /// \return A valid rendering context or NULL if there was an error.
  ///
  /// \sa SDL_CreateRenderer()
  /// \sa SDL_DestroyRenderer()
  ffi.Pointer<SDL_Renderer> SDL_CreateSoftwareRenderer(
    ffi.Pointer<SDL_Surface> surface,
  ) {
    _SDL_CreateSoftwareRenderer ??= _dylib.lookupFunction<
        _c_SDL_CreateSoftwareRenderer,
        _dart_SDL_CreateSoftwareRenderer>('SDL_CreateSoftwareRenderer');
    return _SDL_CreateSoftwareRenderer(
      surface,
    );
  }

  _dart_SDL_CreateSoftwareRenderer _SDL_CreateSoftwareRenderer;

  /// \brief Get the renderer associated with a window.
  ffi.Pointer<SDL_Renderer> SDL_GetRenderer(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_GetRenderer ??=
        _dylib.lookupFunction<_c_SDL_GetRenderer, _dart_SDL_GetRenderer>(
            'SDL_GetRenderer');
    return _SDL_GetRenderer(
      window,
    );
  }

  _dart_SDL_GetRenderer _SDL_GetRenderer;

  /// \brief Get information about a rendering context.
  int SDL_GetRendererInfo(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_RendererInfo> info,
  ) {
    _SDL_GetRendererInfo ??= _dylib.lookupFunction<_c_SDL_GetRendererInfo,
        _dart_SDL_GetRendererInfo>('SDL_GetRendererInfo');
    return _SDL_GetRendererInfo(
      renderer,
      info,
    );
  }

  _dart_SDL_GetRendererInfo _SDL_GetRendererInfo;

  /// \brief Get the output size in pixels of a rendering context.
  int SDL_GetRendererOutputSize(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<ffi.Int32> w,
    ffi.Pointer<ffi.Int32> h,
  ) {
    _SDL_GetRendererOutputSize ??= _dylib.lookupFunction<
        _c_SDL_GetRendererOutputSize,
        _dart_SDL_GetRendererOutputSize>('SDL_GetRendererOutputSize');
    return _SDL_GetRendererOutputSize(
      renderer,
      w,
      h,
    );
  }

  _dart_SDL_GetRendererOutputSize _SDL_GetRendererOutputSize;

  /// \brief Create a texture for a rendering context.
  ///
  /// \param renderer The renderer.
  /// \param format The format of the texture.
  /// \param access One of the enumerated values in ::SDL_TextureAccess.
  /// \param w      The width of the texture in pixels.
  /// \param h      The height of the texture in pixels.
  ///
  /// \return The created texture is returned, or NULL if no rendering context was
  /// active,  the format was unsupported, or the width or height were out
  /// of range.
  ///
  /// \note The contents of the texture are not defined at creation.
  ///
  /// \sa SDL_QueryTexture()
  /// \sa SDL_UpdateTexture()
  /// \sa SDL_DestroyTexture()
  ffi.Pointer<SDL_Texture> SDL_CreateTexture(
    ffi.Pointer<SDL_Renderer> renderer,
    int format,
    int access,
    int w,
    int h,
  ) {
    _SDL_CreateTexture ??=
        _dylib.lookupFunction<_c_SDL_CreateTexture, _dart_SDL_CreateTexture>(
            'SDL_CreateTexture');
    return _SDL_CreateTexture(
      renderer,
      format,
      access,
      w,
      h,
    );
  }

  _dart_SDL_CreateTexture _SDL_CreateTexture;

  /// \brief Create a texture from an existing surface.
  ///
  /// \param renderer The renderer.
  /// \param surface The surface containing pixel data used to fill the texture.
  ///
  /// \return The created texture is returned, or NULL on error.
  ///
  /// \note The surface is not modified or freed by this function.
  ///
  /// \sa SDL_QueryTexture()
  /// \sa SDL_DestroyTexture()
  ffi.Pointer<SDL_Texture> SDL_CreateTextureFromSurface(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Surface> surface,
  ) {
    _SDL_CreateTextureFromSurface ??= _dylib.lookupFunction<
        _c_SDL_CreateTextureFromSurface,
        _dart_SDL_CreateTextureFromSurface>('SDL_CreateTextureFromSurface');
    return _SDL_CreateTextureFromSurface(
      renderer,
      surface,
    );
  }

  _dart_SDL_CreateTextureFromSurface _SDL_CreateTextureFromSurface;

  /// \brief Query the attributes of a texture
  ///
  /// \param texture A texture to be queried.
  /// \param format  A pointer filled in with the raw format of the texture.  The
  /// actual format may differ, but pixel transfers will use this
  /// format.
  /// \param access  A pointer filled in with the actual access to the texture.
  /// \param w       A pointer filled in with the width of the texture in pixels.
  /// \param h       A pointer filled in with the height of the texture in pixels.
  ///
  /// \return 0 on success, or -1 if the texture is not valid.
  int SDL_QueryTexture(
    ffi.Pointer<SDL_Texture> texture,
    ffi.Pointer<ffi.Uint32> format,
    ffi.Pointer<ffi.Int32> access,
    ffi.Pointer<ffi.Int32> w,
    ffi.Pointer<ffi.Int32> h,
  ) {
    _SDL_QueryTexture ??=
        _dylib.lookupFunction<_c_SDL_QueryTexture, _dart_SDL_QueryTexture>(
            'SDL_QueryTexture');
    return _SDL_QueryTexture(
      texture,
      format,
      access,
      w,
      h,
    );
  }

  _dart_SDL_QueryTexture _SDL_QueryTexture;

  /// \brief Set an additional color value used in render copy operations.
  ///
  /// \param texture The texture to update.
  /// \param r       The red color value multiplied into copy operations.
  /// \param g       The green color value multiplied into copy operations.
  /// \param b       The blue color value multiplied into copy operations.
  ///
  /// \return 0 on success, or -1 if the texture is not valid or color modulation
  /// is not supported.
  ///
  /// \sa SDL_GetTextureColorMod()
  int SDL_SetTextureColorMod(
    ffi.Pointer<SDL_Texture> texture,
    int r,
    int g,
    int b,
  ) {
    _SDL_SetTextureColorMod ??= _dylib.lookupFunction<_c_SDL_SetTextureColorMod,
        _dart_SDL_SetTextureColorMod>('SDL_SetTextureColorMod');
    return _SDL_SetTextureColorMod(
      texture,
      r,
      g,
      b,
    );
  }

  _dart_SDL_SetTextureColorMod _SDL_SetTextureColorMod;

  /// \brief Get the additional color value used in render copy operations.
  ///
  /// \param texture The texture to query.
  /// \param r         A pointer filled in with the current red color value.
  /// \param g         A pointer filled in with the current green color value.
  /// \param b         A pointer filled in with the current blue color value.
  ///
  /// \return 0 on success, or -1 if the texture is not valid.
  ///
  /// \sa SDL_SetTextureColorMod()
  int SDL_GetTextureColorMod(
    ffi.Pointer<SDL_Texture> texture,
    ffi.Pointer<ffi.Uint8> r,
    ffi.Pointer<ffi.Uint8> g,
    ffi.Pointer<ffi.Uint8> b,
  ) {
    _SDL_GetTextureColorMod ??= _dylib.lookupFunction<_c_SDL_GetTextureColorMod,
        _dart_SDL_GetTextureColorMod>('SDL_GetTextureColorMod');
    return _SDL_GetTextureColorMod(
      texture,
      r,
      g,
      b,
    );
  }

  _dart_SDL_GetTextureColorMod _SDL_GetTextureColorMod;

  /// \brief Set an additional alpha value used in render copy operations.
  ///
  /// \param texture The texture to update.
  /// \param alpha     The alpha value multiplied into copy operations.
  ///
  /// \return 0 on success, or -1 if the texture is not valid or alpha modulation
  /// is not supported.
  ///
  /// \sa SDL_GetTextureAlphaMod()
  int SDL_SetTextureAlphaMod(
    ffi.Pointer<SDL_Texture> texture,
    int alpha,
  ) {
    _SDL_SetTextureAlphaMod ??= _dylib.lookupFunction<_c_SDL_SetTextureAlphaMod,
        _dart_SDL_SetTextureAlphaMod>('SDL_SetTextureAlphaMod');
    return _SDL_SetTextureAlphaMod(
      texture,
      alpha,
    );
  }

  _dart_SDL_SetTextureAlphaMod _SDL_SetTextureAlphaMod;

  /// \brief Get the additional alpha value used in render copy operations.
  ///
  /// \param texture The texture to query.
  /// \param alpha     A pointer filled in with the current alpha value.
  ///
  /// \return 0 on success, or -1 if the texture is not valid.
  ///
  /// \sa SDL_SetTextureAlphaMod()
  int SDL_GetTextureAlphaMod(
    ffi.Pointer<SDL_Texture> texture,
    ffi.Pointer<ffi.Uint8> alpha,
  ) {
    _SDL_GetTextureAlphaMod ??= _dylib.lookupFunction<_c_SDL_GetTextureAlphaMod,
        _dart_SDL_GetTextureAlphaMod>('SDL_GetTextureAlphaMod');
    return _SDL_GetTextureAlphaMod(
      texture,
      alpha,
    );
  }

  _dart_SDL_GetTextureAlphaMod _SDL_GetTextureAlphaMod;

  /// \brief Set the blend mode used for texture copy operations.
  ///
  /// \param texture The texture to update.
  /// \param blendMode ::SDL_BlendMode to use for texture blending.
  ///
  /// \return 0 on success, or -1 if the texture is not valid or the blend mode is
  /// not supported.
  ///
  /// \note If the blend mode is not supported, the closest supported mode is
  /// chosen.
  ///
  /// \sa SDL_GetTextureBlendMode()
  int SDL_SetTextureBlendMode(
    ffi.Pointer<SDL_Texture> texture,
    int blendMode,
  ) {
    _SDL_SetTextureBlendMode ??= _dylib.lookupFunction<
        _c_SDL_SetTextureBlendMode,
        _dart_SDL_SetTextureBlendMode>('SDL_SetTextureBlendMode');
    return _SDL_SetTextureBlendMode(
      texture,
      blendMode,
    );
  }

  _dart_SDL_SetTextureBlendMode _SDL_SetTextureBlendMode;

  /// \brief Get the blend mode used for texture copy operations.
  ///
  /// \param texture   The texture to query.
  /// \param blendMode A pointer filled in with the current blend mode.
  ///
  /// \return 0 on success, or -1 if the texture is not valid.
  ///
  /// \sa SDL_SetTextureBlendMode()
  int SDL_GetTextureBlendMode(
    ffi.Pointer<SDL_Texture> texture,
    ffi.Pointer<ffi.Int32> blendMode,
  ) {
    _SDL_GetTextureBlendMode ??= _dylib.lookupFunction<
        _c_SDL_GetTextureBlendMode,
        _dart_SDL_GetTextureBlendMode>('SDL_GetTextureBlendMode');
    return _SDL_GetTextureBlendMode(
      texture,
      blendMode,
    );
  }

  _dart_SDL_GetTextureBlendMode _SDL_GetTextureBlendMode;

  /// \brief Set the scale mode used for texture scale operations.
  ///
  /// \param texture The texture to update.
  /// \param scaleMode ::SDL_ScaleMode to use for texture scaling.
  ///
  /// \return 0 on success, or -1 if the texture is not valid.
  ///
  /// \note If the scale mode is not supported, the closest supported mode is
  /// chosen.
  ///
  /// \sa SDL_GetTextureScaleMode()
  int SDL_SetTextureScaleMode(
    ffi.Pointer<SDL_Texture> texture,
    int scaleMode,
  ) {
    _SDL_SetTextureScaleMode ??= _dylib.lookupFunction<
        _c_SDL_SetTextureScaleMode,
        _dart_SDL_SetTextureScaleMode>('SDL_SetTextureScaleMode');
    return _SDL_SetTextureScaleMode(
      texture,
      scaleMode,
    );
  }

  _dart_SDL_SetTextureScaleMode _SDL_SetTextureScaleMode;

  /// \brief Get the scale mode used for texture scale operations.
  ///
  /// \param texture   The texture to query.
  /// \param scaleMode A pointer filled in with the current scale mode.
  ///
  /// \return 0 on success, or -1 if the texture is not valid.
  ///
  /// \sa SDL_SetTextureScaleMode()
  int SDL_GetTextureScaleMode(
    ffi.Pointer<SDL_Texture> texture,
    ffi.Pointer<ffi.Int32> scaleMode,
  ) {
    _SDL_GetTextureScaleMode ??= _dylib.lookupFunction<
        _c_SDL_GetTextureScaleMode,
        _dart_SDL_GetTextureScaleMode>('SDL_GetTextureScaleMode');
    return _SDL_GetTextureScaleMode(
      texture,
      scaleMode,
    );
  }

  _dart_SDL_GetTextureScaleMode _SDL_GetTextureScaleMode;

  /// \brief Update the given texture rectangle with new pixel data.
  ///
  /// \param texture   The texture to update
  /// \param rect      A pointer to the rectangle of pixels to update, or NULL to
  /// update the entire texture.
  /// \param pixels    The raw pixel data in the format of the texture.
  /// \param pitch     The number of bytes in a row of pixel data, including padding between lines.
  ///
  /// The pixel data must be in the format of the texture. The pixel format can be
  /// queried with SDL_QueryTexture.
  ///
  /// \return 0 on success, or -1 if the texture is not valid.
  ///
  /// \note This is a fairly slow function.
  int SDL_UpdateTexture(
    ffi.Pointer<SDL_Texture> texture,
    ffi.Pointer<SDL_Rect> rect,
    ffi.Pointer<ffi.Void> pixels,
    int pitch,
  ) {
    _SDL_UpdateTexture ??=
        _dylib.lookupFunction<_c_SDL_UpdateTexture, _dart_SDL_UpdateTexture>(
            'SDL_UpdateTexture');
    return _SDL_UpdateTexture(
      texture,
      rect,
      pixels,
      pitch,
    );
  }

  _dart_SDL_UpdateTexture _SDL_UpdateTexture;

  /// \brief Update a rectangle within a planar YV12 or IYUV texture with new pixel data.
  ///
  /// \param texture   The texture to update
  /// \param rect      A pointer to the rectangle of pixels to update, or NULL to
  /// update the entire texture.
  /// \param Yplane    The raw pixel data for the Y plane.
  /// \param Ypitch    The number of bytes between rows of pixel data for the Y plane.
  /// \param Uplane    The raw pixel data for the U plane.
  /// \param Upitch    The number of bytes between rows of pixel data for the U plane.
  /// \param Vplane    The raw pixel data for the V plane.
  /// \param Vpitch    The number of bytes between rows of pixel data for the V plane.
  ///
  /// \return 0 on success, or -1 if the texture is not valid.
  ///
  /// \note You can use SDL_UpdateTexture() as long as your pixel data is
  /// a contiguous block of Y and U/V planes in the proper order, but
  /// this function is available if your pixel data is not contiguous.
  int SDL_UpdateYUVTexture(
    ffi.Pointer<SDL_Texture> texture,
    ffi.Pointer<SDL_Rect> rect,
    ffi.Pointer<ffi.Uint8> Yplane,
    int Ypitch,
    ffi.Pointer<ffi.Uint8> Uplane,
    int Upitch,
    ffi.Pointer<ffi.Uint8> Vplane,
    int Vpitch,
  ) {
    _SDL_UpdateYUVTexture ??= _dylib.lookupFunction<_c_SDL_UpdateYUVTexture,
        _dart_SDL_UpdateYUVTexture>('SDL_UpdateYUVTexture');
    return _SDL_UpdateYUVTexture(
      texture,
      rect,
      Yplane,
      Ypitch,
      Uplane,
      Upitch,
      Vplane,
      Vpitch,
    );
  }

  _dart_SDL_UpdateYUVTexture _SDL_UpdateYUVTexture;

  /// \brief Lock a portion of the texture for write-only pixel access.
  ///
  /// \param texture   The texture to lock for access, which was created with
  /// ::SDL_TEXTUREACCESS_STREAMING.
  /// \param rect      A pointer to the rectangle to lock for access. If the rect
  /// is NULL, the entire texture will be locked.
  /// \param pixels    This is filled in with a pointer to the locked pixels,
  /// appropriately offset by the locked area.
  /// \param pitch     This is filled in with the pitch of the locked pixels.
  ///
  /// \return 0 on success, or -1 if the texture is not valid or was not created with ::SDL_TEXTUREACCESS_STREAMING.
  ///
  /// \sa SDL_UnlockTexture()
  int SDL_LockTexture(
    ffi.Pointer<SDL_Texture> texture,
    ffi.Pointer<SDL_Rect> rect,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pixels,
    ffi.Pointer<ffi.Int32> pitch,
  ) {
    _SDL_LockTexture ??=
        _dylib.lookupFunction<_c_SDL_LockTexture, _dart_SDL_LockTexture>(
            'SDL_LockTexture');
    return _SDL_LockTexture(
      texture,
      rect,
      pixels,
      pitch,
    );
  }

  _dart_SDL_LockTexture _SDL_LockTexture;

  /// \brief Lock a portion of the texture for write-only pixel access.
  /// Expose it as a SDL surface.
  ///
  /// \param texture   The texture to lock for access, which was created with
  /// ::SDL_TEXTUREACCESS_STREAMING.
  /// \param rect      A pointer to the rectangle to lock for access. If the rect
  /// is NULL, the entire texture will be locked.
  /// \param surface   This is filled in with a SDL surface representing the locked area
  /// Surface is freed internally after calling SDL_UnlockTexture or SDL_DestroyTexture.
  ///
  /// \return 0 on success, or -1 if the texture is not valid or was not created with ::SDL_TEXTUREACCESS_STREAMING.
  ///
  /// \sa SDL_UnlockTexture()
  int SDL_LockTextureToSurface(
    ffi.Pointer<SDL_Texture> texture,
    ffi.Pointer<SDL_Rect> rect,
    ffi.Pointer<ffi.Pointer<SDL_Surface>> surface,
  ) {
    _SDL_LockTextureToSurface ??= _dylib.lookupFunction<
        _c_SDL_LockTextureToSurface,
        _dart_SDL_LockTextureToSurface>('SDL_LockTextureToSurface');
    return _SDL_LockTextureToSurface(
      texture,
      rect,
      surface,
    );
  }

  _dart_SDL_LockTextureToSurface _SDL_LockTextureToSurface;

  /// \brief Unlock a texture, uploading the changes to video memory, if needed.
  /// If SDL_LockTextureToSurface() was called for locking, the SDL surface is freed.
  ///
  /// \sa SDL_LockTexture()
  /// \sa SDL_LockTextureToSurface()
  void SDL_UnlockTexture(
    ffi.Pointer<SDL_Texture> texture,
  ) {
    _SDL_UnlockTexture ??=
        _dylib.lookupFunction<_c_SDL_UnlockTexture, _dart_SDL_UnlockTexture>(
            'SDL_UnlockTexture');
    return _SDL_UnlockTexture(
      texture,
    );
  }

  _dart_SDL_UnlockTexture _SDL_UnlockTexture;

  /// \brief Determines whether a window supports the use of render targets
  ///
  /// \param renderer The renderer that will be checked
  ///
  /// \return SDL_TRUE if supported, SDL_FALSE if not.
  int SDL_RenderTargetSupported(
    ffi.Pointer<SDL_Renderer> renderer,
  ) {
    _SDL_RenderTargetSupported ??= _dylib.lookupFunction<
        _c_SDL_RenderTargetSupported,
        _dart_SDL_RenderTargetSupported>('SDL_RenderTargetSupported');
    return _SDL_RenderTargetSupported(
      renderer,
    );
  }

  _dart_SDL_RenderTargetSupported _SDL_RenderTargetSupported;

  /// \brief Set a texture as the current rendering target.
  ///
  /// \param renderer The renderer.
  /// \param texture The targeted texture, which must be created with the SDL_TEXTUREACCESS_TARGET flag, or NULL for the default render target
  ///
  /// \return 0 on success, or -1 on error
  ///
  /// \sa SDL_GetRenderTarget()
  int SDL_SetRenderTarget(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Texture> texture,
  ) {
    _SDL_SetRenderTarget ??= _dylib.lookupFunction<_c_SDL_SetRenderTarget,
        _dart_SDL_SetRenderTarget>('SDL_SetRenderTarget');
    return _SDL_SetRenderTarget(
      renderer,
      texture,
    );
  }

  _dart_SDL_SetRenderTarget _SDL_SetRenderTarget;

  /// \brief Get the current render target or NULL for the default render target.
  ///
  /// \return The current render target
  ///
  /// \sa SDL_SetRenderTarget()
  ffi.Pointer<SDL_Texture> SDL_GetRenderTarget(
    ffi.Pointer<SDL_Renderer> renderer,
  ) {
    _SDL_GetRenderTarget ??= _dylib.lookupFunction<_c_SDL_GetRenderTarget,
        _dart_SDL_GetRenderTarget>('SDL_GetRenderTarget');
    return _SDL_GetRenderTarget(
      renderer,
    );
  }

  _dart_SDL_GetRenderTarget _SDL_GetRenderTarget;

  /// \brief Set device independent resolution for rendering
  ///
  /// \param renderer The renderer for which resolution should be set.
  /// \param w      The width of the logical resolution
  /// \param h      The height of the logical resolution
  ///
  /// This function uses the viewport and scaling functionality to allow a fixed logical
  /// resolution for rendering, regardless of the actual output resolution.  If the actual
  /// output resolution doesn't have the same aspect ratio the output rendering will be
  /// centered within the output display.
  ///
  /// If the output display is a window, mouse events in the window will be filtered
  /// and scaled so they seem to arrive within the logical resolution.
  ///
  /// \note If this function results in scaling or subpixel drawing by the
  /// rendering backend, it will be handled using the appropriate
  /// quality hints.
  ///
  /// \sa SDL_RenderGetLogicalSize()
  /// \sa SDL_RenderSetScale()
  /// \sa SDL_RenderSetViewport()
  int SDL_RenderSetLogicalSize(
    ffi.Pointer<SDL_Renderer> renderer,
    int w,
    int h,
  ) {
    _SDL_RenderSetLogicalSize ??= _dylib.lookupFunction<
        _c_SDL_RenderSetLogicalSize,
        _dart_SDL_RenderSetLogicalSize>('SDL_RenderSetLogicalSize');
    return _SDL_RenderSetLogicalSize(
      renderer,
      w,
      h,
    );
  }

  _dart_SDL_RenderSetLogicalSize _SDL_RenderSetLogicalSize;

  /// \brief Get device independent resolution for rendering
  ///
  /// \param renderer The renderer from which resolution should be queried.
  /// \param w      A pointer filled with the width of the logical resolution
  /// \param h      A pointer filled with the height of the logical resolution
  ///
  /// \sa SDL_RenderSetLogicalSize()
  void SDL_RenderGetLogicalSize(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<ffi.Int32> w,
    ffi.Pointer<ffi.Int32> h,
  ) {
    _SDL_RenderGetLogicalSize ??= _dylib.lookupFunction<
        _c_SDL_RenderGetLogicalSize,
        _dart_SDL_RenderGetLogicalSize>('SDL_RenderGetLogicalSize');
    return _SDL_RenderGetLogicalSize(
      renderer,
      w,
      h,
    );
  }

  _dart_SDL_RenderGetLogicalSize _SDL_RenderGetLogicalSize;

  /// \brief Set whether to force integer scales for resolution-independent rendering
  ///
  /// \param renderer The renderer for which integer scaling should be set.
  /// \param enable   Enable or disable integer scaling
  ///
  /// This function restricts the logical viewport to integer values - that is, when
  /// a resolution is between two multiples of a logical size, the viewport size is
  /// rounded down to the lower multiple.
  ///
  /// \sa SDL_RenderSetLogicalSize()
  int SDL_RenderSetIntegerScale(
    ffi.Pointer<SDL_Renderer> renderer,
    int enable,
  ) {
    _SDL_RenderSetIntegerScale ??= _dylib.lookupFunction<
        _c_SDL_RenderSetIntegerScale,
        _dart_SDL_RenderSetIntegerScale>('SDL_RenderSetIntegerScale');
    return _SDL_RenderSetIntegerScale(
      renderer,
      enable,
    );
  }

  _dart_SDL_RenderSetIntegerScale _SDL_RenderSetIntegerScale;

  /// \brief Get whether integer scales are forced for resolution-independent rendering
  ///
  /// \param renderer The renderer from which integer scaling should be queried.
  ///
  /// \sa SDL_RenderSetIntegerScale()
  int SDL_RenderGetIntegerScale(
    ffi.Pointer<SDL_Renderer> renderer,
  ) {
    _SDL_RenderGetIntegerScale ??= _dylib.lookupFunction<
        _c_SDL_RenderGetIntegerScale,
        _dart_SDL_RenderGetIntegerScale>('SDL_RenderGetIntegerScale');
    return _SDL_RenderGetIntegerScale(
      renderer,
    );
  }

  _dart_SDL_RenderGetIntegerScale _SDL_RenderGetIntegerScale;

  /// \brief Set the drawing area for rendering on the current target.
  ///
  /// \param renderer The renderer for which the drawing area should be set.
  /// \param rect The rectangle representing the drawing area, or NULL to set the viewport to the entire target.
  ///
  /// The x,y of the viewport rect represents the origin for rendering.
  ///
  /// \return 0 on success, or -1 on error
  ///
  /// \note If the window associated with the renderer is resized, the viewport is automatically reset.
  ///
  /// \sa SDL_RenderGetViewport()
  /// \sa SDL_RenderSetLogicalSize()
  int SDL_RenderSetViewport(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Rect> rect,
  ) {
    _SDL_RenderSetViewport ??= _dylib.lookupFunction<_c_SDL_RenderSetViewport,
        _dart_SDL_RenderSetViewport>('SDL_RenderSetViewport');
    return _SDL_RenderSetViewport(
      renderer,
      rect,
    );
  }

  _dart_SDL_RenderSetViewport _SDL_RenderSetViewport;

  /// \brief Get the drawing area for the current target.
  ///
  /// \sa SDL_RenderSetViewport()
  void SDL_RenderGetViewport(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Rect> rect,
  ) {
    _SDL_RenderGetViewport ??= _dylib.lookupFunction<_c_SDL_RenderGetViewport,
        _dart_SDL_RenderGetViewport>('SDL_RenderGetViewport');
    return _SDL_RenderGetViewport(
      renderer,
      rect,
    );
  }

  _dart_SDL_RenderGetViewport _SDL_RenderGetViewport;

  /// \brief Set the clip rectangle for the current target.
  ///
  /// \param renderer The renderer for which clip rectangle should be set.
  /// \param rect   A pointer to the rectangle to set as the clip rectangle,
  /// relative to the viewport, or NULL to disable clipping.
  ///
  /// \return 0 on success, or -1 on error
  ///
  /// \sa SDL_RenderGetClipRect()
  int SDL_RenderSetClipRect(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Rect> rect,
  ) {
    _SDL_RenderSetClipRect ??= _dylib.lookupFunction<_c_SDL_RenderSetClipRect,
        _dart_SDL_RenderSetClipRect>('SDL_RenderSetClipRect');
    return _SDL_RenderSetClipRect(
      renderer,
      rect,
    );
  }

  _dart_SDL_RenderSetClipRect _SDL_RenderSetClipRect;

  /// \brief Get the clip rectangle for the current target.
  ///
  /// \param renderer The renderer from which clip rectangle should be queried.
  /// \param rect   A pointer filled in with the current clip rectangle, or
  /// an empty rectangle if clipping is disabled.
  ///
  /// \sa SDL_RenderSetClipRect()
  void SDL_RenderGetClipRect(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Rect> rect,
  ) {
    _SDL_RenderGetClipRect ??= _dylib.lookupFunction<_c_SDL_RenderGetClipRect,
        _dart_SDL_RenderGetClipRect>('SDL_RenderGetClipRect');
    return _SDL_RenderGetClipRect(
      renderer,
      rect,
    );
  }

  _dart_SDL_RenderGetClipRect _SDL_RenderGetClipRect;

  /// \brief Get whether clipping is enabled on the given renderer.
  ///
  /// \param renderer The renderer from which clip state should be queried.
  ///
  /// \sa SDL_RenderGetClipRect()
  int SDL_RenderIsClipEnabled(
    ffi.Pointer<SDL_Renderer> renderer,
  ) {
    _SDL_RenderIsClipEnabled ??= _dylib.lookupFunction<
        _c_SDL_RenderIsClipEnabled,
        _dart_SDL_RenderIsClipEnabled>('SDL_RenderIsClipEnabled');
    return _SDL_RenderIsClipEnabled(
      renderer,
    );
  }

  _dart_SDL_RenderIsClipEnabled _SDL_RenderIsClipEnabled;

  /// \brief Set the drawing scale for rendering on the current target.
  ///
  /// \param renderer The renderer for which the drawing scale should be set.
  /// \param scaleX The horizontal scaling factor
  /// \param scaleY The vertical scaling factor
  ///
  /// The drawing coordinates are scaled by the x/y scaling factors
  /// before they are used by the renderer.  This allows resolution
  /// independent drawing with a single coordinate system.
  ///
  /// \note If this results in scaling or subpixel drawing by the
  /// rendering backend, it will be handled using the appropriate
  /// quality hints.  For best results use integer scaling factors.
  ///
  /// \sa SDL_RenderGetScale()
  /// \sa SDL_RenderSetLogicalSize()
  int SDL_RenderSetScale(
    ffi.Pointer<SDL_Renderer> renderer,
    double scaleX,
    double scaleY,
  ) {
    _SDL_RenderSetScale ??=
        _dylib.lookupFunction<_c_SDL_RenderSetScale, _dart_SDL_RenderSetScale>(
            'SDL_RenderSetScale');
    return _SDL_RenderSetScale(
      renderer,
      scaleX,
      scaleY,
    );
  }

  _dart_SDL_RenderSetScale _SDL_RenderSetScale;

  /// \brief Get the drawing scale for the current target.
  ///
  /// \param renderer The renderer from which drawing scale should be queried.
  /// \param scaleX A pointer filled in with the horizontal scaling factor
  /// \param scaleY A pointer filled in with the vertical scaling factor
  ///
  /// \sa SDL_RenderSetScale()
  void SDL_RenderGetScale(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<ffi.Float> scaleX,
    ffi.Pointer<ffi.Float> scaleY,
  ) {
    _SDL_RenderGetScale ??=
        _dylib.lookupFunction<_c_SDL_RenderGetScale, _dart_SDL_RenderGetScale>(
            'SDL_RenderGetScale');
    return _SDL_RenderGetScale(
      renderer,
      scaleX,
      scaleY,
    );
  }

  _dart_SDL_RenderGetScale _SDL_RenderGetScale;

  /// \brief Set the color used for drawing operations (Rect, Line and Clear).
  ///
  /// \param renderer The renderer for which drawing color should be set.
  /// \param r The red value used to draw on the rendering target.
  /// \param g The green value used to draw on the rendering target.
  /// \param b The blue value used to draw on the rendering target.
  /// \param a The alpha value used to draw on the rendering target, usually
  /// ::SDL_ALPHA_OPAQUE (255).
  ///
  /// \return 0 on success, or -1 on error
  int SDL_SetRenderDrawColor(
    ffi.Pointer<SDL_Renderer> renderer,
    int r,
    int g,
    int b,
    int a,
  ) {
    _SDL_SetRenderDrawColor ??= _dylib.lookupFunction<_c_SDL_SetRenderDrawColor,
        _dart_SDL_SetRenderDrawColor>('SDL_SetRenderDrawColor');
    return _SDL_SetRenderDrawColor(
      renderer,
      r,
      g,
      b,
      a,
    );
  }

  _dart_SDL_SetRenderDrawColor _SDL_SetRenderDrawColor;

  /// \brief Get the color used for drawing operations (Rect, Line and Clear).
  ///
  /// \param renderer The renderer from which drawing color should be queried.
  /// \param r A pointer to the red value used to draw on the rendering target.
  /// \param g A pointer to the green value used to draw on the rendering target.
  /// \param b A pointer to the blue value used to draw on the rendering target.
  /// \param a A pointer to the alpha value used to draw on the rendering target,
  /// usually ::SDL_ALPHA_OPAQUE (255).
  ///
  /// \return 0 on success, or -1 on error
  int SDL_GetRenderDrawColor(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<ffi.Uint8> r,
    ffi.Pointer<ffi.Uint8> g,
    ffi.Pointer<ffi.Uint8> b,
    ffi.Pointer<ffi.Uint8> a,
  ) {
    _SDL_GetRenderDrawColor ??= _dylib.lookupFunction<_c_SDL_GetRenderDrawColor,
        _dart_SDL_GetRenderDrawColor>('SDL_GetRenderDrawColor');
    return _SDL_GetRenderDrawColor(
      renderer,
      r,
      g,
      b,
      a,
    );
  }

  _dart_SDL_GetRenderDrawColor _SDL_GetRenderDrawColor;

  /// \brief Set the blend mode used for drawing operations (Fill and Line).
  ///
  /// \param renderer The renderer for which blend mode should be set.
  /// \param blendMode ::SDL_BlendMode to use for blending.
  ///
  /// \return 0 on success, or -1 on error
  ///
  /// \note If the blend mode is not supported, the closest supported mode is
  /// chosen.
  ///
  /// \sa SDL_GetRenderDrawBlendMode()
  int SDL_SetRenderDrawBlendMode(
    ffi.Pointer<SDL_Renderer> renderer,
    int blendMode,
  ) {
    _SDL_SetRenderDrawBlendMode ??= _dylib.lookupFunction<
        _c_SDL_SetRenderDrawBlendMode,
        _dart_SDL_SetRenderDrawBlendMode>('SDL_SetRenderDrawBlendMode');
    return _SDL_SetRenderDrawBlendMode(
      renderer,
      blendMode,
    );
  }

  _dart_SDL_SetRenderDrawBlendMode _SDL_SetRenderDrawBlendMode;

  /// \brief Get the blend mode used for drawing operations.
  ///
  /// \param renderer The renderer from which blend mode should be queried.
  /// \param blendMode A pointer filled in with the current blend mode.
  ///
  /// \return 0 on success, or -1 on error
  ///
  /// \sa SDL_SetRenderDrawBlendMode()
  int SDL_GetRenderDrawBlendMode(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<ffi.Int32> blendMode,
  ) {
    _SDL_GetRenderDrawBlendMode ??= _dylib.lookupFunction<
        _c_SDL_GetRenderDrawBlendMode,
        _dart_SDL_GetRenderDrawBlendMode>('SDL_GetRenderDrawBlendMode');
    return _SDL_GetRenderDrawBlendMode(
      renderer,
      blendMode,
    );
  }

  _dart_SDL_GetRenderDrawBlendMode _SDL_GetRenderDrawBlendMode;

  /// \brief Clear the current rendering target with the drawing color
  ///
  /// This function clears the entire rendering target, ignoring the viewport and
  /// the clip rectangle.
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderClear(
    ffi.Pointer<SDL_Renderer> renderer,
  ) {
    _SDL_RenderClear ??=
        _dylib.lookupFunction<_c_SDL_RenderClear, _dart_SDL_RenderClear>(
            'SDL_RenderClear');
    return _SDL_RenderClear(
      renderer,
    );
  }

  _dart_SDL_RenderClear _SDL_RenderClear;

  /// \brief Draw a point on the current rendering target.
  ///
  /// \param renderer The renderer which should draw a point.
  /// \param x The x coordinate of the point.
  /// \param y The y coordinate of the point.
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderDrawPoint(
    ffi.Pointer<SDL_Renderer> renderer,
    int x,
    int y,
  ) {
    _SDL_RenderDrawPoint ??= _dylib.lookupFunction<_c_SDL_RenderDrawPoint,
        _dart_SDL_RenderDrawPoint>('SDL_RenderDrawPoint');
    return _SDL_RenderDrawPoint(
      renderer,
      x,
      y,
    );
  }

  _dart_SDL_RenderDrawPoint _SDL_RenderDrawPoint;

  /// \brief Draw multiple points on the current rendering target.
  ///
  /// \param renderer The renderer which should draw multiple points.
  /// \param points The points to draw
  /// \param count The number of points to draw
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderDrawPoints(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Point> points,
    int count,
  ) {
    _SDL_RenderDrawPoints ??= _dylib.lookupFunction<_c_SDL_RenderDrawPoints,
        _dart_SDL_RenderDrawPoints>('SDL_RenderDrawPoints');
    return _SDL_RenderDrawPoints(
      renderer,
      points,
      count,
    );
  }

  _dart_SDL_RenderDrawPoints _SDL_RenderDrawPoints;

  /// \brief Draw a line on the current rendering target.
  ///
  /// \param renderer The renderer which should draw a line.
  /// \param x1 The x coordinate of the start point.
  /// \param y1 The y coordinate of the start point.
  /// \param x2 The x coordinate of the end point.
  /// \param y2 The y coordinate of the end point.
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderDrawLine(
    ffi.Pointer<SDL_Renderer> renderer,
    int x1,
    int y1,
    int x2,
    int y2,
  ) {
    _SDL_RenderDrawLine ??=
        _dylib.lookupFunction<_c_SDL_RenderDrawLine, _dart_SDL_RenderDrawLine>(
            'SDL_RenderDrawLine');
    return _SDL_RenderDrawLine(
      renderer,
      x1,
      y1,
      x2,
      y2,
    );
  }

  _dart_SDL_RenderDrawLine _SDL_RenderDrawLine;

  /// \brief Draw a series of connected lines on the current rendering target.
  ///
  /// \param renderer The renderer which should draw multiple lines.
  /// \param points The points along the lines
  /// \param count The number of points, drawing count-1 lines
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderDrawLines(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Point> points,
    int count,
  ) {
    _SDL_RenderDrawLines ??= _dylib.lookupFunction<_c_SDL_RenderDrawLines,
        _dart_SDL_RenderDrawLines>('SDL_RenderDrawLines');
    return _SDL_RenderDrawLines(
      renderer,
      points,
      count,
    );
  }

  _dart_SDL_RenderDrawLines _SDL_RenderDrawLines;

  /// \brief Draw a rectangle on the current rendering target.
  ///
  /// \param renderer The renderer which should draw a rectangle.
  /// \param rect A pointer to the destination rectangle, or NULL to outline the entire rendering target.
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderDrawRect(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Rect> rect,
  ) {
    _SDL_RenderDrawRect ??=
        _dylib.lookupFunction<_c_SDL_RenderDrawRect, _dart_SDL_RenderDrawRect>(
            'SDL_RenderDrawRect');
    return _SDL_RenderDrawRect(
      renderer,
      rect,
    );
  }

  _dart_SDL_RenderDrawRect _SDL_RenderDrawRect;

  /// \brief Draw some number of rectangles on the current rendering target.
  ///
  /// \param renderer The renderer which should draw multiple rectangles.
  /// \param rects A pointer to an array of destination rectangles.
  /// \param count The number of rectangles.
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderDrawRects(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Rect> rects,
    int count,
  ) {
    _SDL_RenderDrawRects ??= _dylib.lookupFunction<_c_SDL_RenderDrawRects,
        _dart_SDL_RenderDrawRects>('SDL_RenderDrawRects');
    return _SDL_RenderDrawRects(
      renderer,
      rects,
      count,
    );
  }

  _dart_SDL_RenderDrawRects _SDL_RenderDrawRects;

  /// \brief Fill a rectangle on the current rendering target with the drawing color.
  ///
  /// \param renderer The renderer which should fill a rectangle.
  /// \param rect A pointer to the destination rectangle, or NULL for the entire
  /// rendering target.
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderFillRect(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Rect> rect,
  ) {
    _SDL_RenderFillRect ??=
        _dylib.lookupFunction<_c_SDL_RenderFillRect, _dart_SDL_RenderFillRect>(
            'SDL_RenderFillRect');
    return _SDL_RenderFillRect(
      renderer,
      rect,
    );
  }

  _dart_SDL_RenderFillRect _SDL_RenderFillRect;

  /// \brief Fill some number of rectangles on the current rendering target with the drawing color.
  ///
  /// \param renderer The renderer which should fill multiple rectangles.
  /// \param rects A pointer to an array of destination rectangles.
  /// \param count The number of rectangles.
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderFillRects(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Rect> rects,
    int count,
  ) {
    _SDL_RenderFillRects ??= _dylib.lookupFunction<_c_SDL_RenderFillRects,
        _dart_SDL_RenderFillRects>('SDL_RenderFillRects');
    return _SDL_RenderFillRects(
      renderer,
      rects,
      count,
    );
  }

  _dart_SDL_RenderFillRects _SDL_RenderFillRects;

  /// \brief Copy a portion of the texture to the current rendering target.
  ///
  /// \param renderer The renderer which should copy parts of a texture.
  /// \param texture The source texture.
  /// \param srcrect   A pointer to the source rectangle, or NULL for the entire
  /// texture.
  /// \param dstrect   A pointer to the destination rectangle, or NULL for the
  /// entire rendering target.
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderCopy(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Texture> texture,
    ffi.Pointer<SDL_Rect> srcrect,
    ffi.Pointer<SDL_Rect> dstrect,
  ) {
    _SDL_RenderCopy ??=
        _dylib.lookupFunction<_c_SDL_RenderCopy, _dart_SDL_RenderCopy>(
            'SDL_RenderCopy');
    return _SDL_RenderCopy(
      renderer,
      texture,
      srcrect,
      dstrect,
    );
  }

  _dart_SDL_RenderCopy _SDL_RenderCopy;

  /// \brief Copy a portion of the source texture to the current rendering target, rotating it by angle around the given center
  ///
  /// \param renderer The renderer which should copy parts of a texture.
  /// \param texture The source texture.
  /// \param srcrect   A pointer to the source rectangle, or NULL for the entire
  /// texture.
  /// \param dstrect   A pointer to the destination rectangle, or NULL for the
  /// entire rendering target.
  /// \param angle    An angle in degrees that indicates the rotation that will be applied to dstrect, rotating it in a clockwise direction
  /// \param center   A pointer to a point indicating the point around which dstrect will be rotated (if NULL, rotation will be done around dstrect.w/2, dstrect.h/2).
  /// \param flip     An SDL_RendererFlip value stating which flipping actions should be performed on the texture
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderCopyEx(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Texture> texture,
    ffi.Pointer<SDL_Rect> srcrect,
    ffi.Pointer<SDL_Rect> dstrect,
    double angle,
    ffi.Pointer<SDL_Point> center,
    int flip,
  ) {
    _SDL_RenderCopyEx ??=
        _dylib.lookupFunction<_c_SDL_RenderCopyEx, _dart_SDL_RenderCopyEx>(
            'SDL_RenderCopyEx');
    return _SDL_RenderCopyEx(
      renderer,
      texture,
      srcrect,
      dstrect,
      angle,
      center,
      flip,
    );
  }

  _dart_SDL_RenderCopyEx _SDL_RenderCopyEx;

  /// \brief Draw a point on the current rendering target.
  ///
  /// \param renderer The renderer which should draw a point.
  /// \param x The x coordinate of the point.
  /// \param y The y coordinate of the point.
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderDrawPointF(
    ffi.Pointer<SDL_Renderer> renderer,
    double x,
    double y,
  ) {
    _SDL_RenderDrawPointF ??= _dylib.lookupFunction<_c_SDL_RenderDrawPointF,
        _dart_SDL_RenderDrawPointF>('SDL_RenderDrawPointF');
    return _SDL_RenderDrawPointF(
      renderer,
      x,
      y,
    );
  }

  _dart_SDL_RenderDrawPointF _SDL_RenderDrawPointF;

  /// \brief Draw multiple points on the current rendering target.
  ///
  /// \param renderer The renderer which should draw multiple points.
  /// \param points The points to draw
  /// \param count The number of points to draw
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderDrawPointsF(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_FPoint> points,
    int count,
  ) {
    _SDL_RenderDrawPointsF ??= _dylib.lookupFunction<_c_SDL_RenderDrawPointsF,
        _dart_SDL_RenderDrawPointsF>('SDL_RenderDrawPointsF');
    return _SDL_RenderDrawPointsF(
      renderer,
      points,
      count,
    );
  }

  _dart_SDL_RenderDrawPointsF _SDL_RenderDrawPointsF;

  /// \brief Draw a line on the current rendering target.
  ///
  /// \param renderer The renderer which should draw a line.
  /// \param x1 The x coordinate of the start point.
  /// \param y1 The y coordinate of the start point.
  /// \param x2 The x coordinate of the end point.
  /// \param y2 The y coordinate of the end point.
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderDrawLineF(
    ffi.Pointer<SDL_Renderer> renderer,
    double x1,
    double y1,
    double x2,
    double y2,
  ) {
    _SDL_RenderDrawLineF ??= _dylib.lookupFunction<_c_SDL_RenderDrawLineF,
        _dart_SDL_RenderDrawLineF>('SDL_RenderDrawLineF');
    return _SDL_RenderDrawLineF(
      renderer,
      x1,
      y1,
      x2,
      y2,
    );
  }

  _dart_SDL_RenderDrawLineF _SDL_RenderDrawLineF;

  /// \brief Draw a series of connected lines on the current rendering target.
  ///
  /// \param renderer The renderer which should draw multiple lines.
  /// \param points The points along the lines
  /// \param count The number of points, drawing count-1 lines
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderDrawLinesF(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_FPoint> points,
    int count,
  ) {
    _SDL_RenderDrawLinesF ??= _dylib.lookupFunction<_c_SDL_RenderDrawLinesF,
        _dart_SDL_RenderDrawLinesF>('SDL_RenderDrawLinesF');
    return _SDL_RenderDrawLinesF(
      renderer,
      points,
      count,
    );
  }

  _dart_SDL_RenderDrawLinesF _SDL_RenderDrawLinesF;

  /// \brief Draw a rectangle on the current rendering target.
  ///
  /// \param renderer The renderer which should draw a rectangle.
  /// \param rect A pointer to the destination rectangle, or NULL to outline the entire rendering target.
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderDrawRectF(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_FRect> rect,
  ) {
    _SDL_RenderDrawRectF ??= _dylib.lookupFunction<_c_SDL_RenderDrawRectF,
        _dart_SDL_RenderDrawRectF>('SDL_RenderDrawRectF');
    return _SDL_RenderDrawRectF(
      renderer,
      rect,
    );
  }

  _dart_SDL_RenderDrawRectF _SDL_RenderDrawRectF;

  /// \brief Draw some number of rectangles on the current rendering target.
  ///
  /// \param renderer The renderer which should draw multiple rectangles.
  /// \param rects A pointer to an array of destination rectangles.
  /// \param count The number of rectangles.
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderDrawRectsF(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_FRect> rects,
    int count,
  ) {
    _SDL_RenderDrawRectsF ??= _dylib.lookupFunction<_c_SDL_RenderDrawRectsF,
        _dart_SDL_RenderDrawRectsF>('SDL_RenderDrawRectsF');
    return _SDL_RenderDrawRectsF(
      renderer,
      rects,
      count,
    );
  }

  _dart_SDL_RenderDrawRectsF _SDL_RenderDrawRectsF;

  /// \brief Fill a rectangle on the current rendering target with the drawing color.
  ///
  /// \param renderer The renderer which should fill a rectangle.
  /// \param rect A pointer to the destination rectangle, or NULL for the entire
  /// rendering target.
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderFillRectF(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_FRect> rect,
  ) {
    _SDL_RenderFillRectF ??= _dylib.lookupFunction<_c_SDL_RenderFillRectF,
        _dart_SDL_RenderFillRectF>('SDL_RenderFillRectF');
    return _SDL_RenderFillRectF(
      renderer,
      rect,
    );
  }

  _dart_SDL_RenderFillRectF _SDL_RenderFillRectF;

  /// \brief Fill some number of rectangles on the current rendering target with the drawing color.
  ///
  /// \param renderer The renderer which should fill multiple rectangles.
  /// \param rects A pointer to an array of destination rectangles.
  /// \param count The number of rectangles.
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderFillRectsF(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_FRect> rects,
    int count,
  ) {
    _SDL_RenderFillRectsF ??= _dylib.lookupFunction<_c_SDL_RenderFillRectsF,
        _dart_SDL_RenderFillRectsF>('SDL_RenderFillRectsF');
    return _SDL_RenderFillRectsF(
      renderer,
      rects,
      count,
    );
  }

  _dart_SDL_RenderFillRectsF _SDL_RenderFillRectsF;

  /// \brief Copy a portion of the texture to the current rendering target.
  ///
  /// \param renderer The renderer which should copy parts of a texture.
  /// \param texture The source texture.
  /// \param srcrect   A pointer to the source rectangle, or NULL for the entire
  /// texture.
  /// \param dstrect   A pointer to the destination rectangle, or NULL for the
  /// entire rendering target.
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderCopyF(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Texture> texture,
    ffi.Pointer<SDL_Rect> srcrect,
    ffi.Pointer<SDL_FRect> dstrect,
  ) {
    _SDL_RenderCopyF ??=
        _dylib.lookupFunction<_c_SDL_RenderCopyF, _dart_SDL_RenderCopyF>(
            'SDL_RenderCopyF');
    return _SDL_RenderCopyF(
      renderer,
      texture,
      srcrect,
      dstrect,
    );
  }

  _dart_SDL_RenderCopyF _SDL_RenderCopyF;

  /// \brief Copy a portion of the source texture to the current rendering target, rotating it by angle around the given center
  ///
  /// \param renderer The renderer which should copy parts of a texture.
  /// \param texture The source texture.
  /// \param srcrect   A pointer to the source rectangle, or NULL for the entire
  /// texture.
  /// \param dstrect   A pointer to the destination rectangle, or NULL for the
  /// entire rendering target.
  /// \param angle    An angle in degrees that indicates the rotation that will be applied to dstrect, rotating it in a clockwise direction
  /// \param center   A pointer to a point indicating the point around which dstrect will be rotated (if NULL, rotation will be done around dstrect.w/2, dstrect.h/2).
  /// \param flip     An SDL_RendererFlip value stating which flipping actions should be performed on the texture
  ///
  /// \return 0 on success, or -1 on error
  int SDL_RenderCopyExF(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Texture> texture,
    ffi.Pointer<SDL_Rect> srcrect,
    ffi.Pointer<SDL_FRect> dstrect,
    double angle,
    ffi.Pointer<SDL_FPoint> center,
    int flip,
  ) {
    _SDL_RenderCopyExF ??=
        _dylib.lookupFunction<_c_SDL_RenderCopyExF, _dart_SDL_RenderCopyExF>(
            'SDL_RenderCopyExF');
    return _SDL_RenderCopyExF(
      renderer,
      texture,
      srcrect,
      dstrect,
      angle,
      center,
      flip,
    );
  }

  _dart_SDL_RenderCopyExF _SDL_RenderCopyExF;

  /// \brief Read pixels from the current rendering target.
  ///
  /// \param renderer The renderer from which pixels should be read.
  /// \param rect   A pointer to the rectangle to read, or NULL for the entire
  /// render target.
  /// \param format The desired format of the pixel data, or 0 to use the format
  /// of the rendering target
  /// \param pixels A pointer to be filled in with the pixel data
  /// \param pitch  The pitch of the pixels parameter.
  ///
  /// \return 0 on success, or -1 if pixel reading is not supported.
  ///
  /// \warning This is a very slow operation, and should not be used frequently.
  int SDL_RenderReadPixels(
    ffi.Pointer<SDL_Renderer> renderer,
    ffi.Pointer<SDL_Rect> rect,
    int format,
    ffi.Pointer<ffi.Void> pixels,
    int pitch,
  ) {
    _SDL_RenderReadPixels ??= _dylib.lookupFunction<_c_SDL_RenderReadPixels,
        _dart_SDL_RenderReadPixels>('SDL_RenderReadPixels');
    return _SDL_RenderReadPixels(
      renderer,
      rect,
      format,
      pixels,
      pitch,
    );
  }

  _dart_SDL_RenderReadPixels _SDL_RenderReadPixels;

  /// \brief Update the screen with rendering performed.
  void SDL_RenderPresent(
    ffi.Pointer<SDL_Renderer> renderer,
  ) {
    _SDL_RenderPresent ??=
        _dylib.lookupFunction<_c_SDL_RenderPresent, _dart_SDL_RenderPresent>(
            'SDL_RenderPresent');
    return _SDL_RenderPresent(
      renderer,
    );
  }

  _dart_SDL_RenderPresent _SDL_RenderPresent;

  /// \brief Destroy the specified texture.
  ///
  /// \sa SDL_CreateTexture()
  /// \sa SDL_CreateTextureFromSurface()
  void SDL_DestroyTexture(
    ffi.Pointer<SDL_Texture> texture,
  ) {
    _SDL_DestroyTexture ??=
        _dylib.lookupFunction<_c_SDL_DestroyTexture, _dart_SDL_DestroyTexture>(
            'SDL_DestroyTexture');
    return _SDL_DestroyTexture(
      texture,
    );
  }

  _dart_SDL_DestroyTexture _SDL_DestroyTexture;

  /// \brief Destroy the rendering context for a window and free associated
  /// textures.
  ///
  /// \sa SDL_CreateRenderer()
  void SDL_DestroyRenderer(
    ffi.Pointer<SDL_Renderer> renderer,
  ) {
    _SDL_DestroyRenderer ??= _dylib.lookupFunction<_c_SDL_DestroyRenderer,
        _dart_SDL_DestroyRenderer>('SDL_DestroyRenderer');
    return _SDL_DestroyRenderer(
      renderer,
    );
  }

  _dart_SDL_DestroyRenderer _SDL_DestroyRenderer;

  /// \brief Force the rendering context to flush any pending commands to the
  /// underlying rendering API.
  ///
  /// You do not need to (and in fact, shouldn't) call this function unless
  /// you are planning to call into OpenGL/Direct3D/Metal/whatever directly
  /// in addition to using an SDL_Renderer.
  ///
  /// This is for a very-specific case: if you are using SDL's render API,
  /// you asked for a specific renderer backend (OpenGL, Direct3D, etc),
  /// you set SDL_HINT_RENDER_BATCHING to "1", and you plan to make
  /// OpenGL/D3D/whatever calls in addition to SDL render API calls. If all of
  /// this applies, you should call SDL_RenderFlush() between calls to SDL's
  /// render API and the low-level API you're using in cooperation.
  ///
  /// In all other cases, you can ignore this function. This is only here to
  /// get maximum performance out of a specific situation. In all other cases,
  /// SDL will do the right thing, perhaps at a performance loss.
  ///
  /// This function is first available in SDL 2.0.10, and is not needed in
  /// 2.0.9 and earlier, as earlier versions did not queue rendering commands
  /// at all, instead flushing them to the OS immediately.
  int SDL_RenderFlush(
    ffi.Pointer<SDL_Renderer> renderer,
  ) {
    _SDL_RenderFlush ??=
        _dylib.lookupFunction<_c_SDL_RenderFlush, _dart_SDL_RenderFlush>(
            'SDL_RenderFlush');
    return _SDL_RenderFlush(
      renderer,
    );
  }

  _dart_SDL_RenderFlush _SDL_RenderFlush;

  /// \brief Bind the texture to the current OpenGL/ES/ES2 context for use with
  /// OpenGL instructions.
  ///
  /// \param texture  The SDL texture to bind
  /// \param texw     A pointer to a float that will be filled with the texture width
  /// \param texh     A pointer to a float that will be filled with the texture height
  ///
  /// \return 0 on success, or -1 if the operation is not supported
  int SDL_GL_BindTexture(
    ffi.Pointer<SDL_Texture> texture,
    ffi.Pointer<ffi.Float> texw,
    ffi.Pointer<ffi.Float> texh,
  ) {
    _SDL_GL_BindTexture ??=
        _dylib.lookupFunction<_c_SDL_GL_BindTexture, _dart_SDL_GL_BindTexture>(
            'SDL_GL_BindTexture');
    return _SDL_GL_BindTexture(
      texture,
      texw,
      texh,
    );
  }

  _dart_SDL_GL_BindTexture _SDL_GL_BindTexture;

  /// \brief Unbind a texture from the current OpenGL/ES/ES2 context.
  ///
  /// \param texture  The SDL texture to unbind
  ///
  /// \return 0 on success, or -1 if the operation is not supported
  int SDL_GL_UnbindTexture(
    ffi.Pointer<SDL_Texture> texture,
  ) {
    _SDL_GL_UnbindTexture ??= _dylib.lookupFunction<_c_SDL_GL_UnbindTexture,
        _dart_SDL_GL_UnbindTexture>('SDL_GL_UnbindTexture');
    return _SDL_GL_UnbindTexture(
      texture,
    );
  }

  _dart_SDL_GL_UnbindTexture _SDL_GL_UnbindTexture;

  /// \brief Get the CAMetalLayer associated with the given Metal renderer
  ///
  /// \param renderer The renderer to query
  ///
  /// \return CAMetalLayer* on success, or NULL if the renderer isn't a Metal renderer
  ///
  /// \sa SDL_RenderGetMetalCommandEncoder()
  ffi.Pointer<ffi.Void> SDL_RenderGetMetalLayer(
    ffi.Pointer<SDL_Renderer> renderer,
  ) {
    _SDL_RenderGetMetalLayer ??= _dylib.lookupFunction<
        _c_SDL_RenderGetMetalLayer,
        _dart_SDL_RenderGetMetalLayer>('SDL_RenderGetMetalLayer');
    return _SDL_RenderGetMetalLayer(
      renderer,
    );
  }

  _dart_SDL_RenderGetMetalLayer _SDL_RenderGetMetalLayer;

  /// \brief Get the Metal command encoder for the current frame
  ///
  /// \param renderer The renderer to query
  ///
  /// \return id<MTLRenderCommandEncoder> on success, or NULL if the renderer isn't a Metal renderer
  ///
  /// \sa SDL_RenderGetMetalLayer()
  ffi.Pointer<ffi.Void> SDL_RenderGetMetalCommandEncoder(
    ffi.Pointer<SDL_Renderer> renderer,
  ) {
    _SDL_RenderGetMetalCommandEncoder ??= _dylib.lookupFunction<
            _c_SDL_RenderGetMetalCommandEncoder,
            _dart_SDL_RenderGetMetalCommandEncoder>(
        'SDL_RenderGetMetalCommandEncoder');
    return _SDL_RenderGetMetalCommandEncoder(
      renderer,
    );
  }

  _dart_SDL_RenderGetMetalCommandEncoder _SDL_RenderGetMetalCommandEncoder;

  /// \brief Count the number of sensors attached to the system right now
  int SDL_NumSensors() {
    _SDL_NumSensors ??=
        _dylib.lookupFunction<_c_SDL_NumSensors, _dart_SDL_NumSensors>(
            'SDL_NumSensors');
    return _SDL_NumSensors();
  }

  _dart_SDL_NumSensors _SDL_NumSensors;

  /// \brief Get the implementation dependent name of a sensor.
  ///
  /// This can be called before any sensors are opened.
  ///
  /// \return The sensor name, or NULL if device_index is out of range.
  ffi.Pointer<ffi.Int8> SDL_SensorGetDeviceName(
    int device_index,
  ) {
    _SDL_SensorGetDeviceName ??= _dylib.lookupFunction<
        _c_SDL_SensorGetDeviceName,
        _dart_SDL_SensorGetDeviceName>('SDL_SensorGetDeviceName');
    return _SDL_SensorGetDeviceName(
      device_index,
    );
  }

  _dart_SDL_SensorGetDeviceName _SDL_SensorGetDeviceName;

  /// \brief Get the type of a sensor.
  ///
  /// This can be called before any sensors are opened.
  ///
  /// \return The sensor type, or SDL_SENSOR_INVALID if device_index is out of range.
  int SDL_SensorGetDeviceType(
    int device_index,
  ) {
    _SDL_SensorGetDeviceType ??= _dylib.lookupFunction<
        _c_SDL_SensorGetDeviceType,
        _dart_SDL_SensorGetDeviceType>('SDL_SensorGetDeviceType');
    return _SDL_SensorGetDeviceType(
      device_index,
    );
  }

  _dart_SDL_SensorGetDeviceType _SDL_SensorGetDeviceType;

  /// \brief Get the platform dependent type of a sensor.
  ///
  /// This can be called before any sensors are opened.
  ///
  /// \return The sensor platform dependent type, or -1 if device_index is out of range.
  int SDL_SensorGetDeviceNonPortableType(
    int device_index,
  ) {
    _SDL_SensorGetDeviceNonPortableType ??= _dylib.lookupFunction<
            _c_SDL_SensorGetDeviceNonPortableType,
            _dart_SDL_SensorGetDeviceNonPortableType>(
        'SDL_SensorGetDeviceNonPortableType');
    return _SDL_SensorGetDeviceNonPortableType(
      device_index,
    );
  }

  _dart_SDL_SensorGetDeviceNonPortableType _SDL_SensorGetDeviceNonPortableType;

  /// \brief Get the instance ID of a sensor.
  ///
  /// This can be called before any sensors are opened.
  ///
  /// \return The sensor instance ID, or -1 if device_index is out of range.
  int SDL_SensorGetDeviceInstanceID(
    int device_index,
  ) {
    _SDL_SensorGetDeviceInstanceID ??= _dylib.lookupFunction<
        _c_SDL_SensorGetDeviceInstanceID,
        _dart_SDL_SensorGetDeviceInstanceID>('SDL_SensorGetDeviceInstanceID');
    return _SDL_SensorGetDeviceInstanceID(
      device_index,
    );
  }

  _dart_SDL_SensorGetDeviceInstanceID _SDL_SensorGetDeviceInstanceID;

  /// \brief Open a sensor for use.
  ///
  /// The index passed as an argument refers to the N'th sensor on the system.
  ///
  /// \return A sensor identifier, or NULL if an error occurred.
  ffi.Pointer<_SDL_Sensor> SDL_SensorOpen(
    int device_index,
  ) {
    _SDL_SensorOpen ??=
        _dylib.lookupFunction<_c_SDL_SensorOpen, _dart_SDL_SensorOpen>(
            'SDL_SensorOpen');
    return _SDL_SensorOpen(
      device_index,
    );
  }

  _dart_SDL_SensorOpen _SDL_SensorOpen;

  /// Return the SDL_Sensor associated with an instance id.
  ffi.Pointer<_SDL_Sensor> SDL_SensorFromInstanceID(
    int instance_id,
  ) {
    _SDL_SensorFromInstanceID ??= _dylib.lookupFunction<
        _c_SDL_SensorFromInstanceID,
        _dart_SDL_SensorFromInstanceID>('SDL_SensorFromInstanceID');
    return _SDL_SensorFromInstanceID(
      instance_id,
    );
  }

  _dart_SDL_SensorFromInstanceID _SDL_SensorFromInstanceID;

  /// \brief Get the implementation dependent name of a sensor.
  ///
  /// \return The sensor name, or NULL if the sensor is NULL.
  ffi.Pointer<ffi.Int8> SDL_SensorGetName(
    ffi.Pointer<_SDL_Sensor> sensor,
  ) {
    _SDL_SensorGetName ??=
        _dylib.lookupFunction<_c_SDL_SensorGetName, _dart_SDL_SensorGetName>(
            'SDL_SensorGetName');
    return _SDL_SensorGetName(
      sensor,
    );
  }

  _dart_SDL_SensorGetName _SDL_SensorGetName;

  /// \brief Get the type of a sensor.
  ///
  /// This can be called before any sensors are opened.
  ///
  /// \return The sensor type, or SDL_SENSOR_INVALID if the sensor is NULL.
  int SDL_SensorGetType(
    ffi.Pointer<_SDL_Sensor> sensor,
  ) {
    _SDL_SensorGetType ??=
        _dylib.lookupFunction<_c_SDL_SensorGetType, _dart_SDL_SensorGetType>(
            'SDL_SensorGetType');
    return _SDL_SensorGetType(
      sensor,
    );
  }

  _dart_SDL_SensorGetType _SDL_SensorGetType;

  /// \brief Get the platform dependent type of a sensor.
  ///
  /// This can be called before any sensors are opened.
  ///
  /// \return The sensor platform dependent type, or -1 if the sensor is NULL.
  int SDL_SensorGetNonPortableType(
    ffi.Pointer<_SDL_Sensor> sensor,
  ) {
    _SDL_SensorGetNonPortableType ??= _dylib.lookupFunction<
        _c_SDL_SensorGetNonPortableType,
        _dart_SDL_SensorGetNonPortableType>('SDL_SensorGetNonPortableType');
    return _SDL_SensorGetNonPortableType(
      sensor,
    );
  }

  _dart_SDL_SensorGetNonPortableType _SDL_SensorGetNonPortableType;

  /// \brief Get the instance ID of a sensor.
  ///
  /// This can be called before any sensors are opened.
  ///
  /// \return The sensor instance ID, or -1 if the sensor is NULL.
  int SDL_SensorGetInstanceID(
    ffi.Pointer<_SDL_Sensor> sensor,
  ) {
    _SDL_SensorGetInstanceID ??= _dylib.lookupFunction<
        _c_SDL_SensorGetInstanceID,
        _dart_SDL_SensorGetInstanceID>('SDL_SensorGetInstanceID');
    return _SDL_SensorGetInstanceID(
      sensor,
    );
  }

  _dart_SDL_SensorGetInstanceID _SDL_SensorGetInstanceID;

  /// Get the current state of an opened sensor.
  ///
  /// The number of values and interpretation of the data is sensor dependent.
  ///
  /// \param sensor The sensor to query
  /// \param data A pointer filled with the current sensor state
  /// \param num_values The number of values to write to data
  ///
  /// \return 0 or -1 if an error occurred.
  int SDL_SensorGetData(
    ffi.Pointer<_SDL_Sensor> sensor,
    ffi.Pointer<ffi.Float> data,
    int num_values,
  ) {
    _SDL_SensorGetData ??=
        _dylib.lookupFunction<_c_SDL_SensorGetData, _dart_SDL_SensorGetData>(
            'SDL_SensorGetData');
    return _SDL_SensorGetData(
      sensor,
      data,
      num_values,
    );
  }

  _dart_SDL_SensorGetData _SDL_SensorGetData;

  /// Close a sensor previously opened with SDL_SensorOpen()
  void SDL_SensorClose(
    ffi.Pointer<_SDL_Sensor> sensor,
  ) {
    _SDL_SensorClose ??=
        _dylib.lookupFunction<_c_SDL_SensorClose, _dart_SDL_SensorClose>(
            'SDL_SensorClose');
    return _SDL_SensorClose(
      sensor,
    );
  }

  _dart_SDL_SensorClose _SDL_SensorClose;

  /// Update the current state of the open sensors.
  ///
  /// This is called automatically by the event loop if sensor events are enabled.
  ///
  /// This needs to be called from the thread that initialized the sensor subsystem.
  void SDL_SensorUpdate() {
    _SDL_SensorUpdate ??=
        _dylib.lookupFunction<_c_SDL_SensorUpdate, _dart_SDL_SensorUpdate>(
            'SDL_SensorUpdate');
    return _SDL_SensorUpdate();
  }

  _dart_SDL_SensorUpdate _SDL_SensorUpdate;

  /// \brief Create a window that can be shaped with the specified position, dimensions, and flags.
  ///
  /// \param title The title of the window, in UTF-8 encoding.
  /// \param x     The x position of the window, ::SDL_WINDOWPOS_CENTERED, or
  /// ::SDL_WINDOWPOS_UNDEFINED.
  /// \param y     The y position of the window, ::SDL_WINDOWPOS_CENTERED, or
  /// ::SDL_WINDOWPOS_UNDEFINED.
  /// \param w     The width of the window.
  /// \param h     The height of the window.
  /// \param flags The flags for the window, a mask of SDL_WINDOW_BORDERLESS with any of the following:
  /// ::SDL_WINDOW_OPENGL,     ::SDL_WINDOW_INPUT_GRABBED,
  /// ::SDL_WINDOW_HIDDEN,     ::SDL_WINDOW_RESIZABLE,
  /// ::SDL_WINDOW_MAXIMIZED,  ::SDL_WINDOW_MINIMIZED,
  /// ::SDL_WINDOW_BORDERLESS is always set, and ::SDL_WINDOW_FULLSCREEN is always unset.
  ///
  /// \return The window created, or NULL if window creation failed.
  ///
  /// \sa SDL_DestroyWindow()
  ffi.Pointer<SDL_Window> SDL_CreateShapedWindow(
    ffi.Pointer<ffi.Int8> title,
    int x,
    int y,
    int w,
    int h,
    int flags,
  ) {
    _SDL_CreateShapedWindow ??= _dylib.lookupFunction<_c_SDL_CreateShapedWindow,
        _dart_SDL_CreateShapedWindow>('SDL_CreateShapedWindow');
    return _SDL_CreateShapedWindow(
      title,
      x,
      y,
      w,
      h,
      flags,
    );
  }

  _dart_SDL_CreateShapedWindow _SDL_CreateShapedWindow;

  /// \brief Return whether the given window is a shaped window.
  ///
  /// \param window The window to query for being shaped.
  ///
  /// \return SDL_TRUE if the window is a window that can be shaped, SDL_FALSE if the window is unshaped or NULL.
  ///
  /// \sa SDL_CreateShapedWindow
  int SDL_IsShapedWindow(
    ffi.Pointer<SDL_Window> window,
  ) {
    _SDL_IsShapedWindow ??=
        _dylib.lookupFunction<_c_SDL_IsShapedWindow, _dart_SDL_IsShapedWindow>(
            'SDL_IsShapedWindow');
    return _SDL_IsShapedWindow(
      window,
    );
  }

  _dart_SDL_IsShapedWindow _SDL_IsShapedWindow;

  /// \brief Set the shape and parameters of a shaped window.
  ///
  /// \param window The shaped window whose parameters should be set.
  /// \param shape A surface encoding the desired shape for the window.
  /// \param shape_mode The parameters to set for the shaped window.
  ///
  /// \return 0 on success, SDL_INVALID_SHAPE_ARGUMENT on an invalid shape argument, or SDL_NONSHAPEABLE_WINDOW
  /// if the SDL_Window given does not reference a valid shaped window.
  ///
  /// \sa SDL_WindowShapeMode
  /// \sa SDL_GetShapedWindowMode.
  int SDL_SetWindowShape(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<SDL_Surface> shape,
    ffi.Pointer<SDL_WindowShapeMode> shape_mode,
  ) {
    _SDL_SetWindowShape ??=
        _dylib.lookupFunction<_c_SDL_SetWindowShape, _dart_SDL_SetWindowShape>(
            'SDL_SetWindowShape');
    return _SDL_SetWindowShape(
      window,
      shape,
      shape_mode,
    );
  }

  _dart_SDL_SetWindowShape _SDL_SetWindowShape;

  /// \brief Get the shape parameters of a shaped window.
  ///
  /// \param window The shaped window whose parameters should be retrieved.
  /// \param shape_mode An empty shape-mode structure to fill, or NULL to check whether the window has a shape.
  ///
  /// \return 0 if the window has a shape and, provided shape_mode was not NULL, shape_mode has been filled with the mode
  /// data, SDL_NONSHAPEABLE_WINDOW if the SDL_Window given is not a shaped window, or SDL_WINDOW_LACKS_SHAPE if
  /// the SDL_Window given is a shapeable window currently lacking a shape.
  ///
  /// \sa SDL_WindowShapeMode
  /// \sa SDL_SetWindowShape
  int SDL_GetShapedWindowMode(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<SDL_WindowShapeMode> shape_mode,
  ) {
    _SDL_GetShapedWindowMode ??= _dylib.lookupFunction<
        _c_SDL_GetShapedWindowMode,
        _dart_SDL_GetShapedWindowMode>('SDL_GetShapedWindowMode');
    return _SDL_GetShapedWindowMode(
      window,
      shape_mode,
    );
  }

  _dart_SDL_GetShapedWindowMode _SDL_GetShapedWindowMode;

  /// \brief Sets the UNIX nice value for a thread, using setpriority() if possible, and RealtimeKit if available.
  ///
  /// \return 0 on success, or -1 on error.
  int SDL_LinuxSetThreadPriority(
    int threadID,
    int priority,
  ) {
    _SDL_LinuxSetThreadPriority ??= _dylib.lookupFunction<
        _c_SDL_LinuxSetThreadPriority,
        _dart_SDL_LinuxSetThreadPriority>('SDL_LinuxSetThreadPriority');
    return _SDL_LinuxSetThreadPriority(
      threadID,
      priority,
    );
  }

  _dart_SDL_LinuxSetThreadPriority _SDL_LinuxSetThreadPriority;

  /// \brief Return true if the current device is a tablet.
  int SDL_IsTablet() {
    _SDL_IsTablet ??= _dylib
        .lookupFunction<_c_SDL_IsTablet, _dart_SDL_IsTablet>('SDL_IsTablet');
    return _SDL_IsTablet();
  }

  _dart_SDL_IsTablet _SDL_IsTablet;

  void SDL_OnApplicationWillTerminate() {
    _SDL_OnApplicationWillTerminate ??= _dylib.lookupFunction<
        _c_SDL_OnApplicationWillTerminate,
        _dart_SDL_OnApplicationWillTerminate>('SDL_OnApplicationWillTerminate');
    return _SDL_OnApplicationWillTerminate();
  }

  _dart_SDL_OnApplicationWillTerminate _SDL_OnApplicationWillTerminate;

  void SDL_OnApplicationDidReceiveMemoryWarning() {
    _SDL_OnApplicationDidReceiveMemoryWarning ??= _dylib.lookupFunction<
            _c_SDL_OnApplicationDidReceiveMemoryWarning,
            _dart_SDL_OnApplicationDidReceiveMemoryWarning>(
        'SDL_OnApplicationDidReceiveMemoryWarning');
    return _SDL_OnApplicationDidReceiveMemoryWarning();
  }

  _dart_SDL_OnApplicationDidReceiveMemoryWarning
      _SDL_OnApplicationDidReceiveMemoryWarning;

  void SDL_OnApplicationWillResignActive() {
    _SDL_OnApplicationWillResignActive ??= _dylib.lookupFunction<
            _c_SDL_OnApplicationWillResignActive,
            _dart_SDL_OnApplicationWillResignActive>(
        'SDL_OnApplicationWillResignActive');
    return _SDL_OnApplicationWillResignActive();
  }

  _dart_SDL_OnApplicationWillResignActive _SDL_OnApplicationWillResignActive;

  void SDL_OnApplicationDidEnterBackground() {
    _SDL_OnApplicationDidEnterBackground ??= _dylib.lookupFunction<
            _c_SDL_OnApplicationDidEnterBackground,
            _dart_SDL_OnApplicationDidEnterBackground>(
        'SDL_OnApplicationDidEnterBackground');
    return _SDL_OnApplicationDidEnterBackground();
  }

  _dart_SDL_OnApplicationDidEnterBackground
      _SDL_OnApplicationDidEnterBackground;

  void SDL_OnApplicationWillEnterForeground() {
    _SDL_OnApplicationWillEnterForeground ??= _dylib.lookupFunction<
            _c_SDL_OnApplicationWillEnterForeground,
            _dart_SDL_OnApplicationWillEnterForeground>(
        'SDL_OnApplicationWillEnterForeground');
    return _SDL_OnApplicationWillEnterForeground();
  }

  _dart_SDL_OnApplicationWillEnterForeground
      _SDL_OnApplicationWillEnterForeground;

  void SDL_OnApplicationDidBecomeActive() {
    _SDL_OnApplicationDidBecomeActive ??= _dylib.lookupFunction<
            _c_SDL_OnApplicationDidBecomeActive,
            _dart_SDL_OnApplicationDidBecomeActive>(
        'SDL_OnApplicationDidBecomeActive');
    return _SDL_OnApplicationDidBecomeActive();
  }

  _dart_SDL_OnApplicationDidBecomeActive _SDL_OnApplicationDidBecomeActive;

  /// \brief Get the number of milliseconds since the SDL library initialization.
  ///
  /// \note This value wraps if the program runs for more than ~49 days.
  int SDL_GetTicks() {
    _SDL_GetTicks ??= _dylib
        .lookupFunction<_c_SDL_GetTicks, _dart_SDL_GetTicks>('SDL_GetTicks');
    return _SDL_GetTicks();
  }

  _dart_SDL_GetTicks _SDL_GetTicks;

  /// \brief Get the current value of the high resolution counter
  int SDL_GetPerformanceCounter() {
    _SDL_GetPerformanceCounter ??= _dylib.lookupFunction<
        _c_SDL_GetPerformanceCounter,
        _dart_SDL_GetPerformanceCounter>('SDL_GetPerformanceCounter');
    return _SDL_GetPerformanceCounter();
  }

  _dart_SDL_GetPerformanceCounter _SDL_GetPerformanceCounter;

  /// \brief Get the count per second of the high resolution counter
  int SDL_GetPerformanceFrequency() {
    _SDL_GetPerformanceFrequency ??= _dylib.lookupFunction<
        _c_SDL_GetPerformanceFrequency,
        _dart_SDL_GetPerformanceFrequency>('SDL_GetPerformanceFrequency');
    return _SDL_GetPerformanceFrequency();
  }

  _dart_SDL_GetPerformanceFrequency _SDL_GetPerformanceFrequency;

  /// \brief Wait a specified number of milliseconds before returning.
  void SDL_Delay(
    int ms,
  ) {
    _SDL_Delay ??=
        _dylib.lookupFunction<_c_SDL_Delay, _dart_SDL_Delay>('SDL_Delay');
    return _SDL_Delay(
      ms,
    );
  }

  _dart_SDL_Delay _SDL_Delay;

  /// \brief Add a new timer to the pool of timers already running.
  ///
  /// \return A timer ID, or 0 when an error occurs.
  int SDL_AddTimer(
    int interval,
    ffi.Pointer<ffi.NativeFunction<SDL_TimerCallback>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _SDL_AddTimer ??= _dylib
        .lookupFunction<_c_SDL_AddTimer, _dart_SDL_AddTimer>('SDL_AddTimer');
    return _SDL_AddTimer(
      interval,
      callback,
      param,
    );
  }

  _dart_SDL_AddTimer _SDL_AddTimer;

  /// \brief Remove a timer knowing its ID.
  ///
  /// \return A boolean value indicating success or failure.
  ///
  /// \warning It is not safe to remove a timer multiple times.
  int SDL_RemoveTimer(
    int id,
  ) {
    _SDL_RemoveTimer ??=
        _dylib.lookupFunction<_c_SDL_RemoveTimer, _dart_SDL_RemoveTimer>(
            'SDL_RemoveTimer');
    return _SDL_RemoveTimer(
      id,
    );
  }

  _dart_SDL_RemoveTimer _SDL_RemoveTimer;

  /// \brief Get the version of SDL that is linked against your program.
  ///
  /// If you are linking to SDL dynamically, then it is possible that the
  /// current version will be different than the version you compiled against.
  /// This function returns the current version, while SDL_VERSION() is a
  /// macro that tells you what version you compiled with.
  ///
  /// \code
  /// SDL_version compiled;
  /// SDL_version linked;
  ///
  /// SDL_VERSION(&compiled);
  /// SDL_GetVersion(&linked);
  /// printf("We compiled against SDL version %d.%d.%d ...\n",
  /// compiled.major, compiled.minor, compiled.patch);
  /// printf("But we linked against SDL version %d.%d.%d.\n",
  /// linked.major, linked.minor, linked.patch);
  /// \endcode
  ///
  /// This function may be called safely at any time, even before SDL_Init().
  ///
  /// \sa SDL_VERSION
  void SDL_GetVersion(
    ffi.Pointer<SDL_version> ver,
  ) {
    _SDL_GetVersion ??=
        _dylib.lookupFunction<_c_SDL_GetVersion, _dart_SDL_GetVersion>(
            'SDL_GetVersion');
    return _SDL_GetVersion(
      ver,
    );
  }

  _dart_SDL_GetVersion _SDL_GetVersion;

  /// \brief Get the code revision of SDL that is linked against your program.
  ///
  /// Returns an arbitrary string (a hash value) uniquely identifying the
  /// exact revision of the SDL library in use, and is only useful in comparing
  /// against other revisions. It is NOT an incrementing number.
  ffi.Pointer<ffi.Int8> SDL_GetRevision() {
    _SDL_GetRevision ??=
        _dylib.lookupFunction<_c_SDL_GetRevision, _dart_SDL_GetRevision>(
            'SDL_GetRevision');
    return _SDL_GetRevision();
  }

  _dart_SDL_GetRevision _SDL_GetRevision;

  /// \brief Get the revision number of SDL that is linked against your program.
  ///
  /// Returns a number uniquely identifying the exact revision of the SDL
  /// library in use. It is an incrementing number based on commits to
  /// hg.libsdl.org.
  int SDL_GetRevisionNumber() {
    _SDL_GetRevisionNumber ??= _dylib.lookupFunction<_c_SDL_GetRevisionNumber,
        _dart_SDL_GetRevisionNumber>('SDL_GetRevisionNumber');
    return _SDL_GetRevisionNumber();
  }

  _dart_SDL_GetRevisionNumber _SDL_GetRevisionNumber;

  /// This function initializes  the subsystems specified by \c flags
  int SDL_Init(
    int flags,
  ) {
    _SDL_Init ??=
        _dylib.lookupFunction<_c_SDL_Init, _dart_SDL_Init>('SDL_Init');
    return _SDL_Init(
      flags,
    );
  }

  _dart_SDL_Init _SDL_Init;

  /// This function initializes specific SDL subsystems
  ///
  /// Subsystem initialization is ref-counted, you must call
  /// SDL_QuitSubSystem() for each SDL_InitSubSystem() to correctly
  /// shutdown a subsystem manually (or call SDL_Quit() to force shutdown).
  /// If a subsystem is already loaded then this call will
  /// increase the ref-count and return.
  int SDL_InitSubSystem(
    int flags,
  ) {
    _SDL_InitSubSystem ??=
        _dylib.lookupFunction<_c_SDL_InitSubSystem, _dart_SDL_InitSubSystem>(
            'SDL_InitSubSystem');
    return _SDL_InitSubSystem(
      flags,
    );
  }

  _dart_SDL_InitSubSystem _SDL_InitSubSystem;

  /// This function cleans up specific SDL subsystems
  void SDL_QuitSubSystem(
    int flags,
  ) {
    _SDL_QuitSubSystem ??=
        _dylib.lookupFunction<_c_SDL_QuitSubSystem, _dart_SDL_QuitSubSystem>(
            'SDL_QuitSubSystem');
    return _SDL_QuitSubSystem(
      flags,
    );
  }

  _dart_SDL_QuitSubSystem _SDL_QuitSubSystem;

  /// This function returns a mask of the specified subsystems which have
  /// previously been initialized.
  ///
  /// If \c flags is 0, it returns a mask of all initialized subsystems.
  int SDL_WasInit(
    int flags,
  ) {
    _SDL_WasInit ??=
        _dylib.lookupFunction<_c_SDL_WasInit, _dart_SDL_WasInit>('SDL_WasInit');
    return _SDL_WasInit(
      flags,
    );
  }

  _dart_SDL_WasInit _SDL_WasInit;

  /// This function cleans up all initialized subsystems. You should
  /// call it upon all exit conditions.
  void SDL_Quit() {
    _SDL_Quit ??=
        _dylib.lookupFunction<_c_SDL_Quit, _dart_SDL_Quit>('SDL_Quit');
    return _SDL_Quit();
  }

  _dart_SDL_Quit _SDL_Quit;

  ffi.Pointer<SDL_Surface> SDLTest_ImageBlit() {
    _SDLTest_ImageBlit ??=
        _dylib.lookupFunction<_c_SDLTest_ImageBlit, _dart_SDLTest_ImageBlit>(
            'SDLTest_ImageBlit');
    return _SDLTest_ImageBlit();
  }

  _dart_SDLTest_ImageBlit _SDLTest_ImageBlit;

  ffi.Pointer<SDL_Surface> SDLTest_ImageBlitColor() {
    _SDLTest_ImageBlitColor ??= _dylib.lookupFunction<_c_SDLTest_ImageBlitColor,
        _dart_SDLTest_ImageBlitColor>('SDLTest_ImageBlitColor');
    return _SDLTest_ImageBlitColor();
  }

  _dart_SDLTest_ImageBlitColor _SDLTest_ImageBlitColor;

  ffi.Pointer<SDL_Surface> SDLTest_ImageBlitAlpha() {
    _SDLTest_ImageBlitAlpha ??= _dylib.lookupFunction<_c_SDLTest_ImageBlitAlpha,
        _dart_SDLTest_ImageBlitAlpha>('SDLTest_ImageBlitAlpha');
    return _SDLTest_ImageBlitAlpha();
  }

  _dart_SDLTest_ImageBlitAlpha _SDLTest_ImageBlitAlpha;

  ffi.Pointer<SDL_Surface> SDLTest_ImageBlitBlendAdd() {
    _SDLTest_ImageBlitBlendAdd ??= _dylib.lookupFunction<
        _c_SDLTest_ImageBlitBlendAdd,
        _dart_SDLTest_ImageBlitBlendAdd>('SDLTest_ImageBlitBlendAdd');
    return _SDLTest_ImageBlitBlendAdd();
  }

  _dart_SDLTest_ImageBlitBlendAdd _SDLTest_ImageBlitBlendAdd;

  ffi.Pointer<SDL_Surface> SDLTest_ImageBlitBlend() {
    _SDLTest_ImageBlitBlend ??= _dylib.lookupFunction<_c_SDLTest_ImageBlitBlend,
        _dart_SDLTest_ImageBlitBlend>('SDLTest_ImageBlitBlend');
    return _SDLTest_ImageBlitBlend();
  }

  _dart_SDLTest_ImageBlitBlend _SDLTest_ImageBlitBlend;

  ffi.Pointer<SDL_Surface> SDLTest_ImageBlitBlendMod() {
    _SDLTest_ImageBlitBlendMod ??= _dylib.lookupFunction<
        _c_SDLTest_ImageBlitBlendMod,
        _dart_SDLTest_ImageBlitBlendMod>('SDLTest_ImageBlitBlendMod');
    return _SDLTest_ImageBlitBlendMod();
  }

  _dart_SDLTest_ImageBlitBlendMod _SDLTest_ImageBlitBlendMod;

  ffi.Pointer<SDL_Surface> SDLTest_ImageBlitBlendNone() {
    _SDLTest_ImageBlitBlendNone ??= _dylib.lookupFunction<
        _c_SDLTest_ImageBlitBlendNone,
        _dart_SDLTest_ImageBlitBlendNone>('SDLTest_ImageBlitBlendNone');
    return _SDLTest_ImageBlitBlendNone();
  }

  _dart_SDLTest_ImageBlitBlendNone _SDLTest_ImageBlitBlendNone;

  ffi.Pointer<SDL_Surface> SDLTest_ImageBlitBlendAll() {
    _SDLTest_ImageBlitBlendAll ??= _dylib.lookupFunction<
        _c_SDLTest_ImageBlitBlendAll,
        _dart_SDLTest_ImageBlitBlendAll>('SDLTest_ImageBlitBlendAll');
    return _SDLTest_ImageBlitBlendAll();
  }

  _dart_SDLTest_ImageBlitBlendAll _SDLTest_ImageBlitBlendAll;

  ffi.Pointer<SDL_Surface> SDLTest_ImageFace() {
    _SDLTest_ImageFace ??=
        _dylib.lookupFunction<_c_SDLTest_ImageFace, _dart_SDLTest_ImageFace>(
            'SDLTest_ImageFace');
    return _SDLTest_ImageFace();
  }

  _dart_SDLTest_ImageFace _SDLTest_ImageFace;

  ffi.Pointer<SDL_Surface> SDLTest_ImagePrimitives() {
    _SDLTest_ImagePrimitives ??= _dylib.lookupFunction<
        _c_SDLTest_ImagePrimitives,
        _dart_SDLTest_ImagePrimitives>('SDLTest_ImagePrimitives');
    return _SDLTest_ImagePrimitives();
  }

  _dart_SDLTest_ImagePrimitives _SDLTest_ImagePrimitives;

  ffi.Pointer<SDL_Surface> SDLTest_ImagePrimitivesBlend() {
    _SDLTest_ImagePrimitivesBlend ??= _dylib.lookupFunction<
        _c_SDLTest_ImagePrimitivesBlend,
        _dart_SDLTest_ImagePrimitivesBlend>('SDLTest_ImagePrimitivesBlend');
    return _SDLTest_ImagePrimitivesBlend();
  }

  _dart_SDLTest_ImagePrimitivesBlend _SDLTest_ImagePrimitivesBlend;

  /// \brief Compares a surface and with reference image data for equality
  ///
  /// \param surface Surface used in comparison
  /// \param referenceSurface Test Surface used in comparison
  /// \param allowable_error Allowable difference (=sum of squared difference for each RGB component) in blending accuracy.
  ///
  /// \returns 0 if comparison succeeded, >0 (=number of pixels for which the comparison failed) if comparison failed, -1 if any of the surfaces were NULL, -2 if the surface sizes differ.
  int SDLTest_CompareSurfaces(
    ffi.Pointer<SDL_Surface> surface,
    ffi.Pointer<SDL_Surface> referenceSurface,
    int allowable_error,
  ) {
    _SDLTest_CompareSurfaces ??= _dylib.lookupFunction<
        _c_SDLTest_CompareSurfaces,
        _dart_SDLTest_CompareSurfaces>('SDLTest_CompareSurfaces');
    return _SDLTest_CompareSurfaces(
      surface,
      referenceSurface,
      allowable_error,
    );
  }

  _dart_SDLTest_CompareSurfaces _SDLTest_CompareSurfaces;

  /// \brief initialize the context
  ///
  /// \param  mdContext        pointer to context variable
  ///
  /// Note: The function initializes the message-digest context
  /// mdContext. Call before each new use of the context -
  /// all fields are set to zero.
  void SDLTest_Md5Init(
    ffi.Pointer<SDLTest_Md5Context> mdContext,
  ) {
    _SDLTest_Md5Init ??=
        _dylib.lookupFunction<_c_SDLTest_Md5Init, _dart_SDLTest_Md5Init>(
            'SDLTest_Md5Init');
    return _SDLTest_Md5Init(
      mdContext,
    );
  }

  _dart_SDLTest_Md5Init _SDLTest_Md5Init;

  /// \brief update digest from variable length data
  ///
  /// \param  mdContext       pointer to context variable
  /// \param  inBuf           pointer to data array/string
  /// \param  inLen           length of data array/string
  ///
  /// Note: The function updates the message-digest context to account
  /// for the presence of each of the characters inBuf[0..inLen-1]
  /// in the message whose digest is being computed.
  void SDLTest_Md5Update(
    ffi.Pointer<SDLTest_Md5Context> mdContext,
    ffi.Pointer<ffi.Uint8> inBuf,
    int inLen,
  ) {
    _SDLTest_Md5Update ??=
        _dylib.lookupFunction<_c_SDLTest_Md5Update, _dart_SDLTest_Md5Update>(
            'SDLTest_Md5Update');
    return _SDLTest_Md5Update(
      mdContext,
      inBuf,
      inLen,
    );
  }

  _dart_SDLTest_Md5Update _SDLTest_Md5Update;

  /// \brief complete digest computation
  ///
  /// \param mdContext     pointer to context variable
  ///
  /// Note: The function terminates the message-digest computation and
  /// ends with the desired message digest in mdContext.digest[0..15].
  /// Always call before using the digest[] variable.
  void SDLTest_Md5Final(
    ffi.Pointer<SDLTest_Md5Context> mdContext,
  ) {
    _SDLTest_Md5Final ??=
        _dylib.lookupFunction<_c_SDLTest_Md5Final, _dart_SDLTest_Md5Final>(
            'SDLTest_Md5Final');
    return _SDLTest_Md5Final(
      mdContext,
    );
  }

  _dart_SDLTest_Md5Final _SDLTest_Md5Final;

  /// Initializes the fuzzer for a test
  ///
  /// \param execKey Execution "Key" that initializes the random number generator uniquely for the test.
  void SDLTest_FuzzerInit(
    int execKey,
  ) {
    _SDLTest_FuzzerInit ??=
        _dylib.lookupFunction<_c_SDLTest_FuzzerInit, _dart_SDLTest_FuzzerInit>(
            'SDLTest_FuzzerInit');
    return _SDLTest_FuzzerInit(
      execKey,
    );
  }

  _dart_SDLTest_FuzzerInit _SDLTest_FuzzerInit;

  /// Returns a random Uint8
  ///
  /// \returns Generated integer
  int SDLTest_RandomUint8() {
    _SDLTest_RandomUint8 ??= _dylib.lookupFunction<_c_SDLTest_RandomUint8,
        _dart_SDLTest_RandomUint8>('SDLTest_RandomUint8');
    return _SDLTest_RandomUint8();
  }

  _dart_SDLTest_RandomUint8 _SDLTest_RandomUint8;

  /// Returns a random Sint8
  ///
  /// \returns Generated signed integer
  int SDLTest_RandomSint8() {
    _SDLTest_RandomSint8 ??= _dylib.lookupFunction<_c_SDLTest_RandomSint8,
        _dart_SDLTest_RandomSint8>('SDLTest_RandomSint8');
    return _SDLTest_RandomSint8();
  }

  _dart_SDLTest_RandomSint8 _SDLTest_RandomSint8;

  /// Returns a random Uint16
  ///
  /// \returns Generated integer
  int SDLTest_RandomUint16() {
    _SDLTest_RandomUint16 ??= _dylib.lookupFunction<_c_SDLTest_RandomUint16,
        _dart_SDLTest_RandomUint16>('SDLTest_RandomUint16');
    return _SDLTest_RandomUint16();
  }

  _dart_SDLTest_RandomUint16 _SDLTest_RandomUint16;

  /// Returns a random Sint16
  ///
  /// \returns Generated signed integer
  int SDLTest_RandomSint16() {
    _SDLTest_RandomSint16 ??= _dylib.lookupFunction<_c_SDLTest_RandomSint16,
        _dart_SDLTest_RandomSint16>('SDLTest_RandomSint16');
    return _SDLTest_RandomSint16();
  }

  _dart_SDLTest_RandomSint16 _SDLTest_RandomSint16;

  /// Returns a random integer
  ///
  /// \returns Generated integer
  int SDLTest_RandomSint32() {
    _SDLTest_RandomSint32 ??= _dylib.lookupFunction<_c_SDLTest_RandomSint32,
        _dart_SDLTest_RandomSint32>('SDLTest_RandomSint32');
    return _SDLTest_RandomSint32();
  }

  _dart_SDLTest_RandomSint32 _SDLTest_RandomSint32;

  /// Returns a random positive integer
  ///
  /// \returns Generated integer
  int SDLTest_RandomUint32() {
    _SDLTest_RandomUint32 ??= _dylib.lookupFunction<_c_SDLTest_RandomUint32,
        _dart_SDLTest_RandomUint32>('SDLTest_RandomUint32');
    return _SDLTest_RandomUint32();
  }

  _dart_SDLTest_RandomUint32 _SDLTest_RandomUint32;

  /// Returns random Uint64.
  ///
  /// \returns Generated integer
  int SDLTest_RandomUint64() {
    _SDLTest_RandomUint64 ??= _dylib.lookupFunction<_c_SDLTest_RandomUint64,
        _dart_SDLTest_RandomUint64>('SDLTest_RandomUint64');
    return _SDLTest_RandomUint64();
  }

  _dart_SDLTest_RandomUint64 _SDLTest_RandomUint64;

  /// Returns random Sint64.
  ///
  /// \returns Generated signed integer
  int SDLTest_RandomSint64() {
    _SDLTest_RandomSint64 ??= _dylib.lookupFunction<_c_SDLTest_RandomSint64,
        _dart_SDLTest_RandomSint64>('SDLTest_RandomSint64');
    return _SDLTest_RandomSint64();
  }

  _dart_SDLTest_RandomSint64 _SDLTest_RandomSint64;

  /// \returns random float in range [0.0 - 1.0[
  double SDLTest_RandomUnitFloat() {
    _SDLTest_RandomUnitFloat ??= _dylib.lookupFunction<
        _c_SDLTest_RandomUnitFloat,
        _dart_SDLTest_RandomUnitFloat>('SDLTest_RandomUnitFloat');
    return _SDLTest_RandomUnitFloat();
  }

  _dart_SDLTest_RandomUnitFloat _SDLTest_RandomUnitFloat;

  /// \returns random double in range [0.0 - 1.0[
  double SDLTest_RandomUnitDouble() {
    _SDLTest_RandomUnitDouble ??= _dylib.lookupFunction<
        _c_SDLTest_RandomUnitDouble,
        _dart_SDLTest_RandomUnitDouble>('SDLTest_RandomUnitDouble');
    return _SDLTest_RandomUnitDouble();
  }

  _dart_SDLTest_RandomUnitDouble _SDLTest_RandomUnitDouble;

  /// \returns random float.
  double SDLTest_RandomFloat() {
    _SDLTest_RandomFloat ??= _dylib.lookupFunction<_c_SDLTest_RandomFloat,
        _dart_SDLTest_RandomFloat>('SDLTest_RandomFloat');
    return _SDLTest_RandomFloat();
  }

  _dart_SDLTest_RandomFloat _SDLTest_RandomFloat;

  /// \returns random double.
  double SDLTest_RandomDouble() {
    _SDLTest_RandomDouble ??= _dylib.lookupFunction<_c_SDLTest_RandomDouble,
        _dart_SDLTest_RandomDouble>('SDLTest_RandomDouble');
    return _SDLTest_RandomDouble();
  }

  _dart_SDLTest_RandomDouble _SDLTest_RandomDouble;

  /// Returns a random boundary value for Uint8 within the given boundaries.
  /// Boundaries are inclusive, see the usage examples below. If validDomain
  /// is true, the function will only return valid boundaries, otherwise non-valid
  /// boundaries are also possible.
  /// If boundary1 > boundary2, the values are swapped
  ///
  /// Usage examples:
  /// RandomUint8BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20
  /// RandomUint8BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21
  /// RandomUint8BoundaryValue(0, 99, SDL_FALSE) returns 100
  /// RandomUint8BoundaryValue(0, 255, SDL_FALSE) returns 0 (error set)
  ///
  /// \param boundary1 Lower boundary limit
  /// \param boundary2 Upper boundary limit
  /// \param validDomain Should the generated boundary be valid (=within the bounds) or not?
  ///
  /// \returns Random boundary value for the given range and domain or 0 with error set
  int SDLTest_RandomUint8BoundaryValue(
    int boundary1,
    int boundary2,
    int validDomain,
  ) {
    _SDLTest_RandomUint8BoundaryValue ??= _dylib.lookupFunction<
            _c_SDLTest_RandomUint8BoundaryValue,
            _dart_SDLTest_RandomUint8BoundaryValue>(
        'SDLTest_RandomUint8BoundaryValue');
    return _SDLTest_RandomUint8BoundaryValue(
      boundary1,
      boundary2,
      validDomain,
    );
  }

  _dart_SDLTest_RandomUint8BoundaryValue _SDLTest_RandomUint8BoundaryValue;

  /// Returns a random boundary value for Uint16 within the given boundaries.
  /// Boundaries are inclusive, see the usage examples below. If validDomain
  /// is true, the function will only return valid boundaries, otherwise non-valid
  /// boundaries are also possible.
  /// If boundary1 > boundary2, the values are swapped
  ///
  /// Usage examples:
  /// RandomUint16BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20
  /// RandomUint16BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21
  /// RandomUint16BoundaryValue(0, 99, SDL_FALSE) returns 100
  /// RandomUint16BoundaryValue(0, 0xFFFF, SDL_FALSE) returns 0 (error set)
  ///
  /// \param boundary1 Lower boundary limit
  /// \param boundary2 Upper boundary limit
  /// \param validDomain Should the generated boundary be valid (=within the bounds) or not?
  ///
  /// \returns Random boundary value for the given range and domain or 0 with error set
  int SDLTest_RandomUint16BoundaryValue(
    int boundary1,
    int boundary2,
    int validDomain,
  ) {
    _SDLTest_RandomUint16BoundaryValue ??= _dylib.lookupFunction<
            _c_SDLTest_RandomUint16BoundaryValue,
            _dart_SDLTest_RandomUint16BoundaryValue>(
        'SDLTest_RandomUint16BoundaryValue');
    return _SDLTest_RandomUint16BoundaryValue(
      boundary1,
      boundary2,
      validDomain,
    );
  }

  _dart_SDLTest_RandomUint16BoundaryValue _SDLTest_RandomUint16BoundaryValue;

  /// Returns a random boundary value for Uint32 within the given boundaries.
  /// Boundaries are inclusive, see the usage examples below. If validDomain
  /// is true, the function will only return valid boundaries, otherwise non-valid
  /// boundaries are also possible.
  /// If boundary1 > boundary2, the values are swapped
  ///
  /// Usage examples:
  /// RandomUint32BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20
  /// RandomUint32BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21
  /// RandomUint32BoundaryValue(0, 99, SDL_FALSE) returns 100
  /// RandomUint32BoundaryValue(0, 0xFFFFFFFF, SDL_FALSE) returns 0 (with error set)
  ///
  /// \param boundary1 Lower boundary limit
  /// \param boundary2 Upper boundary limit
  /// \param validDomain Should the generated boundary be valid (=within the bounds) or not?
  ///
  /// \returns Random boundary value for the given range and domain or 0 with error set
  int SDLTest_RandomUint32BoundaryValue(
    int boundary1,
    int boundary2,
    int validDomain,
  ) {
    _SDLTest_RandomUint32BoundaryValue ??= _dylib.lookupFunction<
            _c_SDLTest_RandomUint32BoundaryValue,
            _dart_SDLTest_RandomUint32BoundaryValue>(
        'SDLTest_RandomUint32BoundaryValue');
    return _SDLTest_RandomUint32BoundaryValue(
      boundary1,
      boundary2,
      validDomain,
    );
  }

  _dart_SDLTest_RandomUint32BoundaryValue _SDLTest_RandomUint32BoundaryValue;

  /// Returns a random boundary value for Uint64 within the given boundaries.
  /// Boundaries are inclusive, see the usage examples below. If validDomain
  /// is true, the function will only return valid boundaries, otherwise non-valid
  /// boundaries are also possible.
  /// If boundary1 > boundary2, the values are swapped
  ///
  /// Usage examples:
  /// RandomUint64BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20
  /// RandomUint64BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21
  /// RandomUint64BoundaryValue(0, 99, SDL_FALSE) returns 100
  /// RandomUint64BoundaryValue(0, 0xFFFFFFFFFFFFFFFF, SDL_FALSE) returns 0 (with error set)
  ///
  /// \param boundary1 Lower boundary limit
  /// \param boundary2 Upper boundary limit
  /// \param validDomain Should the generated boundary be valid (=within the bounds) or not?
  ///
  /// \returns Random boundary value for the given range and domain or 0 with error set
  int SDLTest_RandomUint64BoundaryValue(
    int boundary1,
    int boundary2,
    int validDomain,
  ) {
    _SDLTest_RandomUint64BoundaryValue ??= _dylib.lookupFunction<
            _c_SDLTest_RandomUint64BoundaryValue,
            _dart_SDLTest_RandomUint64BoundaryValue>(
        'SDLTest_RandomUint64BoundaryValue');
    return _SDLTest_RandomUint64BoundaryValue(
      boundary1,
      boundary2,
      validDomain,
    );
  }

  _dart_SDLTest_RandomUint64BoundaryValue _SDLTest_RandomUint64BoundaryValue;

  /// Returns a random boundary value for Sint8 within the given boundaries.
  /// Boundaries are inclusive, see the usage examples below. If validDomain
  /// is true, the function will only return valid boundaries, otherwise non-valid
  /// boundaries are also possible.
  /// If boundary1 > boundary2, the values are swapped
  ///
  /// Usage examples:
  /// RandomSint8BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20
  /// RandomSint8BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9
  /// RandomSint8BoundaryValue(SINT8_MIN, 99, SDL_FALSE) returns 100
  /// RandomSint8BoundaryValue(SINT8_MIN, SINT8_MAX, SDL_FALSE) returns SINT8_MIN (== error value) with error set
  ///
  /// \param boundary1 Lower boundary limit
  /// \param boundary2 Upper boundary limit
  /// \param validDomain Should the generated boundary be valid (=within the bounds) or not?
  ///
  /// \returns Random boundary value for the given range and domain or SINT8_MIN with error set
  int SDLTest_RandomSint8BoundaryValue(
    int boundary1,
    int boundary2,
    int validDomain,
  ) {
    _SDLTest_RandomSint8BoundaryValue ??= _dylib.lookupFunction<
            _c_SDLTest_RandomSint8BoundaryValue,
            _dart_SDLTest_RandomSint8BoundaryValue>(
        'SDLTest_RandomSint8BoundaryValue');
    return _SDLTest_RandomSint8BoundaryValue(
      boundary1,
      boundary2,
      validDomain,
    );
  }

  _dart_SDLTest_RandomSint8BoundaryValue _SDLTest_RandomSint8BoundaryValue;

  /// Returns a random boundary value for Sint16 within the given boundaries.
  /// Boundaries are inclusive, see the usage examples below. If validDomain
  /// is true, the function will only return valid boundaries, otherwise non-valid
  /// boundaries are also possible.
  /// If boundary1 > boundary2, the values are swapped
  ///
  /// Usage examples:
  /// RandomSint16BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20
  /// RandomSint16BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9
  /// RandomSint16BoundaryValue(SINT16_MIN, 99, SDL_FALSE) returns 100
  /// RandomSint16BoundaryValue(SINT16_MIN, SINT16_MAX, SDL_FALSE) returns SINT16_MIN (== error value) with error set
  ///
  /// \param boundary1 Lower boundary limit
  /// \param boundary2 Upper boundary limit
  /// \param validDomain Should the generated boundary be valid (=within the bounds) or not?
  ///
  /// \returns Random boundary value for the given range and domain or SINT16_MIN with error set
  int SDLTest_RandomSint16BoundaryValue(
    int boundary1,
    int boundary2,
    int validDomain,
  ) {
    _SDLTest_RandomSint16BoundaryValue ??= _dylib.lookupFunction<
            _c_SDLTest_RandomSint16BoundaryValue,
            _dart_SDLTest_RandomSint16BoundaryValue>(
        'SDLTest_RandomSint16BoundaryValue');
    return _SDLTest_RandomSint16BoundaryValue(
      boundary1,
      boundary2,
      validDomain,
    );
  }

  _dart_SDLTest_RandomSint16BoundaryValue _SDLTest_RandomSint16BoundaryValue;

  /// Returns a random boundary value for Sint32 within the given boundaries.
  /// Boundaries are inclusive, see the usage examples below. If validDomain
  /// is true, the function will only return valid boundaries, otherwise non-valid
  /// boundaries are also possible.
  /// If boundary1 > boundary2, the values are swapped
  ///
  /// Usage examples:
  /// RandomSint32BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20
  /// RandomSint32BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9
  /// RandomSint32BoundaryValue(SINT32_MIN, 99, SDL_FALSE) returns 100
  /// RandomSint32BoundaryValue(SINT32_MIN, SINT32_MAX, SDL_FALSE) returns SINT32_MIN (== error value)
  ///
  /// \param boundary1 Lower boundary limit
  /// \param boundary2 Upper boundary limit
  /// \param validDomain Should the generated boundary be valid (=within the bounds) or not?
  ///
  /// \returns Random boundary value for the given range and domain or SINT32_MIN with error set
  int SDLTest_RandomSint32BoundaryValue(
    int boundary1,
    int boundary2,
    int validDomain,
  ) {
    _SDLTest_RandomSint32BoundaryValue ??= _dylib.lookupFunction<
            _c_SDLTest_RandomSint32BoundaryValue,
            _dart_SDLTest_RandomSint32BoundaryValue>(
        'SDLTest_RandomSint32BoundaryValue');
    return _SDLTest_RandomSint32BoundaryValue(
      boundary1,
      boundary2,
      validDomain,
    );
  }

  _dart_SDLTest_RandomSint32BoundaryValue _SDLTest_RandomSint32BoundaryValue;

  /// Returns a random boundary value for Sint64 within the given boundaries.
  /// Boundaries are inclusive, see the usage examples below. If validDomain
  /// is true, the function will only return valid boundaries, otherwise non-valid
  /// boundaries are also possible.
  /// If boundary1 > boundary2, the values are swapped
  ///
  /// Usage examples:
  /// RandomSint64BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20
  /// RandomSint64BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9
  /// RandomSint64BoundaryValue(SINT64_MIN, 99, SDL_FALSE) returns 100
  /// RandomSint64BoundaryValue(SINT64_MIN, SINT64_MAX, SDL_FALSE) returns SINT64_MIN (== error value) and error set
  ///
  /// \param boundary1 Lower boundary limit
  /// \param boundary2 Upper boundary limit
  /// \param validDomain Should the generated boundary be valid (=within the bounds) or not?
  ///
  /// \returns Random boundary value for the given range and domain or SINT64_MIN with error set
  int SDLTest_RandomSint64BoundaryValue(
    int boundary1,
    int boundary2,
    int validDomain,
  ) {
    _SDLTest_RandomSint64BoundaryValue ??= _dylib.lookupFunction<
            _c_SDLTest_RandomSint64BoundaryValue,
            _dart_SDLTest_RandomSint64BoundaryValue>(
        'SDLTest_RandomSint64BoundaryValue');
    return _SDLTest_RandomSint64BoundaryValue(
      boundary1,
      boundary2,
      validDomain,
    );
  }

  _dart_SDLTest_RandomSint64BoundaryValue _SDLTest_RandomSint64BoundaryValue;

  /// Returns integer in range [min, max] (inclusive).
  /// Min and max values can be negative values.
  /// If Max in smaller than min, then the values are swapped.
  /// Min and max are the same value, that value will be returned.
  ///
  /// \param min Minimum inclusive value of returned random number
  /// \param max Maximum inclusive value of returned random number
  ///
  /// \returns Generated random integer in range
  int SDLTest_RandomIntegerInRange(
    int min,
    int max,
  ) {
    _SDLTest_RandomIntegerInRange ??= _dylib.lookupFunction<
        _c_SDLTest_RandomIntegerInRange,
        _dart_SDLTest_RandomIntegerInRange>('SDLTest_RandomIntegerInRange');
    return _SDLTest_RandomIntegerInRange(
      min,
      max,
    );
  }

  _dart_SDLTest_RandomIntegerInRange _SDLTest_RandomIntegerInRange;

  /// Generates random null-terminated string. The minimum length for
  /// the string is 1 character, maximum length for the string is 255
  /// characters and it can contain ASCII characters from 32 to 126.
  ///
  /// Note: Returned string needs to be deallocated.
  ///
  /// \returns Newly allocated random string; or NULL if length was invalid or string could not be allocated.
  ffi.Pointer<ffi.Int8> SDLTest_RandomAsciiString() {
    _SDLTest_RandomAsciiString ??= _dylib.lookupFunction<
        _c_SDLTest_RandomAsciiString,
        _dart_SDLTest_RandomAsciiString>('SDLTest_RandomAsciiString');
    return _SDLTest_RandomAsciiString();
  }

  _dart_SDLTest_RandomAsciiString _SDLTest_RandomAsciiString;

  /// Generates random null-terminated string. The maximum length for
  /// the string is defined by the maxLength parameter.
  /// String can contain ASCII characters from 32 to 126.
  ///
  /// Note: Returned string needs to be deallocated.
  ///
  /// \param maxLength The maximum length of the generated string.
  ///
  /// \returns Newly allocated random string; or NULL if maxLength was invalid or string could not be allocated.
  ffi.Pointer<ffi.Int8> SDLTest_RandomAsciiStringWithMaximumLength(
    int maxLength,
  ) {
    _SDLTest_RandomAsciiStringWithMaximumLength ??= _dylib.lookupFunction<
            _c_SDLTest_RandomAsciiStringWithMaximumLength,
            _dart_SDLTest_RandomAsciiStringWithMaximumLength>(
        'SDLTest_RandomAsciiStringWithMaximumLength');
    return _SDLTest_RandomAsciiStringWithMaximumLength(
      maxLength,
    );
  }

  _dart_SDLTest_RandomAsciiStringWithMaximumLength
      _SDLTest_RandomAsciiStringWithMaximumLength;

  /// Generates random null-terminated string. The length for
  /// the string is defined by the size parameter.
  /// String can contain ASCII characters from 32 to 126.
  ///
  /// Note: Returned string needs to be deallocated.
  ///
  /// \param size The length of the generated string
  ///
  /// \returns Newly allocated random string; or NULL if size was invalid or string could not be allocated.
  ffi.Pointer<ffi.Int8> SDLTest_RandomAsciiStringOfSize(
    int size,
  ) {
    _SDLTest_RandomAsciiStringOfSize ??= _dylib.lookupFunction<
            _c_SDLTest_RandomAsciiStringOfSize,
            _dart_SDLTest_RandomAsciiStringOfSize>(
        'SDLTest_RandomAsciiStringOfSize');
    return _SDLTest_RandomAsciiStringOfSize(
      size,
    );
  }

  _dart_SDLTest_RandomAsciiStringOfSize _SDLTest_RandomAsciiStringOfSize;

  /// Returns the invocation count for the fuzzer since last ...FuzzerInit.
  int SDLTest_GetFuzzerInvocationCount() {
    _SDLTest_GetFuzzerInvocationCount ??= _dylib.lookupFunction<
            _c_SDLTest_GetFuzzerInvocationCount,
            _dart_SDLTest_GetFuzzerInvocationCount>(
        'SDLTest_GetFuzzerInvocationCount');
    return _SDLTest_GetFuzzerInvocationCount();
  }

  _dart_SDLTest_GetFuzzerInvocationCount _SDLTest_GetFuzzerInvocationCount;

  int _Xmblen(
    ffi.Pointer<ffi.Int8> str,
    int len,
  ) {
    __Xmblen ??= _dylib.lookupFunction<_c__Xmblen, _dart__Xmblen>('_Xmblen');
    return __Xmblen(
      str,
      len,
    );
  }

  _dart__Xmblen __Xmblen;

  ffi.Pointer<XFontStruct> XLoadQueryFont(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _XLoadQueryFont ??=
        _dylib.lookupFunction<_c_XLoadQueryFont, _dart_XLoadQueryFont>(
            'XLoadQueryFont');
    return _XLoadQueryFont(
      arg0,
      arg1,
    );
  }

  _dart_XLoadQueryFont _XLoadQueryFont;

  ffi.Pointer<XFontStruct> XQueryFont(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XQueryFont ??=
        _dylib.lookupFunction<_c_XQueryFont, _dart_XQueryFont>('XQueryFont');
    return _XQueryFont(
      arg0,
      arg1,
    );
  }

  _dart_XQueryFont _XQueryFont;

  ffi.Pointer<XTimeCoord> XGetMotionEvents(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XGetMotionEvents ??=
        _dylib.lookupFunction<_c_XGetMotionEvents, _dart_XGetMotionEvents>(
            'XGetMotionEvents');
    return _XGetMotionEvents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XGetMotionEvents _XGetMotionEvents;

  ffi.Pointer<XModifierKeymap> XDeleteModifiermapEntry(
    ffi.Pointer<XModifierKeymap> arg0,
    int arg1,
    int arg2,
  ) {
    _XDeleteModifiermapEntry ??= _dylib.lookupFunction<
        _c_XDeleteModifiermapEntry,
        _dart_XDeleteModifiermapEntry>('XDeleteModifiermapEntry');
    return _XDeleteModifiermapEntry(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XDeleteModifiermapEntry _XDeleteModifiermapEntry;

  ffi.Pointer<XModifierKeymap> XGetModifierMapping(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XGetModifierMapping ??= _dylib.lookupFunction<_c_XGetModifierMapping,
        _dart_XGetModifierMapping>('XGetModifierMapping');
    return _XGetModifierMapping(
      arg0,
    );
  }

  _dart_XGetModifierMapping _XGetModifierMapping;

  ffi.Pointer<XModifierKeymap> XInsertModifiermapEntry(
    ffi.Pointer<XModifierKeymap> arg0,
    int arg1,
    int arg2,
  ) {
    _XInsertModifiermapEntry ??= _dylib.lookupFunction<
        _c_XInsertModifiermapEntry,
        _dart_XInsertModifiermapEntry>('XInsertModifiermapEntry');
    return _XInsertModifiermapEntry(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XInsertModifiermapEntry _XInsertModifiermapEntry;

  ffi.Pointer<XModifierKeymap> XNewModifiermap(
    int arg0,
  ) {
    _XNewModifiermap ??=
        _dylib.lookupFunction<_c_XNewModifiermap, _dart_XNewModifiermap>(
            'XNewModifiermap');
    return _XNewModifiermap(
      arg0,
    );
  }

  _dart_XNewModifiermap _XNewModifiermap;

  ffi.Pointer<XImage> XCreateImage(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<Visual> arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Int8> arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
  ) {
    _XCreateImage ??= _dylib
        .lookupFunction<_c_XCreateImage, _dart_XCreateImage>('XCreateImage');
    return _XCreateImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  _dart_XCreateImage _XCreateImage;

  int XInitImage(
    ffi.Pointer<XImage> arg0,
  ) {
    _XInitImage ??=
        _dylib.lookupFunction<_c_XInitImage, _dart_XInitImage>('XInitImage');
    return _XInitImage(
      arg0,
    );
  }

  _dart_XInitImage _XInitImage;

  ffi.Pointer<XImage> XGetImage(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
  ) {
    _XGetImage ??=
        _dylib.lookupFunction<_c_XGetImage, _dart_XGetImage>('XGetImage');
    return _XGetImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XGetImage _XGetImage;

  ffi.Pointer<XImage> XGetSubImage(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    ffi.Pointer<XImage> arg8,
    int arg9,
    int arg10,
  ) {
    _XGetSubImage ??= _dylib
        .lookupFunction<_c_XGetSubImage, _dart_XGetSubImage>('XGetSubImage');
    return _XGetSubImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  _dart_XGetSubImage _XGetSubImage;

  ffi.Pointer<_XDisplay> XOpenDisplay(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _XOpenDisplay ??= _dylib
        .lookupFunction<_c_XOpenDisplay, _dart_XOpenDisplay>('XOpenDisplay');
    return _XOpenDisplay(
      arg0,
    );
  }

  _dart_XOpenDisplay _XOpenDisplay;

  void XrmInitialize() {
    _XrmInitialize ??= _dylib
        .lookupFunction<_c_XrmInitialize, _dart_XrmInitialize>('XrmInitialize');
    return _XrmInitialize();
  }

  _dart_XrmInitialize _XrmInitialize;

  ffi.Pointer<ffi.Int8> XFetchBytes(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _XFetchBytes ??=
        _dylib.lookupFunction<_c_XFetchBytes, _dart_XFetchBytes>('XFetchBytes');
    return _XFetchBytes(
      arg0,
      arg1,
    );
  }

  _dart_XFetchBytes _XFetchBytes;

  ffi.Pointer<ffi.Int8> XFetchBuffer(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
  ) {
    _XFetchBuffer ??= _dylib
        .lookupFunction<_c_XFetchBuffer, _dart_XFetchBuffer>('XFetchBuffer');
    return _XFetchBuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XFetchBuffer _XFetchBuffer;

  ffi.Pointer<ffi.Int8> XGetAtomName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XGetAtomName ??= _dylib
        .lookupFunction<_c_XGetAtomName, _dart_XGetAtomName>('XGetAtomName');
    return _XGetAtomName(
      arg0,
      arg1,
    );
  }

  _dart_XGetAtomName _XGetAtomName;

  int XGetAtomNames(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    int arg2,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
  ) {
    _XGetAtomNames ??= _dylib
        .lookupFunction<_c_XGetAtomNames, _dart_XGetAtomNames>('XGetAtomNames');
    return _XGetAtomNames(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetAtomNames _XGetAtomNames;

  ffi.Pointer<ffi.Int8> XGetDefault(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XGetDefault ??=
        _dylib.lookupFunction<_c_XGetDefault, _dart_XGetDefault>('XGetDefault');
    return _XGetDefault(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetDefault _XGetDefault;

  ffi.Pointer<ffi.Int8> XDisplayName(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _XDisplayName ??= _dylib
        .lookupFunction<_c_XDisplayName, _dart_XDisplayName>('XDisplayName');
    return _XDisplayName(
      arg0,
    );
  }

  _dart_XDisplayName _XDisplayName;

  ffi.Pointer<ffi.Int8> XKeysymToString(
    int arg0,
  ) {
    _XKeysymToString ??=
        _dylib.lookupFunction<_c_XKeysymToString, _dart_XKeysymToString>(
            'XKeysymToString');
    return _XKeysymToString(
      arg0,
    );
  }

  _dart_XKeysymToString _XKeysymToString;

  ffi.Pointer<ffi.NativeFunction<_typedefC_20>> XSynchronize(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XSynchronize ??= _dylib
        .lookupFunction<_c_XSynchronize, _dart_XSynchronize>('XSynchronize');
    return _XSynchronize(
      arg0,
      arg1,
    );
  }

  _dart_XSynchronize _XSynchronize;

  ffi.Pointer<ffi.NativeFunction<_typedefC_21>> XSetAfterFunction(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_22>> arg1,
  ) {
    _XSetAfterFunction ??=
        _dylib.lookupFunction<_c_XSetAfterFunction, _dart_XSetAfterFunction>(
            'XSetAfterFunction');
    return _XSetAfterFunction(
      arg0,
      arg1,
    );
  }

  _dart_XSetAfterFunction _XSetAfterFunction;

  int XInternAtom(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _XInternAtom ??=
        _dylib.lookupFunction<_c_XInternAtom, _dart_XInternAtom>('XInternAtom');
    return _XInternAtom(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XInternAtom _XInternAtom;

  int XInternAtoms(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Uint64> arg4,
  ) {
    _XInternAtoms ??= _dylib
        .lookupFunction<_c_XInternAtoms, _dart_XInternAtoms>('XInternAtoms');
    return _XInternAtoms(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XInternAtoms _XInternAtoms;

  int XCopyColormapAndFree(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XCopyColormapAndFree ??= _dylib.lookupFunction<_c_XCopyColormapAndFree,
        _dart_XCopyColormapAndFree>('XCopyColormapAndFree');
    return _XCopyColormapAndFree(
      arg0,
      arg1,
    );
  }

  _dart_XCopyColormapAndFree _XCopyColormapAndFree;

  int XCreateColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<Visual> arg2,
    int arg3,
  ) {
    _XCreateColormap ??=
        _dylib.lookupFunction<_c_XCreateColormap, _dart_XCreateColormap>(
            'XCreateColormap');
    return _XCreateColormap(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XCreateColormap _XCreateColormap;

  int XCreatePixmapCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XColor> arg3,
    ffi.Pointer<XColor> arg4,
    int arg5,
    int arg6,
  ) {
    _XCreatePixmapCursor ??= _dylib.lookupFunction<_c_XCreatePixmapCursor,
        _dart_XCreatePixmapCursor>('XCreatePixmapCursor');
    return _XCreatePixmapCursor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XCreatePixmapCursor _XCreatePixmapCursor;

  int XCreateGlyphCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XColor> arg5,
    ffi.Pointer<XColor> arg6,
  ) {
    _XCreateGlyphCursor ??=
        _dylib.lookupFunction<_c_XCreateGlyphCursor, _dart_XCreateGlyphCursor>(
            'XCreateGlyphCursor');
    return _XCreateGlyphCursor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XCreateGlyphCursor _XCreateGlyphCursor;

  int XCreateFontCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XCreateFontCursor ??=
        _dylib.lookupFunction<_c_XCreateFontCursor, _dart_XCreateFontCursor>(
            'XCreateFontCursor');
    return _XCreateFontCursor(
      arg0,
      arg1,
    );
  }

  _dart_XCreateFontCursor _XCreateFontCursor;

  int XLoadFont(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _XLoadFont ??=
        _dylib.lookupFunction<_c_XLoadFont, _dart_XLoadFont>('XLoadFont');
    return _XLoadFont(
      arg0,
      arg1,
    );
  }

  _dart_XLoadFont _XLoadFont;

  ffi.Pointer<_XGC> XCreateGC(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XGCValues> arg3,
  ) {
    _XCreateGC ??=
        _dylib.lookupFunction<_c_XCreateGC, _dart_XCreateGC>('XCreateGC');
    return _XCreateGC(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XCreateGC _XCreateGC;

  int XGContextFromGC(
    ffi.Pointer<_XGC> arg0,
  ) {
    _XGContextFromGC ??=
        _dylib.lookupFunction<_c_XGContextFromGC, _dart_XGContextFromGC>(
            'XGContextFromGC');
    return _XGContextFromGC(
      arg0,
    );
  }

  _dart_XGContextFromGC _XGContextFromGC;

  void XFlushGC(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
  ) {
    _XFlushGC ??=
        _dylib.lookupFunction<_c_XFlushGC, _dart_XFlushGC>('XFlushGC');
    return _XFlushGC(
      arg0,
      arg1,
    );
  }

  _dart_XFlushGC _XFlushGC;

  int XCreatePixmap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XCreatePixmap ??= _dylib
        .lookupFunction<_c_XCreatePixmap, _dart_XCreatePixmap>('XCreatePixmap');
    return _XCreatePixmap(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XCreatePixmap _XCreatePixmap;

  int XCreateBitmapFromData(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    int arg4,
  ) {
    _XCreateBitmapFromData ??= _dylib.lookupFunction<_c_XCreateBitmapFromData,
        _dart_XCreateBitmapFromData>('XCreateBitmapFromData');
    return _XCreateBitmapFromData(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XCreateBitmapFromData _XCreateBitmapFromData;

  int XCreatePixmapFromBitmapData(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
  ) {
    _XCreatePixmapFromBitmapData ??= _dylib.lookupFunction<
        _c_XCreatePixmapFromBitmapData,
        _dart_XCreatePixmapFromBitmapData>('XCreatePixmapFromBitmapData');
    return _XCreatePixmapFromBitmapData(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XCreatePixmapFromBitmapData _XCreatePixmapFromBitmapData;

  int XCreateSimpleWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    _XCreateSimpleWindow ??= _dylib.lookupFunction<_c_XCreateSimpleWindow,
        _dart_XCreateSimpleWindow>('XCreateSimpleWindow');
    return _XCreateSimpleWindow(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XCreateSimpleWindow _XCreateSimpleWindow;

  int XGetSelectionOwner(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XGetSelectionOwner ??=
        _dylib.lookupFunction<_c_XGetSelectionOwner, _dart_XGetSelectionOwner>(
            'XGetSelectionOwner');
    return _XGetSelectionOwner(
      arg0,
      arg1,
    );
  }

  _dart_XGetSelectionOwner _XGetSelectionOwner;

  int XCreateWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    ffi.Pointer<Visual> arg9,
    int arg10,
    ffi.Pointer<XSetWindowAttributes> arg11,
  ) {
    _XCreateWindow ??= _dylib
        .lookupFunction<_c_XCreateWindow, _dart_XCreateWindow>('XCreateWindow');
    return _XCreateWindow(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
    );
  }

  _dart_XCreateWindow _XCreateWindow;

  ffi.Pointer<ffi.Uint64> XListInstalledColormaps(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XListInstalledColormaps ??= _dylib.lookupFunction<
        _c_XListInstalledColormaps,
        _dart_XListInstalledColormaps>('XListInstalledColormaps');
    return _XListInstalledColormaps(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XListInstalledColormaps _XListInstalledColormaps;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> XListFonts(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XListFonts ??=
        _dylib.lookupFunction<_c_XListFonts, _dart_XListFonts>('XListFonts');
    return _XListFonts(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XListFonts _XListFonts;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> XListFontsWithInfo(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Pointer<XFontStruct>> arg4,
  ) {
    _XListFontsWithInfo ??=
        _dylib.lookupFunction<_c_XListFontsWithInfo, _dart_XListFontsWithInfo>(
            'XListFontsWithInfo');
    return _XListFontsWithInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XListFontsWithInfo _XListFontsWithInfo;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> XGetFontPath(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _XGetFontPath ??= _dylib
        .lookupFunction<_c_XGetFontPath, _dart_XGetFontPath>('XGetFontPath');
    return _XGetFontPath(
      arg0,
      arg1,
    );
  }

  _dart_XGetFontPath _XGetFontPath;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> XListExtensions(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _XListExtensions ??=
        _dylib.lookupFunction<_c_XListExtensions, _dart_XListExtensions>(
            'XListExtensions');
    return _XListExtensions(
      arg0,
      arg1,
    );
  }

  _dart_XListExtensions _XListExtensions;

  ffi.Pointer<ffi.Uint64> XListProperties(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XListProperties ??=
        _dylib.lookupFunction<_c_XListProperties, _dart_XListProperties>(
            'XListProperties');
    return _XListProperties(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XListProperties _XListProperties;

  ffi.Pointer<XHostAddress> XListHosts(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XListHosts ??=
        _dylib.lookupFunction<_c_XListHosts, _dart_XListHosts>('XListHosts');
    return _XListHosts(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XListHosts _XListHosts;

  int XKeycodeToKeysym(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XKeycodeToKeysym ??=
        _dylib.lookupFunction<_c_XKeycodeToKeysym, _dart_XKeycodeToKeysym>(
            'XKeycodeToKeysym');
    return _XKeycodeToKeysym(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XKeycodeToKeysym _XKeycodeToKeysym;

  int XLookupKeysym(
    ffi.Pointer<XKeyEvent> arg0,
    int arg1,
  ) {
    _XLookupKeysym ??= _dylib
        .lookupFunction<_c_XLookupKeysym, _dart_XLookupKeysym>('XLookupKeysym');
    return _XLookupKeysym(
      arg0,
      arg1,
    );
  }

  _dart_XLookupKeysym _XLookupKeysym;

  ffi.Pointer<ffi.Uint64> XGetKeyboardMapping(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XGetKeyboardMapping ??= _dylib.lookupFunction<_c_XGetKeyboardMapping,
        _dart_XGetKeyboardMapping>('XGetKeyboardMapping');
    return _XGetKeyboardMapping(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetKeyboardMapping _XGetKeyboardMapping;

  int XStringToKeysym(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _XStringToKeysym ??=
        _dylib.lookupFunction<_c_XStringToKeysym, _dart_XStringToKeysym>(
            'XStringToKeysym');
    return _XStringToKeysym(
      arg0,
    );
  }

  _dart_XStringToKeysym _XStringToKeysym;

  int XMaxRequestSize(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XMaxRequestSize ??=
        _dylib.lookupFunction<_c_XMaxRequestSize, _dart_XMaxRequestSize>(
            'XMaxRequestSize');
    return _XMaxRequestSize(
      arg0,
    );
  }

  _dart_XMaxRequestSize _XMaxRequestSize;

  int XExtendedMaxRequestSize(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XExtendedMaxRequestSize ??= _dylib.lookupFunction<
        _c_XExtendedMaxRequestSize,
        _dart_XExtendedMaxRequestSize>('XExtendedMaxRequestSize');
    return _XExtendedMaxRequestSize(
      arg0,
    );
  }

  _dart_XExtendedMaxRequestSize _XExtendedMaxRequestSize;

  ffi.Pointer<ffi.Int8> XResourceManagerString(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XResourceManagerString ??= _dylib.lookupFunction<_c_XResourceManagerString,
        _dart_XResourceManagerString>('XResourceManagerString');
    return _XResourceManagerString(
      arg0,
    );
  }

  _dart_XResourceManagerString _XResourceManagerString;

  ffi.Pointer<ffi.Int8> XScreenResourceString(
    ffi.Pointer<Screen> arg0,
  ) {
    _XScreenResourceString ??= _dylib.lookupFunction<_c_XScreenResourceString,
        _dart_XScreenResourceString>('XScreenResourceString');
    return _XScreenResourceString(
      arg0,
    );
  }

  _dart_XScreenResourceString _XScreenResourceString;

  int XDisplayMotionBufferSize(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XDisplayMotionBufferSize ??= _dylib.lookupFunction<
        _c_XDisplayMotionBufferSize,
        _dart_XDisplayMotionBufferSize>('XDisplayMotionBufferSize');
    return _XDisplayMotionBufferSize(
      arg0,
    );
  }

  _dart_XDisplayMotionBufferSize _XDisplayMotionBufferSize;

  int XVisualIDFromVisual(
    ffi.Pointer<Visual> arg0,
  ) {
    _XVisualIDFromVisual ??= _dylib.lookupFunction<_c_XVisualIDFromVisual,
        _dart_XVisualIDFromVisual>('XVisualIDFromVisual');
    return _XVisualIDFromVisual(
      arg0,
    );
  }

  _dart_XVisualIDFromVisual _XVisualIDFromVisual;

  int XInitThreads() {
    _XInitThreads ??= _dylib
        .lookupFunction<_c_XInitThreads, _dart_XInitThreads>('XInitThreads');
    return _XInitThreads();
  }

  _dart_XInitThreads _XInitThreads;

  void XLockDisplay(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XLockDisplay ??= _dylib
        .lookupFunction<_c_XLockDisplay, _dart_XLockDisplay>('XLockDisplay');
    return _XLockDisplay(
      arg0,
    );
  }

  _dart_XLockDisplay _XLockDisplay;

  void XUnlockDisplay(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XUnlockDisplay ??=
        _dylib.lookupFunction<_c_XUnlockDisplay, _dart_XUnlockDisplay>(
            'XUnlockDisplay');
    return _XUnlockDisplay(
      arg0,
    );
  }

  _dart_XUnlockDisplay _XUnlockDisplay;

  ffi.Pointer<XExtCodes> XInitExtension(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _XInitExtension ??=
        _dylib.lookupFunction<_c_XInitExtension, _dart_XInitExtension>(
            'XInitExtension');
    return _XInitExtension(
      arg0,
      arg1,
    );
  }

  _dart_XInitExtension _XInitExtension;

  ffi.Pointer<XExtCodes> XAddExtension(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XAddExtension ??= _dylib
        .lookupFunction<_c_XAddExtension, _dart_XAddExtension>('XAddExtension');
    return _XAddExtension(
      arg0,
    );
  }

  _dart_XAddExtension _XAddExtension;

  ffi.Pointer<XExtData> XFindOnExtensionList(
    ffi.Pointer<ffi.Pointer<XExtData>> arg0,
    int arg1,
  ) {
    _XFindOnExtensionList ??= _dylib.lookupFunction<_c_XFindOnExtensionList,
        _dart_XFindOnExtensionList>('XFindOnExtensionList');
    return _XFindOnExtensionList(
      arg0,
      arg1,
    );
  }

  _dart_XFindOnExtensionList _XFindOnExtensionList;

  int XRootWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XRootWindow ??=
        _dylib.lookupFunction<_c_XRootWindow, _dart_XRootWindow>('XRootWindow');
    return _XRootWindow(
      arg0,
      arg1,
    );
  }

  _dart_XRootWindow _XRootWindow;

  int XDefaultRootWindow(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XDefaultRootWindow ??=
        _dylib.lookupFunction<_c_XDefaultRootWindow, _dart_XDefaultRootWindow>(
            'XDefaultRootWindow');
    return _XDefaultRootWindow(
      arg0,
    );
  }

  _dart_XDefaultRootWindow _XDefaultRootWindow;

  int XRootWindowOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XRootWindowOfScreen ??= _dylib.lookupFunction<_c_XRootWindowOfScreen,
        _dart_XRootWindowOfScreen>('XRootWindowOfScreen');
    return _XRootWindowOfScreen(
      arg0,
    );
  }

  _dart_XRootWindowOfScreen _XRootWindowOfScreen;

  ffi.Pointer<Visual> XDefaultVisual(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDefaultVisual ??=
        _dylib.lookupFunction<_c_XDefaultVisual, _dart_XDefaultVisual>(
            'XDefaultVisual');
    return _XDefaultVisual(
      arg0,
      arg1,
    );
  }

  _dart_XDefaultVisual _XDefaultVisual;

  ffi.Pointer<Visual> XDefaultVisualOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XDefaultVisualOfScreen ??= _dylib.lookupFunction<_c_XDefaultVisualOfScreen,
        _dart_XDefaultVisualOfScreen>('XDefaultVisualOfScreen');
    return _XDefaultVisualOfScreen(
      arg0,
    );
  }

  _dart_XDefaultVisualOfScreen _XDefaultVisualOfScreen;

  ffi.Pointer<_XGC> XDefaultGC(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDefaultGC ??=
        _dylib.lookupFunction<_c_XDefaultGC, _dart_XDefaultGC>('XDefaultGC');
    return _XDefaultGC(
      arg0,
      arg1,
    );
  }

  _dart_XDefaultGC _XDefaultGC;

  ffi.Pointer<_XGC> XDefaultGCOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XDefaultGCOfScreen ??=
        _dylib.lookupFunction<_c_XDefaultGCOfScreen, _dart_XDefaultGCOfScreen>(
            'XDefaultGCOfScreen');
    return _XDefaultGCOfScreen(
      arg0,
    );
  }

  _dart_XDefaultGCOfScreen _XDefaultGCOfScreen;

  int XBlackPixel(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XBlackPixel ??=
        _dylib.lookupFunction<_c_XBlackPixel, _dart_XBlackPixel>('XBlackPixel');
    return _XBlackPixel(
      arg0,
      arg1,
    );
  }

  _dart_XBlackPixel _XBlackPixel;

  int XWhitePixel(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XWhitePixel ??=
        _dylib.lookupFunction<_c_XWhitePixel, _dart_XWhitePixel>('XWhitePixel');
    return _XWhitePixel(
      arg0,
      arg1,
    );
  }

  _dart_XWhitePixel _XWhitePixel;

  int XAllPlanes() {
    _XAllPlanes ??=
        _dylib.lookupFunction<_c_XAllPlanes, _dart_XAllPlanes>('XAllPlanes');
    return _XAllPlanes();
  }

  _dart_XAllPlanes _XAllPlanes;

  int XBlackPixelOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XBlackPixelOfScreen ??= _dylib.lookupFunction<_c_XBlackPixelOfScreen,
        _dart_XBlackPixelOfScreen>('XBlackPixelOfScreen');
    return _XBlackPixelOfScreen(
      arg0,
    );
  }

  _dart_XBlackPixelOfScreen _XBlackPixelOfScreen;

  int XWhitePixelOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XWhitePixelOfScreen ??= _dylib.lookupFunction<_c_XWhitePixelOfScreen,
        _dart_XWhitePixelOfScreen>('XWhitePixelOfScreen');
    return _XWhitePixelOfScreen(
      arg0,
    );
  }

  _dart_XWhitePixelOfScreen _XWhitePixelOfScreen;

  int XNextRequest(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XNextRequest ??= _dylib
        .lookupFunction<_c_XNextRequest, _dart_XNextRequest>('XNextRequest');
    return _XNextRequest(
      arg0,
    );
  }

  _dart_XNextRequest _XNextRequest;

  int XLastKnownRequestProcessed(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XLastKnownRequestProcessed ??= _dylib.lookupFunction<
        _c_XLastKnownRequestProcessed,
        _dart_XLastKnownRequestProcessed>('XLastKnownRequestProcessed');
    return _XLastKnownRequestProcessed(
      arg0,
    );
  }

  _dart_XLastKnownRequestProcessed _XLastKnownRequestProcessed;

  ffi.Pointer<ffi.Int8> XServerVendor(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XServerVendor ??= _dylib
        .lookupFunction<_c_XServerVendor, _dart_XServerVendor>('XServerVendor');
    return _XServerVendor(
      arg0,
    );
  }

  _dart_XServerVendor _XServerVendor;

  ffi.Pointer<ffi.Int8> XDisplayString(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XDisplayString ??=
        _dylib.lookupFunction<_c_XDisplayString, _dart_XDisplayString>(
            'XDisplayString');
    return _XDisplayString(
      arg0,
    );
  }

  _dart_XDisplayString _XDisplayString;

  int XDefaultColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDefaultColormap ??=
        _dylib.lookupFunction<_c_XDefaultColormap, _dart_XDefaultColormap>(
            'XDefaultColormap');
    return _XDefaultColormap(
      arg0,
      arg1,
    );
  }

  _dart_XDefaultColormap _XDefaultColormap;

  int XDefaultColormapOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XDefaultColormapOfScreen ??= _dylib.lookupFunction<
        _c_XDefaultColormapOfScreen,
        _dart_XDefaultColormapOfScreen>('XDefaultColormapOfScreen');
    return _XDefaultColormapOfScreen(
      arg0,
    );
  }

  _dart_XDefaultColormapOfScreen _XDefaultColormapOfScreen;

  ffi.Pointer<_XDisplay> XDisplayOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XDisplayOfScreen ??=
        _dylib.lookupFunction<_c_XDisplayOfScreen, _dart_XDisplayOfScreen>(
            'XDisplayOfScreen');
    return _XDisplayOfScreen(
      arg0,
    );
  }

  _dart_XDisplayOfScreen _XDisplayOfScreen;

  ffi.Pointer<Screen> XScreenOfDisplay(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XScreenOfDisplay ??=
        _dylib.lookupFunction<_c_XScreenOfDisplay, _dart_XScreenOfDisplay>(
            'XScreenOfDisplay');
    return _XScreenOfDisplay(
      arg0,
      arg1,
    );
  }

  _dart_XScreenOfDisplay _XScreenOfDisplay;

  ffi.Pointer<Screen> XDefaultScreenOfDisplay(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XDefaultScreenOfDisplay ??= _dylib.lookupFunction<
        _c_XDefaultScreenOfDisplay,
        _dart_XDefaultScreenOfDisplay>('XDefaultScreenOfDisplay');
    return _XDefaultScreenOfDisplay(
      arg0,
    );
  }

  _dart_XDefaultScreenOfDisplay _XDefaultScreenOfDisplay;

  int XEventMaskOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XEventMaskOfScreen ??=
        _dylib.lookupFunction<_c_XEventMaskOfScreen, _dart_XEventMaskOfScreen>(
            'XEventMaskOfScreen');
    return _XEventMaskOfScreen(
      arg0,
    );
  }

  _dart_XEventMaskOfScreen _XEventMaskOfScreen;

  int XScreenNumberOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XScreenNumberOfScreen ??= _dylib.lookupFunction<_c_XScreenNumberOfScreen,
        _dart_XScreenNumberOfScreen>('XScreenNumberOfScreen');
    return _XScreenNumberOfScreen(
      arg0,
    );
  }

  _dart_XScreenNumberOfScreen _XScreenNumberOfScreen;

  ffi.Pointer<ffi.NativeFunction<XErrorHandler>> XSetErrorHandler(
    ffi.Pointer<ffi.NativeFunction<XErrorHandler>> arg0,
  ) {
    _XSetErrorHandler ??=
        _dylib.lookupFunction<_c_XSetErrorHandler, _dart_XSetErrorHandler>(
            'XSetErrorHandler');
    return _XSetErrorHandler(
      arg0,
    );
  }

  _dart_XSetErrorHandler _XSetErrorHandler;

  ffi.Pointer<ffi.NativeFunction<XIOErrorHandler>> XSetIOErrorHandler(
    ffi.Pointer<ffi.NativeFunction<XIOErrorHandler>> arg0,
  ) {
    _XSetIOErrorHandler ??=
        _dylib.lookupFunction<_c_XSetIOErrorHandler, _dart_XSetIOErrorHandler>(
            'XSetIOErrorHandler');
    return _XSetIOErrorHandler(
      arg0,
    );
  }

  _dart_XSetIOErrorHandler _XSetIOErrorHandler;

  ffi.Pointer<XPixmapFormatValues> XListPixmapFormats(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _XListPixmapFormats ??=
        _dylib.lookupFunction<_c_XListPixmapFormats, _dart_XListPixmapFormats>(
            'XListPixmapFormats');
    return _XListPixmapFormats(
      arg0,
      arg1,
    );
  }

  _dart_XListPixmapFormats _XListPixmapFormats;

  ffi.Pointer<ffi.Int32> XListDepths(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XListDepths ??=
        _dylib.lookupFunction<_c_XListDepths, _dart_XListDepths>('XListDepths');
    return _XListDepths(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XListDepths _XListDepths;

  int XReconfigureWMWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<XWindowChanges> arg4,
  ) {
    _XReconfigureWMWindow ??= _dylib.lookupFunction<_c_XReconfigureWMWindow,
        _dart_XReconfigureWMWindow>('XReconfigureWMWindow');
    return _XReconfigureWMWindow(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XReconfigureWMWindow _XReconfigureWMWindow;

  int XGetWMProtocols(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XGetWMProtocols ??=
        _dylib.lookupFunction<_c_XGetWMProtocols, _dart_XGetWMProtocols>(
            'XGetWMProtocols');
    return _XGetWMProtocols(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetWMProtocols _XGetWMProtocols;

  int XSetWMProtocols(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    int arg3,
  ) {
    _XSetWMProtocols ??=
        _dylib.lookupFunction<_c_XSetWMProtocols, _dart_XSetWMProtocols>(
            'XSetWMProtocols');
    return _XSetWMProtocols(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetWMProtocols _XSetWMProtocols;

  int XIconifyWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XIconifyWindow ??=
        _dylib.lookupFunction<_c_XIconifyWindow, _dart_XIconifyWindow>(
            'XIconifyWindow');
    return _XIconifyWindow(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XIconifyWindow _XIconifyWindow;

  int XWithdrawWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XWithdrawWindow ??=
        _dylib.lookupFunction<_c_XWithdrawWindow, _dart_XWithdrawWindow>(
            'XWithdrawWindow');
    return _XWithdrawWindow(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XWithdrawWindow _XWithdrawWindow;

  int XGetCommand(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XGetCommand ??=
        _dylib.lookupFunction<_c_XGetCommand, _dart_XGetCommand>('XGetCommand');
    return _XGetCommand(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetCommand _XGetCommand;

  int XGetWMColormapWindows(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XGetWMColormapWindows ??= _dylib.lookupFunction<_c_XGetWMColormapWindows,
        _dart_XGetWMColormapWindows>('XGetWMColormapWindows');
    return _XGetWMColormapWindows(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetWMColormapWindows _XGetWMColormapWindows;

  int XSetWMColormapWindows(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    int arg3,
  ) {
    _XSetWMColormapWindows ??= _dylib.lookupFunction<_c_XSetWMColormapWindows,
        _dart_XSetWMColormapWindows>('XSetWMColormapWindows');
    return _XSetWMColormapWindows(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetWMColormapWindows _XSetWMColormapWindows;

  void XFreeStringList(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    _XFreeStringList ??=
        _dylib.lookupFunction<_c_XFreeStringList, _dart_XFreeStringList>(
            'XFreeStringList');
    return _XFreeStringList(
      arg0,
    );
  }

  _dart_XFreeStringList _XFreeStringList;

  int XSetTransientForHint(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSetTransientForHint ??= _dylib.lookupFunction<_c_XSetTransientForHint,
        _dart_XSetTransientForHint>('XSetTransientForHint');
    return _XSetTransientForHint(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetTransientForHint _XSetTransientForHint;

  int XActivateScreenSaver(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XActivateScreenSaver ??= _dylib.lookupFunction<_c_XActivateScreenSaver,
        _dart_XActivateScreenSaver>('XActivateScreenSaver');
    return _XActivateScreenSaver(
      arg0,
    );
  }

  _dart_XActivateScreenSaver _XActivateScreenSaver;

  int XAddHost(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XHostAddress> arg1,
  ) {
    _XAddHost ??=
        _dylib.lookupFunction<_c_XAddHost, _dart_XAddHost>('XAddHost');
    return _XAddHost(
      arg0,
      arg1,
    );
  }

  _dart_XAddHost _XAddHost;

  int XAddHosts(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XHostAddress> arg1,
    int arg2,
  ) {
    _XAddHosts ??=
        _dylib.lookupFunction<_c_XAddHosts, _dart_XAddHosts>('XAddHosts');
    return _XAddHosts(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XAddHosts _XAddHosts;

  int XAddToExtensionList(
    ffi.Pointer<ffi.Pointer<XExtData>> arg0,
    ffi.Pointer<XExtData> arg1,
  ) {
    _XAddToExtensionList ??= _dylib.lookupFunction<_c_XAddToExtensionList,
        _dart_XAddToExtensionList>('XAddToExtensionList');
    return _XAddToExtensionList(
      arg0,
      arg1,
    );
  }

  _dart_XAddToExtensionList _XAddToExtensionList;

  int XAddToSaveSet(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XAddToSaveSet ??= _dylib
        .lookupFunction<_c_XAddToSaveSet, _dart_XAddToSaveSet>('XAddToSaveSet');
    return _XAddToSaveSet(
      arg0,
      arg1,
    );
  }

  _dart_XAddToSaveSet _XAddToSaveSet;

  int XAllocColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
  ) {
    _XAllocColor ??=
        _dylib.lookupFunction<_c_XAllocColor, _dart_XAllocColor>('XAllocColor');
    return _XAllocColor(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XAllocColor _XAllocColor;

  int XAllocColorCells(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint64> arg3,
    int arg4,
    ffi.Pointer<ffi.Uint64> arg5,
    int arg6,
  ) {
    _XAllocColorCells ??=
        _dylib.lookupFunction<_c_XAllocColorCells, _dart_XAllocColorCells>(
            'XAllocColorCells');
    return _XAllocColorCells(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XAllocColorCells _XAllocColorCells;

  int XAllocColorPlanes(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint64> arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    ffi.Pointer<ffi.Uint64> arg8,
    ffi.Pointer<ffi.Uint64> arg9,
    ffi.Pointer<ffi.Uint64> arg10,
  ) {
    _XAllocColorPlanes ??=
        _dylib.lookupFunction<_c_XAllocColorPlanes, _dart_XAllocColorPlanes>(
            'XAllocColorPlanes');
    return _XAllocColorPlanes(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  _dart_XAllocColorPlanes _XAllocColorPlanes;

  int XAllocNamedColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<XColor> arg3,
    ffi.Pointer<XColor> arg4,
  ) {
    _XAllocNamedColor ??=
        _dylib.lookupFunction<_c_XAllocNamedColor, _dart_XAllocNamedColor>(
            'XAllocNamedColor');
    return _XAllocNamedColor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XAllocNamedColor _XAllocNamedColor;

  int XAllowEvents(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XAllowEvents ??= _dylib
        .lookupFunction<_c_XAllowEvents, _dart_XAllowEvents>('XAllowEvents');
    return _XAllowEvents(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XAllowEvents _XAllowEvents;

  int XAutoRepeatOff(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XAutoRepeatOff ??=
        _dylib.lookupFunction<_c_XAutoRepeatOff, _dart_XAutoRepeatOff>(
            'XAutoRepeatOff');
    return _XAutoRepeatOff(
      arg0,
    );
  }

  _dart_XAutoRepeatOff _XAutoRepeatOff;

  int XAutoRepeatOn(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XAutoRepeatOn ??= _dylib
        .lookupFunction<_c_XAutoRepeatOn, _dart_XAutoRepeatOn>('XAutoRepeatOn');
    return _XAutoRepeatOn(
      arg0,
    );
  }

  _dart_XAutoRepeatOn _XAutoRepeatOn;

  int XBell(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XBell ??= _dylib.lookupFunction<_c_XBell, _dart_XBell>('XBell');
    return _XBell(
      arg0,
      arg1,
    );
  }

  _dart_XBell _XBell;

  int XBitmapBitOrder(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XBitmapBitOrder ??=
        _dylib.lookupFunction<_c_XBitmapBitOrder, _dart_XBitmapBitOrder>(
            'XBitmapBitOrder');
    return _XBitmapBitOrder(
      arg0,
    );
  }

  _dart_XBitmapBitOrder _XBitmapBitOrder;

  int XBitmapPad(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XBitmapPad ??=
        _dylib.lookupFunction<_c_XBitmapPad, _dart_XBitmapPad>('XBitmapPad');
    return _XBitmapPad(
      arg0,
    );
  }

  _dart_XBitmapPad _XBitmapPad;

  int XBitmapUnit(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XBitmapUnit ??=
        _dylib.lookupFunction<_c_XBitmapUnit, _dart_XBitmapUnit>('XBitmapUnit');
    return _XBitmapUnit(
      arg0,
    );
  }

  _dart_XBitmapUnit _XBitmapUnit;

  int XCellsOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XCellsOfScreen ??=
        _dylib.lookupFunction<_c_XCellsOfScreen, _dart_XCellsOfScreen>(
            'XCellsOfScreen');
    return _XCellsOfScreen(
      arg0,
    );
  }

  _dart_XCellsOfScreen _XCellsOfScreen;

  int XChangeActivePointerGrab(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XChangeActivePointerGrab ??= _dylib.lookupFunction<
        _c_XChangeActivePointerGrab,
        _dart_XChangeActivePointerGrab>('XChangeActivePointerGrab');
    return _XChangeActivePointerGrab(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XChangeActivePointerGrab _XChangeActivePointerGrab;

  int XChangeGC(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    ffi.Pointer<XGCValues> arg3,
  ) {
    _XChangeGC ??=
        _dylib.lookupFunction<_c_XChangeGC, _dart_XChangeGC>('XChangeGC');
    return _XChangeGC(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XChangeGC _XChangeGC;

  int XChangeKeyboardControl(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XKeyboardControl> arg2,
  ) {
    _XChangeKeyboardControl ??= _dylib.lookupFunction<_c_XChangeKeyboardControl,
        _dart_XChangeKeyboardControl>('XChangeKeyboardControl');
    return _XChangeKeyboardControl(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XChangeKeyboardControl _XChangeKeyboardControl;

  int XChangeKeyboardMapping(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint64> arg3,
    int arg4,
  ) {
    _XChangeKeyboardMapping ??= _dylib.lookupFunction<_c_XChangeKeyboardMapping,
        _dart_XChangeKeyboardMapping>('XChangeKeyboardMapping');
    return _XChangeKeyboardMapping(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XChangeKeyboardMapping _XChangeKeyboardMapping;

  int XChangePointerControl(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    _XChangePointerControl ??= _dylib.lookupFunction<_c_XChangePointerControl,
        _dart_XChangePointerControl>('XChangePointerControl');
    return _XChangePointerControl(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XChangePointerControl _XChangePointerControl;

  int XChangeProperty(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Uint8> arg6,
    int arg7,
  ) {
    _XChangeProperty ??=
        _dylib.lookupFunction<_c_XChangeProperty, _dart_XChangeProperty>(
            'XChangeProperty');
    return _XChangeProperty(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XChangeProperty _XChangeProperty;

  int XChangeSaveSet(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XChangeSaveSet ??=
        _dylib.lookupFunction<_c_XChangeSaveSet, _dart_XChangeSaveSet>(
            'XChangeSaveSet');
    return _XChangeSaveSet(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XChangeSaveSet _XChangeSaveSet;

  int XChangeWindowAttributes(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XSetWindowAttributes> arg3,
  ) {
    _XChangeWindowAttributes ??= _dylib.lookupFunction<
        _c_XChangeWindowAttributes,
        _dart_XChangeWindowAttributes>('XChangeWindowAttributes');
    return _XChangeWindowAttributes(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XChangeWindowAttributes _XChangeWindowAttributes;

  int XCirculateSubwindows(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XCirculateSubwindows ??= _dylib.lookupFunction<_c_XCirculateSubwindows,
        _dart_XCirculateSubwindows>('XCirculateSubwindows');
    return _XCirculateSubwindows(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XCirculateSubwindows _XCirculateSubwindows;

  int XCirculateSubwindowsDown(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XCirculateSubwindowsDown ??= _dylib.lookupFunction<
        _c_XCirculateSubwindowsDown,
        _dart_XCirculateSubwindowsDown>('XCirculateSubwindowsDown');
    return _XCirculateSubwindowsDown(
      arg0,
      arg1,
    );
  }

  _dart_XCirculateSubwindowsDown _XCirculateSubwindowsDown;

  int XCirculateSubwindowsUp(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XCirculateSubwindowsUp ??= _dylib.lookupFunction<_c_XCirculateSubwindowsUp,
        _dart_XCirculateSubwindowsUp>('XCirculateSubwindowsUp');
    return _XCirculateSubwindowsUp(
      arg0,
      arg1,
    );
  }

  _dart_XCirculateSubwindowsUp _XCirculateSubwindowsUp;

  int XClearArea(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XClearArea ??=
        _dylib.lookupFunction<_c_XClearArea, _dart_XClearArea>('XClearArea');
    return _XClearArea(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XClearArea _XClearArea;

  int XClearWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XClearWindow ??= _dylib
        .lookupFunction<_c_XClearWindow, _dart_XClearWindow>('XClearWindow');
    return _XClearWindow(
      arg0,
      arg1,
    );
  }

  _dart_XClearWindow _XClearWindow;

  int XCloseDisplay(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XCloseDisplay ??= _dylib
        .lookupFunction<_c_XCloseDisplay, _dart_XCloseDisplay>('XCloseDisplay');
    return _XCloseDisplay(
      arg0,
    );
  }

  _dart_XCloseDisplay _XCloseDisplay;

  int XConfigureWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XWindowChanges> arg3,
  ) {
    _XConfigureWindow ??=
        _dylib.lookupFunction<_c_XConfigureWindow, _dart_XConfigureWindow>(
            'XConfigureWindow');
    return _XConfigureWindow(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XConfigureWindow _XConfigureWindow;

  int XConnectionNumber(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XConnectionNumber ??=
        _dylib.lookupFunction<_c_XConnectionNumber, _dart_XConnectionNumber>(
            'XConnectionNumber');
    return _XConnectionNumber(
      arg0,
    );
  }

  _dart_XConnectionNumber _XConnectionNumber;

  int XConvertSelection(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    _XConvertSelection ??=
        _dylib.lookupFunction<_c_XConvertSelection, _dart_XConvertSelection>(
            'XConvertSelection');
    return _XConvertSelection(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XConvertSelection _XConvertSelection;

  int XCopyArea(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
  ) {
    _XCopyArea ??=
        _dylib.lookupFunction<_c_XCopyArea, _dart_XCopyArea>('XCopyArea');
    return _XCopyArea(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  _dart_XCopyArea _XCopyArea;

  int XCopyGC(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    ffi.Pointer<_XGC> arg3,
  ) {
    _XCopyGC ??= _dylib.lookupFunction<_c_XCopyGC, _dart_XCopyGC>('XCopyGC');
    return _XCopyGC(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XCopyGC _XCopyGC;

  int XCopyPlane(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
    int arg10,
  ) {
    _XCopyPlane ??=
        _dylib.lookupFunction<_c_XCopyPlane, _dart_XCopyPlane>('XCopyPlane');
    return _XCopyPlane(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  _dart_XCopyPlane _XCopyPlane;

  int XDefaultDepth(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDefaultDepth ??= _dylib
        .lookupFunction<_c_XDefaultDepth, _dart_XDefaultDepth>('XDefaultDepth');
    return _XDefaultDepth(
      arg0,
      arg1,
    );
  }

  _dart_XDefaultDepth _XDefaultDepth;

  int XDefaultDepthOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XDefaultDepthOfScreen ??= _dylib.lookupFunction<_c_XDefaultDepthOfScreen,
        _dart_XDefaultDepthOfScreen>('XDefaultDepthOfScreen');
    return _XDefaultDepthOfScreen(
      arg0,
    );
  }

  _dart_XDefaultDepthOfScreen _XDefaultDepthOfScreen;

  int XDefaultScreen(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XDefaultScreen ??=
        _dylib.lookupFunction<_c_XDefaultScreen, _dart_XDefaultScreen>(
            'XDefaultScreen');
    return _XDefaultScreen(
      arg0,
    );
  }

  _dart_XDefaultScreen _XDefaultScreen;

  int XDefineCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XDefineCursor ??= _dylib
        .lookupFunction<_c_XDefineCursor, _dart_XDefineCursor>('XDefineCursor');
    return _XDefineCursor(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XDefineCursor _XDefineCursor;

  int XDeleteProperty(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XDeleteProperty ??=
        _dylib.lookupFunction<_c_XDeleteProperty, _dart_XDeleteProperty>(
            'XDeleteProperty');
    return _XDeleteProperty(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XDeleteProperty _XDeleteProperty;

  int XDestroyWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDestroyWindow ??=
        _dylib.lookupFunction<_c_XDestroyWindow, _dart_XDestroyWindow>(
            'XDestroyWindow');
    return _XDestroyWindow(
      arg0,
      arg1,
    );
  }

  _dart_XDestroyWindow _XDestroyWindow;

  int XDestroySubwindows(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDestroySubwindows ??=
        _dylib.lookupFunction<_c_XDestroySubwindows, _dart_XDestroySubwindows>(
            'XDestroySubwindows');
    return _XDestroySubwindows(
      arg0,
      arg1,
    );
  }

  _dart_XDestroySubwindows _XDestroySubwindows;

  int XDoesBackingStore(
    ffi.Pointer<Screen> arg0,
  ) {
    _XDoesBackingStore ??=
        _dylib.lookupFunction<_c_XDoesBackingStore, _dart_XDoesBackingStore>(
            'XDoesBackingStore');
    return _XDoesBackingStore(
      arg0,
    );
  }

  _dart_XDoesBackingStore _XDoesBackingStore;

  int XDoesSaveUnders(
    ffi.Pointer<Screen> arg0,
  ) {
    _XDoesSaveUnders ??=
        _dylib.lookupFunction<_c_XDoesSaveUnders, _dart_XDoesSaveUnders>(
            'XDoesSaveUnders');
    return _XDoesSaveUnders(
      arg0,
    );
  }

  _dart_XDoesSaveUnders _XDoesSaveUnders;

  int XDisableAccessControl(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XDisableAccessControl ??= _dylib.lookupFunction<_c_XDisableAccessControl,
        _dart_XDisableAccessControl>('XDisableAccessControl');
    return _XDisableAccessControl(
      arg0,
    );
  }

  _dart_XDisableAccessControl _XDisableAccessControl;

  int XDisplayCells(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDisplayCells ??= _dylib
        .lookupFunction<_c_XDisplayCells, _dart_XDisplayCells>('XDisplayCells');
    return _XDisplayCells(
      arg0,
      arg1,
    );
  }

  _dart_XDisplayCells _XDisplayCells;

  int XDisplayHeight(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDisplayHeight ??=
        _dylib.lookupFunction<_c_XDisplayHeight, _dart_XDisplayHeight>(
            'XDisplayHeight');
    return _XDisplayHeight(
      arg0,
      arg1,
    );
  }

  _dart_XDisplayHeight _XDisplayHeight;

  int XDisplayHeightMM(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDisplayHeightMM ??=
        _dylib.lookupFunction<_c_XDisplayHeightMM, _dart_XDisplayHeightMM>(
            'XDisplayHeightMM');
    return _XDisplayHeightMM(
      arg0,
      arg1,
    );
  }

  _dart_XDisplayHeightMM _XDisplayHeightMM;

  int XDisplayKeycodes(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XDisplayKeycodes ??=
        _dylib.lookupFunction<_c_XDisplayKeycodes, _dart_XDisplayKeycodes>(
            'XDisplayKeycodes');
    return _XDisplayKeycodes(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XDisplayKeycodes _XDisplayKeycodes;

  int XDisplayPlanes(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDisplayPlanes ??=
        _dylib.lookupFunction<_c_XDisplayPlanes, _dart_XDisplayPlanes>(
            'XDisplayPlanes');
    return _XDisplayPlanes(
      arg0,
      arg1,
    );
  }

  _dart_XDisplayPlanes _XDisplayPlanes;

  int XDisplayWidth(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDisplayWidth ??= _dylib
        .lookupFunction<_c_XDisplayWidth, _dart_XDisplayWidth>('XDisplayWidth');
    return _XDisplayWidth(
      arg0,
      arg1,
    );
  }

  _dart_XDisplayWidth _XDisplayWidth;

  int XDisplayWidthMM(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDisplayWidthMM ??=
        _dylib.lookupFunction<_c_XDisplayWidthMM, _dart_XDisplayWidthMM>(
            'XDisplayWidthMM');
    return _XDisplayWidthMM(
      arg0,
      arg1,
    );
  }

  _dart_XDisplayWidthMM _XDisplayWidthMM;

  int XDrawArc(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    _XDrawArc ??=
        _dylib.lookupFunction<_c_XDrawArc, _dart_XDrawArc>('XDrawArc');
    return _XDrawArc(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XDrawArc _XDrawArc;

  int XDrawArcs(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XArc> arg3,
    int arg4,
  ) {
    _XDrawArcs ??=
        _dylib.lookupFunction<_c_XDrawArcs, _dart_XDrawArcs>('XDrawArcs');
    return _XDrawArcs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XDrawArcs _XDrawArcs;

  int XDrawImageString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Int8> arg5,
    int arg6,
  ) {
    _XDrawImageString ??=
        _dylib.lookupFunction<_c_XDrawImageString, _dart_XDrawImageString>(
            'XDrawImageString');
    return _XDrawImageString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawImageString _XDrawImageString;

  int XDrawImageString16(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XChar2b> arg5,
    int arg6,
  ) {
    _XDrawImageString16 ??=
        _dylib.lookupFunction<_c_XDrawImageString16, _dart_XDrawImageString16>(
            'XDrawImageString16');
    return _XDrawImageString16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawImageString16 _XDrawImageString16;

  int XDrawLine(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XDrawLine ??=
        _dylib.lookupFunction<_c_XDrawLine, _dart_XDrawLine>('XDrawLine');
    return _XDrawLine(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawLine _XDrawLine;

  int XDrawLines(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XPoint> arg3,
    int arg4,
    int arg5,
  ) {
    _XDrawLines ??=
        _dylib.lookupFunction<_c_XDrawLines, _dart_XDrawLines>('XDrawLines');
    return _XDrawLines(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XDrawLines _XDrawLines;

  int XDrawPoint(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
  ) {
    _XDrawPoint ??=
        _dylib.lookupFunction<_c_XDrawPoint, _dart_XDrawPoint>('XDrawPoint');
    return _XDrawPoint(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XDrawPoint _XDrawPoint;

  int XDrawPoints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XPoint> arg3,
    int arg4,
    int arg5,
  ) {
    _XDrawPoints ??=
        _dylib.lookupFunction<_c_XDrawPoints, _dart_XDrawPoints>('XDrawPoints');
    return _XDrawPoints(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XDrawPoints _XDrawPoints;

  int XDrawRectangle(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XDrawRectangle ??=
        _dylib.lookupFunction<_c_XDrawRectangle, _dart_XDrawRectangle>(
            'XDrawRectangle');
    return _XDrawRectangle(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawRectangle _XDrawRectangle;

  int XDrawRectangles(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XRectangle> arg3,
    int arg4,
  ) {
    _XDrawRectangles ??=
        _dylib.lookupFunction<_c_XDrawRectangles, _dart_XDrawRectangles>(
            'XDrawRectangles');
    return _XDrawRectangles(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XDrawRectangles _XDrawRectangles;

  int XDrawSegments(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XSegment> arg3,
    int arg4,
  ) {
    _XDrawSegments ??= _dylib
        .lookupFunction<_c_XDrawSegments, _dart_XDrawSegments>('XDrawSegments');
    return _XDrawSegments(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XDrawSegments _XDrawSegments;

  int XDrawString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Int8> arg5,
    int arg6,
  ) {
    _XDrawString ??=
        _dylib.lookupFunction<_c_XDrawString, _dart_XDrawString>('XDrawString');
    return _XDrawString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawString _XDrawString;

  int XDrawString16(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XChar2b> arg5,
    int arg6,
  ) {
    _XDrawString16 ??= _dylib
        .lookupFunction<_c_XDrawString16, _dart_XDrawString16>('XDrawString16');
    return _XDrawString16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawString16 _XDrawString16;

  int XDrawText(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XTextItem> arg5,
    int arg6,
  ) {
    _XDrawText ??=
        _dylib.lookupFunction<_c_XDrawText, _dart_XDrawText>('XDrawText');
    return _XDrawText(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawText _XDrawText;

  int XDrawText16(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XTextItem16> arg5,
    int arg6,
  ) {
    _XDrawText16 ??=
        _dylib.lookupFunction<_c_XDrawText16, _dart_XDrawText16>('XDrawText16');
    return _XDrawText16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawText16 _XDrawText16;

  int XEnableAccessControl(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XEnableAccessControl ??= _dylib.lookupFunction<_c_XEnableAccessControl,
        _dart_XEnableAccessControl>('XEnableAccessControl');
    return _XEnableAccessControl(
      arg0,
    );
  }

  _dart_XEnableAccessControl _XEnableAccessControl;

  int XEventsQueued(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XEventsQueued ??= _dylib
        .lookupFunction<_c_XEventsQueued, _dart_XEventsQueued>('XEventsQueued');
    return _XEventsQueued(
      arg0,
      arg1,
    );
  }

  _dart_XEventsQueued _XEventsQueued;

  int XFetchName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    _XFetchName ??=
        _dylib.lookupFunction<_c_XFetchName, _dart_XFetchName>('XFetchName');
    return _XFetchName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XFetchName _XFetchName;

  int XFillArc(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    _XFillArc ??=
        _dylib.lookupFunction<_c_XFillArc, _dart_XFillArc>('XFillArc');
    return _XFillArc(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XFillArc _XFillArc;

  int XFillArcs(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XArc> arg3,
    int arg4,
  ) {
    _XFillArcs ??=
        _dylib.lookupFunction<_c_XFillArcs, _dart_XFillArcs>('XFillArcs');
    return _XFillArcs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XFillArcs _XFillArcs;

  int XFillPolygon(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XPoint> arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XFillPolygon ??= _dylib
        .lookupFunction<_c_XFillPolygon, _dart_XFillPolygon>('XFillPolygon');
    return _XFillPolygon(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XFillPolygon _XFillPolygon;

  int XFillRectangle(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XFillRectangle ??=
        _dylib.lookupFunction<_c_XFillRectangle, _dart_XFillRectangle>(
            'XFillRectangle');
    return _XFillRectangle(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XFillRectangle _XFillRectangle;

  int XFillRectangles(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XRectangle> arg3,
    int arg4,
  ) {
    _XFillRectangles ??=
        _dylib.lookupFunction<_c_XFillRectangles, _dart_XFillRectangles>(
            'XFillRectangles');
    return _XFillRectangles(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XFillRectangles _XFillRectangles;

  int XFlush(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XFlush ??= _dylib.lookupFunction<_c_XFlush, _dart_XFlush>('XFlush');
    return _XFlush(
      arg0,
    );
  }

  _dart_XFlush _XFlush;

  int XForceScreenSaver(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XForceScreenSaver ??=
        _dylib.lookupFunction<_c_XForceScreenSaver, _dart_XForceScreenSaver>(
            'XForceScreenSaver');
    return _XForceScreenSaver(
      arg0,
      arg1,
    );
  }

  _dart_XForceScreenSaver _XForceScreenSaver;

  int XFree(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _XFree ??= _dylib.lookupFunction<_c_XFree, _dart_XFree>('XFree');
    return _XFree(
      arg0,
    );
  }

  _dart_XFree _XFree;

  int XFreeColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XFreeColormap ??= _dylib
        .lookupFunction<_c_XFreeColormap, _dart_XFreeColormap>('XFreeColormap');
    return _XFreeColormap(
      arg0,
      arg1,
    );
  }

  _dart_XFreeColormap _XFreeColormap;

  int XFreeColors(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    int arg3,
    int arg4,
  ) {
    _XFreeColors ??=
        _dylib.lookupFunction<_c_XFreeColors, _dart_XFreeColors>('XFreeColors');
    return _XFreeColors(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XFreeColors _XFreeColors;

  int XFreeCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XFreeCursor ??=
        _dylib.lookupFunction<_c_XFreeCursor, _dart_XFreeCursor>('XFreeCursor');
    return _XFreeCursor(
      arg0,
      arg1,
    );
  }

  _dart_XFreeCursor _XFreeCursor;

  int XFreeExtensionList(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    _XFreeExtensionList ??=
        _dylib.lookupFunction<_c_XFreeExtensionList, _dart_XFreeExtensionList>(
            'XFreeExtensionList');
    return _XFreeExtensionList(
      arg0,
    );
  }

  _dart_XFreeExtensionList _XFreeExtensionList;

  int XFreeFont(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XFontStruct> arg1,
  ) {
    _XFreeFont ??=
        _dylib.lookupFunction<_c_XFreeFont, _dart_XFreeFont>('XFreeFont');
    return _XFreeFont(
      arg0,
      arg1,
    );
  }

  _dart_XFreeFont _XFreeFont;

  int XFreeFontInfo(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<XFontStruct> arg1,
    int arg2,
  ) {
    _XFreeFontInfo ??= _dylib
        .lookupFunction<_c_XFreeFontInfo, _dart_XFreeFontInfo>('XFreeFontInfo');
    return _XFreeFontInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XFreeFontInfo _XFreeFontInfo;

  int XFreeFontNames(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    _XFreeFontNames ??=
        _dylib.lookupFunction<_c_XFreeFontNames, _dart_XFreeFontNames>(
            'XFreeFontNames');
    return _XFreeFontNames(
      arg0,
    );
  }

  _dart_XFreeFontNames _XFreeFontNames;

  int XFreeFontPath(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    _XFreeFontPath ??= _dylib
        .lookupFunction<_c_XFreeFontPath, _dart_XFreeFontPath>('XFreeFontPath');
    return _XFreeFontPath(
      arg0,
    );
  }

  _dart_XFreeFontPath _XFreeFontPath;

  int XFreeGC(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
  ) {
    _XFreeGC ??= _dylib.lookupFunction<_c_XFreeGC, _dart_XFreeGC>('XFreeGC');
    return _XFreeGC(
      arg0,
      arg1,
    );
  }

  _dart_XFreeGC _XFreeGC;

  int XFreeModifiermap(
    ffi.Pointer<XModifierKeymap> arg0,
  ) {
    _XFreeModifiermap ??=
        _dylib.lookupFunction<_c_XFreeModifiermap, _dart_XFreeModifiermap>(
            'XFreeModifiermap');
    return _XFreeModifiermap(
      arg0,
    );
  }

  _dart_XFreeModifiermap _XFreeModifiermap;

  int XFreePixmap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XFreePixmap ??=
        _dylib.lookupFunction<_c_XFreePixmap, _dart_XFreePixmap>('XFreePixmap');
    return _XFreePixmap(
      arg0,
      arg1,
    );
  }

  _dart_XFreePixmap _XFreePixmap;

  int XGeometry(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    ffi.Pointer<ffi.Int32> arg9,
    ffi.Pointer<ffi.Int32> arg10,
    ffi.Pointer<ffi.Int32> arg11,
    ffi.Pointer<ffi.Int32> arg12,
  ) {
    _XGeometry ??=
        _dylib.lookupFunction<_c_XGeometry, _dart_XGeometry>('XGeometry');
    return _XGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
    );
  }

  _dart_XGeometry _XGeometry;

  int XGetErrorDatabaseText(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.Int8> arg4,
    int arg5,
  ) {
    _XGetErrorDatabaseText ??= _dylib.lookupFunction<_c_XGetErrorDatabaseText,
        _dart_XGetErrorDatabaseText>('XGetErrorDatabaseText');
    return _XGetErrorDatabaseText(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XGetErrorDatabaseText _XGetErrorDatabaseText;

  int XGetErrorText(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
  ) {
    _XGetErrorText ??= _dylib
        .lookupFunction<_c_XGetErrorText, _dart_XGetErrorText>('XGetErrorText');
    return _XGetErrorText(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetErrorText _XGetErrorText;

  int XGetFontProperty(
    ffi.Pointer<XFontStruct> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    _XGetFontProperty ??=
        _dylib.lookupFunction<_c_XGetFontProperty, _dart_XGetFontProperty>(
            'XGetFontProperty');
    return _XGetFontProperty(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetFontProperty _XGetFontProperty;

  int XGetGCValues(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    ffi.Pointer<XGCValues> arg3,
  ) {
    _XGetGCValues ??= _dylib
        .lookupFunction<_c_XGetGCValues, _dart_XGetGCValues>('XGetGCValues');
    return _XGetGCValues(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetGCValues _XGetGCValues;

  int XGetGeometry(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Uint32> arg5,
    ffi.Pointer<ffi.Uint32> arg6,
    ffi.Pointer<ffi.Uint32> arg7,
    ffi.Pointer<ffi.Uint32> arg8,
  ) {
    _XGetGeometry ??= _dylib
        .lookupFunction<_c_XGetGeometry, _dart_XGetGeometry>('XGetGeometry');
    return _XGetGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XGetGeometry _XGetGeometry;

  int XGetIconName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    _XGetIconName ??= _dylib
        .lookupFunction<_c_XGetIconName, _dart_XGetIconName>('XGetIconName');
    return _XGetIconName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetIconName _XGetIconName;

  int XGetInputFocus(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XGetInputFocus ??=
        _dylib.lookupFunction<_c_XGetInputFocus, _dart_XGetInputFocus>(
            'XGetInputFocus');
    return _XGetInputFocus(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetInputFocus _XGetInputFocus;

  int XGetKeyboardControl(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XKeyboardState> arg1,
  ) {
    _XGetKeyboardControl ??= _dylib.lookupFunction<_c_XGetKeyboardControl,
        _dart_XGetKeyboardControl>('XGetKeyboardControl');
    return _XGetKeyboardControl(
      arg0,
      arg1,
    );
  }

  _dart_XGetKeyboardControl _XGetKeyboardControl;

  int XGetPointerControl(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XGetPointerControl ??=
        _dylib.lookupFunction<_c_XGetPointerControl, _dart_XGetPointerControl>(
            'XGetPointerControl');
    return _XGetPointerControl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetPointerControl _XGetPointerControl;

  int XGetPointerMapping(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int arg2,
  ) {
    _XGetPointerMapping ??=
        _dylib.lookupFunction<_c_XGetPointerMapping, _dart_XGetPointerMapping>(
            'XGetPointerMapping');
    return _XGetPointerMapping(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetPointerMapping _XGetPointerMapping;

  int XGetScreenSaver(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XGetScreenSaver ??=
        _dylib.lookupFunction<_c_XGetScreenSaver, _dart_XGetScreenSaver>(
            'XGetScreenSaver');
    return _XGetScreenSaver(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XGetScreenSaver _XGetScreenSaver;

  int XGetTransientForHint(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    _XGetTransientForHint ??= _dylib.lookupFunction<_c_XGetTransientForHint,
        _dart_XGetTransientForHint>('XGetTransientForHint');
    return _XGetTransientForHint(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetTransientForHint _XGetTransientForHint;

  int XGetWindowProperty(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    ffi.Pointer<ffi.Uint64> arg7,
    ffi.Pointer<ffi.Int32> arg8,
    ffi.Pointer<ffi.Uint64> arg9,
    ffi.Pointer<ffi.Uint64> arg10,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> arg11,
  ) {
    _XGetWindowProperty ??=
        _dylib.lookupFunction<_c_XGetWindowProperty, _dart_XGetWindowProperty>(
            'XGetWindowProperty');
    return _XGetWindowProperty(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
    );
  }

  _dart_XGetWindowProperty _XGetWindowProperty;

  int XGetWindowAttributes(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XWindowAttributes> arg2,
  ) {
    _XGetWindowAttributes ??= _dylib.lookupFunction<_c_XGetWindowAttributes,
        _dart_XGetWindowAttributes>('XGetWindowAttributes');
    return _XGetWindowAttributes(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetWindowAttributes _XGetWindowAttributes;

  int XGrabButton(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
  ) {
    _XGrabButton ??=
        _dylib.lookupFunction<_c_XGrabButton, _dart_XGrabButton>('XGrabButton');
    return _XGrabButton(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  _dart_XGrabButton _XGrabButton;

  int XGrabKey(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XGrabKey ??=
        _dylib.lookupFunction<_c_XGrabKey, _dart_XGrabKey>('XGrabKey');
    return _XGrabKey(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XGrabKey _XGrabKey;

  int XGrabKeyboard(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    _XGrabKeyboard ??= _dylib
        .lookupFunction<_c_XGrabKeyboard, _dart_XGrabKeyboard>('XGrabKeyboard');
    return _XGrabKeyboard(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XGrabKeyboard _XGrabKeyboard;

  int XGrabPointer(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    _XGrabPointer ??= _dylib
        .lookupFunction<_c_XGrabPointer, _dart_XGrabPointer>('XGrabPointer');
    return _XGrabPointer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XGrabPointer _XGrabPointer;

  int XGrabServer(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XGrabServer ??=
        _dylib.lookupFunction<_c_XGrabServer, _dart_XGrabServer>('XGrabServer');
    return _XGrabServer(
      arg0,
    );
  }

  _dart_XGrabServer _XGrabServer;

  int XHeightMMOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XHeightMMOfScreen ??=
        _dylib.lookupFunction<_c_XHeightMMOfScreen, _dart_XHeightMMOfScreen>(
            'XHeightMMOfScreen');
    return _XHeightMMOfScreen(
      arg0,
    );
  }

  _dart_XHeightMMOfScreen _XHeightMMOfScreen;

  int XHeightOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XHeightOfScreen ??=
        _dylib.lookupFunction<_c_XHeightOfScreen, _dart_XHeightOfScreen>(
            'XHeightOfScreen');
    return _XHeightOfScreen(
      arg0,
    );
  }

  _dart_XHeightOfScreen _XHeightOfScreen;

  int XImageByteOrder(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XImageByteOrder ??=
        _dylib.lookupFunction<_c_XImageByteOrder, _dart_XImageByteOrder>(
            'XImageByteOrder');
    return _XImageByteOrder(
      arg0,
    );
  }

  _dart_XImageByteOrder _XImageByteOrder;

  int XInstallColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XInstallColormap ??=
        _dylib.lookupFunction<_c_XInstallColormap, _dart_XInstallColormap>(
            'XInstallColormap');
    return _XInstallColormap(
      arg0,
      arg1,
    );
  }

  _dart_XInstallColormap _XInstallColormap;

  int XKeysymToKeycode(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XKeysymToKeycode ??=
        _dylib.lookupFunction<_c_XKeysymToKeycode, _dart_XKeysymToKeycode>(
            'XKeysymToKeycode');
    return _XKeysymToKeycode(
      arg0,
      arg1,
    );
  }

  _dart_XKeysymToKeycode _XKeysymToKeycode;

  int XKillClient(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XKillClient ??=
        _dylib.lookupFunction<_c_XKillClient, _dart_XKillClient>('XKillClient');
    return _XKillClient(
      arg0,
      arg1,
    );
  }

  _dart_XKillClient _XKillClient;

  int XLookupColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<XColor> arg3,
    ffi.Pointer<XColor> arg4,
  ) {
    _XLookupColor ??= _dylib
        .lookupFunction<_c_XLookupColor, _dart_XLookupColor>('XLookupColor');
    return _XLookupColor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XLookupColor _XLookupColor;

  int XLowerWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XLowerWindow ??= _dylib
        .lookupFunction<_c_XLowerWindow, _dart_XLowerWindow>('XLowerWindow');
    return _XLowerWindow(
      arg0,
      arg1,
    );
  }

  _dart_XLowerWindow _XLowerWindow;

  int XMapRaised(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XMapRaised ??=
        _dylib.lookupFunction<_c_XMapRaised, _dart_XMapRaised>('XMapRaised');
    return _XMapRaised(
      arg0,
      arg1,
    );
  }

  _dart_XMapRaised _XMapRaised;

  int XMapSubwindows(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XMapSubwindows ??=
        _dylib.lookupFunction<_c_XMapSubwindows, _dart_XMapSubwindows>(
            'XMapSubwindows');
    return _XMapSubwindows(
      arg0,
      arg1,
    );
  }

  _dart_XMapSubwindows _XMapSubwindows;

  int XMapWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XMapWindow ??=
        _dylib.lookupFunction<_c_XMapWindow, _dart_XMapWindow>('XMapWindow');
    return _XMapWindow(
      arg0,
      arg1,
    );
  }

  _dart_XMapWindow _XMapWindow;

  int XMaxCmapsOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XMaxCmapsOfScreen ??=
        _dylib.lookupFunction<_c_XMaxCmapsOfScreen, _dart_XMaxCmapsOfScreen>(
            'XMaxCmapsOfScreen');
    return _XMaxCmapsOfScreen(
      arg0,
    );
  }

  _dart_XMaxCmapsOfScreen _XMaxCmapsOfScreen;

  int XMinCmapsOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XMinCmapsOfScreen ??=
        _dylib.lookupFunction<_c_XMinCmapsOfScreen, _dart_XMinCmapsOfScreen>(
            'XMinCmapsOfScreen');
    return _XMinCmapsOfScreen(
      arg0,
    );
  }

  _dart_XMinCmapsOfScreen _XMinCmapsOfScreen;

  int XMoveResizeWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    _XMoveResizeWindow ??=
        _dylib.lookupFunction<_c_XMoveResizeWindow, _dart_XMoveResizeWindow>(
            'XMoveResizeWindow');
    return _XMoveResizeWindow(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XMoveResizeWindow _XMoveResizeWindow;

  int XMoveWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XMoveWindow ??=
        _dylib.lookupFunction<_c_XMoveWindow, _dart_XMoveWindow>('XMoveWindow');
    return _XMoveWindow(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XMoveWindow _XMoveWindow;

  int XNoOp(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XNoOp ??= _dylib.lookupFunction<_c_XNoOp, _dart_XNoOp>('XNoOp');
    return _XNoOp(
      arg0,
    );
  }

  _dart_XNoOp _XNoOp;

  int XParseColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<XColor> arg3,
  ) {
    _XParseColor ??=
        _dylib.lookupFunction<_c_XParseColor, _dart_XParseColor>('XParseColor');
    return _XParseColor(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XParseColor _XParseColor;

  int XParseGeometry(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Uint32> arg3,
    ffi.Pointer<ffi.Uint32> arg4,
  ) {
    _XParseGeometry ??=
        _dylib.lookupFunction<_c_XParseGeometry, _dart_XParseGeometry>(
            'XParseGeometry');
    return _XParseGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XParseGeometry _XParseGeometry;

  int XPending(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XPending ??=
        _dylib.lookupFunction<_c_XPending, _dart_XPending>('XPending');
    return _XPending(
      arg0,
    );
  }

  _dart_XPending _XPending;

  int XPlanesOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XPlanesOfScreen ??=
        _dylib.lookupFunction<_c_XPlanesOfScreen, _dart_XPlanesOfScreen>(
            'XPlanesOfScreen');
    return _XPlanesOfScreen(
      arg0,
    );
  }

  _dart_XPlanesOfScreen _XPlanesOfScreen;

  int XProtocolRevision(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XProtocolRevision ??=
        _dylib.lookupFunction<_c_XProtocolRevision, _dart_XProtocolRevision>(
            'XProtocolRevision');
    return _XProtocolRevision(
      arg0,
    );
  }

  _dart_XProtocolRevision _XProtocolRevision;

  int XProtocolVersion(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XProtocolVersion ??=
        _dylib.lookupFunction<_c_XProtocolVersion, _dart_XProtocolVersion>(
            'XProtocolVersion');
    return _XProtocolVersion(
      arg0,
    );
  }

  _dart_XProtocolVersion _XProtocolVersion;

  int XPutImage(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XImage> arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
  ) {
    _XPutImage ??=
        _dylib.lookupFunction<_c_XPutImage, _dart_XPutImage>('XPutImage');
    return _XPutImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  _dart_XPutImage _XPutImage;

  int XQLength(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XQLength ??=
        _dylib.lookupFunction<_c_XQLength, _dart_XQLength>('XQLength');
    return _XQLength(
      arg0,
    );
  }

  _dart_XQLength _XQLength;

  int XQueryBestCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Uint32> arg4,
    ffi.Pointer<ffi.Uint32> arg5,
  ) {
    _XQueryBestCursor ??=
        _dylib.lookupFunction<_c_XQueryBestCursor, _dart_XQueryBestCursor>(
            'XQueryBestCursor');
    return _XQueryBestCursor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XQueryBestCursor _XQueryBestCursor;

  int XQueryBestSize(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Uint32> arg5,
    ffi.Pointer<ffi.Uint32> arg6,
  ) {
    _XQueryBestSize ??=
        _dylib.lookupFunction<_c_XQueryBestSize, _dart_XQueryBestSize>(
            'XQueryBestSize');
    return _XQueryBestSize(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XQueryBestSize _XQueryBestSize;

  int XQueryBestStipple(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Uint32> arg4,
    ffi.Pointer<ffi.Uint32> arg5,
  ) {
    _XQueryBestStipple ??=
        _dylib.lookupFunction<_c_XQueryBestStipple, _dart_XQueryBestStipple>(
            'XQueryBestStipple');
    return _XQueryBestStipple(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XQueryBestStipple _XQueryBestStipple;

  int XQueryBestTile(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Uint32> arg4,
    ffi.Pointer<ffi.Uint32> arg5,
  ) {
    _XQueryBestTile ??=
        _dylib.lookupFunction<_c_XQueryBestTile, _dart_XQueryBestTile>(
            'XQueryBestTile');
    return _XQueryBestTile(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XQueryBestTile _XQueryBestTile;

  int XQueryColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
  ) {
    _XQueryColor ??=
        _dylib.lookupFunction<_c_XQueryColor, _dart_XQueryColor>('XQueryColor');
    return _XQueryColor(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XQueryColor _XQueryColor;

  int XQueryColors(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
    int arg3,
  ) {
    _XQueryColors ??= _dylib
        .lookupFunction<_c_XQueryColors, _dart_XQueryColors>('XQueryColors');
    return _XQueryColors(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XQueryColors _XQueryColors;

  int XQueryExtension(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XQueryExtension ??=
        _dylib.lookupFunction<_c_XQueryExtension, _dart_XQueryExtension>(
            'XQueryExtension');
    return _XQueryExtension(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XQueryExtension _XQueryExtension;

  int XQueryKeymap(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _XQueryKeymap ??= _dylib
        .lookupFunction<_c_XQueryKeymap, _dart_XQueryKeymap>('XQueryKeymap');
    return _XQueryKeymap(
      arg0,
      arg1,
    );
  }

  _dart_XQueryKeymap _XQueryKeymap;

  int XQueryPointer(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    ffi.Pointer<ffi.Uint64> arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Int32> arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<ffi.Int32> arg7,
    ffi.Pointer<ffi.Uint32> arg8,
  ) {
    _XQueryPointer ??= _dylib
        .lookupFunction<_c_XQueryPointer, _dart_XQueryPointer>('XQueryPointer');
    return _XQueryPointer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XQueryPointer _XQueryPointer;

  int XQueryTextExtents(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Int32> arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<XCharStruct> arg7,
  ) {
    _XQueryTextExtents ??=
        _dylib.lookupFunction<_c_XQueryTextExtents, _dart_XQueryTextExtents>(
            'XQueryTextExtents');
    return _XQueryTextExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XQueryTextExtents _XQueryTextExtents;

  int XQueryTextExtents16(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XChar2b> arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Int32> arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<XCharStruct> arg7,
  ) {
    _XQueryTextExtents16 ??= _dylib.lookupFunction<_c_XQueryTextExtents16,
        _dart_XQueryTextExtents16>('XQueryTextExtents16');
    return _XQueryTextExtents16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XQueryTextExtents16 _XQueryTextExtents16;

  int XQueryTree(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    ffi.Pointer<ffi.Uint64> arg3,
    ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg4,
    ffi.Pointer<ffi.Uint32> arg5,
  ) {
    _XQueryTree ??=
        _dylib.lookupFunction<_c_XQueryTree, _dart_XQueryTree>('XQueryTree');
    return _XQueryTree(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XQueryTree _XQueryTree;

  int XRaiseWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XRaiseWindow ??= _dylib
        .lookupFunction<_c_XRaiseWindow, _dart_XRaiseWindow>('XRaiseWindow');
    return _XRaiseWindow(
      arg0,
      arg1,
    );
  }

  _dart_XRaiseWindow _XRaiseWindow;

  int XReadBitmapFile(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Uint32> arg3,
    ffi.Pointer<ffi.Uint32> arg4,
    ffi.Pointer<ffi.Uint64> arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<ffi.Int32> arg7,
  ) {
    _XReadBitmapFile ??=
        _dylib.lookupFunction<_c_XReadBitmapFile, _dart_XReadBitmapFile>(
            'XReadBitmapFile');
    return _XReadBitmapFile(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XReadBitmapFile _XReadBitmapFile;

  int XReadBitmapFileData(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Uint32> arg1,
    ffi.Pointer<ffi.Uint32> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    _XReadBitmapFileData ??= _dylib.lookupFunction<_c_XReadBitmapFileData,
        _dart_XReadBitmapFileData>('XReadBitmapFileData');
    return _XReadBitmapFileData(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XReadBitmapFileData _XReadBitmapFileData;

  int XRebindKeysym(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    int arg3,
    ffi.Pointer<ffi.Uint8> arg4,
    int arg5,
  ) {
    _XRebindKeysym ??= _dylib
        .lookupFunction<_c_XRebindKeysym, _dart_XRebindKeysym>('XRebindKeysym');
    return _XRebindKeysym(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XRebindKeysym _XRebindKeysym;

  int XRecolorCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
    ffi.Pointer<XColor> arg3,
  ) {
    _XRecolorCursor ??=
        _dylib.lookupFunction<_c_XRecolorCursor, _dart_XRecolorCursor>(
            'XRecolorCursor');
    return _XRecolorCursor(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XRecolorCursor _XRecolorCursor;

  int XRefreshKeyboardMapping(
    ffi.Pointer<XMappingEvent> arg0,
  ) {
    _XRefreshKeyboardMapping ??= _dylib.lookupFunction<
        _c_XRefreshKeyboardMapping,
        _dart_XRefreshKeyboardMapping>('XRefreshKeyboardMapping');
    return _XRefreshKeyboardMapping(
      arg0,
    );
  }

  _dart_XRefreshKeyboardMapping _XRefreshKeyboardMapping;

  int XRemoveFromSaveSet(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XRemoveFromSaveSet ??=
        _dylib.lookupFunction<_c_XRemoveFromSaveSet, _dart_XRemoveFromSaveSet>(
            'XRemoveFromSaveSet');
    return _XRemoveFromSaveSet(
      arg0,
      arg1,
    );
  }

  _dart_XRemoveFromSaveSet _XRemoveFromSaveSet;

  int XRemoveHost(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XHostAddress> arg1,
  ) {
    _XRemoveHost ??=
        _dylib.lookupFunction<_c_XRemoveHost, _dart_XRemoveHost>('XRemoveHost');
    return _XRemoveHost(
      arg0,
      arg1,
    );
  }

  _dart_XRemoveHost _XRemoveHost;

  int XRemoveHosts(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XHostAddress> arg1,
    int arg2,
  ) {
    _XRemoveHosts ??= _dylib
        .lookupFunction<_c_XRemoveHosts, _dart_XRemoveHosts>('XRemoveHosts');
    return _XRemoveHosts(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XRemoveHosts _XRemoveHosts;

  int XReparentWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XReparentWindow ??=
        _dylib.lookupFunction<_c_XReparentWindow, _dart_XReparentWindow>(
            'XReparentWindow');
    return _XReparentWindow(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XReparentWindow _XReparentWindow;

  int XResetScreenSaver(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XResetScreenSaver ??=
        _dylib.lookupFunction<_c_XResetScreenSaver, _dart_XResetScreenSaver>(
            'XResetScreenSaver');
    return _XResetScreenSaver(
      arg0,
    );
  }

  _dart_XResetScreenSaver _XResetScreenSaver;

  int XResizeWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XResizeWindow ??= _dylib
        .lookupFunction<_c_XResizeWindow, _dart_XResizeWindow>('XResizeWindow');
    return _XResizeWindow(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XResizeWindow _XResizeWindow;

  int XRestackWindows(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    int arg2,
  ) {
    _XRestackWindows ??=
        _dylib.lookupFunction<_c_XRestackWindows, _dart_XRestackWindows>(
            'XRestackWindows');
    return _XRestackWindows(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XRestackWindows _XRestackWindows;

  int XRotateBuffers(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XRotateBuffers ??=
        _dylib.lookupFunction<_c_XRotateBuffers, _dart_XRotateBuffers>(
            'XRotateBuffers');
    return _XRotateBuffers(
      arg0,
      arg1,
    );
  }

  _dart_XRotateBuffers _XRotateBuffers;

  int XRotateWindowProperties(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    int arg3,
    int arg4,
  ) {
    _XRotateWindowProperties ??= _dylib.lookupFunction<
        _c_XRotateWindowProperties,
        _dart_XRotateWindowProperties>('XRotateWindowProperties');
    return _XRotateWindowProperties(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XRotateWindowProperties _XRotateWindowProperties;

  int XScreenCount(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XScreenCount ??= _dylib
        .lookupFunction<_c_XScreenCount, _dart_XScreenCount>('XScreenCount');
    return _XScreenCount(
      arg0,
    );
  }

  _dart_XScreenCount _XScreenCount;

  int XSelectInput(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSelectInput ??= _dylib
        .lookupFunction<_c_XSelectInput, _dart_XSelectInput>('XSelectInput');
    return _XSelectInput(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSelectInput _XSelectInput;

  int XSetAccessControl(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XSetAccessControl ??=
        _dylib.lookupFunction<_c_XSetAccessControl, _dart_XSetAccessControl>(
            'XSetAccessControl');
    return _XSetAccessControl(
      arg0,
      arg1,
    );
  }

  _dart_XSetAccessControl _XSetAccessControl;

  int XSetArcMode(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetArcMode ??=
        _dylib.lookupFunction<_c_XSetArcMode, _dart_XSetArcMode>('XSetArcMode');
    return _XSetArcMode(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetArcMode _XSetArcMode;

  int XSetBackground(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetBackground ??=
        _dylib.lookupFunction<_c_XSetBackground, _dart_XSetBackground>(
            'XSetBackground');
    return _XSetBackground(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetBackground _XSetBackground;

  int XSetClipMask(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetClipMask ??= _dylib
        .lookupFunction<_c_XSetClipMask, _dart_XSetClipMask>('XSetClipMask');
    return _XSetClipMask(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetClipMask _XSetClipMask;

  int XSetClipOrigin(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    int arg3,
  ) {
    _XSetClipOrigin ??=
        _dylib.lookupFunction<_c_XSetClipOrigin, _dart_XSetClipOrigin>(
            'XSetClipOrigin');
    return _XSetClipOrigin(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetClipOrigin _XSetClipOrigin;

  int XSetClipRectangles(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<XRectangle> arg4,
    int arg5,
    int arg6,
  ) {
    _XSetClipRectangles ??=
        _dylib.lookupFunction<_c_XSetClipRectangles, _dart_XSetClipRectangles>(
            'XSetClipRectangles');
    return _XSetClipRectangles(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XSetClipRectangles _XSetClipRectangles;

  int XSetCloseDownMode(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XSetCloseDownMode ??=
        _dylib.lookupFunction<_c_XSetCloseDownMode, _dart_XSetCloseDownMode>(
            'XSetCloseDownMode');
    return _XSetCloseDownMode(
      arg0,
      arg1,
    );
  }

  _dart_XSetCloseDownMode _XSetCloseDownMode;

  int XSetCommand(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
    int arg3,
  ) {
    _XSetCommand ??=
        _dylib.lookupFunction<_c_XSetCommand, _dart_XSetCommand>('XSetCommand');
    return _XSetCommand(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetCommand _XSetCommand;

  int XSetDashes(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
  ) {
    _XSetDashes ??=
        _dylib.lookupFunction<_c_XSetDashes, _dart_XSetDashes>('XSetDashes');
    return _XSetDashes(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XSetDashes _XSetDashes;

  int XSetFillRule(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetFillRule ??= _dylib
        .lookupFunction<_c_XSetFillRule, _dart_XSetFillRule>('XSetFillRule');
    return _XSetFillRule(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetFillRule _XSetFillRule;

  int XSetFillStyle(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetFillStyle ??= _dylib
        .lookupFunction<_c_XSetFillStyle, _dart_XSetFillStyle>('XSetFillStyle');
    return _XSetFillStyle(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetFillStyle _XSetFillStyle;

  int XSetFont(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetFont ??=
        _dylib.lookupFunction<_c_XSetFont, _dart_XSetFont>('XSetFont');
    return _XSetFont(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetFont _XSetFont;

  int XSetFontPath(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    int arg2,
  ) {
    _XSetFontPath ??= _dylib
        .lookupFunction<_c_XSetFontPath, _dart_XSetFontPath>('XSetFontPath');
    return _XSetFontPath(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetFontPath _XSetFontPath;

  int XSetForeground(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetForeground ??=
        _dylib.lookupFunction<_c_XSetForeground, _dart_XSetForeground>(
            'XSetForeground');
    return _XSetForeground(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetForeground _XSetForeground;

  int XSetFunction(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetFunction ??= _dylib
        .lookupFunction<_c_XSetFunction, _dart_XSetFunction>('XSetFunction');
    return _XSetFunction(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetFunction _XSetFunction;

  int XSetGraphicsExposures(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetGraphicsExposures ??= _dylib.lookupFunction<_c_XSetGraphicsExposures,
        _dart_XSetGraphicsExposures>('XSetGraphicsExposures');
    return _XSetGraphicsExposures(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetGraphicsExposures _XSetGraphicsExposures;

  int XSetIconName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XSetIconName ??= _dylib
        .lookupFunction<_c_XSetIconName, _dart_XSetIconName>('XSetIconName');
    return _XSetIconName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetIconName _XSetIconName;

  int XSetInputFocus(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XSetInputFocus ??=
        _dylib.lookupFunction<_c_XSetInputFocus, _dart_XSetInputFocus>(
            'XSetInputFocus');
    return _XSetInputFocus(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetInputFocus _XSetInputFocus;

  int XSetLineAttributes(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    _XSetLineAttributes ??=
        _dylib.lookupFunction<_c_XSetLineAttributes, _dart_XSetLineAttributes>(
            'XSetLineAttributes');
    return _XSetLineAttributes(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XSetLineAttributes _XSetLineAttributes;

  int XSetModifierMapping(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XModifierKeymap> arg1,
  ) {
    _XSetModifierMapping ??= _dylib.lookupFunction<_c_XSetModifierMapping,
        _dart_XSetModifierMapping>('XSetModifierMapping');
    return _XSetModifierMapping(
      arg0,
      arg1,
    );
  }

  _dart_XSetModifierMapping _XSetModifierMapping;

  int XSetPlaneMask(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetPlaneMask ??= _dylib
        .lookupFunction<_c_XSetPlaneMask, _dart_XSetPlaneMask>('XSetPlaneMask');
    return _XSetPlaneMask(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetPlaneMask _XSetPlaneMask;

  int XSetPointerMapping(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int arg2,
  ) {
    _XSetPointerMapping ??=
        _dylib.lookupFunction<_c_XSetPointerMapping, _dart_XSetPointerMapping>(
            'XSetPointerMapping');
    return _XSetPointerMapping(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetPointerMapping _XSetPointerMapping;

  int XSetScreenSaver(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XSetScreenSaver ??=
        _dylib.lookupFunction<_c_XSetScreenSaver, _dart_XSetScreenSaver>(
            'XSetScreenSaver');
    return _XSetScreenSaver(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XSetScreenSaver _XSetScreenSaver;

  int XSetSelectionOwner(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XSetSelectionOwner ??=
        _dylib.lookupFunction<_c_XSetSelectionOwner, _dart_XSetSelectionOwner>(
            'XSetSelectionOwner');
    return _XSetSelectionOwner(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetSelectionOwner _XSetSelectionOwner;

  int XSetState(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    _XSetState ??=
        _dylib.lookupFunction<_c_XSetState, _dart_XSetState>('XSetState');
    return _XSetState(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XSetState _XSetState;

  int XSetStipple(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetStipple ??=
        _dylib.lookupFunction<_c_XSetStipple, _dart_XSetStipple>('XSetStipple');
    return _XSetStipple(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetStipple _XSetStipple;

  int XSetSubwindowMode(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetSubwindowMode ??=
        _dylib.lookupFunction<_c_XSetSubwindowMode, _dart_XSetSubwindowMode>(
            'XSetSubwindowMode');
    return _XSetSubwindowMode(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetSubwindowMode _XSetSubwindowMode;

  int XSetTSOrigin(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    int arg3,
  ) {
    _XSetTSOrigin ??= _dylib
        .lookupFunction<_c_XSetTSOrigin, _dart_XSetTSOrigin>('XSetTSOrigin');
    return _XSetTSOrigin(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetTSOrigin _XSetTSOrigin;

  int XSetTile(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetTile ??=
        _dylib.lookupFunction<_c_XSetTile, _dart_XSetTile>('XSetTile');
    return _XSetTile(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetTile _XSetTile;

  int XSetWindowBackground(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSetWindowBackground ??= _dylib.lookupFunction<_c_XSetWindowBackground,
        _dart_XSetWindowBackground>('XSetWindowBackground');
    return _XSetWindowBackground(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWindowBackground _XSetWindowBackground;

  int XSetWindowBackgroundPixmap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSetWindowBackgroundPixmap ??= _dylib.lookupFunction<
        _c_XSetWindowBackgroundPixmap,
        _dart_XSetWindowBackgroundPixmap>('XSetWindowBackgroundPixmap');
    return _XSetWindowBackgroundPixmap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWindowBackgroundPixmap _XSetWindowBackgroundPixmap;

  int XSetWindowBorder(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSetWindowBorder ??=
        _dylib.lookupFunction<_c_XSetWindowBorder, _dart_XSetWindowBorder>(
            'XSetWindowBorder');
    return _XSetWindowBorder(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWindowBorder _XSetWindowBorder;

  int XSetWindowBorderPixmap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSetWindowBorderPixmap ??= _dylib.lookupFunction<_c_XSetWindowBorderPixmap,
        _dart_XSetWindowBorderPixmap>('XSetWindowBorderPixmap');
    return _XSetWindowBorderPixmap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWindowBorderPixmap _XSetWindowBorderPixmap;

  int XSetWindowBorderWidth(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSetWindowBorderWidth ??= _dylib.lookupFunction<_c_XSetWindowBorderWidth,
        _dart_XSetWindowBorderWidth>('XSetWindowBorderWidth');
    return _XSetWindowBorderWidth(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWindowBorderWidth _XSetWindowBorderWidth;

  int XSetWindowColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSetWindowColormap ??=
        _dylib.lookupFunction<_c_XSetWindowColormap, _dart_XSetWindowColormap>(
            'XSetWindowColormap');
    return _XSetWindowColormap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWindowColormap _XSetWindowColormap;

  int XStoreBuffer(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    int arg3,
  ) {
    _XStoreBuffer ??= _dylib
        .lookupFunction<_c_XStoreBuffer, _dart_XStoreBuffer>('XStoreBuffer');
    return _XStoreBuffer(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XStoreBuffer _XStoreBuffer;

  int XStoreBytes(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _XStoreBytes ??=
        _dylib.lookupFunction<_c_XStoreBytes, _dart_XStoreBytes>('XStoreBytes');
    return _XStoreBytes(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XStoreBytes _XStoreBytes;

  int XStoreColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
  ) {
    _XStoreColor ??=
        _dylib.lookupFunction<_c_XStoreColor, _dart_XStoreColor>('XStoreColor');
    return _XStoreColor(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XStoreColor _XStoreColor;

  int XStoreColors(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
    int arg3,
  ) {
    _XStoreColors ??= _dylib
        .lookupFunction<_c_XStoreColors, _dart_XStoreColors>('XStoreColors');
    return _XStoreColors(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XStoreColors _XStoreColors;

  int XStoreName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XStoreName ??=
        _dylib.lookupFunction<_c_XStoreName, _dart_XStoreName>('XStoreName');
    return _XStoreName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XStoreName _XStoreName;

  int XStoreNamedColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    int arg4,
  ) {
    _XStoreNamedColor ??=
        _dylib.lookupFunction<_c_XStoreNamedColor, _dart_XStoreNamedColor>(
            'XStoreNamedColor');
    return _XStoreNamedColor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XStoreNamedColor _XStoreNamedColor;

  int XSync(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XSync ??= _dylib.lookupFunction<_c_XSync, _dart_XSync>('XSync');
    return _XSync(
      arg0,
      arg1,
    );
  }

  _dart_XSync _XSync;

  int XTextExtents(
    ffi.Pointer<XFontStruct> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Int32> arg5,
    ffi.Pointer<XCharStruct> arg6,
  ) {
    _XTextExtents ??= _dylib
        .lookupFunction<_c_XTextExtents, _dart_XTextExtents>('XTextExtents');
    return _XTextExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XTextExtents _XTextExtents;

  int XTextExtents16(
    ffi.Pointer<XFontStruct> arg0,
    ffi.Pointer<XChar2b> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Int32> arg5,
    ffi.Pointer<XCharStruct> arg6,
  ) {
    _XTextExtents16 ??=
        _dylib.lookupFunction<_c_XTextExtents16, _dart_XTextExtents16>(
            'XTextExtents16');
    return _XTextExtents16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XTextExtents16 _XTextExtents16;

  int XTextWidth(
    ffi.Pointer<XFontStruct> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _XTextWidth ??=
        _dylib.lookupFunction<_c_XTextWidth, _dart_XTextWidth>('XTextWidth');
    return _XTextWidth(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XTextWidth _XTextWidth;

  int XTextWidth16(
    ffi.Pointer<XFontStruct> arg0,
    ffi.Pointer<XChar2b> arg1,
    int arg2,
  ) {
    _XTextWidth16 ??= _dylib
        .lookupFunction<_c_XTextWidth16, _dart_XTextWidth16>('XTextWidth16');
    return _XTextWidth16(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XTextWidth16 _XTextWidth16;

  int XTranslateCoordinates(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Int32> arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<ffi.Uint64> arg7,
  ) {
    _XTranslateCoordinates ??= _dylib.lookupFunction<_c_XTranslateCoordinates,
        _dart_XTranslateCoordinates>('XTranslateCoordinates');
    return _XTranslateCoordinates(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XTranslateCoordinates _XTranslateCoordinates;

  int XUndefineCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XUndefineCursor ??=
        _dylib.lookupFunction<_c_XUndefineCursor, _dart_XUndefineCursor>(
            'XUndefineCursor');
    return _XUndefineCursor(
      arg0,
      arg1,
    );
  }

  _dart_XUndefineCursor _XUndefineCursor;

  int XUngrabButton(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XUngrabButton ??= _dylib
        .lookupFunction<_c_XUngrabButton, _dart_XUngrabButton>('XUngrabButton');
    return _XUngrabButton(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XUngrabButton _XUngrabButton;

  int XUngrabKey(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XUngrabKey ??=
        _dylib.lookupFunction<_c_XUngrabKey, _dart_XUngrabKey>('XUngrabKey');
    return _XUngrabKey(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XUngrabKey _XUngrabKey;

  int XUngrabKeyboard(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XUngrabKeyboard ??=
        _dylib.lookupFunction<_c_XUngrabKeyboard, _dart_XUngrabKeyboard>(
            'XUngrabKeyboard');
    return _XUngrabKeyboard(
      arg0,
      arg1,
    );
  }

  _dart_XUngrabKeyboard _XUngrabKeyboard;

  int XUngrabPointer(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XUngrabPointer ??=
        _dylib.lookupFunction<_c_XUngrabPointer, _dart_XUngrabPointer>(
            'XUngrabPointer');
    return _XUngrabPointer(
      arg0,
      arg1,
    );
  }

  _dart_XUngrabPointer _XUngrabPointer;

  int XUngrabServer(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XUngrabServer ??= _dylib
        .lookupFunction<_c_XUngrabServer, _dart_XUngrabServer>('XUngrabServer');
    return _XUngrabServer(
      arg0,
    );
  }

  _dart_XUngrabServer _XUngrabServer;

  int XUninstallColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XUninstallColormap ??=
        _dylib.lookupFunction<_c_XUninstallColormap, _dart_XUninstallColormap>(
            'XUninstallColormap');
    return _XUninstallColormap(
      arg0,
      arg1,
    );
  }

  _dart_XUninstallColormap _XUninstallColormap;

  int XUnloadFont(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XUnloadFont ??=
        _dylib.lookupFunction<_c_XUnloadFont, _dart_XUnloadFont>('XUnloadFont');
    return _XUnloadFont(
      arg0,
      arg1,
    );
  }

  _dart_XUnloadFont _XUnloadFont;

  int XUnmapSubwindows(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XUnmapSubwindows ??=
        _dylib.lookupFunction<_c_XUnmapSubwindows, _dart_XUnmapSubwindows>(
            'XUnmapSubwindows');
    return _XUnmapSubwindows(
      arg0,
      arg1,
    );
  }

  _dart_XUnmapSubwindows _XUnmapSubwindows;

  int XUnmapWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XUnmapWindow ??= _dylib
        .lookupFunction<_c_XUnmapWindow, _dart_XUnmapWindow>('XUnmapWindow');
    return _XUnmapWindow(
      arg0,
      arg1,
    );
  }

  _dart_XUnmapWindow _XUnmapWindow;

  int XVendorRelease(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XVendorRelease ??=
        _dylib.lookupFunction<_c_XVendorRelease, _dart_XVendorRelease>(
            'XVendorRelease');
    return _XVendorRelease(
      arg0,
    );
  }

  _dart_XVendorRelease _XVendorRelease;

  int XWarpPointer(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    _XWarpPointer ??= _dylib
        .lookupFunction<_c_XWarpPointer, _dart_XWarpPointer>('XWarpPointer');
    return _XWarpPointer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XWarpPointer _XWarpPointer;

  int XWidthMMOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XWidthMMOfScreen ??=
        _dylib.lookupFunction<_c_XWidthMMOfScreen, _dart_XWidthMMOfScreen>(
            'XWidthMMOfScreen');
    return _XWidthMMOfScreen(
      arg0,
    );
  }

  _dart_XWidthMMOfScreen _XWidthMMOfScreen;

  int XWidthOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XWidthOfScreen ??=
        _dylib.lookupFunction<_c_XWidthOfScreen, _dart_XWidthOfScreen>(
            'XWidthOfScreen');
    return _XWidthOfScreen(
      arg0,
    );
  }

  _dart_XWidthOfScreen _XWidthOfScreen;

  int XWriteBitmapFile(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XWriteBitmapFile ??=
        _dylib.lookupFunction<_c_XWriteBitmapFile, _dart_XWriteBitmapFile>(
            'XWriteBitmapFile');
    return _XWriteBitmapFile(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XWriteBitmapFile _XWriteBitmapFile;

  int XSupportsLocale() {
    _XSupportsLocale ??=
        _dylib.lookupFunction<_c_XSupportsLocale, _dart_XSupportsLocale>(
            'XSupportsLocale');
    return _XSupportsLocale();
  }

  _dart_XSupportsLocale _XSupportsLocale;

  ffi.Pointer<ffi.Int8> XSetLocaleModifiers(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _XSetLocaleModifiers ??= _dylib.lookupFunction<_c_XSetLocaleModifiers,
        _dart_XSetLocaleModifiers>('XSetLocaleModifiers');
    return _XSetLocaleModifiers(
      arg0,
    );
  }

  _dart_XSetLocaleModifiers _XSetLocaleModifiers;

  ffi.Pointer<_XOM> XOpenOM(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XrmHashBucketRec> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    _XOpenOM ??= _dylib.lookupFunction<_c_XOpenOM, _dart_XOpenOM>('XOpenOM');
    return _XOpenOM(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XOpenOM _XOpenOM;

  int XCloseOM(
    ffi.Pointer<_XOM> arg0,
  ) {
    _XCloseOM ??=
        _dylib.lookupFunction<_c_XCloseOM, _dart_XCloseOM>('XCloseOM');
    return _XCloseOM(
      arg0,
    );
  }

  _dart_XCloseOM _XCloseOM;

  ffi.Pointer<ffi.Int8> XSetOMValues(
    ffi.Pointer<_XOM> arg0,
  ) {
    _XSetOMValues ??= _dylib
        .lookupFunction<_c_XSetOMValues, _dart_XSetOMValues>('XSetOMValues');
    return _XSetOMValues(
      arg0,
    );
  }

  _dart_XSetOMValues _XSetOMValues;

  ffi.Pointer<ffi.Int8> XGetOMValues(
    ffi.Pointer<_XOM> arg0,
  ) {
    _XGetOMValues ??= _dylib
        .lookupFunction<_c_XGetOMValues, _dart_XGetOMValues>('XGetOMValues');
    return _XGetOMValues(
      arg0,
    );
  }

  _dart_XGetOMValues _XGetOMValues;

  ffi.Pointer<_XDisplay> XDisplayOfOM(
    ffi.Pointer<_XOM> arg0,
  ) {
    _XDisplayOfOM ??= _dylib
        .lookupFunction<_c_XDisplayOfOM, _dart_XDisplayOfOM>('XDisplayOfOM');
    return _XDisplayOfOM(
      arg0,
    );
  }

  _dart_XDisplayOfOM _XDisplayOfOM;

  ffi.Pointer<ffi.Int8> XLocaleOfOM(
    ffi.Pointer<_XOM> arg0,
  ) {
    _XLocaleOfOM ??=
        _dylib.lookupFunction<_c_XLocaleOfOM, _dart_XLocaleOfOM>('XLocaleOfOM');
    return _XLocaleOfOM(
      arg0,
    );
  }

  _dart_XLocaleOfOM _XLocaleOfOM;

  ffi.Pointer<_XOC> XCreateOC(
    ffi.Pointer<_XOM> arg0,
  ) {
    _XCreateOC ??=
        _dylib.lookupFunction<_c_XCreateOC, _dart_XCreateOC>('XCreateOC');
    return _XCreateOC(
      arg0,
    );
  }

  _dart_XCreateOC _XCreateOC;

  void XDestroyOC(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XDestroyOC ??=
        _dylib.lookupFunction<_c_XDestroyOC, _dart_XDestroyOC>('XDestroyOC');
    return _XDestroyOC(
      arg0,
    );
  }

  _dart_XDestroyOC _XDestroyOC;

  ffi.Pointer<_XOM> XOMOfOC(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XOMOfOC ??= _dylib.lookupFunction<_c_XOMOfOC, _dart_XOMOfOC>('XOMOfOC');
    return _XOMOfOC(
      arg0,
    );
  }

  _dart_XOMOfOC _XOMOfOC;

  ffi.Pointer<ffi.Int8> XSetOCValues(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XSetOCValues ??= _dylib
        .lookupFunction<_c_XSetOCValues, _dart_XSetOCValues>('XSetOCValues');
    return _XSetOCValues(
      arg0,
    );
  }

  _dart_XSetOCValues _XSetOCValues;

  ffi.Pointer<ffi.Int8> XGetOCValues(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XGetOCValues ??= _dylib
        .lookupFunction<_c_XGetOCValues, _dart_XGetOCValues>('XGetOCValues');
    return _XGetOCValues(
      arg0,
    );
  }

  _dart_XGetOCValues _XGetOCValues;

  ffi.Pointer<_XOC> XCreateFontSet(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
  ) {
    _XCreateFontSet ??=
        _dylib.lookupFunction<_c_XCreateFontSet, _dart_XCreateFontSet>(
            'XCreateFontSet');
    return _XCreateFontSet(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XCreateFontSet _XCreateFontSet;

  void XFreeFontSet(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XOC> arg1,
  ) {
    _XFreeFontSet ??= _dylib
        .lookupFunction<_c_XFreeFontSet, _dart_XFreeFontSet>('XFreeFontSet');
    return _XFreeFontSet(
      arg0,
      arg1,
    );
  }

  _dart_XFreeFontSet _XFreeFontSet;

  int XFontsOfFontSet(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<XFontStruct>>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
  ) {
    _XFontsOfFontSet ??=
        _dylib.lookupFunction<_c_XFontsOfFontSet, _dart_XFontsOfFontSet>(
            'XFontsOfFontSet');
    return _XFontsOfFontSet(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XFontsOfFontSet _XFontsOfFontSet;

  ffi.Pointer<ffi.Int8> XBaseFontNameListOfFontSet(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XBaseFontNameListOfFontSet ??= _dylib.lookupFunction<
        _c_XBaseFontNameListOfFontSet,
        _dart_XBaseFontNameListOfFontSet>('XBaseFontNameListOfFontSet');
    return _XBaseFontNameListOfFontSet(
      arg0,
    );
  }

  _dart_XBaseFontNameListOfFontSet _XBaseFontNameListOfFontSet;

  ffi.Pointer<ffi.Int8> XLocaleOfFontSet(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XLocaleOfFontSet ??=
        _dylib.lookupFunction<_c_XLocaleOfFontSet, _dart_XLocaleOfFontSet>(
            'XLocaleOfFontSet');
    return _XLocaleOfFontSet(
      arg0,
    );
  }

  _dart_XLocaleOfFontSet _XLocaleOfFontSet;

  int XContextDependentDrawing(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XContextDependentDrawing ??= _dylib.lookupFunction<
        _c_XContextDependentDrawing,
        _dart_XContextDependentDrawing>('XContextDependentDrawing');
    return _XContextDependentDrawing(
      arg0,
    );
  }

  _dart_XContextDependentDrawing _XContextDependentDrawing;

  int XDirectionalDependentDrawing(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XDirectionalDependentDrawing ??= _dylib.lookupFunction<
        _c_XDirectionalDependentDrawing,
        _dart_XDirectionalDependentDrawing>('XDirectionalDependentDrawing');
    return _XDirectionalDependentDrawing(
      arg0,
    );
  }

  _dart_XDirectionalDependentDrawing _XDirectionalDependentDrawing;

  int XContextualDrawing(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XContextualDrawing ??=
        _dylib.lookupFunction<_c_XContextualDrawing, _dart_XContextualDrawing>(
            'XContextualDrawing');
    return _XContextualDrawing(
      arg0,
    );
  }

  _dart_XContextualDrawing _XContextualDrawing;

  ffi.Pointer<XFontSetExtents> XExtentsOfFontSet(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XExtentsOfFontSet ??=
        _dylib.lookupFunction<_c_XExtentsOfFontSet, _dart_XExtentsOfFontSet>(
            'XExtentsOfFontSet');
    return _XExtentsOfFontSet(
      arg0,
    );
  }

  _dart_XExtentsOfFontSet _XExtentsOfFontSet;

  int XmbTextEscapement(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _XmbTextEscapement ??=
        _dylib.lookupFunction<_c_XmbTextEscapement, _dart_XmbTextEscapement>(
            'XmbTextEscapement');
    return _XmbTextEscapement(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XmbTextEscapement _XmbTextEscapement;

  int XwcTextEscapement(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
  ) {
    _XwcTextEscapement ??=
        _dylib.lookupFunction<_c_XwcTextEscapement, _dart_XwcTextEscapement>(
            'XwcTextEscapement');
    return _XwcTextEscapement(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XwcTextEscapement _XwcTextEscapement;

  int Xutf8TextEscapement(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _Xutf8TextEscapement ??= _dylib.lookupFunction<_c_Xutf8TextEscapement,
        _dart_Xutf8TextEscapement>('Xutf8TextEscapement');
    return _Xutf8TextEscapement(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_Xutf8TextEscapement _Xutf8TextEscapement;

  int XmbTextExtents(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
  ) {
    _XmbTextExtents ??=
        _dylib.lookupFunction<_c_XmbTextExtents, _dart_XmbTextExtents>(
            'XmbTextExtents');
    return _XmbTextExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XmbTextExtents _XmbTextExtents;

  int XwcTextExtents(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
  ) {
    _XwcTextExtents ??=
        _dylib.lookupFunction<_c_XwcTextExtents, _dart_XwcTextExtents>(
            'XwcTextExtents');
    return _XwcTextExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XwcTextExtents _XwcTextExtents;

  int Xutf8TextExtents(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
  ) {
    _Xutf8TextExtents ??=
        _dylib.lookupFunction<_c_Xutf8TextExtents, _dart_Xutf8TextExtents>(
            'Xutf8TextExtents');
    return _Xutf8TextExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_Xutf8TextExtents _Xutf8TextExtents;

  int XmbTextPerCharExtents(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
    int arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<XRectangle> arg7,
    ffi.Pointer<XRectangle> arg8,
  ) {
    _XmbTextPerCharExtents ??= _dylib.lookupFunction<_c_XmbTextPerCharExtents,
        _dart_XmbTextPerCharExtents>('XmbTextPerCharExtents');
    return _XmbTextPerCharExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XmbTextPerCharExtents _XmbTextPerCharExtents;

  int XwcTextPerCharExtents(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
    int arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<XRectangle> arg7,
    ffi.Pointer<XRectangle> arg8,
  ) {
    _XwcTextPerCharExtents ??= _dylib.lookupFunction<_c_XwcTextPerCharExtents,
        _dart_XwcTextPerCharExtents>('XwcTextPerCharExtents');
    return _XwcTextPerCharExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XwcTextPerCharExtents _XwcTextPerCharExtents;

  int Xutf8TextPerCharExtents(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
    int arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<XRectangle> arg7,
    ffi.Pointer<XRectangle> arg8,
  ) {
    _Xutf8TextPerCharExtents ??= _dylib.lookupFunction<
        _c_Xutf8TextPerCharExtents,
        _dart_Xutf8TextPerCharExtents>('Xutf8TextPerCharExtents');
    return _Xutf8TextPerCharExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_Xutf8TextPerCharExtents _Xutf8TextPerCharExtents;

  void XmbDrawText(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XmbTextItem> arg5,
    int arg6,
  ) {
    _XmbDrawText ??=
        _dylib.lookupFunction<_c_XmbDrawText, _dart_XmbDrawText>('XmbDrawText');
    return _XmbDrawText(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XmbDrawText _XmbDrawText;

  void XwcDrawText(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XwcTextItem> arg5,
    int arg6,
  ) {
    _XwcDrawText ??=
        _dylib.lookupFunction<_c_XwcDrawText, _dart_XwcDrawText>('XwcDrawText');
    return _XwcDrawText(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XwcDrawText _XwcDrawText;

  void Xutf8DrawText(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XmbTextItem> arg5,
    int arg6,
  ) {
    _Xutf8DrawText ??= _dylib
        .lookupFunction<_c_Xutf8DrawText, _dart_Xutf8DrawText>('Xutf8DrawText');
    return _Xutf8DrawText(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_Xutf8DrawText _Xutf8DrawText;

  void XmbDrawString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XOC> arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Int8> arg6,
    int arg7,
  ) {
    _XmbDrawString ??= _dylib
        .lookupFunction<_c_XmbDrawString, _dart_XmbDrawString>('XmbDrawString');
    return _XmbDrawString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XmbDrawString _XmbDrawString;

  void XwcDrawString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XOC> arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Int32> arg6,
    int arg7,
  ) {
    _XwcDrawString ??= _dylib
        .lookupFunction<_c_XwcDrawString, _dart_XwcDrawString>('XwcDrawString');
    return _XwcDrawString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XwcDrawString _XwcDrawString;

  void Xutf8DrawString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XOC> arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Int8> arg6,
    int arg7,
  ) {
    _Xutf8DrawString ??=
        _dylib.lookupFunction<_c_Xutf8DrawString, _dart_Xutf8DrawString>(
            'Xutf8DrawString');
    return _Xutf8DrawString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_Xutf8DrawString _Xutf8DrawString;

  void XmbDrawImageString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XOC> arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Int8> arg6,
    int arg7,
  ) {
    _XmbDrawImageString ??=
        _dylib.lookupFunction<_c_XmbDrawImageString, _dart_XmbDrawImageString>(
            'XmbDrawImageString');
    return _XmbDrawImageString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XmbDrawImageString _XmbDrawImageString;

  void XwcDrawImageString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XOC> arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Int32> arg6,
    int arg7,
  ) {
    _XwcDrawImageString ??=
        _dylib.lookupFunction<_c_XwcDrawImageString, _dart_XwcDrawImageString>(
            'XwcDrawImageString');
    return _XwcDrawImageString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XwcDrawImageString _XwcDrawImageString;

  void Xutf8DrawImageString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XOC> arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Int8> arg6,
    int arg7,
  ) {
    _Xutf8DrawImageString ??= _dylib.lookupFunction<_c_Xutf8DrawImageString,
        _dart_Xutf8DrawImageString>('Xutf8DrawImageString');
    return _Xutf8DrawImageString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_Xutf8DrawImageString _Xutf8DrawImageString;

  ffi.Pointer<_XIM> XOpenIM(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XrmHashBucketRec> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    _XOpenIM ??= _dylib.lookupFunction<_c_XOpenIM, _dart_XOpenIM>('XOpenIM');
    return _XOpenIM(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XOpenIM _XOpenIM;

  int XCloseIM(
    ffi.Pointer<_XIM> arg0,
  ) {
    _XCloseIM ??=
        _dylib.lookupFunction<_c_XCloseIM, _dart_XCloseIM>('XCloseIM');
    return _XCloseIM(
      arg0,
    );
  }

  _dart_XCloseIM _XCloseIM;

  ffi.Pointer<ffi.Int8> XGetIMValues(
    ffi.Pointer<_XIM> arg0,
  ) {
    _XGetIMValues ??= _dylib
        .lookupFunction<_c_XGetIMValues, _dart_XGetIMValues>('XGetIMValues');
    return _XGetIMValues(
      arg0,
    );
  }

  _dart_XGetIMValues _XGetIMValues;

  ffi.Pointer<ffi.Int8> XSetIMValues(
    ffi.Pointer<_XIM> arg0,
  ) {
    _XSetIMValues ??= _dylib
        .lookupFunction<_c_XSetIMValues, _dart_XSetIMValues>('XSetIMValues');
    return _XSetIMValues(
      arg0,
    );
  }

  _dart_XSetIMValues _XSetIMValues;

  ffi.Pointer<_XDisplay> XDisplayOfIM(
    ffi.Pointer<_XIM> arg0,
  ) {
    _XDisplayOfIM ??= _dylib
        .lookupFunction<_c_XDisplayOfIM, _dart_XDisplayOfIM>('XDisplayOfIM');
    return _XDisplayOfIM(
      arg0,
    );
  }

  _dart_XDisplayOfIM _XDisplayOfIM;

  ffi.Pointer<ffi.Int8> XLocaleOfIM(
    ffi.Pointer<_XIM> arg0,
  ) {
    _XLocaleOfIM ??=
        _dylib.lookupFunction<_c_XLocaleOfIM, _dart_XLocaleOfIM>('XLocaleOfIM');
    return _XLocaleOfIM(
      arg0,
    );
  }

  _dart_XLocaleOfIM _XLocaleOfIM;

  ffi.Pointer<_XIC> XCreateIC(
    ffi.Pointer<_XIM> arg0,
  ) {
    _XCreateIC ??=
        _dylib.lookupFunction<_c_XCreateIC, _dart_XCreateIC>('XCreateIC');
    return _XCreateIC(
      arg0,
    );
  }

  _dart_XCreateIC _XCreateIC;

  void XDestroyIC(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XDestroyIC ??=
        _dylib.lookupFunction<_c_XDestroyIC, _dart_XDestroyIC>('XDestroyIC');
    return _XDestroyIC(
      arg0,
    );
  }

  _dart_XDestroyIC _XDestroyIC;

  void XSetICFocus(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XSetICFocus ??=
        _dylib.lookupFunction<_c_XSetICFocus, _dart_XSetICFocus>('XSetICFocus');
    return _XSetICFocus(
      arg0,
    );
  }

  _dart_XSetICFocus _XSetICFocus;

  void XUnsetICFocus(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XUnsetICFocus ??= _dylib
        .lookupFunction<_c_XUnsetICFocus, _dart_XUnsetICFocus>('XUnsetICFocus');
    return _XUnsetICFocus(
      arg0,
    );
  }

  _dart_XUnsetICFocus _XUnsetICFocus;

  ffi.Pointer<ffi.Int32> XwcResetIC(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XwcResetIC ??=
        _dylib.lookupFunction<_c_XwcResetIC, _dart_XwcResetIC>('XwcResetIC');
    return _XwcResetIC(
      arg0,
    );
  }

  _dart_XwcResetIC _XwcResetIC;

  ffi.Pointer<ffi.Int8> XmbResetIC(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XmbResetIC ??=
        _dylib.lookupFunction<_c_XmbResetIC, _dart_XmbResetIC>('XmbResetIC');
    return _XmbResetIC(
      arg0,
    );
  }

  _dart_XmbResetIC _XmbResetIC;

  ffi.Pointer<ffi.Int8> Xutf8ResetIC(
    ffi.Pointer<_XIC> arg0,
  ) {
    _Xutf8ResetIC ??= _dylib
        .lookupFunction<_c_Xutf8ResetIC, _dart_Xutf8ResetIC>('Xutf8ResetIC');
    return _Xutf8ResetIC(
      arg0,
    );
  }

  _dart_Xutf8ResetIC _Xutf8ResetIC;

  ffi.Pointer<ffi.Int8> XSetICValues(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XSetICValues ??= _dylib
        .lookupFunction<_c_XSetICValues, _dart_XSetICValues>('XSetICValues');
    return _XSetICValues(
      arg0,
    );
  }

  _dart_XSetICValues _XSetICValues;

  ffi.Pointer<ffi.Int8> XGetICValues(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XGetICValues ??= _dylib
        .lookupFunction<_c_XGetICValues, _dart_XGetICValues>('XGetICValues');
    return _XGetICValues(
      arg0,
    );
  }

  _dart_XGetICValues _XGetICValues;

  ffi.Pointer<_XIM> XIMOfIC(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XIMOfIC ??= _dylib.lookupFunction<_c_XIMOfIC, _dart_XIMOfIC>('XIMOfIC');
    return _XIMOfIC(
      arg0,
    );
  }

  _dart_XIMOfIC _XIMOfIC;

  int XmbLookupString(
    ffi.Pointer<_XIC> arg0,
    ffi.Pointer<XKeyEvent> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    ffi.Pointer<ffi.Uint64> arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    _XmbLookupString ??=
        _dylib.lookupFunction<_c_XmbLookupString, _dart_XmbLookupString>(
            'XmbLookupString');
    return _XmbLookupString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XmbLookupString _XmbLookupString;

  int XwcLookupString(
    ffi.Pointer<_XIC> arg0,
    ffi.Pointer<XKeyEvent> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    int arg3,
    ffi.Pointer<ffi.Uint64> arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    _XwcLookupString ??=
        _dylib.lookupFunction<_c_XwcLookupString, _dart_XwcLookupString>(
            'XwcLookupString');
    return _XwcLookupString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XwcLookupString _XwcLookupString;

  int Xutf8LookupString(
    ffi.Pointer<_XIC> arg0,
    ffi.Pointer<XKeyEvent> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    ffi.Pointer<ffi.Uint64> arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    _Xutf8LookupString ??=
        _dylib.lookupFunction<_c_Xutf8LookupString, _dart_Xutf8LookupString>(
            'Xutf8LookupString');
    return _Xutf8LookupString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_Xutf8LookupString _Xutf8LookupString;

  ffi.Pointer<ffi.Void> XVaCreateNestedList(
    int arg0,
  ) {
    _XVaCreateNestedList ??= _dylib.lookupFunction<_c_XVaCreateNestedList,
        _dart_XVaCreateNestedList>('XVaCreateNestedList');
    return _XVaCreateNestedList(
      arg0,
    );
  }

  _dart_XVaCreateNestedList _XVaCreateNestedList;

  int XRegisterIMInstantiateCallback(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XrmHashBucketRec> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.NativeFunction<XIDProc>> arg4,
    ffi.Pointer<ffi.Int8> arg5,
  ) {
    _XRegisterIMInstantiateCallback ??= _dylib.lookupFunction<
        _c_XRegisterIMInstantiateCallback,
        _dart_XRegisterIMInstantiateCallback>('XRegisterIMInstantiateCallback');
    return _XRegisterIMInstantiateCallback(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XRegisterIMInstantiateCallback _XRegisterIMInstantiateCallback;

  int XUnregisterIMInstantiateCallback(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XrmHashBucketRec> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.NativeFunction<XIDProc>> arg4,
    ffi.Pointer<ffi.Int8> arg5,
  ) {
    _XUnregisterIMInstantiateCallback ??= _dylib.lookupFunction<
            _c_XUnregisterIMInstantiateCallback,
            _dart_XUnregisterIMInstantiateCallback>(
        'XUnregisterIMInstantiateCallback');
    return _XUnregisterIMInstantiateCallback(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XUnregisterIMInstantiateCallback _XUnregisterIMInstantiateCallback;

  int XInternalConnectionNumbers(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XInternalConnectionNumbers ??= _dylib.lookupFunction<
        _c_XInternalConnectionNumbers,
        _dart_XInternalConnectionNumbers>('XInternalConnectionNumbers');
    return _XInternalConnectionNumbers(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XInternalConnectionNumbers _XInternalConnectionNumbers;

  void XProcessInternalConnection(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XProcessInternalConnection ??= _dylib.lookupFunction<
        _c_XProcessInternalConnection,
        _dart_XProcessInternalConnection>('XProcessInternalConnection');
    return _XProcessInternalConnection(
      arg0,
      arg1,
    );
  }

  _dart_XProcessInternalConnection _XProcessInternalConnection;

  int XAddConnectionWatch(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.NativeFunction<XConnectionWatchProc>> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XAddConnectionWatch ??= _dylib.lookupFunction<_c_XAddConnectionWatch,
        _dart_XAddConnectionWatch>('XAddConnectionWatch');
    return _XAddConnectionWatch(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XAddConnectionWatch _XAddConnectionWatch;

  void XRemoveConnectionWatch(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.NativeFunction<XConnectionWatchProc>> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XRemoveConnectionWatch ??= _dylib.lookupFunction<_c_XRemoveConnectionWatch,
        _dart_XRemoveConnectionWatch>('XRemoveConnectionWatch');
    return _XRemoveConnectionWatch(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XRemoveConnectionWatch _XRemoveConnectionWatch;

  void XSetAuthorization(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
  ) {
    _XSetAuthorization ??=
        _dylib.lookupFunction<_c_XSetAuthorization, _dart_XSetAuthorization>(
            'XSetAuthorization');
    return _XSetAuthorization(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetAuthorization _XSetAuthorization;

  int _Xmbtowc(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    __Xmbtowc ??=
        _dylib.lookupFunction<_c__Xmbtowc, _dart__Xmbtowc>('_Xmbtowc');
    return __Xmbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__Xmbtowc __Xmbtowc;

  int _Xwctomb(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    __Xwctomb ??=
        _dylib.lookupFunction<_c__Xwctomb, _dart__Xwctomb>('_Xwctomb');
    return __Xwctomb(
      arg0,
      arg1,
    );
  }

  _dart__Xwctomb __Xwctomb;

  int XGetEventData(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XGenericEventCookie> arg1,
  ) {
    _XGetEventData ??= _dylib
        .lookupFunction<_c_XGetEventData, _dart_XGetEventData>('XGetEventData');
    return _XGetEventData(
      arg0,
      arg1,
    );
  }

  _dart_XGetEventData _XGetEventData;

  void XFreeEventData(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XGenericEventCookie> arg1,
  ) {
    _XFreeEventData ??=
        _dylib.lookupFunction<_c_XFreeEventData, _dart_XFreeEventData>(
            'XFreeEventData');
    return _XFreeEventData(
      arg0,
      arg1,
    );
  }

  _dart_XFreeEventData _XFreeEventData;

  /// \brief This function allows access to driver-dependent window information.
  ///
  /// \param window The window about which information is being requested
  /// \param info This structure must be initialized with the SDL version, and is
  /// then filled in with information about the given window.
  ///
  /// \return SDL_TRUE if the function is implemented and the version member of
  /// the \c info struct is valid, SDL_FALSE otherwise.
  ///
  /// You typically use this function like this:
  /// \code
  /// SDL_SysWMinfo info;
  /// SDL_VERSION(&info.version);
  /// if ( SDL_GetWindowWMInfo(window, &info) ) { ... }
  /// \endcode
  int SDL_GetWindowWMInfo(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<SDL_SysWMinfo> info,
  ) {
    _SDL_GetWindowWMInfo ??= _dylib.lookupFunction<_c_SDL_GetWindowWMInfo,
        _dart_SDL_GetWindowWMInfo>('SDL_GetWindowWMInfo');
    return _SDL_GetWindowWMInfo(
      window,
      info,
    );
  }

  _dart_SDL_GetWindowWMInfo _SDL_GetWindowWMInfo;

  /// \brief Draw a string in the currently set font.
  ///
  /// \param renderer The renderer to draw on.
  /// \param x The X coordinate of the upper left corner of the character.
  /// \param y The Y coordinate of the upper left corner of the character.
  /// \param c The character to draw.
  ///
  /// \returns Returns 0 on success, -1 on failure.
  int SDLTest_DrawCharacter(
    ffi.Pointer<ffi.Int32> renderer,
    int x,
    int y,
    int c,
  ) {
    _SDLTest_DrawCharacter ??= _dylib.lookupFunction<_c_SDLTest_DrawCharacter,
        _dart_SDLTest_DrawCharacter>('SDLTest_DrawCharacter');
    return _SDLTest_DrawCharacter(
      renderer,
      x,
      y,
      c,
    );
  }

  _dart_SDLTest_DrawCharacter _SDLTest_DrawCharacter;

  /// \brief Draw a string in the currently set font.
  ///
  /// \param renderer The renderer to draw on.
  /// \param x The X coordinate of the upper left corner of the string.
  /// \param y The Y coordinate of the upper left corner of the string.
  /// \param s The string to draw.
  ///
  /// \returns Returns 0 on success, -1 on failure.
  int SDLTest_DrawString(
    ffi.Pointer<ffi.Int32> renderer,
    int x,
    int y,
    ffi.Pointer<ffi.Int8> s,
  ) {
    _SDLTest_DrawString ??=
        _dylib.lookupFunction<_c_SDLTest_DrawString, _dart_SDLTest_DrawString>(
            'SDLTest_DrawString');
    return _SDLTest_DrawString(
      renderer,
      x,
      y,
      s,
    );
  }

  _dart_SDLTest_DrawString _SDLTest_DrawString;

  /// \brief Cleanup textures used by font drawing functions.
  void SDLTest_CleanupTextDrawing() {
    _SDLTest_CleanupTextDrawing ??= _dylib.lookupFunction<
        _c_SDLTest_CleanupTextDrawing,
        _dart_SDLTest_CleanupTextDrawing>('SDLTest_CleanupTextDrawing');
    return _SDLTest_CleanupTextDrawing();
  }

  _dart_SDLTest_CleanupTextDrawing _SDLTest_CleanupTextDrawing;

  void glClearIndex(
    double c,
  ) {
    _glClearIndex ??= _dylib
        .lookupFunction<_c_glClearIndex, _dart_glClearIndex>('glClearIndex');
    return _glClearIndex(
      c,
    );
  }

  _dart_glClearIndex _glClearIndex;

  void glClearColor(
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    _glClearColor ??= _dylib
        .lookupFunction<_c_glClearColor, _dart_glClearColor>('glClearColor');
    return _glClearColor(
      red,
      green,
      blue,
      alpha,
    );
  }

  _dart_glClearColor _glClearColor;

  void glClear(
    int mask,
  ) {
    _glClear ??= _dylib.lookupFunction<_c_glClear, _dart_glClear>('glClear');
    return _glClear(
      mask,
    );
  }

  _dart_glClear _glClear;

  void glIndexMask(
    int mask,
  ) {
    _glIndexMask ??=
        _dylib.lookupFunction<_c_glIndexMask, _dart_glIndexMask>('glIndexMask');
    return _glIndexMask(
      mask,
    );
  }

  _dart_glIndexMask _glIndexMask;

  void glColorMask(
    int red,
    int green,
    int blue,
    int alpha,
  ) {
    _glColorMask ??=
        _dylib.lookupFunction<_c_glColorMask, _dart_glColorMask>('glColorMask');
    return _glColorMask(
      red,
      green,
      blue,
      alpha,
    );
  }

  _dart_glColorMask _glColorMask;

  void glAlphaFunc(
    int func,
    double ref,
  ) {
    _glAlphaFunc ??=
        _dylib.lookupFunction<_c_glAlphaFunc, _dart_glAlphaFunc>('glAlphaFunc');
    return _glAlphaFunc(
      func,
      ref,
    );
  }

  _dart_glAlphaFunc _glAlphaFunc;

  void glBlendFunc(
    int sfactor,
    int dfactor,
  ) {
    _glBlendFunc ??=
        _dylib.lookupFunction<_c_glBlendFunc, _dart_glBlendFunc>('glBlendFunc');
    return _glBlendFunc(
      sfactor,
      dfactor,
    );
  }

  _dart_glBlendFunc _glBlendFunc;

  void glLogicOp(
    int opcode,
  ) {
    _glLogicOp ??=
        _dylib.lookupFunction<_c_glLogicOp, _dart_glLogicOp>('glLogicOp');
    return _glLogicOp(
      opcode,
    );
  }

  _dart_glLogicOp _glLogicOp;

  void glCullFace(
    int mode,
  ) {
    _glCullFace ??=
        _dylib.lookupFunction<_c_glCullFace, _dart_glCullFace>('glCullFace');
    return _glCullFace(
      mode,
    );
  }

  _dart_glCullFace _glCullFace;

  void glFrontFace(
    int mode,
  ) {
    _glFrontFace ??=
        _dylib.lookupFunction<_c_glFrontFace, _dart_glFrontFace>('glFrontFace');
    return _glFrontFace(
      mode,
    );
  }

  _dart_glFrontFace _glFrontFace;

  void glPointSize(
    double size,
  ) {
    _glPointSize ??=
        _dylib.lookupFunction<_c_glPointSize, _dart_glPointSize>('glPointSize');
    return _glPointSize(
      size,
    );
  }

  _dart_glPointSize _glPointSize;

  void glLineWidth(
    double width,
  ) {
    _glLineWidth ??=
        _dylib.lookupFunction<_c_glLineWidth, _dart_glLineWidth>('glLineWidth');
    return _glLineWidth(
      width,
    );
  }

  _dart_glLineWidth _glLineWidth;

  void glLineStipple(
    int factor,
    int pattern,
  ) {
    _glLineStipple ??= _dylib
        .lookupFunction<_c_glLineStipple, _dart_glLineStipple>('glLineStipple');
    return _glLineStipple(
      factor,
      pattern,
    );
  }

  _dart_glLineStipple _glLineStipple;

  void glPolygonMode(
    int face,
    int mode,
  ) {
    _glPolygonMode ??= _dylib
        .lookupFunction<_c_glPolygonMode, _dart_glPolygonMode>('glPolygonMode');
    return _glPolygonMode(
      face,
      mode,
    );
  }

  _dart_glPolygonMode _glPolygonMode;

  void glPolygonOffset(
    double factor,
    double units,
  ) {
    _glPolygonOffset ??=
        _dylib.lookupFunction<_c_glPolygonOffset, _dart_glPolygonOffset>(
            'glPolygonOffset');
    return _glPolygonOffset(
      factor,
      units,
    );
  }

  _dart_glPolygonOffset _glPolygonOffset;

  void glPolygonStipple(
    ffi.Pointer<ffi.Uint8> mask,
  ) {
    _glPolygonStipple ??=
        _dylib.lookupFunction<_c_glPolygonStipple, _dart_glPolygonStipple>(
            'glPolygonStipple');
    return _glPolygonStipple(
      mask,
    );
  }

  _dart_glPolygonStipple _glPolygonStipple;

  void glGetPolygonStipple(
    ffi.Pointer<ffi.Uint8> mask,
  ) {
    _glGetPolygonStipple ??= _dylib.lookupFunction<_c_glGetPolygonStipple,
        _dart_glGetPolygonStipple>('glGetPolygonStipple');
    return _glGetPolygonStipple(
      mask,
    );
  }

  _dart_glGetPolygonStipple _glGetPolygonStipple;

  void glEdgeFlag(
    int flag,
  ) {
    _glEdgeFlag ??=
        _dylib.lookupFunction<_c_glEdgeFlag, _dart_glEdgeFlag>('glEdgeFlag');
    return _glEdgeFlag(
      flag,
    );
  }

  _dart_glEdgeFlag _glEdgeFlag;

  void glEdgeFlagv(
    ffi.Pointer<ffi.Uint8> flag,
  ) {
    _glEdgeFlagv ??=
        _dylib.lookupFunction<_c_glEdgeFlagv, _dart_glEdgeFlagv>('glEdgeFlagv');
    return _glEdgeFlagv(
      flag,
    );
  }

  _dart_glEdgeFlagv _glEdgeFlagv;

  void glScissor(
    int x,
    int y,
    int width,
    int height,
  ) {
    _glScissor ??=
        _dylib.lookupFunction<_c_glScissor, _dart_glScissor>('glScissor');
    return _glScissor(
      x,
      y,
      width,
      height,
    );
  }

  _dart_glScissor _glScissor;

  void glClipPlane(
    int plane,
    ffi.Pointer<ffi.Double> equation,
  ) {
    _glClipPlane ??=
        _dylib.lookupFunction<_c_glClipPlane, _dart_glClipPlane>('glClipPlane');
    return _glClipPlane(
      plane,
      equation,
    );
  }

  _dart_glClipPlane _glClipPlane;

  void glGetClipPlane(
    int plane,
    ffi.Pointer<ffi.Double> equation,
  ) {
    _glGetClipPlane ??=
        _dylib.lookupFunction<_c_glGetClipPlane, _dart_glGetClipPlane>(
            'glGetClipPlane');
    return _glGetClipPlane(
      plane,
      equation,
    );
  }

  _dart_glGetClipPlane _glGetClipPlane;

  void glDrawBuffer(
    int mode,
  ) {
    _glDrawBuffer ??= _dylib
        .lookupFunction<_c_glDrawBuffer, _dart_glDrawBuffer>('glDrawBuffer');
    return _glDrawBuffer(
      mode,
    );
  }

  _dart_glDrawBuffer _glDrawBuffer;

  void glReadBuffer(
    int mode,
  ) {
    _glReadBuffer ??= _dylib
        .lookupFunction<_c_glReadBuffer, _dart_glReadBuffer>('glReadBuffer');
    return _glReadBuffer(
      mode,
    );
  }

  _dart_glReadBuffer _glReadBuffer;

  void glEnable(
    int cap,
  ) {
    _glEnable ??=
        _dylib.lookupFunction<_c_glEnable, _dart_glEnable>('glEnable');
    return _glEnable(
      cap,
    );
  }

  _dart_glEnable _glEnable;

  void glDisable(
    int cap,
  ) {
    _glDisable ??=
        _dylib.lookupFunction<_c_glDisable, _dart_glDisable>('glDisable');
    return _glDisable(
      cap,
    );
  }

  _dart_glDisable _glDisable;

  int glIsEnabled(
    int cap,
  ) {
    _glIsEnabled ??=
        _dylib.lookupFunction<_c_glIsEnabled, _dart_glIsEnabled>('glIsEnabled');
    return _glIsEnabled(
      cap,
    );
  }

  _dart_glIsEnabled _glIsEnabled;

  void glEnableClientState(
    int cap,
  ) {
    _glEnableClientState ??= _dylib.lookupFunction<_c_glEnableClientState,
        _dart_glEnableClientState>('glEnableClientState');
    return _glEnableClientState(
      cap,
    );
  }

  _dart_glEnableClientState _glEnableClientState;

  void glDisableClientState(
    int cap,
  ) {
    _glDisableClientState ??= _dylib.lookupFunction<_c_glDisableClientState,
        _dart_glDisableClientState>('glDisableClientState');
    return _glDisableClientState(
      cap,
    );
  }

  _dart_glDisableClientState _glDisableClientState;

  void glGetBooleanv(
    int pname,
    ffi.Pointer<ffi.Uint8> params,
  ) {
    _glGetBooleanv ??= _dylib
        .lookupFunction<_c_glGetBooleanv, _dart_glGetBooleanv>('glGetBooleanv');
    return _glGetBooleanv(
      pname,
      params,
    );
  }

  _dart_glGetBooleanv _glGetBooleanv;

  void glGetDoublev(
    int pname,
    ffi.Pointer<ffi.Double> params,
  ) {
    _glGetDoublev ??= _dylib
        .lookupFunction<_c_glGetDoublev, _dart_glGetDoublev>('glGetDoublev');
    return _glGetDoublev(
      pname,
      params,
    );
  }

  _dart_glGetDoublev _glGetDoublev;

  void glGetFloatv(
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glGetFloatv ??=
        _dylib.lookupFunction<_c_glGetFloatv, _dart_glGetFloatv>('glGetFloatv');
    return _glGetFloatv(
      pname,
      params,
    );
  }

  _dart_glGetFloatv _glGetFloatv;

  void glGetIntegerv(
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetIntegerv ??= _dylib
        .lookupFunction<_c_glGetIntegerv, _dart_glGetIntegerv>('glGetIntegerv');
    return _glGetIntegerv(
      pname,
      params,
    );
  }

  _dart_glGetIntegerv _glGetIntegerv;

  void glPushAttrib(
    int mask,
  ) {
    _glPushAttrib ??= _dylib
        .lookupFunction<_c_glPushAttrib, _dart_glPushAttrib>('glPushAttrib');
    return _glPushAttrib(
      mask,
    );
  }

  _dart_glPushAttrib _glPushAttrib;

  void glPopAttrib() {
    _glPopAttrib ??=
        _dylib.lookupFunction<_c_glPopAttrib, _dart_glPopAttrib>('glPopAttrib');
    return _glPopAttrib();
  }

  _dart_glPopAttrib _glPopAttrib;

  void glPushClientAttrib(
    int mask,
  ) {
    _glPushClientAttrib ??=
        _dylib.lookupFunction<_c_glPushClientAttrib, _dart_glPushClientAttrib>(
            'glPushClientAttrib');
    return _glPushClientAttrib(
      mask,
    );
  }

  _dart_glPushClientAttrib _glPushClientAttrib;

  void glPopClientAttrib() {
    _glPopClientAttrib ??=
        _dylib.lookupFunction<_c_glPopClientAttrib, _dart_glPopClientAttrib>(
            'glPopClientAttrib');
    return _glPopClientAttrib();
  }

  _dart_glPopClientAttrib _glPopClientAttrib;

  int glRenderMode(
    int mode,
  ) {
    _glRenderMode ??= _dylib
        .lookupFunction<_c_glRenderMode, _dart_glRenderMode>('glRenderMode');
    return _glRenderMode(
      mode,
    );
  }

  _dart_glRenderMode _glRenderMode;

  int glGetError() {
    _glGetError ??=
        _dylib.lookupFunction<_c_glGetError, _dart_glGetError>('glGetError');
    return _glGetError();
  }

  _dart_glGetError _glGetError;

  ffi.Pointer<ffi.Uint8> glGetString(
    int name,
  ) {
    _glGetString ??=
        _dylib.lookupFunction<_c_glGetString, _dart_glGetString>('glGetString');
    return _glGetString(
      name,
    );
  }

  _dart_glGetString _glGetString;

  void glFinish() {
    _glFinish ??=
        _dylib.lookupFunction<_c_glFinish, _dart_glFinish>('glFinish');
    return _glFinish();
  }

  _dart_glFinish _glFinish;

  void glFlush() {
    _glFlush ??= _dylib.lookupFunction<_c_glFlush, _dart_glFlush>('glFlush');
    return _glFlush();
  }

  _dart_glFlush _glFlush;

  void glHint(
    int target,
    int mode,
  ) {
    _glHint ??= _dylib.lookupFunction<_c_glHint, _dart_glHint>('glHint');
    return _glHint(
      target,
      mode,
    );
  }

  _dart_glHint _glHint;

  void glClearDepth(
    double depth,
  ) {
    _glClearDepth ??= _dylib
        .lookupFunction<_c_glClearDepth, _dart_glClearDepth>('glClearDepth');
    return _glClearDepth(
      depth,
    );
  }

  _dart_glClearDepth _glClearDepth;

  void glDepthFunc(
    int func,
  ) {
    _glDepthFunc ??=
        _dylib.lookupFunction<_c_glDepthFunc, _dart_glDepthFunc>('glDepthFunc');
    return _glDepthFunc(
      func,
    );
  }

  _dart_glDepthFunc _glDepthFunc;

  void glDepthMask(
    int flag,
  ) {
    _glDepthMask ??=
        _dylib.lookupFunction<_c_glDepthMask, _dart_glDepthMask>('glDepthMask');
    return _glDepthMask(
      flag,
    );
  }

  _dart_glDepthMask _glDepthMask;

  void glDepthRange(
    double near_val,
    double far_val,
  ) {
    _glDepthRange ??= _dylib
        .lookupFunction<_c_glDepthRange, _dart_glDepthRange>('glDepthRange');
    return _glDepthRange(
      near_val,
      far_val,
    );
  }

  _dart_glDepthRange _glDepthRange;

  void glClearAccum(
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    _glClearAccum ??= _dylib
        .lookupFunction<_c_glClearAccum, _dart_glClearAccum>('glClearAccum');
    return _glClearAccum(
      red,
      green,
      blue,
      alpha,
    );
  }

  _dart_glClearAccum _glClearAccum;

  void glAccum(
    int op,
    double value,
  ) {
    _glAccum ??= _dylib.lookupFunction<_c_glAccum, _dart_glAccum>('glAccum');
    return _glAccum(
      op,
      value,
    );
  }

  _dart_glAccum _glAccum;

  void glMatrixMode(
    int mode,
  ) {
    _glMatrixMode ??= _dylib
        .lookupFunction<_c_glMatrixMode, _dart_glMatrixMode>('glMatrixMode');
    return _glMatrixMode(
      mode,
    );
  }

  _dart_glMatrixMode _glMatrixMode;

  void glOrtho(
    double left,
    double right,
    double bottom,
    double top,
    double near_val,
    double far_val,
  ) {
    _glOrtho ??= _dylib.lookupFunction<_c_glOrtho, _dart_glOrtho>('glOrtho');
    return _glOrtho(
      left,
      right,
      bottom,
      top,
      near_val,
      far_val,
    );
  }

  _dart_glOrtho _glOrtho;

  void glFrustum(
    double left,
    double right,
    double bottom,
    double top,
    double near_val,
    double far_val,
  ) {
    _glFrustum ??=
        _dylib.lookupFunction<_c_glFrustum, _dart_glFrustum>('glFrustum');
    return _glFrustum(
      left,
      right,
      bottom,
      top,
      near_val,
      far_val,
    );
  }

  _dart_glFrustum _glFrustum;

  void glViewport(
    int x,
    int y,
    int width,
    int height,
  ) {
    _glViewport ??=
        _dylib.lookupFunction<_c_glViewport, _dart_glViewport>('glViewport');
    return _glViewport(
      x,
      y,
      width,
      height,
    );
  }

  _dart_glViewport _glViewport;

  void glPushMatrix() {
    _glPushMatrix ??= _dylib
        .lookupFunction<_c_glPushMatrix, _dart_glPushMatrix>('glPushMatrix');
    return _glPushMatrix();
  }

  _dart_glPushMatrix _glPushMatrix;

  void glPopMatrix() {
    _glPopMatrix ??=
        _dylib.lookupFunction<_c_glPopMatrix, _dart_glPopMatrix>('glPopMatrix');
    return _glPopMatrix();
  }

  _dart_glPopMatrix _glPopMatrix;

  void glLoadIdentity() {
    _glLoadIdentity ??=
        _dylib.lookupFunction<_c_glLoadIdentity, _dart_glLoadIdentity>(
            'glLoadIdentity');
    return _glLoadIdentity();
  }

  _dart_glLoadIdentity _glLoadIdentity;

  void glLoadMatrixd(
    ffi.Pointer<ffi.Double> m,
  ) {
    _glLoadMatrixd ??= _dylib
        .lookupFunction<_c_glLoadMatrixd, _dart_glLoadMatrixd>('glLoadMatrixd');
    return _glLoadMatrixd(
      m,
    );
  }

  _dart_glLoadMatrixd _glLoadMatrixd;

  void glLoadMatrixf(
    ffi.Pointer<ffi.Float> m,
  ) {
    _glLoadMatrixf ??= _dylib
        .lookupFunction<_c_glLoadMatrixf, _dart_glLoadMatrixf>('glLoadMatrixf');
    return _glLoadMatrixf(
      m,
    );
  }

  _dart_glLoadMatrixf _glLoadMatrixf;

  void glMultMatrixd(
    ffi.Pointer<ffi.Double> m,
  ) {
    _glMultMatrixd ??= _dylib
        .lookupFunction<_c_glMultMatrixd, _dart_glMultMatrixd>('glMultMatrixd');
    return _glMultMatrixd(
      m,
    );
  }

  _dart_glMultMatrixd _glMultMatrixd;

  void glMultMatrixf(
    ffi.Pointer<ffi.Float> m,
  ) {
    _glMultMatrixf ??= _dylib
        .lookupFunction<_c_glMultMatrixf, _dart_glMultMatrixf>('glMultMatrixf');
    return _glMultMatrixf(
      m,
    );
  }

  _dart_glMultMatrixf _glMultMatrixf;

  void glRotated(
    double angle,
    double x,
    double y,
    double z,
  ) {
    _glRotated ??=
        _dylib.lookupFunction<_c_glRotated, _dart_glRotated>('glRotated');
    return _glRotated(
      angle,
      x,
      y,
      z,
    );
  }

  _dart_glRotated _glRotated;

  void glRotatef(
    double angle,
    double x,
    double y,
    double z,
  ) {
    _glRotatef ??=
        _dylib.lookupFunction<_c_glRotatef, _dart_glRotatef>('glRotatef');
    return _glRotatef(
      angle,
      x,
      y,
      z,
    );
  }

  _dart_glRotatef _glRotatef;

  void glScaled(
    double x,
    double y,
    double z,
  ) {
    _glScaled ??=
        _dylib.lookupFunction<_c_glScaled, _dart_glScaled>('glScaled');
    return _glScaled(
      x,
      y,
      z,
    );
  }

  _dart_glScaled _glScaled;

  void glScalef(
    double x,
    double y,
    double z,
  ) {
    _glScalef ??=
        _dylib.lookupFunction<_c_glScalef, _dart_glScalef>('glScalef');
    return _glScalef(
      x,
      y,
      z,
    );
  }

  _dart_glScalef _glScalef;

  void glTranslated(
    double x,
    double y,
    double z,
  ) {
    _glTranslated ??= _dylib
        .lookupFunction<_c_glTranslated, _dart_glTranslated>('glTranslated');
    return _glTranslated(
      x,
      y,
      z,
    );
  }

  _dart_glTranslated _glTranslated;

  void glTranslatef(
    double x,
    double y,
    double z,
  ) {
    _glTranslatef ??= _dylib
        .lookupFunction<_c_glTranslatef, _dart_glTranslatef>('glTranslatef');
    return _glTranslatef(
      x,
      y,
      z,
    );
  }

  _dart_glTranslatef _glTranslatef;

  int glIsList(
    int list,
  ) {
    _glIsList ??=
        _dylib.lookupFunction<_c_glIsList, _dart_glIsList>('glIsList');
    return _glIsList(
      list,
    );
  }

  _dart_glIsList _glIsList;

  void glDeleteLists(
    int list,
    int range,
  ) {
    _glDeleteLists ??= _dylib
        .lookupFunction<_c_glDeleteLists, _dart_glDeleteLists>('glDeleteLists');
    return _glDeleteLists(
      list,
      range,
    );
  }

  _dart_glDeleteLists _glDeleteLists;

  int glGenLists(
    int range,
  ) {
    _glGenLists ??=
        _dylib.lookupFunction<_c_glGenLists, _dart_glGenLists>('glGenLists');
    return _glGenLists(
      range,
    );
  }

  _dart_glGenLists _glGenLists;

  void glNewList(
    int list,
    int mode,
  ) {
    _glNewList ??=
        _dylib.lookupFunction<_c_glNewList, _dart_glNewList>('glNewList');
    return _glNewList(
      list,
      mode,
    );
  }

  _dart_glNewList _glNewList;

  void glEndList() {
    _glEndList ??=
        _dylib.lookupFunction<_c_glEndList, _dart_glEndList>('glEndList');
    return _glEndList();
  }

  _dart_glEndList _glEndList;

  void glCallList(
    int list,
  ) {
    _glCallList ??=
        _dylib.lookupFunction<_c_glCallList, _dart_glCallList>('glCallList');
    return _glCallList(
      list,
    );
  }

  _dart_glCallList _glCallList;

  void glCallLists(
    int n,
    int type,
    ffi.Pointer<ffi.Void> lists,
  ) {
    _glCallLists ??=
        _dylib.lookupFunction<_c_glCallLists, _dart_glCallLists>('glCallLists');
    return _glCallLists(
      n,
      type,
      lists,
    );
  }

  _dart_glCallLists _glCallLists;

  void glListBase(
    int base,
  ) {
    _glListBase ??=
        _dylib.lookupFunction<_c_glListBase, _dart_glListBase>('glListBase');
    return _glListBase(
      base,
    );
  }

  _dart_glListBase _glListBase;

  void glBegin(
    int mode,
  ) {
    _glBegin ??= _dylib.lookupFunction<_c_glBegin, _dart_glBegin>('glBegin');
    return _glBegin(
      mode,
    );
  }

  _dart_glBegin _glBegin;

  void glEnd() {
    _glEnd ??= _dylib.lookupFunction<_c_glEnd, _dart_glEnd>('glEnd');
    return _glEnd();
  }

  _dart_glEnd _glEnd;

  void glVertex2d(
    double x,
    double y,
  ) {
    _glVertex2d ??=
        _dylib.lookupFunction<_c_glVertex2d, _dart_glVertex2d>('glVertex2d');
    return _glVertex2d(
      x,
      y,
    );
  }

  _dart_glVertex2d _glVertex2d;

  void glVertex2f(
    double x,
    double y,
  ) {
    _glVertex2f ??=
        _dylib.lookupFunction<_c_glVertex2f, _dart_glVertex2f>('glVertex2f');
    return _glVertex2f(
      x,
      y,
    );
  }

  _dart_glVertex2f _glVertex2f;

  void glVertex2i(
    int x,
    int y,
  ) {
    _glVertex2i ??=
        _dylib.lookupFunction<_c_glVertex2i, _dart_glVertex2i>('glVertex2i');
    return _glVertex2i(
      x,
      y,
    );
  }

  _dart_glVertex2i _glVertex2i;

  void glVertex2s(
    int x,
    int y,
  ) {
    _glVertex2s ??=
        _dylib.lookupFunction<_c_glVertex2s, _dart_glVertex2s>('glVertex2s');
    return _glVertex2s(
      x,
      y,
    );
  }

  _dart_glVertex2s _glVertex2s;

  void glVertex3d(
    double x,
    double y,
    double z,
  ) {
    _glVertex3d ??=
        _dylib.lookupFunction<_c_glVertex3d, _dart_glVertex3d>('glVertex3d');
    return _glVertex3d(
      x,
      y,
      z,
    );
  }

  _dart_glVertex3d _glVertex3d;

  void glVertex3f(
    double x,
    double y,
    double z,
  ) {
    _glVertex3f ??=
        _dylib.lookupFunction<_c_glVertex3f, _dart_glVertex3f>('glVertex3f');
    return _glVertex3f(
      x,
      y,
      z,
    );
  }

  _dart_glVertex3f _glVertex3f;

  void glVertex3i(
    int x,
    int y,
    int z,
  ) {
    _glVertex3i ??=
        _dylib.lookupFunction<_c_glVertex3i, _dart_glVertex3i>('glVertex3i');
    return _glVertex3i(
      x,
      y,
      z,
    );
  }

  _dart_glVertex3i _glVertex3i;

  void glVertex3s(
    int x,
    int y,
    int z,
  ) {
    _glVertex3s ??=
        _dylib.lookupFunction<_c_glVertex3s, _dart_glVertex3s>('glVertex3s');
    return _glVertex3s(
      x,
      y,
      z,
    );
  }

  _dart_glVertex3s _glVertex3s;

  void glVertex4d(
    double x,
    double y,
    double z,
    double w,
  ) {
    _glVertex4d ??=
        _dylib.lookupFunction<_c_glVertex4d, _dart_glVertex4d>('glVertex4d');
    return _glVertex4d(
      x,
      y,
      z,
      w,
    );
  }

  _dart_glVertex4d _glVertex4d;

  void glVertex4f(
    double x,
    double y,
    double z,
    double w,
  ) {
    _glVertex4f ??=
        _dylib.lookupFunction<_c_glVertex4f, _dart_glVertex4f>('glVertex4f');
    return _glVertex4f(
      x,
      y,
      z,
      w,
    );
  }

  _dart_glVertex4f _glVertex4f;

  void glVertex4i(
    int x,
    int y,
    int z,
    int w,
  ) {
    _glVertex4i ??=
        _dylib.lookupFunction<_c_glVertex4i, _dart_glVertex4i>('glVertex4i');
    return _glVertex4i(
      x,
      y,
      z,
      w,
    );
  }

  _dart_glVertex4i _glVertex4i;

  void glVertex4s(
    int x,
    int y,
    int z,
    int w,
  ) {
    _glVertex4s ??=
        _dylib.lookupFunction<_c_glVertex4s, _dart_glVertex4s>('glVertex4s');
    return _glVertex4s(
      x,
      y,
      z,
      w,
    );
  }

  _dart_glVertex4s _glVertex4s;

  void glVertex2dv(
    ffi.Pointer<ffi.Double> v,
  ) {
    _glVertex2dv ??=
        _dylib.lookupFunction<_c_glVertex2dv, _dart_glVertex2dv>('glVertex2dv');
    return _glVertex2dv(
      v,
    );
  }

  _dart_glVertex2dv _glVertex2dv;

  void glVertex2fv(
    ffi.Pointer<ffi.Float> v,
  ) {
    _glVertex2fv ??=
        _dylib.lookupFunction<_c_glVertex2fv, _dart_glVertex2fv>('glVertex2fv');
    return _glVertex2fv(
      v,
    );
  }

  _dart_glVertex2fv _glVertex2fv;

  void glVertex2iv(
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glVertex2iv ??=
        _dylib.lookupFunction<_c_glVertex2iv, _dart_glVertex2iv>('glVertex2iv');
    return _glVertex2iv(
      v,
    );
  }

  _dart_glVertex2iv _glVertex2iv;

  void glVertex2sv(
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glVertex2sv ??=
        _dylib.lookupFunction<_c_glVertex2sv, _dart_glVertex2sv>('glVertex2sv');
    return _glVertex2sv(
      v,
    );
  }

  _dart_glVertex2sv _glVertex2sv;

  void glVertex3dv(
    ffi.Pointer<ffi.Double> v,
  ) {
    _glVertex3dv ??=
        _dylib.lookupFunction<_c_glVertex3dv, _dart_glVertex3dv>('glVertex3dv');
    return _glVertex3dv(
      v,
    );
  }

  _dart_glVertex3dv _glVertex3dv;

  void glVertex3fv(
    ffi.Pointer<ffi.Float> v,
  ) {
    _glVertex3fv ??=
        _dylib.lookupFunction<_c_glVertex3fv, _dart_glVertex3fv>('glVertex3fv');
    return _glVertex3fv(
      v,
    );
  }

  _dart_glVertex3fv _glVertex3fv;

  void glVertex3iv(
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glVertex3iv ??=
        _dylib.lookupFunction<_c_glVertex3iv, _dart_glVertex3iv>('glVertex3iv');
    return _glVertex3iv(
      v,
    );
  }

  _dart_glVertex3iv _glVertex3iv;

  void glVertex3sv(
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glVertex3sv ??=
        _dylib.lookupFunction<_c_glVertex3sv, _dart_glVertex3sv>('glVertex3sv');
    return _glVertex3sv(
      v,
    );
  }

  _dart_glVertex3sv _glVertex3sv;

  void glVertex4dv(
    ffi.Pointer<ffi.Double> v,
  ) {
    _glVertex4dv ??=
        _dylib.lookupFunction<_c_glVertex4dv, _dart_glVertex4dv>('glVertex4dv');
    return _glVertex4dv(
      v,
    );
  }

  _dart_glVertex4dv _glVertex4dv;

  void glVertex4fv(
    ffi.Pointer<ffi.Float> v,
  ) {
    _glVertex4fv ??=
        _dylib.lookupFunction<_c_glVertex4fv, _dart_glVertex4fv>('glVertex4fv');
    return _glVertex4fv(
      v,
    );
  }

  _dart_glVertex4fv _glVertex4fv;

  void glVertex4iv(
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glVertex4iv ??=
        _dylib.lookupFunction<_c_glVertex4iv, _dart_glVertex4iv>('glVertex4iv');
    return _glVertex4iv(
      v,
    );
  }

  _dart_glVertex4iv _glVertex4iv;

  void glVertex4sv(
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glVertex4sv ??=
        _dylib.lookupFunction<_c_glVertex4sv, _dart_glVertex4sv>('glVertex4sv');
    return _glVertex4sv(
      v,
    );
  }

  _dart_glVertex4sv _glVertex4sv;

  void glNormal3b(
    int nx,
    int ny,
    int nz,
  ) {
    _glNormal3b ??=
        _dylib.lookupFunction<_c_glNormal3b, _dart_glNormal3b>('glNormal3b');
    return _glNormal3b(
      nx,
      ny,
      nz,
    );
  }

  _dart_glNormal3b _glNormal3b;

  void glNormal3d(
    double nx,
    double ny,
    double nz,
  ) {
    _glNormal3d ??=
        _dylib.lookupFunction<_c_glNormal3d, _dart_glNormal3d>('glNormal3d');
    return _glNormal3d(
      nx,
      ny,
      nz,
    );
  }

  _dart_glNormal3d _glNormal3d;

  void glNormal3f(
    double nx,
    double ny,
    double nz,
  ) {
    _glNormal3f ??=
        _dylib.lookupFunction<_c_glNormal3f, _dart_glNormal3f>('glNormal3f');
    return _glNormal3f(
      nx,
      ny,
      nz,
    );
  }

  _dart_glNormal3f _glNormal3f;

  void glNormal3i(
    int nx,
    int ny,
    int nz,
  ) {
    _glNormal3i ??=
        _dylib.lookupFunction<_c_glNormal3i, _dart_glNormal3i>('glNormal3i');
    return _glNormal3i(
      nx,
      ny,
      nz,
    );
  }

  _dart_glNormal3i _glNormal3i;

  void glNormal3s(
    int nx,
    int ny,
    int nz,
  ) {
    _glNormal3s ??=
        _dylib.lookupFunction<_c_glNormal3s, _dart_glNormal3s>('glNormal3s');
    return _glNormal3s(
      nx,
      ny,
      nz,
    );
  }

  _dart_glNormal3s _glNormal3s;

  void glNormal3bv(
    ffi.Pointer<ffi.Int8> v,
  ) {
    _glNormal3bv ??=
        _dylib.lookupFunction<_c_glNormal3bv, _dart_glNormal3bv>('glNormal3bv');
    return _glNormal3bv(
      v,
    );
  }

  _dart_glNormal3bv _glNormal3bv;

  void glNormal3dv(
    ffi.Pointer<ffi.Double> v,
  ) {
    _glNormal3dv ??=
        _dylib.lookupFunction<_c_glNormal3dv, _dart_glNormal3dv>('glNormal3dv');
    return _glNormal3dv(
      v,
    );
  }

  _dart_glNormal3dv _glNormal3dv;

  void glNormal3fv(
    ffi.Pointer<ffi.Float> v,
  ) {
    _glNormal3fv ??=
        _dylib.lookupFunction<_c_glNormal3fv, _dart_glNormal3fv>('glNormal3fv');
    return _glNormal3fv(
      v,
    );
  }

  _dart_glNormal3fv _glNormal3fv;

  void glNormal3iv(
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glNormal3iv ??=
        _dylib.lookupFunction<_c_glNormal3iv, _dart_glNormal3iv>('glNormal3iv');
    return _glNormal3iv(
      v,
    );
  }

  _dart_glNormal3iv _glNormal3iv;

  void glNormal3sv(
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glNormal3sv ??=
        _dylib.lookupFunction<_c_glNormal3sv, _dart_glNormal3sv>('glNormal3sv');
    return _glNormal3sv(
      v,
    );
  }

  _dart_glNormal3sv _glNormal3sv;

  void glIndexd(
    double c,
  ) {
    _glIndexd ??=
        _dylib.lookupFunction<_c_glIndexd, _dart_glIndexd>('glIndexd');
    return _glIndexd(
      c,
    );
  }

  _dart_glIndexd _glIndexd;

  void glIndexf(
    double c,
  ) {
    _glIndexf ??=
        _dylib.lookupFunction<_c_glIndexf, _dart_glIndexf>('glIndexf');
    return _glIndexf(
      c,
    );
  }

  _dart_glIndexf _glIndexf;

  void glIndexi(
    int c,
  ) {
    _glIndexi ??=
        _dylib.lookupFunction<_c_glIndexi, _dart_glIndexi>('glIndexi');
    return _glIndexi(
      c,
    );
  }

  _dart_glIndexi _glIndexi;

  void glIndexs(
    int c,
  ) {
    _glIndexs ??=
        _dylib.lookupFunction<_c_glIndexs, _dart_glIndexs>('glIndexs');
    return _glIndexs(
      c,
    );
  }

  _dart_glIndexs _glIndexs;

  void glIndexub(
    int c,
  ) {
    _glIndexub ??=
        _dylib.lookupFunction<_c_glIndexub, _dart_glIndexub>('glIndexub');
    return _glIndexub(
      c,
    );
  }

  _dart_glIndexub _glIndexub;

  void glIndexdv(
    ffi.Pointer<ffi.Double> c,
  ) {
    _glIndexdv ??=
        _dylib.lookupFunction<_c_glIndexdv, _dart_glIndexdv>('glIndexdv');
    return _glIndexdv(
      c,
    );
  }

  _dart_glIndexdv _glIndexdv;

  void glIndexfv(
    ffi.Pointer<ffi.Float> c,
  ) {
    _glIndexfv ??=
        _dylib.lookupFunction<_c_glIndexfv, _dart_glIndexfv>('glIndexfv');
    return _glIndexfv(
      c,
    );
  }

  _dart_glIndexfv _glIndexfv;

  void glIndexiv(
    ffi.Pointer<ffi.Int32> c,
  ) {
    _glIndexiv ??=
        _dylib.lookupFunction<_c_glIndexiv, _dart_glIndexiv>('glIndexiv');
    return _glIndexiv(
      c,
    );
  }

  _dart_glIndexiv _glIndexiv;

  void glIndexsv(
    ffi.Pointer<ffi.Int16> c,
  ) {
    _glIndexsv ??=
        _dylib.lookupFunction<_c_glIndexsv, _dart_glIndexsv>('glIndexsv');
    return _glIndexsv(
      c,
    );
  }

  _dart_glIndexsv _glIndexsv;

  void glIndexubv(
    ffi.Pointer<ffi.Uint8> c,
  ) {
    _glIndexubv ??=
        _dylib.lookupFunction<_c_glIndexubv, _dart_glIndexubv>('glIndexubv');
    return _glIndexubv(
      c,
    );
  }

  _dart_glIndexubv _glIndexubv;

  void glColor3b(
    int red,
    int green,
    int blue,
  ) {
    _glColor3b ??=
        _dylib.lookupFunction<_c_glColor3b, _dart_glColor3b>('glColor3b');
    return _glColor3b(
      red,
      green,
      blue,
    );
  }

  _dart_glColor3b _glColor3b;

  void glColor3d(
    double red,
    double green,
    double blue,
  ) {
    _glColor3d ??=
        _dylib.lookupFunction<_c_glColor3d, _dart_glColor3d>('glColor3d');
    return _glColor3d(
      red,
      green,
      blue,
    );
  }

  _dart_glColor3d _glColor3d;

  void glColor3f(
    double red,
    double green,
    double blue,
  ) {
    _glColor3f ??=
        _dylib.lookupFunction<_c_glColor3f, _dart_glColor3f>('glColor3f');
    return _glColor3f(
      red,
      green,
      blue,
    );
  }

  _dart_glColor3f _glColor3f;

  void glColor3i(
    int red,
    int green,
    int blue,
  ) {
    _glColor3i ??=
        _dylib.lookupFunction<_c_glColor3i, _dart_glColor3i>('glColor3i');
    return _glColor3i(
      red,
      green,
      blue,
    );
  }

  _dart_glColor3i _glColor3i;

  void glColor3s(
    int red,
    int green,
    int blue,
  ) {
    _glColor3s ??=
        _dylib.lookupFunction<_c_glColor3s, _dart_glColor3s>('glColor3s');
    return _glColor3s(
      red,
      green,
      blue,
    );
  }

  _dart_glColor3s _glColor3s;

  void glColor3ub(
    int red,
    int green,
    int blue,
  ) {
    _glColor3ub ??=
        _dylib.lookupFunction<_c_glColor3ub, _dart_glColor3ub>('glColor3ub');
    return _glColor3ub(
      red,
      green,
      blue,
    );
  }

  _dart_glColor3ub _glColor3ub;

  void glColor3ui(
    int red,
    int green,
    int blue,
  ) {
    _glColor3ui ??=
        _dylib.lookupFunction<_c_glColor3ui, _dart_glColor3ui>('glColor3ui');
    return _glColor3ui(
      red,
      green,
      blue,
    );
  }

  _dart_glColor3ui _glColor3ui;

  void glColor3us(
    int red,
    int green,
    int blue,
  ) {
    _glColor3us ??=
        _dylib.lookupFunction<_c_glColor3us, _dart_glColor3us>('glColor3us');
    return _glColor3us(
      red,
      green,
      blue,
    );
  }

  _dart_glColor3us _glColor3us;

  void glColor4b(
    int red,
    int green,
    int blue,
    int alpha,
  ) {
    _glColor4b ??=
        _dylib.lookupFunction<_c_glColor4b, _dart_glColor4b>('glColor4b');
    return _glColor4b(
      red,
      green,
      blue,
      alpha,
    );
  }

  _dart_glColor4b _glColor4b;

  void glColor4d(
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    _glColor4d ??=
        _dylib.lookupFunction<_c_glColor4d, _dart_glColor4d>('glColor4d');
    return _glColor4d(
      red,
      green,
      blue,
      alpha,
    );
  }

  _dart_glColor4d _glColor4d;

  void glColor4f(
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    _glColor4f ??=
        _dylib.lookupFunction<_c_glColor4f, _dart_glColor4f>('glColor4f');
    return _glColor4f(
      red,
      green,
      blue,
      alpha,
    );
  }

  _dart_glColor4f _glColor4f;

  void glColor4i(
    int red,
    int green,
    int blue,
    int alpha,
  ) {
    _glColor4i ??=
        _dylib.lookupFunction<_c_glColor4i, _dart_glColor4i>('glColor4i');
    return _glColor4i(
      red,
      green,
      blue,
      alpha,
    );
  }

  _dart_glColor4i _glColor4i;

  void glColor4s(
    int red,
    int green,
    int blue,
    int alpha,
  ) {
    _glColor4s ??=
        _dylib.lookupFunction<_c_glColor4s, _dart_glColor4s>('glColor4s');
    return _glColor4s(
      red,
      green,
      blue,
      alpha,
    );
  }

  _dart_glColor4s _glColor4s;

  void glColor4ub(
    int red,
    int green,
    int blue,
    int alpha,
  ) {
    _glColor4ub ??=
        _dylib.lookupFunction<_c_glColor4ub, _dart_glColor4ub>('glColor4ub');
    return _glColor4ub(
      red,
      green,
      blue,
      alpha,
    );
  }

  _dart_glColor4ub _glColor4ub;

  void glColor4ui(
    int red,
    int green,
    int blue,
    int alpha,
  ) {
    _glColor4ui ??=
        _dylib.lookupFunction<_c_glColor4ui, _dart_glColor4ui>('glColor4ui');
    return _glColor4ui(
      red,
      green,
      blue,
      alpha,
    );
  }

  _dart_glColor4ui _glColor4ui;

  void glColor4us(
    int red,
    int green,
    int blue,
    int alpha,
  ) {
    _glColor4us ??=
        _dylib.lookupFunction<_c_glColor4us, _dart_glColor4us>('glColor4us');
    return _glColor4us(
      red,
      green,
      blue,
      alpha,
    );
  }

  _dart_glColor4us _glColor4us;

  void glColor3bv(
    ffi.Pointer<ffi.Int8> v,
  ) {
    _glColor3bv ??=
        _dylib.lookupFunction<_c_glColor3bv, _dart_glColor3bv>('glColor3bv');
    return _glColor3bv(
      v,
    );
  }

  _dart_glColor3bv _glColor3bv;

  void glColor3dv(
    ffi.Pointer<ffi.Double> v,
  ) {
    _glColor3dv ??=
        _dylib.lookupFunction<_c_glColor3dv, _dart_glColor3dv>('glColor3dv');
    return _glColor3dv(
      v,
    );
  }

  _dart_glColor3dv _glColor3dv;

  void glColor3fv(
    ffi.Pointer<ffi.Float> v,
  ) {
    _glColor3fv ??=
        _dylib.lookupFunction<_c_glColor3fv, _dart_glColor3fv>('glColor3fv');
    return _glColor3fv(
      v,
    );
  }

  _dart_glColor3fv _glColor3fv;

  void glColor3iv(
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glColor3iv ??=
        _dylib.lookupFunction<_c_glColor3iv, _dart_glColor3iv>('glColor3iv');
    return _glColor3iv(
      v,
    );
  }

  _dart_glColor3iv _glColor3iv;

  void glColor3sv(
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glColor3sv ??=
        _dylib.lookupFunction<_c_glColor3sv, _dart_glColor3sv>('glColor3sv');
    return _glColor3sv(
      v,
    );
  }

  _dart_glColor3sv _glColor3sv;

  void glColor3ubv(
    ffi.Pointer<ffi.Uint8> v,
  ) {
    _glColor3ubv ??=
        _dylib.lookupFunction<_c_glColor3ubv, _dart_glColor3ubv>('glColor3ubv');
    return _glColor3ubv(
      v,
    );
  }

  _dart_glColor3ubv _glColor3ubv;

  void glColor3uiv(
    ffi.Pointer<ffi.Uint32> v,
  ) {
    _glColor3uiv ??=
        _dylib.lookupFunction<_c_glColor3uiv, _dart_glColor3uiv>('glColor3uiv');
    return _glColor3uiv(
      v,
    );
  }

  _dart_glColor3uiv _glColor3uiv;

  void glColor3usv(
    ffi.Pointer<ffi.Uint16> v,
  ) {
    _glColor3usv ??=
        _dylib.lookupFunction<_c_glColor3usv, _dart_glColor3usv>('glColor3usv');
    return _glColor3usv(
      v,
    );
  }

  _dart_glColor3usv _glColor3usv;

  void glColor4bv(
    ffi.Pointer<ffi.Int8> v,
  ) {
    _glColor4bv ??=
        _dylib.lookupFunction<_c_glColor4bv, _dart_glColor4bv>('glColor4bv');
    return _glColor4bv(
      v,
    );
  }

  _dart_glColor4bv _glColor4bv;

  void glColor4dv(
    ffi.Pointer<ffi.Double> v,
  ) {
    _glColor4dv ??=
        _dylib.lookupFunction<_c_glColor4dv, _dart_glColor4dv>('glColor4dv');
    return _glColor4dv(
      v,
    );
  }

  _dart_glColor4dv _glColor4dv;

  void glColor4fv(
    ffi.Pointer<ffi.Float> v,
  ) {
    _glColor4fv ??=
        _dylib.lookupFunction<_c_glColor4fv, _dart_glColor4fv>('glColor4fv');
    return _glColor4fv(
      v,
    );
  }

  _dart_glColor4fv _glColor4fv;

  void glColor4iv(
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glColor4iv ??=
        _dylib.lookupFunction<_c_glColor4iv, _dart_glColor4iv>('glColor4iv');
    return _glColor4iv(
      v,
    );
  }

  _dart_glColor4iv _glColor4iv;

  void glColor4sv(
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glColor4sv ??=
        _dylib.lookupFunction<_c_glColor4sv, _dart_glColor4sv>('glColor4sv');
    return _glColor4sv(
      v,
    );
  }

  _dart_glColor4sv _glColor4sv;

  void glColor4ubv(
    ffi.Pointer<ffi.Uint8> v,
  ) {
    _glColor4ubv ??=
        _dylib.lookupFunction<_c_glColor4ubv, _dart_glColor4ubv>('glColor4ubv');
    return _glColor4ubv(
      v,
    );
  }

  _dart_glColor4ubv _glColor4ubv;

  void glColor4uiv(
    ffi.Pointer<ffi.Uint32> v,
  ) {
    _glColor4uiv ??=
        _dylib.lookupFunction<_c_glColor4uiv, _dart_glColor4uiv>('glColor4uiv');
    return _glColor4uiv(
      v,
    );
  }

  _dart_glColor4uiv _glColor4uiv;

  void glColor4usv(
    ffi.Pointer<ffi.Uint16> v,
  ) {
    _glColor4usv ??=
        _dylib.lookupFunction<_c_glColor4usv, _dart_glColor4usv>('glColor4usv');
    return _glColor4usv(
      v,
    );
  }

  _dart_glColor4usv _glColor4usv;

  void glTexCoord1d(
    double s,
  ) {
    _glTexCoord1d ??= _dylib
        .lookupFunction<_c_glTexCoord1d, _dart_glTexCoord1d>('glTexCoord1d');
    return _glTexCoord1d(
      s,
    );
  }

  _dart_glTexCoord1d _glTexCoord1d;

  void glTexCoord1f(
    double s,
  ) {
    _glTexCoord1f ??= _dylib
        .lookupFunction<_c_glTexCoord1f, _dart_glTexCoord1f>('glTexCoord1f');
    return _glTexCoord1f(
      s,
    );
  }

  _dart_glTexCoord1f _glTexCoord1f;

  void glTexCoord1i(
    int s,
  ) {
    _glTexCoord1i ??= _dylib
        .lookupFunction<_c_glTexCoord1i, _dart_glTexCoord1i>('glTexCoord1i');
    return _glTexCoord1i(
      s,
    );
  }

  _dart_glTexCoord1i _glTexCoord1i;

  void glTexCoord1s(
    int s,
  ) {
    _glTexCoord1s ??= _dylib
        .lookupFunction<_c_glTexCoord1s, _dart_glTexCoord1s>('glTexCoord1s');
    return _glTexCoord1s(
      s,
    );
  }

  _dart_glTexCoord1s _glTexCoord1s;

  void glTexCoord2d(
    double s,
    double t,
  ) {
    _glTexCoord2d ??= _dylib
        .lookupFunction<_c_glTexCoord2d, _dart_glTexCoord2d>('glTexCoord2d');
    return _glTexCoord2d(
      s,
      t,
    );
  }

  _dart_glTexCoord2d _glTexCoord2d;

  void glTexCoord2f(
    double s,
    double t,
  ) {
    _glTexCoord2f ??= _dylib
        .lookupFunction<_c_glTexCoord2f, _dart_glTexCoord2f>('glTexCoord2f');
    return _glTexCoord2f(
      s,
      t,
    );
  }

  _dart_glTexCoord2f _glTexCoord2f;

  void glTexCoord2i(
    int s,
    int t,
  ) {
    _glTexCoord2i ??= _dylib
        .lookupFunction<_c_glTexCoord2i, _dart_glTexCoord2i>('glTexCoord2i');
    return _glTexCoord2i(
      s,
      t,
    );
  }

  _dart_glTexCoord2i _glTexCoord2i;

  void glTexCoord2s(
    int s,
    int t,
  ) {
    _glTexCoord2s ??= _dylib
        .lookupFunction<_c_glTexCoord2s, _dart_glTexCoord2s>('glTexCoord2s');
    return _glTexCoord2s(
      s,
      t,
    );
  }

  _dart_glTexCoord2s _glTexCoord2s;

  void glTexCoord3d(
    double s,
    double t,
    double r,
  ) {
    _glTexCoord3d ??= _dylib
        .lookupFunction<_c_glTexCoord3d, _dart_glTexCoord3d>('glTexCoord3d');
    return _glTexCoord3d(
      s,
      t,
      r,
    );
  }

  _dart_glTexCoord3d _glTexCoord3d;

  void glTexCoord3f(
    double s,
    double t,
    double r,
  ) {
    _glTexCoord3f ??= _dylib
        .lookupFunction<_c_glTexCoord3f, _dart_glTexCoord3f>('glTexCoord3f');
    return _glTexCoord3f(
      s,
      t,
      r,
    );
  }

  _dart_glTexCoord3f _glTexCoord3f;

  void glTexCoord3i(
    int s,
    int t,
    int r,
  ) {
    _glTexCoord3i ??= _dylib
        .lookupFunction<_c_glTexCoord3i, _dart_glTexCoord3i>('glTexCoord3i');
    return _glTexCoord3i(
      s,
      t,
      r,
    );
  }

  _dart_glTexCoord3i _glTexCoord3i;

  void glTexCoord3s(
    int s,
    int t,
    int r,
  ) {
    _glTexCoord3s ??= _dylib
        .lookupFunction<_c_glTexCoord3s, _dart_glTexCoord3s>('glTexCoord3s');
    return _glTexCoord3s(
      s,
      t,
      r,
    );
  }

  _dart_glTexCoord3s _glTexCoord3s;

  void glTexCoord4d(
    double s,
    double t,
    double r,
    double q,
  ) {
    _glTexCoord4d ??= _dylib
        .lookupFunction<_c_glTexCoord4d, _dart_glTexCoord4d>('glTexCoord4d');
    return _glTexCoord4d(
      s,
      t,
      r,
      q,
    );
  }

  _dart_glTexCoord4d _glTexCoord4d;

  void glTexCoord4f(
    double s,
    double t,
    double r,
    double q,
  ) {
    _glTexCoord4f ??= _dylib
        .lookupFunction<_c_glTexCoord4f, _dart_glTexCoord4f>('glTexCoord4f');
    return _glTexCoord4f(
      s,
      t,
      r,
      q,
    );
  }

  _dart_glTexCoord4f _glTexCoord4f;

  void glTexCoord4i(
    int s,
    int t,
    int r,
    int q,
  ) {
    _glTexCoord4i ??= _dylib
        .lookupFunction<_c_glTexCoord4i, _dart_glTexCoord4i>('glTexCoord4i');
    return _glTexCoord4i(
      s,
      t,
      r,
      q,
    );
  }

  _dart_glTexCoord4i _glTexCoord4i;

  void glTexCoord4s(
    int s,
    int t,
    int r,
    int q,
  ) {
    _glTexCoord4s ??= _dylib
        .lookupFunction<_c_glTexCoord4s, _dart_glTexCoord4s>('glTexCoord4s');
    return _glTexCoord4s(
      s,
      t,
      r,
      q,
    );
  }

  _dart_glTexCoord4s _glTexCoord4s;

  void glTexCoord1dv(
    ffi.Pointer<ffi.Double> v,
  ) {
    _glTexCoord1dv ??= _dylib
        .lookupFunction<_c_glTexCoord1dv, _dart_glTexCoord1dv>('glTexCoord1dv');
    return _glTexCoord1dv(
      v,
    );
  }

  _dart_glTexCoord1dv _glTexCoord1dv;

  void glTexCoord1fv(
    ffi.Pointer<ffi.Float> v,
  ) {
    _glTexCoord1fv ??= _dylib
        .lookupFunction<_c_glTexCoord1fv, _dart_glTexCoord1fv>('glTexCoord1fv');
    return _glTexCoord1fv(
      v,
    );
  }

  _dart_glTexCoord1fv _glTexCoord1fv;

  void glTexCoord1iv(
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glTexCoord1iv ??= _dylib
        .lookupFunction<_c_glTexCoord1iv, _dart_glTexCoord1iv>('glTexCoord1iv');
    return _glTexCoord1iv(
      v,
    );
  }

  _dart_glTexCoord1iv _glTexCoord1iv;

  void glTexCoord1sv(
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glTexCoord1sv ??= _dylib
        .lookupFunction<_c_glTexCoord1sv, _dart_glTexCoord1sv>('glTexCoord1sv');
    return _glTexCoord1sv(
      v,
    );
  }

  _dart_glTexCoord1sv _glTexCoord1sv;

  void glTexCoord2dv(
    ffi.Pointer<ffi.Double> v,
  ) {
    _glTexCoord2dv ??= _dylib
        .lookupFunction<_c_glTexCoord2dv, _dart_glTexCoord2dv>('glTexCoord2dv');
    return _glTexCoord2dv(
      v,
    );
  }

  _dart_glTexCoord2dv _glTexCoord2dv;

  void glTexCoord2fv(
    ffi.Pointer<ffi.Float> v,
  ) {
    _glTexCoord2fv ??= _dylib
        .lookupFunction<_c_glTexCoord2fv, _dart_glTexCoord2fv>('glTexCoord2fv');
    return _glTexCoord2fv(
      v,
    );
  }

  _dart_glTexCoord2fv _glTexCoord2fv;

  void glTexCoord2iv(
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glTexCoord2iv ??= _dylib
        .lookupFunction<_c_glTexCoord2iv, _dart_glTexCoord2iv>('glTexCoord2iv');
    return _glTexCoord2iv(
      v,
    );
  }

  _dart_glTexCoord2iv _glTexCoord2iv;

  void glTexCoord2sv(
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glTexCoord2sv ??= _dylib
        .lookupFunction<_c_glTexCoord2sv, _dart_glTexCoord2sv>('glTexCoord2sv');
    return _glTexCoord2sv(
      v,
    );
  }

  _dart_glTexCoord2sv _glTexCoord2sv;

  void glTexCoord3dv(
    ffi.Pointer<ffi.Double> v,
  ) {
    _glTexCoord3dv ??= _dylib
        .lookupFunction<_c_glTexCoord3dv, _dart_glTexCoord3dv>('glTexCoord3dv');
    return _glTexCoord3dv(
      v,
    );
  }

  _dart_glTexCoord3dv _glTexCoord3dv;

  void glTexCoord3fv(
    ffi.Pointer<ffi.Float> v,
  ) {
    _glTexCoord3fv ??= _dylib
        .lookupFunction<_c_glTexCoord3fv, _dart_glTexCoord3fv>('glTexCoord3fv');
    return _glTexCoord3fv(
      v,
    );
  }

  _dart_glTexCoord3fv _glTexCoord3fv;

  void glTexCoord3iv(
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glTexCoord3iv ??= _dylib
        .lookupFunction<_c_glTexCoord3iv, _dart_glTexCoord3iv>('glTexCoord3iv');
    return _glTexCoord3iv(
      v,
    );
  }

  _dart_glTexCoord3iv _glTexCoord3iv;

  void glTexCoord3sv(
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glTexCoord3sv ??= _dylib
        .lookupFunction<_c_glTexCoord3sv, _dart_glTexCoord3sv>('glTexCoord3sv');
    return _glTexCoord3sv(
      v,
    );
  }

  _dart_glTexCoord3sv _glTexCoord3sv;

  void glTexCoord4dv(
    ffi.Pointer<ffi.Double> v,
  ) {
    _glTexCoord4dv ??= _dylib
        .lookupFunction<_c_glTexCoord4dv, _dart_glTexCoord4dv>('glTexCoord4dv');
    return _glTexCoord4dv(
      v,
    );
  }

  _dart_glTexCoord4dv _glTexCoord4dv;

  void glTexCoord4fv(
    ffi.Pointer<ffi.Float> v,
  ) {
    _glTexCoord4fv ??= _dylib
        .lookupFunction<_c_glTexCoord4fv, _dart_glTexCoord4fv>('glTexCoord4fv');
    return _glTexCoord4fv(
      v,
    );
  }

  _dart_glTexCoord4fv _glTexCoord4fv;

  void glTexCoord4iv(
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glTexCoord4iv ??= _dylib
        .lookupFunction<_c_glTexCoord4iv, _dart_glTexCoord4iv>('glTexCoord4iv');
    return _glTexCoord4iv(
      v,
    );
  }

  _dart_glTexCoord4iv _glTexCoord4iv;

  void glTexCoord4sv(
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glTexCoord4sv ??= _dylib
        .lookupFunction<_c_glTexCoord4sv, _dart_glTexCoord4sv>('glTexCoord4sv');
    return _glTexCoord4sv(
      v,
    );
  }

  _dart_glTexCoord4sv _glTexCoord4sv;

  void glRasterPos2d(
    double x,
    double y,
  ) {
    _glRasterPos2d ??= _dylib
        .lookupFunction<_c_glRasterPos2d, _dart_glRasterPos2d>('glRasterPos2d');
    return _glRasterPos2d(
      x,
      y,
    );
  }

  _dart_glRasterPos2d _glRasterPos2d;

  void glRasterPos2f(
    double x,
    double y,
  ) {
    _glRasterPos2f ??= _dylib
        .lookupFunction<_c_glRasterPos2f, _dart_glRasterPos2f>('glRasterPos2f');
    return _glRasterPos2f(
      x,
      y,
    );
  }

  _dart_glRasterPos2f _glRasterPos2f;

  void glRasterPos2i(
    int x,
    int y,
  ) {
    _glRasterPos2i ??= _dylib
        .lookupFunction<_c_glRasterPos2i, _dart_glRasterPos2i>('glRasterPos2i');
    return _glRasterPos2i(
      x,
      y,
    );
  }

  _dart_glRasterPos2i _glRasterPos2i;

  void glRasterPos2s(
    int x,
    int y,
  ) {
    _glRasterPos2s ??= _dylib
        .lookupFunction<_c_glRasterPos2s, _dart_glRasterPos2s>('glRasterPos2s');
    return _glRasterPos2s(
      x,
      y,
    );
  }

  _dart_glRasterPos2s _glRasterPos2s;

  void glRasterPos3d(
    double x,
    double y,
    double z,
  ) {
    _glRasterPos3d ??= _dylib
        .lookupFunction<_c_glRasterPos3d, _dart_glRasterPos3d>('glRasterPos3d');
    return _glRasterPos3d(
      x,
      y,
      z,
    );
  }

  _dart_glRasterPos3d _glRasterPos3d;

  void glRasterPos3f(
    double x,
    double y,
    double z,
  ) {
    _glRasterPos3f ??= _dylib
        .lookupFunction<_c_glRasterPos3f, _dart_glRasterPos3f>('glRasterPos3f');
    return _glRasterPos3f(
      x,
      y,
      z,
    );
  }

  _dart_glRasterPos3f _glRasterPos3f;

  void glRasterPos3i(
    int x,
    int y,
    int z,
  ) {
    _glRasterPos3i ??= _dylib
        .lookupFunction<_c_glRasterPos3i, _dart_glRasterPos3i>('glRasterPos3i');
    return _glRasterPos3i(
      x,
      y,
      z,
    );
  }

  _dart_glRasterPos3i _glRasterPos3i;

  void glRasterPos3s(
    int x,
    int y,
    int z,
  ) {
    _glRasterPos3s ??= _dylib
        .lookupFunction<_c_glRasterPos3s, _dart_glRasterPos3s>('glRasterPos3s');
    return _glRasterPos3s(
      x,
      y,
      z,
    );
  }

  _dart_glRasterPos3s _glRasterPos3s;

  void glRasterPos4d(
    double x,
    double y,
    double z,
    double w,
  ) {
    _glRasterPos4d ??= _dylib
        .lookupFunction<_c_glRasterPos4d, _dart_glRasterPos4d>('glRasterPos4d');
    return _glRasterPos4d(
      x,
      y,
      z,
      w,
    );
  }

  _dart_glRasterPos4d _glRasterPos4d;

  void glRasterPos4f(
    double x,
    double y,
    double z,
    double w,
  ) {
    _glRasterPos4f ??= _dylib
        .lookupFunction<_c_glRasterPos4f, _dart_glRasterPos4f>('glRasterPos4f');
    return _glRasterPos4f(
      x,
      y,
      z,
      w,
    );
  }

  _dart_glRasterPos4f _glRasterPos4f;

  void glRasterPos4i(
    int x,
    int y,
    int z,
    int w,
  ) {
    _glRasterPos4i ??= _dylib
        .lookupFunction<_c_glRasterPos4i, _dart_glRasterPos4i>('glRasterPos4i');
    return _glRasterPos4i(
      x,
      y,
      z,
      w,
    );
  }

  _dart_glRasterPos4i _glRasterPos4i;

  void glRasterPos4s(
    int x,
    int y,
    int z,
    int w,
  ) {
    _glRasterPos4s ??= _dylib
        .lookupFunction<_c_glRasterPos4s, _dart_glRasterPos4s>('glRasterPos4s');
    return _glRasterPos4s(
      x,
      y,
      z,
      w,
    );
  }

  _dart_glRasterPos4s _glRasterPos4s;

  void glRasterPos2dv(
    ffi.Pointer<ffi.Double> v,
  ) {
    _glRasterPos2dv ??=
        _dylib.lookupFunction<_c_glRasterPos2dv, _dart_glRasterPos2dv>(
            'glRasterPos2dv');
    return _glRasterPos2dv(
      v,
    );
  }

  _dart_glRasterPos2dv _glRasterPos2dv;

  void glRasterPos2fv(
    ffi.Pointer<ffi.Float> v,
  ) {
    _glRasterPos2fv ??=
        _dylib.lookupFunction<_c_glRasterPos2fv, _dart_glRasterPos2fv>(
            'glRasterPos2fv');
    return _glRasterPos2fv(
      v,
    );
  }

  _dart_glRasterPos2fv _glRasterPos2fv;

  void glRasterPos2iv(
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glRasterPos2iv ??=
        _dylib.lookupFunction<_c_glRasterPos2iv, _dart_glRasterPos2iv>(
            'glRasterPos2iv');
    return _glRasterPos2iv(
      v,
    );
  }

  _dart_glRasterPos2iv _glRasterPos2iv;

  void glRasterPos2sv(
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glRasterPos2sv ??=
        _dylib.lookupFunction<_c_glRasterPos2sv, _dart_glRasterPos2sv>(
            'glRasterPos2sv');
    return _glRasterPos2sv(
      v,
    );
  }

  _dart_glRasterPos2sv _glRasterPos2sv;

  void glRasterPos3dv(
    ffi.Pointer<ffi.Double> v,
  ) {
    _glRasterPos3dv ??=
        _dylib.lookupFunction<_c_glRasterPos3dv, _dart_glRasterPos3dv>(
            'glRasterPos3dv');
    return _glRasterPos3dv(
      v,
    );
  }

  _dart_glRasterPos3dv _glRasterPos3dv;

  void glRasterPos3fv(
    ffi.Pointer<ffi.Float> v,
  ) {
    _glRasterPos3fv ??=
        _dylib.lookupFunction<_c_glRasterPos3fv, _dart_glRasterPos3fv>(
            'glRasterPos3fv');
    return _glRasterPos3fv(
      v,
    );
  }

  _dart_glRasterPos3fv _glRasterPos3fv;

  void glRasterPos3iv(
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glRasterPos3iv ??=
        _dylib.lookupFunction<_c_glRasterPos3iv, _dart_glRasterPos3iv>(
            'glRasterPos3iv');
    return _glRasterPos3iv(
      v,
    );
  }

  _dart_glRasterPos3iv _glRasterPos3iv;

  void glRasterPos3sv(
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glRasterPos3sv ??=
        _dylib.lookupFunction<_c_glRasterPos3sv, _dart_glRasterPos3sv>(
            'glRasterPos3sv');
    return _glRasterPos3sv(
      v,
    );
  }

  _dart_glRasterPos3sv _glRasterPos3sv;

  void glRasterPos4dv(
    ffi.Pointer<ffi.Double> v,
  ) {
    _glRasterPos4dv ??=
        _dylib.lookupFunction<_c_glRasterPos4dv, _dart_glRasterPos4dv>(
            'glRasterPos4dv');
    return _glRasterPos4dv(
      v,
    );
  }

  _dart_glRasterPos4dv _glRasterPos4dv;

  void glRasterPos4fv(
    ffi.Pointer<ffi.Float> v,
  ) {
    _glRasterPos4fv ??=
        _dylib.lookupFunction<_c_glRasterPos4fv, _dart_glRasterPos4fv>(
            'glRasterPos4fv');
    return _glRasterPos4fv(
      v,
    );
  }

  _dart_glRasterPos4fv _glRasterPos4fv;

  void glRasterPos4iv(
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glRasterPos4iv ??=
        _dylib.lookupFunction<_c_glRasterPos4iv, _dart_glRasterPos4iv>(
            'glRasterPos4iv');
    return _glRasterPos4iv(
      v,
    );
  }

  _dart_glRasterPos4iv _glRasterPos4iv;

  void glRasterPos4sv(
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glRasterPos4sv ??=
        _dylib.lookupFunction<_c_glRasterPos4sv, _dart_glRasterPos4sv>(
            'glRasterPos4sv');
    return _glRasterPos4sv(
      v,
    );
  }

  _dart_glRasterPos4sv _glRasterPos4sv;

  void glRectd(
    double x1,
    double y1,
    double x2,
    double y2,
  ) {
    _glRectd ??= _dylib.lookupFunction<_c_glRectd, _dart_glRectd>('glRectd');
    return _glRectd(
      x1,
      y1,
      x2,
      y2,
    );
  }

  _dart_glRectd _glRectd;

  void glRectf(
    double x1,
    double y1,
    double x2,
    double y2,
  ) {
    _glRectf ??= _dylib.lookupFunction<_c_glRectf, _dart_glRectf>('glRectf');
    return _glRectf(
      x1,
      y1,
      x2,
      y2,
    );
  }

  _dart_glRectf _glRectf;

  void glRecti(
    int x1,
    int y1,
    int x2,
    int y2,
  ) {
    _glRecti ??= _dylib.lookupFunction<_c_glRecti, _dart_glRecti>('glRecti');
    return _glRecti(
      x1,
      y1,
      x2,
      y2,
    );
  }

  _dart_glRecti _glRecti;

  void glRects(
    int x1,
    int y1,
    int x2,
    int y2,
  ) {
    _glRects ??= _dylib.lookupFunction<_c_glRects, _dart_glRects>('glRects');
    return _glRects(
      x1,
      y1,
      x2,
      y2,
    );
  }

  _dart_glRects _glRects;

  void glRectdv(
    ffi.Pointer<ffi.Double> v1,
    ffi.Pointer<ffi.Double> v2,
  ) {
    _glRectdv ??=
        _dylib.lookupFunction<_c_glRectdv, _dart_glRectdv>('glRectdv');
    return _glRectdv(
      v1,
      v2,
    );
  }

  _dart_glRectdv _glRectdv;

  void glRectfv(
    ffi.Pointer<ffi.Float> v1,
    ffi.Pointer<ffi.Float> v2,
  ) {
    _glRectfv ??=
        _dylib.lookupFunction<_c_glRectfv, _dart_glRectfv>('glRectfv');
    return _glRectfv(
      v1,
      v2,
    );
  }

  _dart_glRectfv _glRectfv;

  void glRectiv(
    ffi.Pointer<ffi.Int32> v1,
    ffi.Pointer<ffi.Int32> v2,
  ) {
    _glRectiv ??=
        _dylib.lookupFunction<_c_glRectiv, _dart_glRectiv>('glRectiv');
    return _glRectiv(
      v1,
      v2,
    );
  }

  _dart_glRectiv _glRectiv;

  void glRectsv(
    ffi.Pointer<ffi.Int16> v1,
    ffi.Pointer<ffi.Int16> v2,
  ) {
    _glRectsv ??=
        _dylib.lookupFunction<_c_glRectsv, _dart_glRectsv>('glRectsv');
    return _glRectsv(
      v1,
      v2,
    );
  }

  _dart_glRectsv _glRectsv;

  void glVertexPointer(
    int size,
    int type,
    int stride,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    _glVertexPointer ??=
        _dylib.lookupFunction<_c_glVertexPointer, _dart_glVertexPointer>(
            'glVertexPointer');
    return _glVertexPointer(
      size,
      type,
      stride,
      ptr,
    );
  }

  _dart_glVertexPointer _glVertexPointer;

  void glNormalPointer(
    int type,
    int stride,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    _glNormalPointer ??=
        _dylib.lookupFunction<_c_glNormalPointer, _dart_glNormalPointer>(
            'glNormalPointer');
    return _glNormalPointer(
      type,
      stride,
      ptr,
    );
  }

  _dart_glNormalPointer _glNormalPointer;

  void glColorPointer(
    int size,
    int type,
    int stride,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    _glColorPointer ??=
        _dylib.lookupFunction<_c_glColorPointer, _dart_glColorPointer>(
            'glColorPointer');
    return _glColorPointer(
      size,
      type,
      stride,
      ptr,
    );
  }

  _dart_glColorPointer _glColorPointer;

  void glIndexPointer(
    int type,
    int stride,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    _glIndexPointer ??=
        _dylib.lookupFunction<_c_glIndexPointer, _dart_glIndexPointer>(
            'glIndexPointer');
    return _glIndexPointer(
      type,
      stride,
      ptr,
    );
  }

  _dart_glIndexPointer _glIndexPointer;

  void glTexCoordPointer(
    int size,
    int type,
    int stride,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    _glTexCoordPointer ??=
        _dylib.lookupFunction<_c_glTexCoordPointer, _dart_glTexCoordPointer>(
            'glTexCoordPointer');
    return _glTexCoordPointer(
      size,
      type,
      stride,
      ptr,
    );
  }

  _dart_glTexCoordPointer _glTexCoordPointer;

  void glEdgeFlagPointer(
    int stride,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    _glEdgeFlagPointer ??=
        _dylib.lookupFunction<_c_glEdgeFlagPointer, _dart_glEdgeFlagPointer>(
            'glEdgeFlagPointer');
    return _glEdgeFlagPointer(
      stride,
      ptr,
    );
  }

  _dart_glEdgeFlagPointer _glEdgeFlagPointer;

  void glGetPointerv(
    int pname,
    ffi.Pointer<ffi.Pointer<ffi.Void>> params,
  ) {
    _glGetPointerv ??= _dylib
        .lookupFunction<_c_glGetPointerv, _dart_glGetPointerv>('glGetPointerv');
    return _glGetPointerv(
      pname,
      params,
    );
  }

  _dart_glGetPointerv _glGetPointerv;

  void glArrayElement(
    int i,
  ) {
    _glArrayElement ??=
        _dylib.lookupFunction<_c_glArrayElement, _dart_glArrayElement>(
            'glArrayElement');
    return _glArrayElement(
      i,
    );
  }

  _dart_glArrayElement _glArrayElement;

  void glDrawArrays(
    int mode,
    int first,
    int count,
  ) {
    _glDrawArrays ??= _dylib
        .lookupFunction<_c_glDrawArrays, _dart_glDrawArrays>('glDrawArrays');
    return _glDrawArrays(
      mode,
      first,
      count,
    );
  }

  _dart_glDrawArrays _glDrawArrays;

  void glDrawElements(
    int mode,
    int count,
    int type,
    ffi.Pointer<ffi.Void> indices,
  ) {
    _glDrawElements ??=
        _dylib.lookupFunction<_c_glDrawElements, _dart_glDrawElements>(
            'glDrawElements');
    return _glDrawElements(
      mode,
      count,
      type,
      indices,
    );
  }

  _dart_glDrawElements _glDrawElements;

  void glInterleavedArrays(
    int format,
    int stride,
    ffi.Pointer<ffi.Void> pointer,
  ) {
    _glInterleavedArrays ??= _dylib.lookupFunction<_c_glInterleavedArrays,
        _dart_glInterleavedArrays>('glInterleavedArrays');
    return _glInterleavedArrays(
      format,
      stride,
      pointer,
    );
  }

  _dart_glInterleavedArrays _glInterleavedArrays;

  void glShadeModel(
    int mode,
  ) {
    _glShadeModel ??= _dylib
        .lookupFunction<_c_glShadeModel, _dart_glShadeModel>('glShadeModel');
    return _glShadeModel(
      mode,
    );
  }

  _dart_glShadeModel _glShadeModel;

  void glLightf(
    int light,
    int pname,
    double param,
  ) {
    _glLightf ??=
        _dylib.lookupFunction<_c_glLightf, _dart_glLightf>('glLightf');
    return _glLightf(
      light,
      pname,
      param,
    );
  }

  _dart_glLightf _glLightf;

  void glLighti(
    int light,
    int pname,
    int param,
  ) {
    _glLighti ??=
        _dylib.lookupFunction<_c_glLighti, _dart_glLighti>('glLighti');
    return _glLighti(
      light,
      pname,
      param,
    );
  }

  _dart_glLighti _glLighti;

  void glLightfv(
    int light,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glLightfv ??=
        _dylib.lookupFunction<_c_glLightfv, _dart_glLightfv>('glLightfv');
    return _glLightfv(
      light,
      pname,
      params,
    );
  }

  _dart_glLightfv _glLightfv;

  void glLightiv(
    int light,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glLightiv ??=
        _dylib.lookupFunction<_c_glLightiv, _dart_glLightiv>('glLightiv');
    return _glLightiv(
      light,
      pname,
      params,
    );
  }

  _dart_glLightiv _glLightiv;

  void glGetLightfv(
    int light,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glGetLightfv ??= _dylib
        .lookupFunction<_c_glGetLightfv, _dart_glGetLightfv>('glGetLightfv');
    return _glGetLightfv(
      light,
      pname,
      params,
    );
  }

  _dart_glGetLightfv _glGetLightfv;

  void glGetLightiv(
    int light,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetLightiv ??= _dylib
        .lookupFunction<_c_glGetLightiv, _dart_glGetLightiv>('glGetLightiv');
    return _glGetLightiv(
      light,
      pname,
      params,
    );
  }

  _dart_glGetLightiv _glGetLightiv;

  void glLightModelf(
    int pname,
    double param,
  ) {
    _glLightModelf ??= _dylib
        .lookupFunction<_c_glLightModelf, _dart_glLightModelf>('glLightModelf');
    return _glLightModelf(
      pname,
      param,
    );
  }

  _dart_glLightModelf _glLightModelf;

  void glLightModeli(
    int pname,
    int param,
  ) {
    _glLightModeli ??= _dylib
        .lookupFunction<_c_glLightModeli, _dart_glLightModeli>('glLightModeli');
    return _glLightModeli(
      pname,
      param,
    );
  }

  _dart_glLightModeli _glLightModeli;

  void glLightModelfv(
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glLightModelfv ??=
        _dylib.lookupFunction<_c_glLightModelfv, _dart_glLightModelfv>(
            'glLightModelfv');
    return _glLightModelfv(
      pname,
      params,
    );
  }

  _dart_glLightModelfv _glLightModelfv;

  void glLightModeliv(
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glLightModeliv ??=
        _dylib.lookupFunction<_c_glLightModeliv, _dart_glLightModeliv>(
            'glLightModeliv');
    return _glLightModeliv(
      pname,
      params,
    );
  }

  _dart_glLightModeliv _glLightModeliv;

  void glMaterialf(
    int face,
    int pname,
    double param,
  ) {
    _glMaterialf ??=
        _dylib.lookupFunction<_c_glMaterialf, _dart_glMaterialf>('glMaterialf');
    return _glMaterialf(
      face,
      pname,
      param,
    );
  }

  _dart_glMaterialf _glMaterialf;

  void glMateriali(
    int face,
    int pname,
    int param,
  ) {
    _glMateriali ??=
        _dylib.lookupFunction<_c_glMateriali, _dart_glMateriali>('glMateriali');
    return _glMateriali(
      face,
      pname,
      param,
    );
  }

  _dart_glMateriali _glMateriali;

  void glMaterialfv(
    int face,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glMaterialfv ??= _dylib
        .lookupFunction<_c_glMaterialfv, _dart_glMaterialfv>('glMaterialfv');
    return _glMaterialfv(
      face,
      pname,
      params,
    );
  }

  _dart_glMaterialfv _glMaterialfv;

  void glMaterialiv(
    int face,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glMaterialiv ??= _dylib
        .lookupFunction<_c_glMaterialiv, _dart_glMaterialiv>('glMaterialiv');
    return _glMaterialiv(
      face,
      pname,
      params,
    );
  }

  _dart_glMaterialiv _glMaterialiv;

  void glGetMaterialfv(
    int face,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glGetMaterialfv ??=
        _dylib.lookupFunction<_c_glGetMaterialfv, _dart_glGetMaterialfv>(
            'glGetMaterialfv');
    return _glGetMaterialfv(
      face,
      pname,
      params,
    );
  }

  _dart_glGetMaterialfv _glGetMaterialfv;

  void glGetMaterialiv(
    int face,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetMaterialiv ??=
        _dylib.lookupFunction<_c_glGetMaterialiv, _dart_glGetMaterialiv>(
            'glGetMaterialiv');
    return _glGetMaterialiv(
      face,
      pname,
      params,
    );
  }

  _dart_glGetMaterialiv _glGetMaterialiv;

  void glColorMaterial(
    int face,
    int mode,
  ) {
    _glColorMaterial ??=
        _dylib.lookupFunction<_c_glColorMaterial, _dart_glColorMaterial>(
            'glColorMaterial');
    return _glColorMaterial(
      face,
      mode,
    );
  }

  _dart_glColorMaterial _glColorMaterial;

  void glPixelZoom(
    double xfactor,
    double yfactor,
  ) {
    _glPixelZoom ??=
        _dylib.lookupFunction<_c_glPixelZoom, _dart_glPixelZoom>('glPixelZoom');
    return _glPixelZoom(
      xfactor,
      yfactor,
    );
  }

  _dart_glPixelZoom _glPixelZoom;

  void glPixelStoref(
    int pname,
    double param,
  ) {
    _glPixelStoref ??= _dylib
        .lookupFunction<_c_glPixelStoref, _dart_glPixelStoref>('glPixelStoref');
    return _glPixelStoref(
      pname,
      param,
    );
  }

  _dart_glPixelStoref _glPixelStoref;

  void glPixelStorei(
    int pname,
    int param,
  ) {
    _glPixelStorei ??= _dylib
        .lookupFunction<_c_glPixelStorei, _dart_glPixelStorei>('glPixelStorei');
    return _glPixelStorei(
      pname,
      param,
    );
  }

  _dart_glPixelStorei _glPixelStorei;

  void glPixelTransferf(
    int pname,
    double param,
  ) {
    _glPixelTransferf ??=
        _dylib.lookupFunction<_c_glPixelTransferf, _dart_glPixelTransferf>(
            'glPixelTransferf');
    return _glPixelTransferf(
      pname,
      param,
    );
  }

  _dart_glPixelTransferf _glPixelTransferf;

  void glPixelTransferi(
    int pname,
    int param,
  ) {
    _glPixelTransferi ??=
        _dylib.lookupFunction<_c_glPixelTransferi, _dart_glPixelTransferi>(
            'glPixelTransferi');
    return _glPixelTransferi(
      pname,
      param,
    );
  }

  _dart_glPixelTransferi _glPixelTransferi;

  void glPixelMapfv(
    int map,
    int mapsize,
    ffi.Pointer<ffi.Float> values,
  ) {
    _glPixelMapfv ??= _dylib
        .lookupFunction<_c_glPixelMapfv, _dart_glPixelMapfv>('glPixelMapfv');
    return _glPixelMapfv(
      map,
      mapsize,
      values,
    );
  }

  _dart_glPixelMapfv _glPixelMapfv;

  void glPixelMapuiv(
    int map,
    int mapsize,
    ffi.Pointer<ffi.Uint32> values,
  ) {
    _glPixelMapuiv ??= _dylib
        .lookupFunction<_c_glPixelMapuiv, _dart_glPixelMapuiv>('glPixelMapuiv');
    return _glPixelMapuiv(
      map,
      mapsize,
      values,
    );
  }

  _dart_glPixelMapuiv _glPixelMapuiv;

  void glPixelMapusv(
    int map,
    int mapsize,
    ffi.Pointer<ffi.Uint16> values,
  ) {
    _glPixelMapusv ??= _dylib
        .lookupFunction<_c_glPixelMapusv, _dart_glPixelMapusv>('glPixelMapusv');
    return _glPixelMapusv(
      map,
      mapsize,
      values,
    );
  }

  _dart_glPixelMapusv _glPixelMapusv;

  void glGetPixelMapfv(
    int map,
    ffi.Pointer<ffi.Float> values,
  ) {
    _glGetPixelMapfv ??=
        _dylib.lookupFunction<_c_glGetPixelMapfv, _dart_glGetPixelMapfv>(
            'glGetPixelMapfv');
    return _glGetPixelMapfv(
      map,
      values,
    );
  }

  _dart_glGetPixelMapfv _glGetPixelMapfv;

  void glGetPixelMapuiv(
    int map,
    ffi.Pointer<ffi.Uint32> values,
  ) {
    _glGetPixelMapuiv ??=
        _dylib.lookupFunction<_c_glGetPixelMapuiv, _dart_glGetPixelMapuiv>(
            'glGetPixelMapuiv');
    return _glGetPixelMapuiv(
      map,
      values,
    );
  }

  _dart_glGetPixelMapuiv _glGetPixelMapuiv;

  void glGetPixelMapusv(
    int map,
    ffi.Pointer<ffi.Uint16> values,
  ) {
    _glGetPixelMapusv ??=
        _dylib.lookupFunction<_c_glGetPixelMapusv, _dart_glGetPixelMapusv>(
            'glGetPixelMapusv');
    return _glGetPixelMapusv(
      map,
      values,
    );
  }

  _dart_glGetPixelMapusv _glGetPixelMapusv;

  void glBitmap(
    int width,
    int height,
    double xorig,
    double yorig,
    double xmove,
    double ymove,
    ffi.Pointer<ffi.Uint8> bitmap,
  ) {
    _glBitmap ??=
        _dylib.lookupFunction<_c_glBitmap, _dart_glBitmap>('glBitmap');
    return _glBitmap(
      width,
      height,
      xorig,
      yorig,
      xmove,
      ymove,
      bitmap,
    );
  }

  _dart_glBitmap _glBitmap;

  void glReadPixels(
    int x,
    int y,
    int width,
    int height,
    int format,
    int type,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    _glReadPixels ??= _dylib
        .lookupFunction<_c_glReadPixels, _dart_glReadPixels>('glReadPixels');
    return _glReadPixels(
      x,
      y,
      width,
      height,
      format,
      type,
      pixels,
    );
  }

  _dart_glReadPixels _glReadPixels;

  void glDrawPixels(
    int width,
    int height,
    int format,
    int type,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    _glDrawPixels ??= _dylib
        .lookupFunction<_c_glDrawPixels, _dart_glDrawPixels>('glDrawPixels');
    return _glDrawPixels(
      width,
      height,
      format,
      type,
      pixels,
    );
  }

  _dart_glDrawPixels _glDrawPixels;

  void glCopyPixels(
    int x,
    int y,
    int width,
    int height,
    int type,
  ) {
    _glCopyPixels ??= _dylib
        .lookupFunction<_c_glCopyPixels, _dart_glCopyPixels>('glCopyPixels');
    return _glCopyPixels(
      x,
      y,
      width,
      height,
      type,
    );
  }

  _dart_glCopyPixels _glCopyPixels;

  void glStencilFunc(
    int func,
    int ref,
    int mask,
  ) {
    _glStencilFunc ??= _dylib
        .lookupFunction<_c_glStencilFunc, _dart_glStencilFunc>('glStencilFunc');
    return _glStencilFunc(
      func,
      ref,
      mask,
    );
  }

  _dart_glStencilFunc _glStencilFunc;

  void glStencilMask(
    int mask,
  ) {
    _glStencilMask ??= _dylib
        .lookupFunction<_c_glStencilMask, _dart_glStencilMask>('glStencilMask');
    return _glStencilMask(
      mask,
    );
  }

  _dart_glStencilMask _glStencilMask;

  void glStencilOp(
    int fail,
    int zfail,
    int zpass,
  ) {
    _glStencilOp ??=
        _dylib.lookupFunction<_c_glStencilOp, _dart_glStencilOp>('glStencilOp');
    return _glStencilOp(
      fail,
      zfail,
      zpass,
    );
  }

  _dart_glStencilOp _glStencilOp;

  void glClearStencil(
    int s,
  ) {
    _glClearStencil ??=
        _dylib.lookupFunction<_c_glClearStencil, _dart_glClearStencil>(
            'glClearStencil');
    return _glClearStencil(
      s,
    );
  }

  _dart_glClearStencil _glClearStencil;

  void glTexGend(
    int coord,
    int pname,
    double param,
  ) {
    _glTexGend ??=
        _dylib.lookupFunction<_c_glTexGend, _dart_glTexGend>('glTexGend');
    return _glTexGend(
      coord,
      pname,
      param,
    );
  }

  _dart_glTexGend _glTexGend;

  void glTexGenf(
    int coord,
    int pname,
    double param,
  ) {
    _glTexGenf ??=
        _dylib.lookupFunction<_c_glTexGenf, _dart_glTexGenf>('glTexGenf');
    return _glTexGenf(
      coord,
      pname,
      param,
    );
  }

  _dart_glTexGenf _glTexGenf;

  void glTexGeni(
    int coord,
    int pname,
    int param,
  ) {
    _glTexGeni ??=
        _dylib.lookupFunction<_c_glTexGeni, _dart_glTexGeni>('glTexGeni');
    return _glTexGeni(
      coord,
      pname,
      param,
    );
  }

  _dart_glTexGeni _glTexGeni;

  void glTexGendv(
    int coord,
    int pname,
    ffi.Pointer<ffi.Double> params,
  ) {
    _glTexGendv ??=
        _dylib.lookupFunction<_c_glTexGendv, _dart_glTexGendv>('glTexGendv');
    return _glTexGendv(
      coord,
      pname,
      params,
    );
  }

  _dart_glTexGendv _glTexGendv;

  void glTexGenfv(
    int coord,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glTexGenfv ??=
        _dylib.lookupFunction<_c_glTexGenfv, _dart_glTexGenfv>('glTexGenfv');
    return _glTexGenfv(
      coord,
      pname,
      params,
    );
  }

  _dart_glTexGenfv _glTexGenfv;

  void glTexGeniv(
    int coord,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glTexGeniv ??=
        _dylib.lookupFunction<_c_glTexGeniv, _dart_glTexGeniv>('glTexGeniv');
    return _glTexGeniv(
      coord,
      pname,
      params,
    );
  }

  _dart_glTexGeniv _glTexGeniv;

  void glGetTexGendv(
    int coord,
    int pname,
    ffi.Pointer<ffi.Double> params,
  ) {
    _glGetTexGendv ??= _dylib
        .lookupFunction<_c_glGetTexGendv, _dart_glGetTexGendv>('glGetTexGendv');
    return _glGetTexGendv(
      coord,
      pname,
      params,
    );
  }

  _dart_glGetTexGendv _glGetTexGendv;

  void glGetTexGenfv(
    int coord,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glGetTexGenfv ??= _dylib
        .lookupFunction<_c_glGetTexGenfv, _dart_glGetTexGenfv>('glGetTexGenfv');
    return _glGetTexGenfv(
      coord,
      pname,
      params,
    );
  }

  _dart_glGetTexGenfv _glGetTexGenfv;

  void glGetTexGeniv(
    int coord,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetTexGeniv ??= _dylib
        .lookupFunction<_c_glGetTexGeniv, _dart_glGetTexGeniv>('glGetTexGeniv');
    return _glGetTexGeniv(
      coord,
      pname,
      params,
    );
  }

  _dart_glGetTexGeniv _glGetTexGeniv;

  void glTexEnvf(
    int target,
    int pname,
    double param,
  ) {
    _glTexEnvf ??=
        _dylib.lookupFunction<_c_glTexEnvf, _dart_glTexEnvf>('glTexEnvf');
    return _glTexEnvf(
      target,
      pname,
      param,
    );
  }

  _dart_glTexEnvf _glTexEnvf;

  void glTexEnvi(
    int target,
    int pname,
    int param,
  ) {
    _glTexEnvi ??=
        _dylib.lookupFunction<_c_glTexEnvi, _dart_glTexEnvi>('glTexEnvi');
    return _glTexEnvi(
      target,
      pname,
      param,
    );
  }

  _dart_glTexEnvi _glTexEnvi;

  void glTexEnvfv(
    int target,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glTexEnvfv ??=
        _dylib.lookupFunction<_c_glTexEnvfv, _dart_glTexEnvfv>('glTexEnvfv');
    return _glTexEnvfv(
      target,
      pname,
      params,
    );
  }

  _dart_glTexEnvfv _glTexEnvfv;

  void glTexEnviv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glTexEnviv ??=
        _dylib.lookupFunction<_c_glTexEnviv, _dart_glTexEnviv>('glTexEnviv');
    return _glTexEnviv(
      target,
      pname,
      params,
    );
  }

  _dart_glTexEnviv _glTexEnviv;

  void glGetTexEnvfv(
    int target,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glGetTexEnvfv ??= _dylib
        .lookupFunction<_c_glGetTexEnvfv, _dart_glGetTexEnvfv>('glGetTexEnvfv');
    return _glGetTexEnvfv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetTexEnvfv _glGetTexEnvfv;

  void glGetTexEnviv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetTexEnviv ??= _dylib
        .lookupFunction<_c_glGetTexEnviv, _dart_glGetTexEnviv>('glGetTexEnviv');
    return _glGetTexEnviv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetTexEnviv _glGetTexEnviv;

  void glTexParameterf(
    int target,
    int pname,
    double param,
  ) {
    _glTexParameterf ??=
        _dylib.lookupFunction<_c_glTexParameterf, _dart_glTexParameterf>(
            'glTexParameterf');
    return _glTexParameterf(
      target,
      pname,
      param,
    );
  }

  _dart_glTexParameterf _glTexParameterf;

  void glTexParameteri(
    int target,
    int pname,
    int param,
  ) {
    _glTexParameteri ??=
        _dylib.lookupFunction<_c_glTexParameteri, _dart_glTexParameteri>(
            'glTexParameteri');
    return _glTexParameteri(
      target,
      pname,
      param,
    );
  }

  _dart_glTexParameteri _glTexParameteri;

  void glTexParameterfv(
    int target,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glTexParameterfv ??=
        _dylib.lookupFunction<_c_glTexParameterfv, _dart_glTexParameterfv>(
            'glTexParameterfv');
    return _glTexParameterfv(
      target,
      pname,
      params,
    );
  }

  _dart_glTexParameterfv _glTexParameterfv;

  void glTexParameteriv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glTexParameteriv ??=
        _dylib.lookupFunction<_c_glTexParameteriv, _dart_glTexParameteriv>(
            'glTexParameteriv');
    return _glTexParameteriv(
      target,
      pname,
      params,
    );
  }

  _dart_glTexParameteriv _glTexParameteriv;

  void glGetTexParameterfv(
    int target,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glGetTexParameterfv ??= _dylib.lookupFunction<_c_glGetTexParameterfv,
        _dart_glGetTexParameterfv>('glGetTexParameterfv');
    return _glGetTexParameterfv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetTexParameterfv _glGetTexParameterfv;

  void glGetTexParameteriv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetTexParameteriv ??= _dylib.lookupFunction<_c_glGetTexParameteriv,
        _dart_glGetTexParameteriv>('glGetTexParameteriv');
    return _glGetTexParameteriv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetTexParameteriv _glGetTexParameteriv;

  void glGetTexLevelParameterfv(
    int target,
    int level,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glGetTexLevelParameterfv ??= _dylib.lookupFunction<
        _c_glGetTexLevelParameterfv,
        _dart_glGetTexLevelParameterfv>('glGetTexLevelParameterfv');
    return _glGetTexLevelParameterfv(
      target,
      level,
      pname,
      params,
    );
  }

  _dart_glGetTexLevelParameterfv _glGetTexLevelParameterfv;

  void glGetTexLevelParameteriv(
    int target,
    int level,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetTexLevelParameteriv ??= _dylib.lookupFunction<
        _c_glGetTexLevelParameteriv,
        _dart_glGetTexLevelParameteriv>('glGetTexLevelParameteriv');
    return _glGetTexLevelParameteriv(
      target,
      level,
      pname,
      params,
    );
  }

  _dart_glGetTexLevelParameteriv _glGetTexLevelParameteriv;

  void glTexImage1D(
    int target,
    int level,
    int internalFormat,
    int width,
    int border,
    int format,
    int type,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    _glTexImage1D ??= _dylib
        .lookupFunction<_c_glTexImage1D, _dart_glTexImage1D>('glTexImage1D');
    return _glTexImage1D(
      target,
      level,
      internalFormat,
      width,
      border,
      format,
      type,
      pixels,
    );
  }

  _dart_glTexImage1D _glTexImage1D;

  void glTexImage2D(
    int target,
    int level,
    int internalFormat,
    int width,
    int height,
    int border,
    int format,
    int type,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    _glTexImage2D ??= _dylib
        .lookupFunction<_c_glTexImage2D, _dart_glTexImage2D>('glTexImage2D');
    return _glTexImage2D(
      target,
      level,
      internalFormat,
      width,
      height,
      border,
      format,
      type,
      pixels,
    );
  }

  _dart_glTexImage2D _glTexImage2D;

  void glGetTexImage(
    int target,
    int level,
    int format,
    int type,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    _glGetTexImage ??= _dylib
        .lookupFunction<_c_glGetTexImage, _dart_glGetTexImage>('glGetTexImage');
    return _glGetTexImage(
      target,
      level,
      format,
      type,
      pixels,
    );
  }

  _dart_glGetTexImage _glGetTexImage;

  void glGenTextures(
    int n,
    ffi.Pointer<ffi.Uint32> textures,
  ) {
    _glGenTextures ??= _dylib
        .lookupFunction<_c_glGenTextures, _dart_glGenTextures>('glGenTextures');
    return _glGenTextures(
      n,
      textures,
    );
  }

  _dart_glGenTextures _glGenTextures;

  void glDeleteTextures(
    int n,
    ffi.Pointer<ffi.Uint32> textures,
  ) {
    _glDeleteTextures ??=
        _dylib.lookupFunction<_c_glDeleteTextures, _dart_glDeleteTextures>(
            'glDeleteTextures');
    return _glDeleteTextures(
      n,
      textures,
    );
  }

  _dart_glDeleteTextures _glDeleteTextures;

  void glBindTexture(
    int target,
    int texture,
  ) {
    _glBindTexture ??= _dylib
        .lookupFunction<_c_glBindTexture, _dart_glBindTexture>('glBindTexture');
    return _glBindTexture(
      target,
      texture,
    );
  }

  _dart_glBindTexture _glBindTexture;

  void glPrioritizeTextures(
    int n,
    ffi.Pointer<ffi.Uint32> textures,
    ffi.Pointer<ffi.Float> priorities,
  ) {
    _glPrioritizeTextures ??= _dylib.lookupFunction<_c_glPrioritizeTextures,
        _dart_glPrioritizeTextures>('glPrioritizeTextures');
    return _glPrioritizeTextures(
      n,
      textures,
      priorities,
    );
  }

  _dart_glPrioritizeTextures _glPrioritizeTextures;

  int glAreTexturesResident(
    int n,
    ffi.Pointer<ffi.Uint32> textures,
    ffi.Pointer<ffi.Uint8> residences,
  ) {
    _glAreTexturesResident ??= _dylib.lookupFunction<_c_glAreTexturesResident,
        _dart_glAreTexturesResident>('glAreTexturesResident');
    return _glAreTexturesResident(
      n,
      textures,
      residences,
    );
  }

  _dart_glAreTexturesResident _glAreTexturesResident;

  int glIsTexture(
    int texture,
  ) {
    _glIsTexture ??=
        _dylib.lookupFunction<_c_glIsTexture, _dart_glIsTexture>('glIsTexture');
    return _glIsTexture(
      texture,
    );
  }

  _dart_glIsTexture _glIsTexture;

  void glTexSubImage1D(
    int target,
    int level,
    int xoffset,
    int width,
    int format,
    int type,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    _glTexSubImage1D ??=
        _dylib.lookupFunction<_c_glTexSubImage1D, _dart_glTexSubImage1D>(
            'glTexSubImage1D');
    return _glTexSubImage1D(
      target,
      level,
      xoffset,
      width,
      format,
      type,
      pixels,
    );
  }

  _dart_glTexSubImage1D _glTexSubImage1D;

  void glTexSubImage2D(
    int target,
    int level,
    int xoffset,
    int yoffset,
    int width,
    int height,
    int format,
    int type,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    _glTexSubImage2D ??=
        _dylib.lookupFunction<_c_glTexSubImage2D, _dart_glTexSubImage2D>(
            'glTexSubImage2D');
    return _glTexSubImage2D(
      target,
      level,
      xoffset,
      yoffset,
      width,
      height,
      format,
      type,
      pixels,
    );
  }

  _dart_glTexSubImage2D _glTexSubImage2D;

  void glCopyTexImage1D(
    int target,
    int level,
    int internalformat,
    int x,
    int y,
    int width,
    int border,
  ) {
    _glCopyTexImage1D ??=
        _dylib.lookupFunction<_c_glCopyTexImage1D, _dart_glCopyTexImage1D>(
            'glCopyTexImage1D');
    return _glCopyTexImage1D(
      target,
      level,
      internalformat,
      x,
      y,
      width,
      border,
    );
  }

  _dart_glCopyTexImage1D _glCopyTexImage1D;

  void glCopyTexImage2D(
    int target,
    int level,
    int internalformat,
    int x,
    int y,
    int width,
    int height,
    int border,
  ) {
    _glCopyTexImage2D ??=
        _dylib.lookupFunction<_c_glCopyTexImage2D, _dart_glCopyTexImage2D>(
            'glCopyTexImage2D');
    return _glCopyTexImage2D(
      target,
      level,
      internalformat,
      x,
      y,
      width,
      height,
      border,
    );
  }

  _dart_glCopyTexImage2D _glCopyTexImage2D;

  void glCopyTexSubImage1D(
    int target,
    int level,
    int xoffset,
    int x,
    int y,
    int width,
  ) {
    _glCopyTexSubImage1D ??= _dylib.lookupFunction<_c_glCopyTexSubImage1D,
        _dart_glCopyTexSubImage1D>('glCopyTexSubImage1D');
    return _glCopyTexSubImage1D(
      target,
      level,
      xoffset,
      x,
      y,
      width,
    );
  }

  _dart_glCopyTexSubImage1D _glCopyTexSubImage1D;

  void glCopyTexSubImage2D(
    int target,
    int level,
    int xoffset,
    int yoffset,
    int x,
    int y,
    int width,
    int height,
  ) {
    _glCopyTexSubImage2D ??= _dylib.lookupFunction<_c_glCopyTexSubImage2D,
        _dart_glCopyTexSubImage2D>('glCopyTexSubImage2D');
    return _glCopyTexSubImage2D(
      target,
      level,
      xoffset,
      yoffset,
      x,
      y,
      width,
      height,
    );
  }

  _dart_glCopyTexSubImage2D _glCopyTexSubImage2D;

  void glMap1d(
    int target,
    double u1,
    double u2,
    int stride,
    int order,
    ffi.Pointer<ffi.Double> points,
  ) {
    _glMap1d ??= _dylib.lookupFunction<_c_glMap1d, _dart_glMap1d>('glMap1d');
    return _glMap1d(
      target,
      u1,
      u2,
      stride,
      order,
      points,
    );
  }

  _dart_glMap1d _glMap1d;

  void glMap1f(
    int target,
    double u1,
    double u2,
    int stride,
    int order,
    ffi.Pointer<ffi.Float> points,
  ) {
    _glMap1f ??= _dylib.lookupFunction<_c_glMap1f, _dart_glMap1f>('glMap1f');
    return _glMap1f(
      target,
      u1,
      u2,
      stride,
      order,
      points,
    );
  }

  _dart_glMap1f _glMap1f;

  void glMap2d(
    int target,
    double u1,
    double u2,
    int ustride,
    int uorder,
    double v1,
    double v2,
    int vstride,
    int vorder,
    ffi.Pointer<ffi.Double> points,
  ) {
    _glMap2d ??= _dylib.lookupFunction<_c_glMap2d, _dart_glMap2d>('glMap2d');
    return _glMap2d(
      target,
      u1,
      u2,
      ustride,
      uorder,
      v1,
      v2,
      vstride,
      vorder,
      points,
    );
  }

  _dart_glMap2d _glMap2d;

  void glMap2f(
    int target,
    double u1,
    double u2,
    int ustride,
    int uorder,
    double v1,
    double v2,
    int vstride,
    int vorder,
    ffi.Pointer<ffi.Float> points,
  ) {
    _glMap2f ??= _dylib.lookupFunction<_c_glMap2f, _dart_glMap2f>('glMap2f');
    return _glMap2f(
      target,
      u1,
      u2,
      ustride,
      uorder,
      v1,
      v2,
      vstride,
      vorder,
      points,
    );
  }

  _dart_glMap2f _glMap2f;

  void glGetMapdv(
    int target,
    int query,
    ffi.Pointer<ffi.Double> v,
  ) {
    _glGetMapdv ??=
        _dylib.lookupFunction<_c_glGetMapdv, _dart_glGetMapdv>('glGetMapdv');
    return _glGetMapdv(
      target,
      query,
      v,
    );
  }

  _dart_glGetMapdv _glGetMapdv;

  void glGetMapfv(
    int target,
    int query,
    ffi.Pointer<ffi.Float> v,
  ) {
    _glGetMapfv ??=
        _dylib.lookupFunction<_c_glGetMapfv, _dart_glGetMapfv>('glGetMapfv');
    return _glGetMapfv(
      target,
      query,
      v,
    );
  }

  _dart_glGetMapfv _glGetMapfv;

  void glGetMapiv(
    int target,
    int query,
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glGetMapiv ??=
        _dylib.lookupFunction<_c_glGetMapiv, _dart_glGetMapiv>('glGetMapiv');
    return _glGetMapiv(
      target,
      query,
      v,
    );
  }

  _dart_glGetMapiv _glGetMapiv;

  void glEvalCoord1d(
    double u,
  ) {
    _glEvalCoord1d ??= _dylib
        .lookupFunction<_c_glEvalCoord1d, _dart_glEvalCoord1d>('glEvalCoord1d');
    return _glEvalCoord1d(
      u,
    );
  }

  _dart_glEvalCoord1d _glEvalCoord1d;

  void glEvalCoord1f(
    double u,
  ) {
    _glEvalCoord1f ??= _dylib
        .lookupFunction<_c_glEvalCoord1f, _dart_glEvalCoord1f>('glEvalCoord1f');
    return _glEvalCoord1f(
      u,
    );
  }

  _dart_glEvalCoord1f _glEvalCoord1f;

  void glEvalCoord1dv(
    ffi.Pointer<ffi.Double> u,
  ) {
    _glEvalCoord1dv ??=
        _dylib.lookupFunction<_c_glEvalCoord1dv, _dart_glEvalCoord1dv>(
            'glEvalCoord1dv');
    return _glEvalCoord1dv(
      u,
    );
  }

  _dart_glEvalCoord1dv _glEvalCoord1dv;

  void glEvalCoord1fv(
    ffi.Pointer<ffi.Float> u,
  ) {
    _glEvalCoord1fv ??=
        _dylib.lookupFunction<_c_glEvalCoord1fv, _dart_glEvalCoord1fv>(
            'glEvalCoord1fv');
    return _glEvalCoord1fv(
      u,
    );
  }

  _dart_glEvalCoord1fv _glEvalCoord1fv;

  void glEvalCoord2d(
    double u,
    double v,
  ) {
    _glEvalCoord2d ??= _dylib
        .lookupFunction<_c_glEvalCoord2d, _dart_glEvalCoord2d>('glEvalCoord2d');
    return _glEvalCoord2d(
      u,
      v,
    );
  }

  _dart_glEvalCoord2d _glEvalCoord2d;

  void glEvalCoord2f(
    double u,
    double v,
  ) {
    _glEvalCoord2f ??= _dylib
        .lookupFunction<_c_glEvalCoord2f, _dart_glEvalCoord2f>('glEvalCoord2f');
    return _glEvalCoord2f(
      u,
      v,
    );
  }

  _dart_glEvalCoord2f _glEvalCoord2f;

  void glEvalCoord2dv(
    ffi.Pointer<ffi.Double> u,
  ) {
    _glEvalCoord2dv ??=
        _dylib.lookupFunction<_c_glEvalCoord2dv, _dart_glEvalCoord2dv>(
            'glEvalCoord2dv');
    return _glEvalCoord2dv(
      u,
    );
  }

  _dart_glEvalCoord2dv _glEvalCoord2dv;

  void glEvalCoord2fv(
    ffi.Pointer<ffi.Float> u,
  ) {
    _glEvalCoord2fv ??=
        _dylib.lookupFunction<_c_glEvalCoord2fv, _dart_glEvalCoord2fv>(
            'glEvalCoord2fv');
    return _glEvalCoord2fv(
      u,
    );
  }

  _dart_glEvalCoord2fv _glEvalCoord2fv;

  void glMapGrid1d(
    int un,
    double u1,
    double u2,
  ) {
    _glMapGrid1d ??=
        _dylib.lookupFunction<_c_glMapGrid1d, _dart_glMapGrid1d>('glMapGrid1d');
    return _glMapGrid1d(
      un,
      u1,
      u2,
    );
  }

  _dart_glMapGrid1d _glMapGrid1d;

  void glMapGrid1f(
    int un,
    double u1,
    double u2,
  ) {
    _glMapGrid1f ??=
        _dylib.lookupFunction<_c_glMapGrid1f, _dart_glMapGrid1f>('glMapGrid1f');
    return _glMapGrid1f(
      un,
      u1,
      u2,
    );
  }

  _dart_glMapGrid1f _glMapGrid1f;

  void glMapGrid2d(
    int un,
    double u1,
    double u2,
    int vn,
    double v1,
    double v2,
  ) {
    _glMapGrid2d ??=
        _dylib.lookupFunction<_c_glMapGrid2d, _dart_glMapGrid2d>('glMapGrid2d');
    return _glMapGrid2d(
      un,
      u1,
      u2,
      vn,
      v1,
      v2,
    );
  }

  _dart_glMapGrid2d _glMapGrid2d;

  void glMapGrid2f(
    int un,
    double u1,
    double u2,
    int vn,
    double v1,
    double v2,
  ) {
    _glMapGrid2f ??=
        _dylib.lookupFunction<_c_glMapGrid2f, _dart_glMapGrid2f>('glMapGrid2f');
    return _glMapGrid2f(
      un,
      u1,
      u2,
      vn,
      v1,
      v2,
    );
  }

  _dart_glMapGrid2f _glMapGrid2f;

  void glEvalPoint1(
    int i,
  ) {
    _glEvalPoint1 ??= _dylib
        .lookupFunction<_c_glEvalPoint1, _dart_glEvalPoint1>('glEvalPoint1');
    return _glEvalPoint1(
      i,
    );
  }

  _dart_glEvalPoint1 _glEvalPoint1;

  void glEvalPoint2(
    int i,
    int j,
  ) {
    _glEvalPoint2 ??= _dylib
        .lookupFunction<_c_glEvalPoint2, _dart_glEvalPoint2>('glEvalPoint2');
    return _glEvalPoint2(
      i,
      j,
    );
  }

  _dart_glEvalPoint2 _glEvalPoint2;

  void glEvalMesh1(
    int mode,
    int i1,
    int i2,
  ) {
    _glEvalMesh1 ??=
        _dylib.lookupFunction<_c_glEvalMesh1, _dart_glEvalMesh1>('glEvalMesh1');
    return _glEvalMesh1(
      mode,
      i1,
      i2,
    );
  }

  _dart_glEvalMesh1 _glEvalMesh1;

  void glEvalMesh2(
    int mode,
    int i1,
    int i2,
    int j1,
    int j2,
  ) {
    _glEvalMesh2 ??=
        _dylib.lookupFunction<_c_glEvalMesh2, _dart_glEvalMesh2>('glEvalMesh2');
    return _glEvalMesh2(
      mode,
      i1,
      i2,
      j1,
      j2,
    );
  }

  _dart_glEvalMesh2 _glEvalMesh2;

  void glFogf(
    int pname,
    double param,
  ) {
    _glFogf ??= _dylib.lookupFunction<_c_glFogf, _dart_glFogf>('glFogf');
    return _glFogf(
      pname,
      param,
    );
  }

  _dart_glFogf _glFogf;

  void glFogi(
    int pname,
    int param,
  ) {
    _glFogi ??= _dylib.lookupFunction<_c_glFogi, _dart_glFogi>('glFogi');
    return _glFogi(
      pname,
      param,
    );
  }

  _dart_glFogi _glFogi;

  void glFogfv(
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glFogfv ??= _dylib.lookupFunction<_c_glFogfv, _dart_glFogfv>('glFogfv');
    return _glFogfv(
      pname,
      params,
    );
  }

  _dart_glFogfv _glFogfv;

  void glFogiv(
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glFogiv ??= _dylib.lookupFunction<_c_glFogiv, _dart_glFogiv>('glFogiv');
    return _glFogiv(
      pname,
      params,
    );
  }

  _dart_glFogiv _glFogiv;

  void glFeedbackBuffer(
    int size,
    int type,
    ffi.Pointer<ffi.Float> buffer,
  ) {
    _glFeedbackBuffer ??=
        _dylib.lookupFunction<_c_glFeedbackBuffer, _dart_glFeedbackBuffer>(
            'glFeedbackBuffer');
    return _glFeedbackBuffer(
      size,
      type,
      buffer,
    );
  }

  _dart_glFeedbackBuffer _glFeedbackBuffer;

  void glPassThrough(
    double token,
  ) {
    _glPassThrough ??= _dylib
        .lookupFunction<_c_glPassThrough, _dart_glPassThrough>('glPassThrough');
    return _glPassThrough(
      token,
    );
  }

  _dart_glPassThrough _glPassThrough;

  void glSelectBuffer(
    int size,
    ffi.Pointer<ffi.Uint32> buffer,
  ) {
    _glSelectBuffer ??=
        _dylib.lookupFunction<_c_glSelectBuffer, _dart_glSelectBuffer>(
            'glSelectBuffer');
    return _glSelectBuffer(
      size,
      buffer,
    );
  }

  _dart_glSelectBuffer _glSelectBuffer;

  void glInitNames() {
    _glInitNames ??=
        _dylib.lookupFunction<_c_glInitNames, _dart_glInitNames>('glInitNames');
    return _glInitNames();
  }

  _dart_glInitNames _glInitNames;

  void glLoadName(
    int name,
  ) {
    _glLoadName ??=
        _dylib.lookupFunction<_c_glLoadName, _dart_glLoadName>('glLoadName');
    return _glLoadName(
      name,
    );
  }

  _dart_glLoadName _glLoadName;

  void glPushName(
    int name,
  ) {
    _glPushName ??=
        _dylib.lookupFunction<_c_glPushName, _dart_glPushName>('glPushName');
    return _glPushName(
      name,
    );
  }

  _dart_glPushName _glPushName;

  void glPopName() {
    _glPopName ??=
        _dylib.lookupFunction<_c_glPopName, _dart_glPopName>('glPopName');
    return _glPopName();
  }

  _dart_glPopName _glPopName;

  void glDrawRangeElements(
    int mode,
    int start,
    int end,
    int count,
    int type,
    ffi.Pointer<ffi.Void> indices,
  ) {
    _glDrawRangeElements ??= _dylib.lookupFunction<_c_glDrawRangeElements,
        _dart_glDrawRangeElements>('glDrawRangeElements');
    return _glDrawRangeElements(
      mode,
      start,
      end,
      count,
      type,
      indices,
    );
  }

  _dart_glDrawRangeElements _glDrawRangeElements;

  void glTexImage3D(
    int target,
    int level,
    int internalFormat,
    int width,
    int height,
    int depth,
    int border,
    int format,
    int type,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    _glTexImage3D ??= _dylib
        .lookupFunction<_c_glTexImage3D, _dart_glTexImage3D>('glTexImage3D');
    return _glTexImage3D(
      target,
      level,
      internalFormat,
      width,
      height,
      depth,
      border,
      format,
      type,
      pixels,
    );
  }

  _dart_glTexImage3D _glTexImage3D;

  void glTexSubImage3D(
    int target,
    int level,
    int xoffset,
    int yoffset,
    int zoffset,
    int width,
    int height,
    int depth,
    int format,
    int type,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    _glTexSubImage3D ??=
        _dylib.lookupFunction<_c_glTexSubImage3D, _dart_glTexSubImage3D>(
            'glTexSubImage3D');
    return _glTexSubImage3D(
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      type,
      pixels,
    );
  }

  _dart_glTexSubImage3D _glTexSubImage3D;

  void glCopyTexSubImage3D(
    int target,
    int level,
    int xoffset,
    int yoffset,
    int zoffset,
    int x,
    int y,
    int width,
    int height,
  ) {
    _glCopyTexSubImage3D ??= _dylib.lookupFunction<_c_glCopyTexSubImage3D,
        _dart_glCopyTexSubImage3D>('glCopyTexSubImage3D');
    return _glCopyTexSubImage3D(
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      x,
      y,
      width,
      height,
    );
  }

  _dart_glCopyTexSubImage3D _glCopyTexSubImage3D;

  void glColorTable(
    int target,
    int internalformat,
    int width,
    int format,
    int type,
    ffi.Pointer<ffi.Void> table,
  ) {
    _glColorTable ??= _dylib
        .lookupFunction<_c_glColorTable, _dart_glColorTable>('glColorTable');
    return _glColorTable(
      target,
      internalformat,
      width,
      format,
      type,
      table,
    );
  }

  _dart_glColorTable _glColorTable;

  void glColorSubTable(
    int target,
    int start,
    int count,
    int format,
    int type,
    ffi.Pointer<ffi.Void> data,
  ) {
    _glColorSubTable ??=
        _dylib.lookupFunction<_c_glColorSubTable, _dart_glColorSubTable>(
            'glColorSubTable');
    return _glColorSubTable(
      target,
      start,
      count,
      format,
      type,
      data,
    );
  }

  _dart_glColorSubTable _glColorSubTable;

  void glColorTableParameteriv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glColorTableParameteriv ??= _dylib.lookupFunction<
        _c_glColorTableParameteriv,
        _dart_glColorTableParameteriv>('glColorTableParameteriv');
    return _glColorTableParameteriv(
      target,
      pname,
      params,
    );
  }

  _dart_glColorTableParameteriv _glColorTableParameteriv;

  void glColorTableParameterfv(
    int target,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glColorTableParameterfv ??= _dylib.lookupFunction<
        _c_glColorTableParameterfv,
        _dart_glColorTableParameterfv>('glColorTableParameterfv');
    return _glColorTableParameterfv(
      target,
      pname,
      params,
    );
  }

  _dart_glColorTableParameterfv _glColorTableParameterfv;

  void glCopyColorSubTable(
    int target,
    int start,
    int x,
    int y,
    int width,
  ) {
    _glCopyColorSubTable ??= _dylib.lookupFunction<_c_glCopyColorSubTable,
        _dart_glCopyColorSubTable>('glCopyColorSubTable');
    return _glCopyColorSubTable(
      target,
      start,
      x,
      y,
      width,
    );
  }

  _dart_glCopyColorSubTable _glCopyColorSubTable;

  void glCopyColorTable(
    int target,
    int internalformat,
    int x,
    int y,
    int width,
  ) {
    _glCopyColorTable ??=
        _dylib.lookupFunction<_c_glCopyColorTable, _dart_glCopyColorTable>(
            'glCopyColorTable');
    return _glCopyColorTable(
      target,
      internalformat,
      x,
      y,
      width,
    );
  }

  _dart_glCopyColorTable _glCopyColorTable;

  void glGetColorTable(
    int target,
    int format,
    int type,
    ffi.Pointer<ffi.Void> table,
  ) {
    _glGetColorTable ??=
        _dylib.lookupFunction<_c_glGetColorTable, _dart_glGetColorTable>(
            'glGetColorTable');
    return _glGetColorTable(
      target,
      format,
      type,
      table,
    );
  }

  _dart_glGetColorTable _glGetColorTable;

  void glGetColorTableParameterfv(
    int target,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glGetColorTableParameterfv ??= _dylib.lookupFunction<
        _c_glGetColorTableParameterfv,
        _dart_glGetColorTableParameterfv>('glGetColorTableParameterfv');
    return _glGetColorTableParameterfv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetColorTableParameterfv _glGetColorTableParameterfv;

  void glGetColorTableParameteriv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetColorTableParameteriv ??= _dylib.lookupFunction<
        _c_glGetColorTableParameteriv,
        _dart_glGetColorTableParameteriv>('glGetColorTableParameteriv');
    return _glGetColorTableParameteriv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetColorTableParameteriv _glGetColorTableParameteriv;

  void glBlendEquation(
    int mode,
  ) {
    _glBlendEquation ??=
        _dylib.lookupFunction<_c_glBlendEquation, _dart_glBlendEquation>(
            'glBlendEquation');
    return _glBlendEquation(
      mode,
    );
  }

  _dart_glBlendEquation _glBlendEquation;

  void glBlendColor(
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    _glBlendColor ??= _dylib
        .lookupFunction<_c_glBlendColor, _dart_glBlendColor>('glBlendColor');
    return _glBlendColor(
      red,
      green,
      blue,
      alpha,
    );
  }

  _dart_glBlendColor _glBlendColor;

  void glHistogram(
    int target,
    int width,
    int internalformat,
    int sink,
  ) {
    _glHistogram ??=
        _dylib.lookupFunction<_c_glHistogram, _dart_glHistogram>('glHistogram');
    return _glHistogram(
      target,
      width,
      internalformat,
      sink,
    );
  }

  _dart_glHistogram _glHistogram;

  void glResetHistogram(
    int target,
  ) {
    _glResetHistogram ??=
        _dylib.lookupFunction<_c_glResetHistogram, _dart_glResetHistogram>(
            'glResetHistogram');
    return _glResetHistogram(
      target,
    );
  }

  _dart_glResetHistogram _glResetHistogram;

  void glGetHistogram(
    int target,
    int reset,
    int format,
    int type,
    ffi.Pointer<ffi.Void> values,
  ) {
    _glGetHistogram ??=
        _dylib.lookupFunction<_c_glGetHistogram, _dart_glGetHistogram>(
            'glGetHistogram');
    return _glGetHistogram(
      target,
      reset,
      format,
      type,
      values,
    );
  }

  _dart_glGetHistogram _glGetHistogram;

  void glGetHistogramParameterfv(
    int target,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glGetHistogramParameterfv ??= _dylib.lookupFunction<
        _c_glGetHistogramParameterfv,
        _dart_glGetHistogramParameterfv>('glGetHistogramParameterfv');
    return _glGetHistogramParameterfv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetHistogramParameterfv _glGetHistogramParameterfv;

  void glGetHistogramParameteriv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetHistogramParameteriv ??= _dylib.lookupFunction<
        _c_glGetHistogramParameteriv,
        _dart_glGetHistogramParameteriv>('glGetHistogramParameteriv');
    return _glGetHistogramParameteriv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetHistogramParameteriv _glGetHistogramParameteriv;

  void glMinmax(
    int target,
    int internalformat,
    int sink,
  ) {
    _glMinmax ??=
        _dylib.lookupFunction<_c_glMinmax, _dart_glMinmax>('glMinmax');
    return _glMinmax(
      target,
      internalformat,
      sink,
    );
  }

  _dart_glMinmax _glMinmax;

  void glResetMinmax(
    int target,
  ) {
    _glResetMinmax ??= _dylib
        .lookupFunction<_c_glResetMinmax, _dart_glResetMinmax>('glResetMinmax');
    return _glResetMinmax(
      target,
    );
  }

  _dart_glResetMinmax _glResetMinmax;

  void glGetMinmax(
    int target,
    int reset,
    int format,
    int types,
    ffi.Pointer<ffi.Void> values,
  ) {
    _glGetMinmax ??=
        _dylib.lookupFunction<_c_glGetMinmax, _dart_glGetMinmax>('glGetMinmax');
    return _glGetMinmax(
      target,
      reset,
      format,
      types,
      values,
    );
  }

  _dart_glGetMinmax _glGetMinmax;

  void glGetMinmaxParameterfv(
    int target,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glGetMinmaxParameterfv ??= _dylib.lookupFunction<_c_glGetMinmaxParameterfv,
        _dart_glGetMinmaxParameterfv>('glGetMinmaxParameterfv');
    return _glGetMinmaxParameterfv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetMinmaxParameterfv _glGetMinmaxParameterfv;

  void glGetMinmaxParameteriv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetMinmaxParameteriv ??= _dylib.lookupFunction<_c_glGetMinmaxParameteriv,
        _dart_glGetMinmaxParameteriv>('glGetMinmaxParameteriv');
    return _glGetMinmaxParameteriv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetMinmaxParameteriv _glGetMinmaxParameteriv;

  void glConvolutionFilter1D(
    int target,
    int internalformat,
    int width,
    int format,
    int type,
    ffi.Pointer<ffi.Void> image,
  ) {
    _glConvolutionFilter1D ??= _dylib.lookupFunction<_c_glConvolutionFilter1D,
        _dart_glConvolutionFilter1D>('glConvolutionFilter1D');
    return _glConvolutionFilter1D(
      target,
      internalformat,
      width,
      format,
      type,
      image,
    );
  }

  _dart_glConvolutionFilter1D _glConvolutionFilter1D;

  void glConvolutionFilter2D(
    int target,
    int internalformat,
    int width,
    int height,
    int format,
    int type,
    ffi.Pointer<ffi.Void> image,
  ) {
    _glConvolutionFilter2D ??= _dylib.lookupFunction<_c_glConvolutionFilter2D,
        _dart_glConvolutionFilter2D>('glConvolutionFilter2D');
    return _glConvolutionFilter2D(
      target,
      internalformat,
      width,
      height,
      format,
      type,
      image,
    );
  }

  _dart_glConvolutionFilter2D _glConvolutionFilter2D;

  void glConvolutionParameterf(
    int target,
    int pname,
    double params,
  ) {
    _glConvolutionParameterf ??= _dylib.lookupFunction<
        _c_glConvolutionParameterf,
        _dart_glConvolutionParameterf>('glConvolutionParameterf');
    return _glConvolutionParameterf(
      target,
      pname,
      params,
    );
  }

  _dart_glConvolutionParameterf _glConvolutionParameterf;

  void glConvolutionParameterfv(
    int target,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glConvolutionParameterfv ??= _dylib.lookupFunction<
        _c_glConvolutionParameterfv,
        _dart_glConvolutionParameterfv>('glConvolutionParameterfv');
    return _glConvolutionParameterfv(
      target,
      pname,
      params,
    );
  }

  _dart_glConvolutionParameterfv _glConvolutionParameterfv;

  void glConvolutionParameteri(
    int target,
    int pname,
    int params,
  ) {
    _glConvolutionParameteri ??= _dylib.lookupFunction<
        _c_glConvolutionParameteri,
        _dart_glConvolutionParameteri>('glConvolutionParameteri');
    return _glConvolutionParameteri(
      target,
      pname,
      params,
    );
  }

  _dart_glConvolutionParameteri _glConvolutionParameteri;

  void glConvolutionParameteriv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glConvolutionParameteriv ??= _dylib.lookupFunction<
        _c_glConvolutionParameteriv,
        _dart_glConvolutionParameteriv>('glConvolutionParameteriv');
    return _glConvolutionParameteriv(
      target,
      pname,
      params,
    );
  }

  _dart_glConvolutionParameteriv _glConvolutionParameteriv;

  void glCopyConvolutionFilter1D(
    int target,
    int internalformat,
    int x,
    int y,
    int width,
  ) {
    _glCopyConvolutionFilter1D ??= _dylib.lookupFunction<
        _c_glCopyConvolutionFilter1D,
        _dart_glCopyConvolutionFilter1D>('glCopyConvolutionFilter1D');
    return _glCopyConvolutionFilter1D(
      target,
      internalformat,
      x,
      y,
      width,
    );
  }

  _dart_glCopyConvolutionFilter1D _glCopyConvolutionFilter1D;

  void glCopyConvolutionFilter2D(
    int target,
    int internalformat,
    int x,
    int y,
    int width,
    int height,
  ) {
    _glCopyConvolutionFilter2D ??= _dylib.lookupFunction<
        _c_glCopyConvolutionFilter2D,
        _dart_glCopyConvolutionFilter2D>('glCopyConvolutionFilter2D');
    return _glCopyConvolutionFilter2D(
      target,
      internalformat,
      x,
      y,
      width,
      height,
    );
  }

  _dart_glCopyConvolutionFilter2D _glCopyConvolutionFilter2D;

  void glGetConvolutionFilter(
    int target,
    int format,
    int type,
    ffi.Pointer<ffi.Void> image,
  ) {
    _glGetConvolutionFilter ??= _dylib.lookupFunction<_c_glGetConvolutionFilter,
        _dart_glGetConvolutionFilter>('glGetConvolutionFilter');
    return _glGetConvolutionFilter(
      target,
      format,
      type,
      image,
    );
  }

  _dart_glGetConvolutionFilter _glGetConvolutionFilter;

  void glGetConvolutionParameterfv(
    int target,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glGetConvolutionParameterfv ??= _dylib.lookupFunction<
        _c_glGetConvolutionParameterfv,
        _dart_glGetConvolutionParameterfv>('glGetConvolutionParameterfv');
    return _glGetConvolutionParameterfv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetConvolutionParameterfv _glGetConvolutionParameterfv;

  void glGetConvolutionParameteriv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetConvolutionParameteriv ??= _dylib.lookupFunction<
        _c_glGetConvolutionParameteriv,
        _dart_glGetConvolutionParameteriv>('glGetConvolutionParameteriv');
    return _glGetConvolutionParameteriv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetConvolutionParameteriv _glGetConvolutionParameteriv;

  void glSeparableFilter2D(
    int target,
    int internalformat,
    int width,
    int height,
    int format,
    int type,
    ffi.Pointer<ffi.Void> row,
    ffi.Pointer<ffi.Void> column,
  ) {
    _glSeparableFilter2D ??= _dylib.lookupFunction<_c_glSeparableFilter2D,
        _dart_glSeparableFilter2D>('glSeparableFilter2D');
    return _glSeparableFilter2D(
      target,
      internalformat,
      width,
      height,
      format,
      type,
      row,
      column,
    );
  }

  _dart_glSeparableFilter2D _glSeparableFilter2D;

  void glGetSeparableFilter(
    int target,
    int format,
    int type,
    ffi.Pointer<ffi.Void> row,
    ffi.Pointer<ffi.Void> column,
    ffi.Pointer<ffi.Void> span,
  ) {
    _glGetSeparableFilter ??= _dylib.lookupFunction<_c_glGetSeparableFilter,
        _dart_glGetSeparableFilter>('glGetSeparableFilter');
    return _glGetSeparableFilter(
      target,
      format,
      type,
      row,
      column,
      span,
    );
  }

  _dart_glGetSeparableFilter _glGetSeparableFilter;

  void glActiveTexture(
    int texture,
  ) {
    _glActiveTexture ??=
        _dylib.lookupFunction<_c_glActiveTexture, _dart_glActiveTexture>(
            'glActiveTexture');
    return _glActiveTexture(
      texture,
    );
  }

  _dart_glActiveTexture _glActiveTexture;

  void glClientActiveTexture(
    int texture,
  ) {
    _glClientActiveTexture ??= _dylib.lookupFunction<_c_glClientActiveTexture,
        _dart_glClientActiveTexture>('glClientActiveTexture');
    return _glClientActiveTexture(
      texture,
    );
  }

  _dart_glClientActiveTexture _glClientActiveTexture;

  void glCompressedTexImage1D(
    int target,
    int level,
    int internalformat,
    int width,
    int border,
    int imageSize,
    ffi.Pointer<ffi.Void> data,
  ) {
    _glCompressedTexImage1D ??= _dylib.lookupFunction<_c_glCompressedTexImage1D,
        _dart_glCompressedTexImage1D>('glCompressedTexImage1D');
    return _glCompressedTexImage1D(
      target,
      level,
      internalformat,
      width,
      border,
      imageSize,
      data,
    );
  }

  _dart_glCompressedTexImage1D _glCompressedTexImage1D;

  void glCompressedTexImage2D(
    int target,
    int level,
    int internalformat,
    int width,
    int height,
    int border,
    int imageSize,
    ffi.Pointer<ffi.Void> data,
  ) {
    _glCompressedTexImage2D ??= _dylib.lookupFunction<_c_glCompressedTexImage2D,
        _dart_glCompressedTexImage2D>('glCompressedTexImage2D');
    return _glCompressedTexImage2D(
      target,
      level,
      internalformat,
      width,
      height,
      border,
      imageSize,
      data,
    );
  }

  _dart_glCompressedTexImage2D _glCompressedTexImage2D;

  void glCompressedTexImage3D(
    int target,
    int level,
    int internalformat,
    int width,
    int height,
    int depth,
    int border,
    int imageSize,
    ffi.Pointer<ffi.Void> data,
  ) {
    _glCompressedTexImage3D ??= _dylib.lookupFunction<_c_glCompressedTexImage3D,
        _dart_glCompressedTexImage3D>('glCompressedTexImage3D');
    return _glCompressedTexImage3D(
      target,
      level,
      internalformat,
      width,
      height,
      depth,
      border,
      imageSize,
      data,
    );
  }

  _dart_glCompressedTexImage3D _glCompressedTexImage3D;

  void glCompressedTexSubImage1D(
    int target,
    int level,
    int xoffset,
    int width,
    int format,
    int imageSize,
    ffi.Pointer<ffi.Void> data,
  ) {
    _glCompressedTexSubImage1D ??= _dylib.lookupFunction<
        _c_glCompressedTexSubImage1D,
        _dart_glCompressedTexSubImage1D>('glCompressedTexSubImage1D');
    return _glCompressedTexSubImage1D(
      target,
      level,
      xoffset,
      width,
      format,
      imageSize,
      data,
    );
  }

  _dart_glCompressedTexSubImage1D _glCompressedTexSubImage1D;

  void glCompressedTexSubImage2D(
    int target,
    int level,
    int xoffset,
    int yoffset,
    int width,
    int height,
    int format,
    int imageSize,
    ffi.Pointer<ffi.Void> data,
  ) {
    _glCompressedTexSubImage2D ??= _dylib.lookupFunction<
        _c_glCompressedTexSubImage2D,
        _dart_glCompressedTexSubImage2D>('glCompressedTexSubImage2D');
    return _glCompressedTexSubImage2D(
      target,
      level,
      xoffset,
      yoffset,
      width,
      height,
      format,
      imageSize,
      data,
    );
  }

  _dart_glCompressedTexSubImage2D _glCompressedTexSubImage2D;

  void glCompressedTexSubImage3D(
    int target,
    int level,
    int xoffset,
    int yoffset,
    int zoffset,
    int width,
    int height,
    int depth,
    int format,
    int imageSize,
    ffi.Pointer<ffi.Void> data,
  ) {
    _glCompressedTexSubImage3D ??= _dylib.lookupFunction<
        _c_glCompressedTexSubImage3D,
        _dart_glCompressedTexSubImage3D>('glCompressedTexSubImage3D');
    return _glCompressedTexSubImage3D(
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      imageSize,
      data,
    );
  }

  _dart_glCompressedTexSubImage3D _glCompressedTexSubImage3D;

  void glGetCompressedTexImage(
    int target,
    int lod,
    ffi.Pointer<ffi.Void> img,
  ) {
    _glGetCompressedTexImage ??= _dylib.lookupFunction<
        _c_glGetCompressedTexImage,
        _dart_glGetCompressedTexImage>('glGetCompressedTexImage');
    return _glGetCompressedTexImage(
      target,
      lod,
      img,
    );
  }

  _dart_glGetCompressedTexImage _glGetCompressedTexImage;

  void glMultiTexCoord1d(
    int target,
    double s,
  ) {
    _glMultiTexCoord1d ??=
        _dylib.lookupFunction<_c_glMultiTexCoord1d, _dart_glMultiTexCoord1d>(
            'glMultiTexCoord1d');
    return _glMultiTexCoord1d(
      target,
      s,
    );
  }

  _dart_glMultiTexCoord1d _glMultiTexCoord1d;

  void glMultiTexCoord1dv(
    int target,
    ffi.Pointer<ffi.Double> v,
  ) {
    _glMultiTexCoord1dv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord1dv, _dart_glMultiTexCoord1dv>(
            'glMultiTexCoord1dv');
    return _glMultiTexCoord1dv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord1dv _glMultiTexCoord1dv;

  void glMultiTexCoord1f(
    int target,
    double s,
  ) {
    _glMultiTexCoord1f ??=
        _dylib.lookupFunction<_c_glMultiTexCoord1f, _dart_glMultiTexCoord1f>(
            'glMultiTexCoord1f');
    return _glMultiTexCoord1f(
      target,
      s,
    );
  }

  _dart_glMultiTexCoord1f _glMultiTexCoord1f;

  void glMultiTexCoord1fv(
    int target,
    ffi.Pointer<ffi.Float> v,
  ) {
    _glMultiTexCoord1fv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord1fv, _dart_glMultiTexCoord1fv>(
            'glMultiTexCoord1fv');
    return _glMultiTexCoord1fv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord1fv _glMultiTexCoord1fv;

  void glMultiTexCoord1i(
    int target,
    int s,
  ) {
    _glMultiTexCoord1i ??=
        _dylib.lookupFunction<_c_glMultiTexCoord1i, _dart_glMultiTexCoord1i>(
            'glMultiTexCoord1i');
    return _glMultiTexCoord1i(
      target,
      s,
    );
  }

  _dart_glMultiTexCoord1i _glMultiTexCoord1i;

  void glMultiTexCoord1iv(
    int target,
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glMultiTexCoord1iv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord1iv, _dart_glMultiTexCoord1iv>(
            'glMultiTexCoord1iv');
    return _glMultiTexCoord1iv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord1iv _glMultiTexCoord1iv;

  void glMultiTexCoord1s(
    int target,
    int s,
  ) {
    _glMultiTexCoord1s ??=
        _dylib.lookupFunction<_c_glMultiTexCoord1s, _dart_glMultiTexCoord1s>(
            'glMultiTexCoord1s');
    return _glMultiTexCoord1s(
      target,
      s,
    );
  }

  _dart_glMultiTexCoord1s _glMultiTexCoord1s;

  void glMultiTexCoord1sv(
    int target,
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glMultiTexCoord1sv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord1sv, _dart_glMultiTexCoord1sv>(
            'glMultiTexCoord1sv');
    return _glMultiTexCoord1sv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord1sv _glMultiTexCoord1sv;

  void glMultiTexCoord2d(
    int target,
    double s,
    double t,
  ) {
    _glMultiTexCoord2d ??=
        _dylib.lookupFunction<_c_glMultiTexCoord2d, _dart_glMultiTexCoord2d>(
            'glMultiTexCoord2d');
    return _glMultiTexCoord2d(
      target,
      s,
      t,
    );
  }

  _dart_glMultiTexCoord2d _glMultiTexCoord2d;

  void glMultiTexCoord2dv(
    int target,
    ffi.Pointer<ffi.Double> v,
  ) {
    _glMultiTexCoord2dv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord2dv, _dart_glMultiTexCoord2dv>(
            'glMultiTexCoord2dv');
    return _glMultiTexCoord2dv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord2dv _glMultiTexCoord2dv;

  void glMultiTexCoord2f(
    int target,
    double s,
    double t,
  ) {
    _glMultiTexCoord2f ??=
        _dylib.lookupFunction<_c_glMultiTexCoord2f, _dart_glMultiTexCoord2f>(
            'glMultiTexCoord2f');
    return _glMultiTexCoord2f(
      target,
      s,
      t,
    );
  }

  _dart_glMultiTexCoord2f _glMultiTexCoord2f;

  void glMultiTexCoord2fv(
    int target,
    ffi.Pointer<ffi.Float> v,
  ) {
    _glMultiTexCoord2fv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord2fv, _dart_glMultiTexCoord2fv>(
            'glMultiTexCoord2fv');
    return _glMultiTexCoord2fv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord2fv _glMultiTexCoord2fv;

  void glMultiTexCoord2i(
    int target,
    int s,
    int t,
  ) {
    _glMultiTexCoord2i ??=
        _dylib.lookupFunction<_c_glMultiTexCoord2i, _dart_glMultiTexCoord2i>(
            'glMultiTexCoord2i');
    return _glMultiTexCoord2i(
      target,
      s,
      t,
    );
  }

  _dart_glMultiTexCoord2i _glMultiTexCoord2i;

  void glMultiTexCoord2iv(
    int target,
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glMultiTexCoord2iv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord2iv, _dart_glMultiTexCoord2iv>(
            'glMultiTexCoord2iv');
    return _glMultiTexCoord2iv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord2iv _glMultiTexCoord2iv;

  void glMultiTexCoord2s(
    int target,
    int s,
    int t,
  ) {
    _glMultiTexCoord2s ??=
        _dylib.lookupFunction<_c_glMultiTexCoord2s, _dart_glMultiTexCoord2s>(
            'glMultiTexCoord2s');
    return _glMultiTexCoord2s(
      target,
      s,
      t,
    );
  }

  _dart_glMultiTexCoord2s _glMultiTexCoord2s;

  void glMultiTexCoord2sv(
    int target,
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glMultiTexCoord2sv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord2sv, _dart_glMultiTexCoord2sv>(
            'glMultiTexCoord2sv');
    return _glMultiTexCoord2sv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord2sv _glMultiTexCoord2sv;

  void glMultiTexCoord3d(
    int target,
    double s,
    double t,
    double r,
  ) {
    _glMultiTexCoord3d ??=
        _dylib.lookupFunction<_c_glMultiTexCoord3d, _dart_glMultiTexCoord3d>(
            'glMultiTexCoord3d');
    return _glMultiTexCoord3d(
      target,
      s,
      t,
      r,
    );
  }

  _dart_glMultiTexCoord3d _glMultiTexCoord3d;

  void glMultiTexCoord3dv(
    int target,
    ffi.Pointer<ffi.Double> v,
  ) {
    _glMultiTexCoord3dv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord3dv, _dart_glMultiTexCoord3dv>(
            'glMultiTexCoord3dv');
    return _glMultiTexCoord3dv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord3dv _glMultiTexCoord3dv;

  void glMultiTexCoord3f(
    int target,
    double s,
    double t,
    double r,
  ) {
    _glMultiTexCoord3f ??=
        _dylib.lookupFunction<_c_glMultiTexCoord3f, _dart_glMultiTexCoord3f>(
            'glMultiTexCoord3f');
    return _glMultiTexCoord3f(
      target,
      s,
      t,
      r,
    );
  }

  _dart_glMultiTexCoord3f _glMultiTexCoord3f;

  void glMultiTexCoord3fv(
    int target,
    ffi.Pointer<ffi.Float> v,
  ) {
    _glMultiTexCoord3fv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord3fv, _dart_glMultiTexCoord3fv>(
            'glMultiTexCoord3fv');
    return _glMultiTexCoord3fv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord3fv _glMultiTexCoord3fv;

  void glMultiTexCoord3i(
    int target,
    int s,
    int t,
    int r,
  ) {
    _glMultiTexCoord3i ??=
        _dylib.lookupFunction<_c_glMultiTexCoord3i, _dart_glMultiTexCoord3i>(
            'glMultiTexCoord3i');
    return _glMultiTexCoord3i(
      target,
      s,
      t,
      r,
    );
  }

  _dart_glMultiTexCoord3i _glMultiTexCoord3i;

  void glMultiTexCoord3iv(
    int target,
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glMultiTexCoord3iv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord3iv, _dart_glMultiTexCoord3iv>(
            'glMultiTexCoord3iv');
    return _glMultiTexCoord3iv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord3iv _glMultiTexCoord3iv;

  void glMultiTexCoord3s(
    int target,
    int s,
    int t,
    int r,
  ) {
    _glMultiTexCoord3s ??=
        _dylib.lookupFunction<_c_glMultiTexCoord3s, _dart_glMultiTexCoord3s>(
            'glMultiTexCoord3s');
    return _glMultiTexCoord3s(
      target,
      s,
      t,
      r,
    );
  }

  _dart_glMultiTexCoord3s _glMultiTexCoord3s;

  void glMultiTexCoord3sv(
    int target,
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glMultiTexCoord3sv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord3sv, _dart_glMultiTexCoord3sv>(
            'glMultiTexCoord3sv');
    return _glMultiTexCoord3sv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord3sv _glMultiTexCoord3sv;

  void glMultiTexCoord4d(
    int target,
    double s,
    double t,
    double r,
    double q,
  ) {
    _glMultiTexCoord4d ??=
        _dylib.lookupFunction<_c_glMultiTexCoord4d, _dart_glMultiTexCoord4d>(
            'glMultiTexCoord4d');
    return _glMultiTexCoord4d(
      target,
      s,
      t,
      r,
      q,
    );
  }

  _dart_glMultiTexCoord4d _glMultiTexCoord4d;

  void glMultiTexCoord4dv(
    int target,
    ffi.Pointer<ffi.Double> v,
  ) {
    _glMultiTexCoord4dv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord4dv, _dart_glMultiTexCoord4dv>(
            'glMultiTexCoord4dv');
    return _glMultiTexCoord4dv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord4dv _glMultiTexCoord4dv;

  void glMultiTexCoord4f(
    int target,
    double s,
    double t,
    double r,
    double q,
  ) {
    _glMultiTexCoord4f ??=
        _dylib.lookupFunction<_c_glMultiTexCoord4f, _dart_glMultiTexCoord4f>(
            'glMultiTexCoord4f');
    return _glMultiTexCoord4f(
      target,
      s,
      t,
      r,
      q,
    );
  }

  _dart_glMultiTexCoord4f _glMultiTexCoord4f;

  void glMultiTexCoord4fv(
    int target,
    ffi.Pointer<ffi.Float> v,
  ) {
    _glMultiTexCoord4fv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord4fv, _dart_glMultiTexCoord4fv>(
            'glMultiTexCoord4fv');
    return _glMultiTexCoord4fv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord4fv _glMultiTexCoord4fv;

  void glMultiTexCoord4i(
    int target,
    int s,
    int t,
    int r,
    int q,
  ) {
    _glMultiTexCoord4i ??=
        _dylib.lookupFunction<_c_glMultiTexCoord4i, _dart_glMultiTexCoord4i>(
            'glMultiTexCoord4i');
    return _glMultiTexCoord4i(
      target,
      s,
      t,
      r,
      q,
    );
  }

  _dart_glMultiTexCoord4i _glMultiTexCoord4i;

  void glMultiTexCoord4iv(
    int target,
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glMultiTexCoord4iv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord4iv, _dart_glMultiTexCoord4iv>(
            'glMultiTexCoord4iv');
    return _glMultiTexCoord4iv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord4iv _glMultiTexCoord4iv;

  void glMultiTexCoord4s(
    int target,
    int s,
    int t,
    int r,
    int q,
  ) {
    _glMultiTexCoord4s ??=
        _dylib.lookupFunction<_c_glMultiTexCoord4s, _dart_glMultiTexCoord4s>(
            'glMultiTexCoord4s');
    return _glMultiTexCoord4s(
      target,
      s,
      t,
      r,
      q,
    );
  }

  _dart_glMultiTexCoord4s _glMultiTexCoord4s;

  void glMultiTexCoord4sv(
    int target,
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glMultiTexCoord4sv ??=
        _dylib.lookupFunction<_c_glMultiTexCoord4sv, _dart_glMultiTexCoord4sv>(
            'glMultiTexCoord4sv');
    return _glMultiTexCoord4sv(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord4sv _glMultiTexCoord4sv;

  void glLoadTransposeMatrixd(
    ffi.Pointer<ffi.Double> m,
  ) {
    _glLoadTransposeMatrixd ??= _dylib.lookupFunction<_c_glLoadTransposeMatrixd,
        _dart_glLoadTransposeMatrixd>('glLoadTransposeMatrixd');
    return _glLoadTransposeMatrixd(
      m,
    );
  }

  _dart_glLoadTransposeMatrixd _glLoadTransposeMatrixd;

  void glLoadTransposeMatrixf(
    ffi.Pointer<ffi.Float> m,
  ) {
    _glLoadTransposeMatrixf ??= _dylib.lookupFunction<_c_glLoadTransposeMatrixf,
        _dart_glLoadTransposeMatrixf>('glLoadTransposeMatrixf');
    return _glLoadTransposeMatrixf(
      m,
    );
  }

  _dart_glLoadTransposeMatrixf _glLoadTransposeMatrixf;

  void glMultTransposeMatrixd(
    ffi.Pointer<ffi.Double> m,
  ) {
    _glMultTransposeMatrixd ??= _dylib.lookupFunction<_c_glMultTransposeMatrixd,
        _dart_glMultTransposeMatrixd>('glMultTransposeMatrixd');
    return _glMultTransposeMatrixd(
      m,
    );
  }

  _dart_glMultTransposeMatrixd _glMultTransposeMatrixd;

  void glMultTransposeMatrixf(
    ffi.Pointer<ffi.Float> m,
  ) {
    _glMultTransposeMatrixf ??= _dylib.lookupFunction<_c_glMultTransposeMatrixf,
        _dart_glMultTransposeMatrixf>('glMultTransposeMatrixf');
    return _glMultTransposeMatrixf(
      m,
    );
  }

  _dart_glMultTransposeMatrixf _glMultTransposeMatrixf;

  void glSampleCoverage(
    double value,
    int invert,
  ) {
    _glSampleCoverage ??=
        _dylib.lookupFunction<_c_glSampleCoverage, _dart_glSampleCoverage>(
            'glSampleCoverage');
    return _glSampleCoverage(
      value,
      invert,
    );
  }

  _dart_glSampleCoverage _glSampleCoverage;

  void glActiveTextureARB(
    int texture,
  ) {
    _glActiveTextureARB ??=
        _dylib.lookupFunction<_c_glActiveTextureARB, _dart_glActiveTextureARB>(
            'glActiveTextureARB');
    return _glActiveTextureARB(
      texture,
    );
  }

  _dart_glActiveTextureARB _glActiveTextureARB;

  void glClientActiveTextureARB(
    int texture,
  ) {
    _glClientActiveTextureARB ??= _dylib.lookupFunction<
        _c_glClientActiveTextureARB,
        _dart_glClientActiveTextureARB>('glClientActiveTextureARB');
    return _glClientActiveTextureARB(
      texture,
    );
  }

  _dart_glClientActiveTextureARB _glClientActiveTextureARB;

  void glMultiTexCoord1dARB(
    int target,
    double s,
  ) {
    _glMultiTexCoord1dARB ??= _dylib.lookupFunction<_c_glMultiTexCoord1dARB,
        _dart_glMultiTexCoord1dARB>('glMultiTexCoord1dARB');
    return _glMultiTexCoord1dARB(
      target,
      s,
    );
  }

  _dart_glMultiTexCoord1dARB _glMultiTexCoord1dARB;

  void glMultiTexCoord1dvARB(
    int target,
    ffi.Pointer<ffi.Double> v,
  ) {
    _glMultiTexCoord1dvARB ??= _dylib.lookupFunction<_c_glMultiTexCoord1dvARB,
        _dart_glMultiTexCoord1dvARB>('glMultiTexCoord1dvARB');
    return _glMultiTexCoord1dvARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord1dvARB _glMultiTexCoord1dvARB;

  void glMultiTexCoord1fARB(
    int target,
    double s,
  ) {
    _glMultiTexCoord1fARB ??= _dylib.lookupFunction<_c_glMultiTexCoord1fARB,
        _dart_glMultiTexCoord1fARB>('glMultiTexCoord1fARB');
    return _glMultiTexCoord1fARB(
      target,
      s,
    );
  }

  _dart_glMultiTexCoord1fARB _glMultiTexCoord1fARB;

  void glMultiTexCoord1fvARB(
    int target,
    ffi.Pointer<ffi.Float> v,
  ) {
    _glMultiTexCoord1fvARB ??= _dylib.lookupFunction<_c_glMultiTexCoord1fvARB,
        _dart_glMultiTexCoord1fvARB>('glMultiTexCoord1fvARB');
    return _glMultiTexCoord1fvARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord1fvARB _glMultiTexCoord1fvARB;

  void glMultiTexCoord1iARB(
    int target,
    int s,
  ) {
    _glMultiTexCoord1iARB ??= _dylib.lookupFunction<_c_glMultiTexCoord1iARB,
        _dart_glMultiTexCoord1iARB>('glMultiTexCoord1iARB');
    return _glMultiTexCoord1iARB(
      target,
      s,
    );
  }

  _dart_glMultiTexCoord1iARB _glMultiTexCoord1iARB;

  void glMultiTexCoord1ivARB(
    int target,
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glMultiTexCoord1ivARB ??= _dylib.lookupFunction<_c_glMultiTexCoord1ivARB,
        _dart_glMultiTexCoord1ivARB>('glMultiTexCoord1ivARB');
    return _glMultiTexCoord1ivARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord1ivARB _glMultiTexCoord1ivARB;

  void glMultiTexCoord1sARB(
    int target,
    int s,
  ) {
    _glMultiTexCoord1sARB ??= _dylib.lookupFunction<_c_glMultiTexCoord1sARB,
        _dart_glMultiTexCoord1sARB>('glMultiTexCoord1sARB');
    return _glMultiTexCoord1sARB(
      target,
      s,
    );
  }

  _dart_glMultiTexCoord1sARB _glMultiTexCoord1sARB;

  void glMultiTexCoord1svARB(
    int target,
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glMultiTexCoord1svARB ??= _dylib.lookupFunction<_c_glMultiTexCoord1svARB,
        _dart_glMultiTexCoord1svARB>('glMultiTexCoord1svARB');
    return _glMultiTexCoord1svARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord1svARB _glMultiTexCoord1svARB;

  void glMultiTexCoord2dARB(
    int target,
    double s,
    double t,
  ) {
    _glMultiTexCoord2dARB ??= _dylib.lookupFunction<_c_glMultiTexCoord2dARB,
        _dart_glMultiTexCoord2dARB>('glMultiTexCoord2dARB');
    return _glMultiTexCoord2dARB(
      target,
      s,
      t,
    );
  }

  _dart_glMultiTexCoord2dARB _glMultiTexCoord2dARB;

  void glMultiTexCoord2dvARB(
    int target,
    ffi.Pointer<ffi.Double> v,
  ) {
    _glMultiTexCoord2dvARB ??= _dylib.lookupFunction<_c_glMultiTexCoord2dvARB,
        _dart_glMultiTexCoord2dvARB>('glMultiTexCoord2dvARB');
    return _glMultiTexCoord2dvARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord2dvARB _glMultiTexCoord2dvARB;

  void glMultiTexCoord2fARB(
    int target,
    double s,
    double t,
  ) {
    _glMultiTexCoord2fARB ??= _dylib.lookupFunction<_c_glMultiTexCoord2fARB,
        _dart_glMultiTexCoord2fARB>('glMultiTexCoord2fARB');
    return _glMultiTexCoord2fARB(
      target,
      s,
      t,
    );
  }

  _dart_glMultiTexCoord2fARB _glMultiTexCoord2fARB;

  void glMultiTexCoord2fvARB(
    int target,
    ffi.Pointer<ffi.Float> v,
  ) {
    _glMultiTexCoord2fvARB ??= _dylib.lookupFunction<_c_glMultiTexCoord2fvARB,
        _dart_glMultiTexCoord2fvARB>('glMultiTexCoord2fvARB');
    return _glMultiTexCoord2fvARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord2fvARB _glMultiTexCoord2fvARB;

  void glMultiTexCoord2iARB(
    int target,
    int s,
    int t,
  ) {
    _glMultiTexCoord2iARB ??= _dylib.lookupFunction<_c_glMultiTexCoord2iARB,
        _dart_glMultiTexCoord2iARB>('glMultiTexCoord2iARB');
    return _glMultiTexCoord2iARB(
      target,
      s,
      t,
    );
  }

  _dart_glMultiTexCoord2iARB _glMultiTexCoord2iARB;

  void glMultiTexCoord2ivARB(
    int target,
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glMultiTexCoord2ivARB ??= _dylib.lookupFunction<_c_glMultiTexCoord2ivARB,
        _dart_glMultiTexCoord2ivARB>('glMultiTexCoord2ivARB');
    return _glMultiTexCoord2ivARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord2ivARB _glMultiTexCoord2ivARB;

  void glMultiTexCoord2sARB(
    int target,
    int s,
    int t,
  ) {
    _glMultiTexCoord2sARB ??= _dylib.lookupFunction<_c_glMultiTexCoord2sARB,
        _dart_glMultiTexCoord2sARB>('glMultiTexCoord2sARB');
    return _glMultiTexCoord2sARB(
      target,
      s,
      t,
    );
  }

  _dart_glMultiTexCoord2sARB _glMultiTexCoord2sARB;

  void glMultiTexCoord2svARB(
    int target,
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glMultiTexCoord2svARB ??= _dylib.lookupFunction<_c_glMultiTexCoord2svARB,
        _dart_glMultiTexCoord2svARB>('glMultiTexCoord2svARB');
    return _glMultiTexCoord2svARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord2svARB _glMultiTexCoord2svARB;

  void glMultiTexCoord3dARB(
    int target,
    double s,
    double t,
    double r,
  ) {
    _glMultiTexCoord3dARB ??= _dylib.lookupFunction<_c_glMultiTexCoord3dARB,
        _dart_glMultiTexCoord3dARB>('glMultiTexCoord3dARB');
    return _glMultiTexCoord3dARB(
      target,
      s,
      t,
      r,
    );
  }

  _dart_glMultiTexCoord3dARB _glMultiTexCoord3dARB;

  void glMultiTexCoord3dvARB(
    int target,
    ffi.Pointer<ffi.Double> v,
  ) {
    _glMultiTexCoord3dvARB ??= _dylib.lookupFunction<_c_glMultiTexCoord3dvARB,
        _dart_glMultiTexCoord3dvARB>('glMultiTexCoord3dvARB');
    return _glMultiTexCoord3dvARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord3dvARB _glMultiTexCoord3dvARB;

  void glMultiTexCoord3fARB(
    int target,
    double s,
    double t,
    double r,
  ) {
    _glMultiTexCoord3fARB ??= _dylib.lookupFunction<_c_glMultiTexCoord3fARB,
        _dart_glMultiTexCoord3fARB>('glMultiTexCoord3fARB');
    return _glMultiTexCoord3fARB(
      target,
      s,
      t,
      r,
    );
  }

  _dart_glMultiTexCoord3fARB _glMultiTexCoord3fARB;

  void glMultiTexCoord3fvARB(
    int target,
    ffi.Pointer<ffi.Float> v,
  ) {
    _glMultiTexCoord3fvARB ??= _dylib.lookupFunction<_c_glMultiTexCoord3fvARB,
        _dart_glMultiTexCoord3fvARB>('glMultiTexCoord3fvARB');
    return _glMultiTexCoord3fvARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord3fvARB _glMultiTexCoord3fvARB;

  void glMultiTexCoord3iARB(
    int target,
    int s,
    int t,
    int r,
  ) {
    _glMultiTexCoord3iARB ??= _dylib.lookupFunction<_c_glMultiTexCoord3iARB,
        _dart_glMultiTexCoord3iARB>('glMultiTexCoord3iARB');
    return _glMultiTexCoord3iARB(
      target,
      s,
      t,
      r,
    );
  }

  _dart_glMultiTexCoord3iARB _glMultiTexCoord3iARB;

  void glMultiTexCoord3ivARB(
    int target,
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glMultiTexCoord3ivARB ??= _dylib.lookupFunction<_c_glMultiTexCoord3ivARB,
        _dart_glMultiTexCoord3ivARB>('glMultiTexCoord3ivARB');
    return _glMultiTexCoord3ivARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord3ivARB _glMultiTexCoord3ivARB;

  void glMultiTexCoord3sARB(
    int target,
    int s,
    int t,
    int r,
  ) {
    _glMultiTexCoord3sARB ??= _dylib.lookupFunction<_c_glMultiTexCoord3sARB,
        _dart_glMultiTexCoord3sARB>('glMultiTexCoord3sARB');
    return _glMultiTexCoord3sARB(
      target,
      s,
      t,
      r,
    );
  }

  _dart_glMultiTexCoord3sARB _glMultiTexCoord3sARB;

  void glMultiTexCoord3svARB(
    int target,
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glMultiTexCoord3svARB ??= _dylib.lookupFunction<_c_glMultiTexCoord3svARB,
        _dart_glMultiTexCoord3svARB>('glMultiTexCoord3svARB');
    return _glMultiTexCoord3svARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord3svARB _glMultiTexCoord3svARB;

  void glMultiTexCoord4dARB(
    int target,
    double s,
    double t,
    double r,
    double q,
  ) {
    _glMultiTexCoord4dARB ??= _dylib.lookupFunction<_c_glMultiTexCoord4dARB,
        _dart_glMultiTexCoord4dARB>('glMultiTexCoord4dARB');
    return _glMultiTexCoord4dARB(
      target,
      s,
      t,
      r,
      q,
    );
  }

  _dart_glMultiTexCoord4dARB _glMultiTexCoord4dARB;

  void glMultiTexCoord4dvARB(
    int target,
    ffi.Pointer<ffi.Double> v,
  ) {
    _glMultiTexCoord4dvARB ??= _dylib.lookupFunction<_c_glMultiTexCoord4dvARB,
        _dart_glMultiTexCoord4dvARB>('glMultiTexCoord4dvARB');
    return _glMultiTexCoord4dvARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord4dvARB _glMultiTexCoord4dvARB;

  void glMultiTexCoord4fARB(
    int target,
    double s,
    double t,
    double r,
    double q,
  ) {
    _glMultiTexCoord4fARB ??= _dylib.lookupFunction<_c_glMultiTexCoord4fARB,
        _dart_glMultiTexCoord4fARB>('glMultiTexCoord4fARB');
    return _glMultiTexCoord4fARB(
      target,
      s,
      t,
      r,
      q,
    );
  }

  _dart_glMultiTexCoord4fARB _glMultiTexCoord4fARB;

  void glMultiTexCoord4fvARB(
    int target,
    ffi.Pointer<ffi.Float> v,
  ) {
    _glMultiTexCoord4fvARB ??= _dylib.lookupFunction<_c_glMultiTexCoord4fvARB,
        _dart_glMultiTexCoord4fvARB>('glMultiTexCoord4fvARB');
    return _glMultiTexCoord4fvARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord4fvARB _glMultiTexCoord4fvARB;

  void glMultiTexCoord4iARB(
    int target,
    int s,
    int t,
    int r,
    int q,
  ) {
    _glMultiTexCoord4iARB ??= _dylib.lookupFunction<_c_glMultiTexCoord4iARB,
        _dart_glMultiTexCoord4iARB>('glMultiTexCoord4iARB');
    return _glMultiTexCoord4iARB(
      target,
      s,
      t,
      r,
      q,
    );
  }

  _dart_glMultiTexCoord4iARB _glMultiTexCoord4iARB;

  void glMultiTexCoord4ivARB(
    int target,
    ffi.Pointer<ffi.Int32> v,
  ) {
    _glMultiTexCoord4ivARB ??= _dylib.lookupFunction<_c_glMultiTexCoord4ivARB,
        _dart_glMultiTexCoord4ivARB>('glMultiTexCoord4ivARB');
    return _glMultiTexCoord4ivARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord4ivARB _glMultiTexCoord4ivARB;

  void glMultiTexCoord4sARB(
    int target,
    int s,
    int t,
    int r,
    int q,
  ) {
    _glMultiTexCoord4sARB ??= _dylib.lookupFunction<_c_glMultiTexCoord4sARB,
        _dart_glMultiTexCoord4sARB>('glMultiTexCoord4sARB');
    return _glMultiTexCoord4sARB(
      target,
      s,
      t,
      r,
      q,
    );
  }

  _dart_glMultiTexCoord4sARB _glMultiTexCoord4sARB;

  void glMultiTexCoord4svARB(
    int target,
    ffi.Pointer<ffi.Int16> v,
  ) {
    _glMultiTexCoord4svARB ??= _dylib.lookupFunction<_c_glMultiTexCoord4svARB,
        _dart_glMultiTexCoord4svARB>('glMultiTexCoord4svARB');
    return _glMultiTexCoord4svARB(
      target,
      v,
    );
  }

  _dart_glMultiTexCoord4svARB _glMultiTexCoord4svARB;

  void glBlendEquationSeparateATI(
    int modeRGB,
    int modeA,
  ) {
    _glBlendEquationSeparateATI ??= _dylib.lookupFunction<
        _c_glBlendEquationSeparateATI,
        _dart_glBlendEquationSeparateATI>('glBlendEquationSeparateATI');
    return _glBlendEquationSeparateATI(
      modeRGB,
      modeA,
    );
  }

  _dart_glBlendEquationSeparateATI _glBlendEquationSeparateATI;

  void glClearDepthf(
    double d,
  ) {
    _glClearDepthf ??= _dylib
        .lookupFunction<_c_glClearDepthf, _dart_glClearDepthf>('glClearDepthf');
    return _glClearDepthf(
      d,
    );
  }

  _dart_glClearDepthf _glClearDepthf;

  void glClipPlanef(
    int p,
    ffi.Pointer<ffi.Float> eqn,
  ) {
    _glClipPlanef ??= _dylib
        .lookupFunction<_c_glClipPlanef, _dart_glClipPlanef>('glClipPlanef');
    return _glClipPlanef(
      p,
      eqn,
    );
  }

  _dart_glClipPlanef _glClipPlanef;

  void glDepthRangef(
    double n,
    double f,
  ) {
    _glDepthRangef ??= _dylib
        .lookupFunction<_c_glDepthRangef, _dart_glDepthRangef>('glDepthRangef');
    return _glDepthRangef(
      n,
      f,
    );
  }

  _dart_glDepthRangef _glDepthRangef;

  void glFrustumf(
    double l,
    double r,
    double b,
    double t,
    double n,
    double f,
  ) {
    _glFrustumf ??=
        _dylib.lookupFunction<_c_glFrustumf, _dart_glFrustumf>('glFrustumf');
    return _glFrustumf(
      l,
      r,
      b,
      t,
      n,
      f,
    );
  }

  _dart_glFrustumf _glFrustumf;

  void glGetClipPlanef(
    int plane,
    ffi.Pointer<ffi.Float> equation,
  ) {
    _glGetClipPlanef ??=
        _dylib.lookupFunction<_c_glGetClipPlanef, _dart_glGetClipPlanef>(
            'glGetClipPlanef');
    return _glGetClipPlanef(
      plane,
      equation,
    );
  }

  _dart_glGetClipPlanef _glGetClipPlanef;

  void glOrthof(
    double l,
    double r,
    double b,
    double t,
    double n,
    double f,
  ) {
    _glOrthof ??=
        _dylib.lookupFunction<_c_glOrthof, _dart_glOrthof>('glOrthof');
    return _glOrthof(
      l,
      r,
      b,
      t,
      n,
      f,
    );
  }

  _dart_glOrthof _glOrthof;

  void glPointParameterf(
    int pname,
    double param,
  ) {
    _glPointParameterf ??=
        _dylib.lookupFunction<_c_glPointParameterf, _dart_glPointParameterf>(
            'glPointParameterf');
    return _glPointParameterf(
      pname,
      param,
    );
  }

  _dart_glPointParameterf _glPointParameterf;

  void glPointParameterfv(
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glPointParameterfv ??=
        _dylib.lookupFunction<_c_glPointParameterfv, _dart_glPointParameterfv>(
            'glPointParameterfv');
    return _glPointParameterfv(
      pname,
      params,
    );
  }

  _dart_glPointParameterfv _glPointParameterfv;

  void glAlphaFuncx(
    int func,
    int ref,
  ) {
    _glAlphaFuncx ??= _dylib
        .lookupFunction<_c_glAlphaFuncx, _dart_glAlphaFuncx>('glAlphaFuncx');
    return _glAlphaFuncx(
      func,
      ref,
    );
  }

  _dart_glAlphaFuncx _glAlphaFuncx;

  void glBindBuffer(
    int target,
    int buffer,
  ) {
    _glBindBuffer ??= _dylib
        .lookupFunction<_c_glBindBuffer, _dart_glBindBuffer>('glBindBuffer');
    return _glBindBuffer(
      target,
      buffer,
    );
  }

  _dart_glBindBuffer _glBindBuffer;

  void glBufferData(
    int target,
    int size,
    ffi.Pointer<ffi.Void> data,
    int usage,
  ) {
    _glBufferData ??= _dylib
        .lookupFunction<_c_glBufferData, _dart_glBufferData>('glBufferData');
    return _glBufferData(
      target,
      size,
      data,
      usage,
    );
  }

  _dart_glBufferData _glBufferData;

  void glBufferSubData(
    int target,
    int offset,
    int size,
    ffi.Pointer<ffi.Void> data,
  ) {
    _glBufferSubData ??=
        _dylib.lookupFunction<_c_glBufferSubData, _dart_glBufferSubData>(
            'glBufferSubData');
    return _glBufferSubData(
      target,
      offset,
      size,
      data,
    );
  }

  _dart_glBufferSubData _glBufferSubData;

  void glClearColorx(
    int red,
    int green,
    int blue,
    int alpha,
  ) {
    _glClearColorx ??= _dylib
        .lookupFunction<_c_glClearColorx, _dart_glClearColorx>('glClearColorx');
    return _glClearColorx(
      red,
      green,
      blue,
      alpha,
    );
  }

  _dart_glClearColorx _glClearColorx;

  void glClearDepthx(
    int depth,
  ) {
    _glClearDepthx ??= _dylib
        .lookupFunction<_c_glClearDepthx, _dart_glClearDepthx>('glClearDepthx');
    return _glClearDepthx(
      depth,
    );
  }

  _dart_glClearDepthx _glClearDepthx;

  void glClipPlanex(
    int plane,
    ffi.Pointer<ffi.Int32> equation,
  ) {
    _glClipPlanex ??= _dylib
        .lookupFunction<_c_glClipPlanex, _dart_glClipPlanex>('glClipPlanex');
    return _glClipPlanex(
      plane,
      equation,
    );
  }

  _dart_glClipPlanex _glClipPlanex;

  void glColor4x(
    int red,
    int green,
    int blue,
    int alpha,
  ) {
    _glColor4x ??=
        _dylib.lookupFunction<_c_glColor4x, _dart_glColor4x>('glColor4x');
    return _glColor4x(
      red,
      green,
      blue,
      alpha,
    );
  }

  _dart_glColor4x _glColor4x;

  void glDeleteBuffers(
    int n,
    ffi.Pointer<ffi.Uint32> buffers,
  ) {
    _glDeleteBuffers ??=
        _dylib.lookupFunction<_c_glDeleteBuffers, _dart_glDeleteBuffers>(
            'glDeleteBuffers');
    return _glDeleteBuffers(
      n,
      buffers,
    );
  }

  _dart_glDeleteBuffers _glDeleteBuffers;

  void glDepthRangex(
    int n,
    int f,
  ) {
    _glDepthRangex ??= _dylib
        .lookupFunction<_c_glDepthRangex, _dart_glDepthRangex>('glDepthRangex');
    return _glDepthRangex(
      n,
      f,
    );
  }

  _dart_glDepthRangex _glDepthRangex;

  void glFogx(
    int pname,
    int param,
  ) {
    _glFogx ??= _dylib.lookupFunction<_c_glFogx, _dart_glFogx>('glFogx');
    return _glFogx(
      pname,
      param,
    );
  }

  _dart_glFogx _glFogx;

  void glFogxv(
    int pname,
    ffi.Pointer<ffi.Int32> param,
  ) {
    _glFogxv ??= _dylib.lookupFunction<_c_glFogxv, _dart_glFogxv>('glFogxv');
    return _glFogxv(
      pname,
      param,
    );
  }

  _dart_glFogxv _glFogxv;

  void glFrustumx(
    int l,
    int r,
    int b,
    int t,
    int n,
    int f,
  ) {
    _glFrustumx ??=
        _dylib.lookupFunction<_c_glFrustumx, _dart_glFrustumx>('glFrustumx');
    return _glFrustumx(
      l,
      r,
      b,
      t,
      n,
      f,
    );
  }

  _dart_glFrustumx _glFrustumx;

  void glGetBufferParameteriv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetBufferParameteriv ??= _dylib.lookupFunction<_c_glGetBufferParameteriv,
        _dart_glGetBufferParameteriv>('glGetBufferParameteriv');
    return _glGetBufferParameteriv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetBufferParameteriv _glGetBufferParameteriv;

  void glGetClipPlanex(
    int plane,
    ffi.Pointer<ffi.Int32> equation,
  ) {
    _glGetClipPlanex ??=
        _dylib.lookupFunction<_c_glGetClipPlanex, _dart_glGetClipPlanex>(
            'glGetClipPlanex');
    return _glGetClipPlanex(
      plane,
      equation,
    );
  }

  _dart_glGetClipPlanex _glGetClipPlanex;

  void glGenBuffers(
    int n,
    ffi.Pointer<ffi.Uint32> buffers,
  ) {
    _glGenBuffers ??= _dylib
        .lookupFunction<_c_glGenBuffers, _dart_glGenBuffers>('glGenBuffers');
    return _glGenBuffers(
      n,
      buffers,
    );
  }

  _dart_glGenBuffers _glGenBuffers;

  void glGetFixedv(
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetFixedv ??=
        _dylib.lookupFunction<_c_glGetFixedv, _dart_glGetFixedv>('glGetFixedv');
    return _glGetFixedv(
      pname,
      params,
    );
  }

  _dart_glGetFixedv _glGetFixedv;

  void glGetLightxv(
    int light,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetLightxv ??= _dylib
        .lookupFunction<_c_glGetLightxv, _dart_glGetLightxv>('glGetLightxv');
    return _glGetLightxv(
      light,
      pname,
      params,
    );
  }

  _dart_glGetLightxv _glGetLightxv;

  void glGetMaterialxv(
    int face,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetMaterialxv ??=
        _dylib.lookupFunction<_c_glGetMaterialxv, _dart_glGetMaterialxv>(
            'glGetMaterialxv');
    return _glGetMaterialxv(
      face,
      pname,
      params,
    );
  }

  _dart_glGetMaterialxv _glGetMaterialxv;

  void glGetTexEnvxv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetTexEnvxv ??= _dylib
        .lookupFunction<_c_glGetTexEnvxv, _dart_glGetTexEnvxv>('glGetTexEnvxv');
    return _glGetTexEnvxv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetTexEnvxv _glGetTexEnvxv;

  void glGetTexParameterxv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetTexParameterxv ??= _dylib.lookupFunction<_c_glGetTexParameterxv,
        _dart_glGetTexParameterxv>('glGetTexParameterxv');
    return _glGetTexParameterxv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetTexParameterxv _glGetTexParameterxv;

  int glIsBuffer(
    int buffer,
  ) {
    _glIsBuffer ??=
        _dylib.lookupFunction<_c_glIsBuffer, _dart_glIsBuffer>('glIsBuffer');
    return _glIsBuffer(
      buffer,
    );
  }

  _dart_glIsBuffer _glIsBuffer;

  void glLightModelx(
    int pname,
    int param,
  ) {
    _glLightModelx ??= _dylib
        .lookupFunction<_c_glLightModelx, _dart_glLightModelx>('glLightModelx');
    return _glLightModelx(
      pname,
      param,
    );
  }

  _dart_glLightModelx _glLightModelx;

  void glLightModelxv(
    int pname,
    ffi.Pointer<ffi.Int32> param,
  ) {
    _glLightModelxv ??=
        _dylib.lookupFunction<_c_glLightModelxv, _dart_glLightModelxv>(
            'glLightModelxv');
    return _glLightModelxv(
      pname,
      param,
    );
  }

  _dart_glLightModelxv _glLightModelxv;

  void glLightx(
    int light,
    int pname,
    int param,
  ) {
    _glLightx ??=
        _dylib.lookupFunction<_c_glLightx, _dart_glLightx>('glLightx');
    return _glLightx(
      light,
      pname,
      param,
    );
  }

  _dart_glLightx _glLightx;

  void glLightxv(
    int light,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glLightxv ??=
        _dylib.lookupFunction<_c_glLightxv, _dart_glLightxv>('glLightxv');
    return _glLightxv(
      light,
      pname,
      params,
    );
  }

  _dart_glLightxv _glLightxv;

  void glLineWidthx(
    int width,
  ) {
    _glLineWidthx ??= _dylib
        .lookupFunction<_c_glLineWidthx, _dart_glLineWidthx>('glLineWidthx');
    return _glLineWidthx(
      width,
    );
  }

  _dart_glLineWidthx _glLineWidthx;

  void glLoadMatrixx(
    ffi.Pointer<ffi.Int32> m,
  ) {
    _glLoadMatrixx ??= _dylib
        .lookupFunction<_c_glLoadMatrixx, _dart_glLoadMatrixx>('glLoadMatrixx');
    return _glLoadMatrixx(
      m,
    );
  }

  _dart_glLoadMatrixx _glLoadMatrixx;

  void glMaterialx(
    int face,
    int pname,
    int param,
  ) {
    _glMaterialx ??=
        _dylib.lookupFunction<_c_glMaterialx, _dart_glMaterialx>('glMaterialx');
    return _glMaterialx(
      face,
      pname,
      param,
    );
  }

  _dart_glMaterialx _glMaterialx;

  void glMaterialxv(
    int face,
    int pname,
    ffi.Pointer<ffi.Int32> param,
  ) {
    _glMaterialxv ??= _dylib
        .lookupFunction<_c_glMaterialxv, _dart_glMaterialxv>('glMaterialxv');
    return _glMaterialxv(
      face,
      pname,
      param,
    );
  }

  _dart_glMaterialxv _glMaterialxv;

  void glMultMatrixx(
    ffi.Pointer<ffi.Int32> m,
  ) {
    _glMultMatrixx ??= _dylib
        .lookupFunction<_c_glMultMatrixx, _dart_glMultMatrixx>('glMultMatrixx');
    return _glMultMatrixx(
      m,
    );
  }

  _dart_glMultMatrixx _glMultMatrixx;

  void glMultiTexCoord4x(
    int texture,
    int s,
    int t,
    int r,
    int q,
  ) {
    _glMultiTexCoord4x ??=
        _dylib.lookupFunction<_c_glMultiTexCoord4x, _dart_glMultiTexCoord4x>(
            'glMultiTexCoord4x');
    return _glMultiTexCoord4x(
      texture,
      s,
      t,
      r,
      q,
    );
  }

  _dart_glMultiTexCoord4x _glMultiTexCoord4x;

  void glNormal3x(
    int nx,
    int ny,
    int nz,
  ) {
    _glNormal3x ??=
        _dylib.lookupFunction<_c_glNormal3x, _dart_glNormal3x>('glNormal3x');
    return _glNormal3x(
      nx,
      ny,
      nz,
    );
  }

  _dart_glNormal3x _glNormal3x;

  void glOrthox(
    int l,
    int r,
    int b,
    int t,
    int n,
    int f,
  ) {
    _glOrthox ??=
        _dylib.lookupFunction<_c_glOrthox, _dart_glOrthox>('glOrthox');
    return _glOrthox(
      l,
      r,
      b,
      t,
      n,
      f,
    );
  }

  _dart_glOrthox _glOrthox;

  void glPointParameterx(
    int pname,
    int param,
  ) {
    _glPointParameterx ??=
        _dylib.lookupFunction<_c_glPointParameterx, _dart_glPointParameterx>(
            'glPointParameterx');
    return _glPointParameterx(
      pname,
      param,
    );
  }

  _dart_glPointParameterx _glPointParameterx;

  void glPointParameterxv(
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glPointParameterxv ??=
        _dylib.lookupFunction<_c_glPointParameterxv, _dart_glPointParameterxv>(
            'glPointParameterxv');
    return _glPointParameterxv(
      pname,
      params,
    );
  }

  _dart_glPointParameterxv _glPointParameterxv;

  void glPointSizex(
    int size,
  ) {
    _glPointSizex ??= _dylib
        .lookupFunction<_c_glPointSizex, _dart_glPointSizex>('glPointSizex');
    return _glPointSizex(
      size,
    );
  }

  _dart_glPointSizex _glPointSizex;

  void glPolygonOffsetx(
    int factor,
    int units,
  ) {
    _glPolygonOffsetx ??=
        _dylib.lookupFunction<_c_glPolygonOffsetx, _dart_glPolygonOffsetx>(
            'glPolygonOffsetx');
    return _glPolygonOffsetx(
      factor,
      units,
    );
  }

  _dart_glPolygonOffsetx _glPolygonOffsetx;

  void glRotatex(
    int angle,
    int x,
    int y,
    int z,
  ) {
    _glRotatex ??=
        _dylib.lookupFunction<_c_glRotatex, _dart_glRotatex>('glRotatex');
    return _glRotatex(
      angle,
      x,
      y,
      z,
    );
  }

  _dart_glRotatex _glRotatex;

  void glSampleCoveragex(
    int value,
    int invert,
  ) {
    _glSampleCoveragex ??=
        _dylib.lookupFunction<_c_glSampleCoveragex, _dart_glSampleCoveragex>(
            'glSampleCoveragex');
    return _glSampleCoveragex(
      value,
      invert,
    );
  }

  _dart_glSampleCoveragex _glSampleCoveragex;

  void glScalex(
    int x,
    int y,
    int z,
  ) {
    _glScalex ??=
        _dylib.lookupFunction<_c_glScalex, _dart_glScalex>('glScalex');
    return _glScalex(
      x,
      y,
      z,
    );
  }

  _dart_glScalex _glScalex;

  void glTexEnvx(
    int target,
    int pname,
    int param,
  ) {
    _glTexEnvx ??=
        _dylib.lookupFunction<_c_glTexEnvx, _dart_glTexEnvx>('glTexEnvx');
    return _glTexEnvx(
      target,
      pname,
      param,
    );
  }

  _dart_glTexEnvx _glTexEnvx;

  void glTexEnvxv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glTexEnvxv ??=
        _dylib.lookupFunction<_c_glTexEnvxv, _dart_glTexEnvxv>('glTexEnvxv');
    return _glTexEnvxv(
      target,
      pname,
      params,
    );
  }

  _dart_glTexEnvxv _glTexEnvxv;

  void glTexParameterx(
    int target,
    int pname,
    int param,
  ) {
    _glTexParameterx ??=
        _dylib.lookupFunction<_c_glTexParameterx, _dart_glTexParameterx>(
            'glTexParameterx');
    return _glTexParameterx(
      target,
      pname,
      param,
    );
  }

  _dart_glTexParameterx _glTexParameterx;

  void glTexParameterxv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glTexParameterxv ??=
        _dylib.lookupFunction<_c_glTexParameterxv, _dart_glTexParameterxv>(
            'glTexParameterxv');
    return _glTexParameterxv(
      target,
      pname,
      params,
    );
  }

  _dart_glTexParameterxv _glTexParameterxv;

  void glTranslatex(
    int x,
    int y,
    int z,
  ) {
    _glTranslatex ??= _dylib
        .lookupFunction<_c_glTranslatex, _dart_glTranslatex>('glTranslatex');
    return _glTranslatex(
      x,
      y,
      z,
    );
  }

  _dart_glTranslatex _glTranslatex;

  void glPointSizePointerOES(
    int type,
    int stride,
    ffi.Pointer<ffi.Void> pointer,
  ) {
    _glPointSizePointerOES ??= _dylib.lookupFunction<_c_glPointSizePointerOES,
        _dart_glPointSizePointerOES>('glPointSizePointerOES');
    return _glPointSizePointerOES(
      type,
      stride,
      pointer,
    );
  }

  _dart_glPointSizePointerOES _glPointSizePointerOES;

  /// \brief Start tracking SDL memory allocations
  ///
  /// \note This should be called before any other SDL functions for complete tracking coverage
  int SDLTest_TrackAllocations() {
    _SDLTest_TrackAllocations ??= _dylib.lookupFunction<
        _c_SDLTest_TrackAllocations,
        _dart_SDLTest_TrackAllocations>('SDLTest_TrackAllocations');
    return _SDLTest_TrackAllocations();
  }

  _dart_SDLTest_TrackAllocations _SDLTest_TrackAllocations;

  /// \brief Print a log of any outstanding allocations
  ///
  /// \note This can be called after SDL_Quit()
  void SDLTest_LogAllocations() {
    _SDLTest_LogAllocations ??= _dylib.lookupFunction<_c_SDLTest_LogAllocations,
        _dart_SDLTest_LogAllocations>('SDLTest_LogAllocations');
    return _SDLTest_LogAllocations();
  }

  _dart_SDLTest_LogAllocations _SDLTest_LogAllocations;

  int SDL_MostSignificantBitIndex32(
    int x,
  ) {
    _SDL_MostSignificantBitIndex32 ??= _dylib.lookupFunction<
        _c_SDL_MostSignificantBitIndex32,
        _dart_SDL_MostSignificantBitIndex32>('SDL_MostSignificantBitIndex32');
    return _SDL_MostSignificantBitIndex32(
      x,
    );
  }

  _dart_SDL_MostSignificantBitIndex32 _SDL_MostSignificantBitIndex32;

  int SDL_HasExactlyOneBitSet32(
    int x,
  ) {
    _SDL_HasExactlyOneBitSet32 ??= _dylib.lookupFunction<
        _c_SDL_HasExactlyOneBitSet32,
        _dart_SDL_HasExactlyOneBitSet32>('SDL_HasExactlyOneBitSet32');
    return _SDL_HasExactlyOneBitSet32(
      x,
    );
  }

  _dart_SDL_HasExactlyOneBitSet32 _SDL_HasExactlyOneBitSet32;

  /// \brief Resets the assert summary counters to zero.
  void SDLTest_ResetAssertSummary() {
    _SDLTest_ResetAssertSummary ??= _dylib.lookupFunction<
        _c_SDLTest_ResetAssertSummary,
        _dart_SDLTest_ResetAssertSummary>('SDLTest_ResetAssertSummary');
    return _SDLTest_ResetAssertSummary();
  }

  _dart_SDLTest_ResetAssertSummary _SDLTest_ResetAssertSummary;

  /// \brief Logs summary of all assertions (total, pass, fail) since last reset as INFO or ERROR.
  void SDLTest_LogAssertSummary() {
    _SDLTest_LogAssertSummary ??= _dylib.lookupFunction<
        _c_SDLTest_LogAssertSummary,
        _dart_SDLTest_LogAssertSummary>('SDLTest_LogAssertSummary');
    return _SDLTest_LogAssertSummary();
  }

  _dart_SDLTest_LogAssertSummary _SDLTest_LogAssertSummary;

  /// \brief Converts the current assert summary state to a test result.
  ///
  /// \returns TEST_RESULT_PASSED, TEST_RESULT_FAILED, or TEST_RESULT_NO_ASSERT
  int SDLTest_AssertSummaryToTestResult() {
    _SDLTest_AssertSummaryToTestResult ??= _dylib.lookupFunction<
            _c_SDLTest_AssertSummaryToTestResult,
            _dart_SDLTest_AssertSummaryToTestResult>(
        'SDLTest_AssertSummaryToTestResult');
    return _SDLTest_AssertSummaryToTestResult();
  }

  _dart_SDLTest_AssertSummaryToTestResult _SDLTest_AssertSummaryToTestResult;

  /// \brief Dynamically load a Vulkan loader library.
  ///
  /// \param [in] path The platform dependent Vulkan loader library name, or
  /// \c NULL.
  ///
  /// \return \c 0 on success, or \c -1 if the library couldn't be loaded.
  ///
  /// If \a path is NULL SDL will use the value of the environment variable
  /// \c SDL_VULKAN_LIBRARY, if set, otherwise it loads the default Vulkan
  /// loader library.
  ///
  /// This should be called after initializing the video driver, but before
  /// creating any Vulkan windows. If no Vulkan loader library is loaded, the
  /// default library will be loaded upon creation of the first Vulkan window.
  ///
  /// \note It is fairly common for Vulkan applications to link with \a libvulkan
  /// instead of explicitly loading it at run time. This will work with
  /// SDL provided the application links to a dynamic library and both it
  /// and SDL use the same search path.
  ///
  /// \note If you specify a non-NULL \c path, an application should retrieve all
  /// of the Vulkan functions it uses from the dynamic library using
  /// \c SDL_Vulkan_GetVkGetInstanceProcAddr() unless you can guarantee
  /// \c path points to the same vulkan loader library the application
  /// linked to.
  ///
  /// \note On Apple devices, if \a path is NULL, SDL will attempt to find
  /// the vkGetInstanceProcAddr address within all the mach-o images of
  /// the current process. This is because it is fairly common for Vulkan
  /// applications to link with libvulkan (and historically MoltenVK was
  /// provided as a static library). If it is not found then, on macOS, SDL
  /// will attempt to load \c vulkan.framework/vulkan, \c libvulkan.1.dylib,
  /// followed by \c libvulkan.dylib, in that order.
  /// On iOS SDL will attempt to load \c libvulkan.dylib only. Applications
  /// using a dynamic framework or .dylib must ensure it is included in its
  /// application bundle.
  ///
  /// \note On non-Apple devices, application linking with a static libvulkan is
  /// not supported. Either do not link to the Vulkan loader or link to a
  /// dynamic library version.
  ///
  /// \note This function will fail if there are no working Vulkan drivers
  /// installed.
  ///
  /// \sa SDL_Vulkan_GetVkGetInstanceProcAddr()
  /// \sa SDL_Vulkan_UnloadLibrary()
  int SDL_Vulkan_LoadLibrary(
    ffi.Pointer<ffi.Int8> path,
  ) {
    _SDL_Vulkan_LoadLibrary ??= _dylib.lookupFunction<_c_SDL_Vulkan_LoadLibrary,
        _dart_SDL_Vulkan_LoadLibrary>('SDL_Vulkan_LoadLibrary');
    return _SDL_Vulkan_LoadLibrary(
      path,
    );
  }

  _dart_SDL_Vulkan_LoadLibrary _SDL_Vulkan_LoadLibrary;

  /// \brief Get the address of the \c vkGetInstanceProcAddr function.
  ///
  /// \note This should be called after either calling SDL_Vulkan_LoadLibrary
  /// or creating an SDL_Window with the SDL_WINDOW_VULKAN flag.
  ffi.Pointer<ffi.Void> SDL_Vulkan_GetVkGetInstanceProcAddr() {
    _SDL_Vulkan_GetVkGetInstanceProcAddr ??= _dylib.lookupFunction<
            _c_SDL_Vulkan_GetVkGetInstanceProcAddr,
            _dart_SDL_Vulkan_GetVkGetInstanceProcAddr>(
        'SDL_Vulkan_GetVkGetInstanceProcAddr');
    return _SDL_Vulkan_GetVkGetInstanceProcAddr();
  }

  _dart_SDL_Vulkan_GetVkGetInstanceProcAddr
      _SDL_Vulkan_GetVkGetInstanceProcAddr;

  /// \brief Unload the Vulkan loader library previously loaded by
  /// \c SDL_Vulkan_LoadLibrary().
  ///
  /// \sa SDL_Vulkan_LoadLibrary()
  void SDL_Vulkan_UnloadLibrary() {
    _SDL_Vulkan_UnloadLibrary ??= _dylib.lookupFunction<
        _c_SDL_Vulkan_UnloadLibrary,
        _dart_SDL_Vulkan_UnloadLibrary>('SDL_Vulkan_UnloadLibrary');
    return _SDL_Vulkan_UnloadLibrary();
  }

  _dart_SDL_Vulkan_UnloadLibrary _SDL_Vulkan_UnloadLibrary;

  /// \brief Get the names of the Vulkan instance extensions needed to create
  /// a surface with \c SDL_Vulkan_CreateSurface().
  ///
  /// \param [in]     \c NULL or window Window for which the required Vulkan instance
  /// extensions should be retrieved
  /// \param [in,out] pCount pointer to an \c unsigned related to the number of
  /// required Vulkan instance extensions
  /// \param [out]    pNames \c NULL or a pointer to an array to be filled with the
  /// required Vulkan instance extensions
  ///
  /// \return \c SDL_TRUE on success, \c SDL_FALSE on error.
  ///
  /// If \a pNames is \c NULL, then the number of required Vulkan instance
  /// extensions is returned in pCount. Otherwise, \a pCount must point to a
  /// variable set to the number of elements in the \a pNames array, and on
  /// return the variable is overwritten with the number of names actually
  /// written to \a pNames. If \a pCount is less than the number of required
  /// extensions, at most \a pCount structures will be written. If \a pCount
  /// is smaller than the number of required extensions, \c SDL_FALSE will be
  /// returned instead of \c SDL_TRUE, to indicate that not all the required
  /// extensions were returned.
  ///
  /// \note If \c window is not NULL, it will be checked against its creation
  /// flags to ensure that the Vulkan flag is present. This parameter
  /// will be removed in a future major release.
  ///
  /// \note The returned list of extensions will contain \c VK_KHR_surface
  /// and zero or more platform specific extensions
  ///
  /// \note The extension names queried here must be enabled when calling
  /// VkCreateInstance, otherwise surface creation will fail.
  ///
  /// \note \c window should have been created with the \c SDL_WINDOW_VULKAN flag
  /// or be \c NULL
  ///
  /// \code
  /// unsigned int count;
  /// // get count of required extensions
  /// if(!SDL_Vulkan_GetInstanceExtensions(NULL, &count, NULL))
  /// handle_error();
  ///
  /// static const char *const additionalExtensions[] =
  /// {
  /// VK_EXT_DEBUG_REPORT_EXTENSION_NAME, // example additional extension
  /// };
  /// size_t additionalExtensionsCount = sizeof(additionalExtensions) / sizeof(additionalExtensions[0]);
  /// size_t extensionCount = count + additionalExtensionsCount;
  /// const char **names = malloc(sizeof(const char *) * extensionCount);
  /// if(!names)
  /// handle_error();
  ///
  /// // get names of required extensions
  /// if(!SDL_Vulkan_GetInstanceExtensions(NULL, &count, names))
  /// handle_error();
  ///
  /// // copy additional extensions after required extensions
  /// for(size_t i = 0; i < additionalExtensionsCount; i++)
  /// names[i + count] = additionalExtensions[i];
  ///
  /// VkInstanceCreateInfo instanceCreateInfo = {};
  /// instanceCreateInfo.enabledExtensionCount = extensionCount;
  /// instanceCreateInfo.ppEnabledExtensionNames = names;
  /// // fill in rest of instanceCreateInfo
  ///
  /// VkInstance instance;
  /// // create the Vulkan instance
  /// VkResult result = vkCreateInstance(&instanceCreateInfo, NULL, &instance);
  /// free(names);
  /// \endcode
  ///
  /// \sa SDL_Vulkan_CreateSurface()
  int SDL_Vulkan_GetInstanceExtensions(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.Uint32> pCount,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> pNames,
  ) {
    _SDL_Vulkan_GetInstanceExtensions ??= _dylib.lookupFunction<
            _c_SDL_Vulkan_GetInstanceExtensions,
            _dart_SDL_Vulkan_GetInstanceExtensions>(
        'SDL_Vulkan_GetInstanceExtensions');
    return _SDL_Vulkan_GetInstanceExtensions(
      window,
      pCount,
      pNames,
    );
  }

  _dart_SDL_Vulkan_GetInstanceExtensions _SDL_Vulkan_GetInstanceExtensions;

  /// \brief Create a Vulkan rendering surface for a window.
  ///
  /// \param [in]  window   SDL_Window to which to attach the rendering surface.
  /// \param [in]  instance handle to the Vulkan instance to use.
  /// \param [out] surface  pointer to a VkSurfaceKHR handle to receive the
  /// handle of the newly created surface.
  ///
  /// \return \c SDL_TRUE on success, \c SDL_FALSE on error.
  ///
  /// \code
  /// VkInstance instance;
  /// SDL_Window *window;
  ///
  /// // create instance and window
  ///
  /// // create the Vulkan surface
  /// VkSurfaceKHR surface;
  /// if(!SDL_Vulkan_CreateSurface(window, instance, &surface))
  /// handle_error();
  /// \endcode
  ///
  /// \note \a window should have been created with the \c SDL_WINDOW_VULKAN flag.
  ///
  /// \note \a instance should have been created with the extensions returned
  /// by \c SDL_Vulkan_CreateSurface() enabled.
  ///
  /// \sa SDL_Vulkan_GetInstanceExtensions()
  int SDL_Vulkan_CreateSurface(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<VkInstance_T> instance,
    ffi.Pointer<ffi.Pointer<VkSurfaceKHR_T>> surface,
  ) {
    _SDL_Vulkan_CreateSurface ??= _dylib.lookupFunction<
        _c_SDL_Vulkan_CreateSurface,
        _dart_SDL_Vulkan_CreateSurface>('SDL_Vulkan_CreateSurface');
    return _SDL_Vulkan_CreateSurface(
      window,
      instance,
      surface,
    );
  }

  _dart_SDL_Vulkan_CreateSurface _SDL_Vulkan_CreateSurface;

  /// \brief Get the size of a window's underlying drawable in pixels (for use
  /// with setting viewport, scissor & etc).
  ///
  /// \param window   SDL_Window from which the drawable size should be queried
  /// \param w        Pointer to variable for storing the width in pixels,
  /// may be NULL
  /// \param h        Pointer to variable for storing the height in pixels,
  /// may be NULL
  ///
  /// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI
  /// drawable, i.e. the window was created with SDL_WINDOW_ALLOW_HIGHDPI on a
  /// platform with high-DPI support (Apple calls this "Retina"), and not disabled
  /// by the \c SDL_HINT_VIDEO_HIGHDPI_DISABLED hint.
  ///
  /// \note On macOS high-DPI support must be enabled for an application by
  /// setting NSHighResolutionCapable to true in its Info.plist.
  ///
  /// \sa SDL_GetWindowSize()
  /// \sa SDL_CreateWindow()
  void SDL_Vulkan_GetDrawableSize(
    ffi.Pointer<SDL_Window> window,
    ffi.Pointer<ffi.Int32> w,
    ffi.Pointer<ffi.Int32> h,
  ) {
    _SDL_Vulkan_GetDrawableSize ??= _dylib.lookupFunction<
        _c_SDL_Vulkan_GetDrawableSize,
        _dart_SDL_Vulkan_GetDrawableSize>('SDL_Vulkan_GetDrawableSize');
    return _SDL_Vulkan_GetDrawableSize(
      window,
      w,
      h,
    );
  }

  _dart_SDL_Vulkan_GetDrawableSize _SDL_Vulkan_GetDrawableSize;

  ffi.Pointer<XClassHint> XAllocClassHint() {
    _XAllocClassHint ??=
        _dylib.lookupFunction<_c_XAllocClassHint, _dart_XAllocClassHint>(
            'XAllocClassHint');
    return _XAllocClassHint();
  }

  _dart_XAllocClassHint _XAllocClassHint;

  ffi.Pointer<XIconSize> XAllocIconSize() {
    _XAllocIconSize ??=
        _dylib.lookupFunction<_c_XAllocIconSize, _dart_XAllocIconSize>(
            'XAllocIconSize');
    return _XAllocIconSize();
  }

  _dart_XAllocIconSize _XAllocIconSize;

  ffi.Pointer<XSizeHints> XAllocSizeHints() {
    _XAllocSizeHints ??=
        _dylib.lookupFunction<_c_XAllocSizeHints, _dart_XAllocSizeHints>(
            'XAllocSizeHints');
    return _XAllocSizeHints();
  }

  _dart_XAllocSizeHints _XAllocSizeHints;

  ffi.Pointer<XStandardColormap> XAllocStandardColormap() {
    _XAllocStandardColormap ??= _dylib.lookupFunction<_c_XAllocStandardColormap,
        _dart_XAllocStandardColormap>('XAllocStandardColormap');
    return _XAllocStandardColormap();
  }

  _dart_XAllocStandardColormap _XAllocStandardColormap;

  ffi.Pointer<XWMHints> XAllocWMHints() {
    _XAllocWMHints ??= _dylib
        .lookupFunction<_c_XAllocWMHints, _dart_XAllocWMHints>('XAllocWMHints');
    return _XAllocWMHints();
  }

  _dart_XAllocWMHints _XAllocWMHints;

  int XClipBox(
    ffi.Pointer<_XRegion> arg0,
    ffi.Pointer<XRectangle> arg1,
  ) {
    _XClipBox ??=
        _dylib.lookupFunction<_c_XClipBox, _dart_XClipBox>('XClipBox');
    return _XClipBox(
      arg0,
      arg1,
    );
  }

  _dart_XClipBox _XClipBox;

  ffi.Pointer<_XRegion> XCreateRegion() {
    _XCreateRegion ??= _dylib
        .lookupFunction<_c_XCreateRegion, _dart_XCreateRegion>('XCreateRegion');
    return _XCreateRegion();
  }

  _dart_XCreateRegion _XCreateRegion;

  ffi.Pointer<ffi.Int8> XDefaultString() {
    _XDefaultString ??=
        _dylib.lookupFunction<_c_XDefaultString, _dart_XDefaultString>(
            'XDefaultString');
    return _XDefaultString();
  }

  _dart_XDefaultString _XDefaultString;

  int XDeleteContext(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XDeleteContext ??=
        _dylib.lookupFunction<_c_XDeleteContext, _dart_XDeleteContext>(
            'XDeleteContext');
    return _XDeleteContext(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XDeleteContext _XDeleteContext;

  int XDestroyRegion(
    ffi.Pointer<_XRegion> arg0,
  ) {
    _XDestroyRegion ??=
        _dylib.lookupFunction<_c_XDestroyRegion, _dart_XDestroyRegion>(
            'XDestroyRegion');
    return _XDestroyRegion(
      arg0,
    );
  }

  _dart_XDestroyRegion _XDestroyRegion;

  int XEmptyRegion(
    ffi.Pointer<_XRegion> arg0,
  ) {
    _XEmptyRegion ??= _dylib
        .lookupFunction<_c_XEmptyRegion, _dart_XEmptyRegion>('XEmptyRegion');
    return _XEmptyRegion(
      arg0,
    );
  }

  _dart_XEmptyRegion _XEmptyRegion;

  int XEqualRegion(
    ffi.Pointer<_XRegion> arg0,
    ffi.Pointer<_XRegion> arg1,
  ) {
    _XEqualRegion ??= _dylib
        .lookupFunction<_c_XEqualRegion, _dart_XEqualRegion>('XEqualRegion');
    return _XEqualRegion(
      arg0,
      arg1,
    );
  }

  _dart_XEqualRegion _XEqualRegion;

  int XFindContext(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
  ) {
    _XFindContext ??= _dylib
        .lookupFunction<_c_XFindContext, _dart_XFindContext>('XFindContext');
    return _XFindContext(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XFindContext _XFindContext;

  int XGetClassHint(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XClassHint> arg2,
  ) {
    _XGetClassHint ??= _dylib
        .lookupFunction<_c_XGetClassHint, _dart_XGetClassHint>('XGetClassHint');
    return _XGetClassHint(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetClassHint _XGetClassHint;

  int XGetIconSizes(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<XIconSize>> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XGetIconSizes ??= _dylib
        .lookupFunction<_c_XGetIconSizes, _dart_XGetIconSizes>('XGetIconSizes');
    return _XGetIconSizes(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetIconSizes _XGetIconSizes;

  int XGetNormalHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
  ) {
    _XGetNormalHints ??=
        _dylib.lookupFunction<_c_XGetNormalHints, _dart_XGetNormalHints>(
            'XGetNormalHints');
    return _XGetNormalHints(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetNormalHints _XGetNormalHints;

  int XGetRGBColormaps(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<XStandardColormap>> arg2,
    ffi.Pointer<ffi.Int32> arg3,
    int arg4,
  ) {
    _XGetRGBColormaps ??=
        _dylib.lookupFunction<_c_XGetRGBColormaps, _dart_XGetRGBColormaps>(
            'XGetRGBColormaps');
    return _XGetRGBColormaps(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XGetRGBColormaps _XGetRGBColormaps;

  int XGetSizeHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
    int arg3,
  ) {
    _XGetSizeHints ??= _dylib
        .lookupFunction<_c_XGetSizeHints, _dart_XGetSizeHints>('XGetSizeHints');
    return _XGetSizeHints(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetSizeHints _XGetSizeHints;

  int XGetStandardColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XStandardColormap> arg2,
    int arg3,
  ) {
    _XGetStandardColormap ??= _dylib.lookupFunction<_c_XGetStandardColormap,
        _dart_XGetStandardColormap>('XGetStandardColormap');
    return _XGetStandardColormap(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetStandardColormap _XGetStandardColormap;

  int XGetTextProperty(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
    int arg3,
  ) {
    _XGetTextProperty ??=
        _dylib.lookupFunction<_c_XGetTextProperty, _dart_XGetTextProperty>(
            'XGetTextProperty');
    return _XGetTextProperty(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetTextProperty _XGetTextProperty;

  ffi.Pointer<XVisualInfo> XGetVisualInfo(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XVisualInfo> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XGetVisualInfo ??=
        _dylib.lookupFunction<_c_XGetVisualInfo, _dart_XGetVisualInfo>(
            'XGetVisualInfo');
    return _XGetVisualInfo(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetVisualInfo _XGetVisualInfo;

  int XGetWMClientMachine(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
  ) {
    _XGetWMClientMachine ??= _dylib.lookupFunction<_c_XGetWMClientMachine,
        _dart_XGetWMClientMachine>('XGetWMClientMachine');
    return _XGetWMClientMachine(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetWMClientMachine _XGetWMClientMachine;

  ffi.Pointer<XWMHints> XGetWMHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XGetWMHints ??=
        _dylib.lookupFunction<_c_XGetWMHints, _dart_XGetWMHints>('XGetWMHints');
    return _XGetWMHints(
      arg0,
      arg1,
    );
  }

  _dart_XGetWMHints _XGetWMHints;

  int XGetWMIconName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
  ) {
    _XGetWMIconName ??=
        _dylib.lookupFunction<_c_XGetWMIconName, _dart_XGetWMIconName>(
            'XGetWMIconName');
    return _XGetWMIconName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetWMIconName _XGetWMIconName;

  int XGetWMName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
  ) {
    _XGetWMName ??=
        _dylib.lookupFunction<_c_XGetWMName, _dart_XGetWMName>('XGetWMName');
    return _XGetWMName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetWMName _XGetWMName;

  int XGetWMNormalHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
    ffi.Pointer<ffi.Int64> arg3,
  ) {
    _XGetWMNormalHints ??=
        _dylib.lookupFunction<_c_XGetWMNormalHints, _dart_XGetWMNormalHints>(
            'XGetWMNormalHints');
    return _XGetWMNormalHints(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetWMNormalHints _XGetWMNormalHints;

  int XGetWMSizeHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
    ffi.Pointer<ffi.Int64> arg3,
    int arg4,
  ) {
    _XGetWMSizeHints ??=
        _dylib.lookupFunction<_c_XGetWMSizeHints, _dart_XGetWMSizeHints>(
            'XGetWMSizeHints');
    return _XGetWMSizeHints(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XGetWMSizeHints _XGetWMSizeHints;

  int XGetZoomHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
  ) {
    _XGetZoomHints ??= _dylib
        .lookupFunction<_c_XGetZoomHints, _dart_XGetZoomHints>('XGetZoomHints');
    return _XGetZoomHints(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetZoomHints _XGetZoomHints;

  int XIntersectRegion(
    ffi.Pointer<_XRegion> arg0,
    ffi.Pointer<_XRegion> arg1,
    ffi.Pointer<_XRegion> arg2,
  ) {
    _XIntersectRegion ??=
        _dylib.lookupFunction<_c_XIntersectRegion, _dart_XIntersectRegion>(
            'XIntersectRegion');
    return _XIntersectRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XIntersectRegion _XIntersectRegion;

  void XConvertCase(
    int arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    _XConvertCase ??= _dylib
        .lookupFunction<_c_XConvertCase, _dart_XConvertCase>('XConvertCase');
    return _XConvertCase(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XConvertCase _XConvertCase;

  int XLookupString(
    ffi.Pointer<XKeyEvent> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Uint64> arg3,
    ffi.Pointer<XComposeStatus> arg4,
  ) {
    _XLookupString ??= _dylib
        .lookupFunction<_c_XLookupString, _dart_XLookupString>('XLookupString');
    return _XLookupString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XLookupString _XLookupString;

  int XMatchVisualInfo(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<XVisualInfo> arg4,
  ) {
    _XMatchVisualInfo ??=
        _dylib.lookupFunction<_c_XMatchVisualInfo, _dart_XMatchVisualInfo>(
            'XMatchVisualInfo');
    return _XMatchVisualInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XMatchVisualInfo _XMatchVisualInfo;

  int XOffsetRegion(
    ffi.Pointer<_XRegion> arg0,
    int arg1,
    int arg2,
  ) {
    _XOffsetRegion ??= _dylib
        .lookupFunction<_c_XOffsetRegion, _dart_XOffsetRegion>('XOffsetRegion');
    return _XOffsetRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XOffsetRegion _XOffsetRegion;

  int XPointInRegion(
    ffi.Pointer<_XRegion> arg0,
    int arg1,
    int arg2,
  ) {
    _XPointInRegion ??=
        _dylib.lookupFunction<_c_XPointInRegion, _dart_XPointInRegion>(
            'XPointInRegion');
    return _XPointInRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XPointInRegion _XPointInRegion;

  ffi.Pointer<_XRegion> XPolygonRegion(
    ffi.Pointer<XPoint> arg0,
    int arg1,
    int arg2,
  ) {
    _XPolygonRegion ??=
        _dylib.lookupFunction<_c_XPolygonRegion, _dart_XPolygonRegion>(
            'XPolygonRegion');
    return _XPolygonRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XPolygonRegion _XPolygonRegion;

  int XRectInRegion(
    ffi.Pointer<_XRegion> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XRectInRegion ??= _dylib
        .lookupFunction<_c_XRectInRegion, _dart_XRectInRegion>('XRectInRegion');
    return _XRectInRegion(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XRectInRegion _XRectInRegion;

  int XSaveContext(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    _XSaveContext ??= _dylib
        .lookupFunction<_c_XSaveContext, _dart_XSaveContext>('XSaveContext');
    return _XSaveContext(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSaveContext _XSaveContext;

  int XSetClassHint(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XClassHint> arg2,
  ) {
    _XSetClassHint ??= _dylib
        .lookupFunction<_c_XSetClassHint, _dart_XSetClassHint>('XSetClassHint');
    return _XSetClassHint(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetClassHint _XSetClassHint;

  int XSetIconSizes(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XIconSize> arg2,
    int arg3,
  ) {
    _XSetIconSizes ??= _dylib
        .lookupFunction<_c_XSetIconSizes, _dart_XSetIconSizes>('XSetIconSizes');
    return _XSetIconSizes(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetIconSizes _XSetIconSizes;

  int XSetNormalHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
  ) {
    _XSetNormalHints ??=
        _dylib.lookupFunction<_c_XSetNormalHints, _dart_XSetNormalHints>(
            'XSetNormalHints');
    return _XSetNormalHints(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetNormalHints _XSetNormalHints;

  void XSetRGBColormaps(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XStandardColormap> arg2,
    int arg3,
    int arg4,
  ) {
    _XSetRGBColormaps ??=
        _dylib.lookupFunction<_c_XSetRGBColormaps, _dart_XSetRGBColormaps>(
            'XSetRGBColormaps');
    return _XSetRGBColormaps(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XSetRGBColormaps _XSetRGBColormaps;

  int XSetSizeHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
    int arg3,
  ) {
    _XSetSizeHints ??= _dylib
        .lookupFunction<_c_XSetSizeHints, _dart_XSetSizeHints>('XSetSizeHints');
    return _XSetSizeHints(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetSizeHints _XSetSizeHints;

  int XSetStandardProperties(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg5,
    int arg6,
    ffi.Pointer<XSizeHints> arg7,
  ) {
    _XSetStandardProperties ??= _dylib.lookupFunction<_c_XSetStandardProperties,
        _dart_XSetStandardProperties>('XSetStandardProperties');
    return _XSetStandardProperties(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XSetStandardProperties _XSetStandardProperties;

  void XSetTextProperty(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
    int arg3,
  ) {
    _XSetTextProperty ??=
        _dylib.lookupFunction<_c_XSetTextProperty, _dart_XSetTextProperty>(
            'XSetTextProperty');
    return _XSetTextProperty(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetTextProperty _XSetTextProperty;

  void XSetWMClientMachine(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
  ) {
    _XSetWMClientMachine ??= _dylib.lookupFunction<_c_XSetWMClientMachine,
        _dart_XSetWMClientMachine>('XSetWMClientMachine');
    return _XSetWMClientMachine(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWMClientMachine _XSetWMClientMachine;

  int XSetWMHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XWMHints> arg2,
  ) {
    _XSetWMHints ??=
        _dylib.lookupFunction<_c_XSetWMHints, _dart_XSetWMHints>('XSetWMHints');
    return _XSetWMHints(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWMHints _XSetWMHints;

  void XSetWMIconName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
  ) {
    _XSetWMIconName ??=
        _dylib.lookupFunction<_c_XSetWMIconName, _dart_XSetWMIconName>(
            'XSetWMIconName');
    return _XSetWMIconName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWMIconName _XSetWMIconName;

  void XSetWMName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
  ) {
    _XSetWMName ??=
        _dylib.lookupFunction<_c_XSetWMName, _dart_XSetWMName>('XSetWMName');
    return _XSetWMName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWMName _XSetWMName;

  void XSetWMNormalHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
  ) {
    _XSetWMNormalHints ??=
        _dylib.lookupFunction<_c_XSetWMNormalHints, _dart_XSetWMNormalHints>(
            'XSetWMNormalHints');
    return _XSetWMNormalHints(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWMNormalHints _XSetWMNormalHints;

  void XSetWMProperties(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
    ffi.Pointer<XTextProperty> arg3,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
    int arg5,
    ffi.Pointer<XSizeHints> arg6,
    ffi.Pointer<XWMHints> arg7,
    ffi.Pointer<XClassHint> arg8,
  ) {
    _XSetWMProperties ??=
        _dylib.lookupFunction<_c_XSetWMProperties, _dart_XSetWMProperties>(
            'XSetWMProperties');
    return _XSetWMProperties(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XSetWMProperties _XSetWMProperties;

  void XmbSetWMProperties(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
    int arg5,
    ffi.Pointer<XSizeHints> arg6,
    ffi.Pointer<XWMHints> arg7,
    ffi.Pointer<XClassHint> arg8,
  ) {
    _XmbSetWMProperties ??=
        _dylib.lookupFunction<_c_XmbSetWMProperties, _dart_XmbSetWMProperties>(
            'XmbSetWMProperties');
    return _XmbSetWMProperties(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XmbSetWMProperties _XmbSetWMProperties;

  void Xutf8SetWMProperties(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
    int arg5,
    ffi.Pointer<XSizeHints> arg6,
    ffi.Pointer<XWMHints> arg7,
    ffi.Pointer<XClassHint> arg8,
  ) {
    _Xutf8SetWMProperties ??= _dylib.lookupFunction<_c_Xutf8SetWMProperties,
        _dart_Xutf8SetWMProperties>('Xutf8SetWMProperties');
    return _Xutf8SetWMProperties(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_Xutf8SetWMProperties _Xutf8SetWMProperties;

  void XSetWMSizeHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
    int arg3,
  ) {
    _XSetWMSizeHints ??=
        _dylib.lookupFunction<_c_XSetWMSizeHints, _dart_XSetWMSizeHints>(
            'XSetWMSizeHints');
    return _XSetWMSizeHints(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetWMSizeHints _XSetWMSizeHints;

  int XSetRegion(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    ffi.Pointer<_XRegion> arg2,
  ) {
    _XSetRegion ??=
        _dylib.lookupFunction<_c_XSetRegion, _dart_XSetRegion>('XSetRegion');
    return _XSetRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetRegion _XSetRegion;

  void XSetStandardColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XStandardColormap> arg2,
    int arg3,
  ) {
    _XSetStandardColormap ??= _dylib.lookupFunction<_c_XSetStandardColormap,
        _dart_XSetStandardColormap>('XSetStandardColormap');
    return _XSetStandardColormap(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetStandardColormap _XSetStandardColormap;

  int XSetZoomHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
  ) {
    _XSetZoomHints ??= _dylib
        .lookupFunction<_c_XSetZoomHints, _dart_XSetZoomHints>('XSetZoomHints');
    return _XSetZoomHints(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetZoomHints _XSetZoomHints;

  int XShrinkRegion(
    ffi.Pointer<_XRegion> arg0,
    int arg1,
    int arg2,
  ) {
    _XShrinkRegion ??= _dylib
        .lookupFunction<_c_XShrinkRegion, _dart_XShrinkRegion>('XShrinkRegion');
    return _XShrinkRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XShrinkRegion _XShrinkRegion;

  int XStringListToTextProperty(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
  ) {
    _XStringListToTextProperty ??= _dylib.lookupFunction<
        _c_XStringListToTextProperty,
        _dart_XStringListToTextProperty>('XStringListToTextProperty');
    return _XStringListToTextProperty(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XStringListToTextProperty _XStringListToTextProperty;

  int XSubtractRegion(
    ffi.Pointer<_XRegion> arg0,
    ffi.Pointer<_XRegion> arg1,
    ffi.Pointer<_XRegion> arg2,
  ) {
    _XSubtractRegion ??=
        _dylib.lookupFunction<_c_XSubtractRegion, _dart_XSubtractRegion>(
            'XSubtractRegion');
    return _XSubtractRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSubtractRegion _XSubtractRegion;

  int XmbTextListToTextProperty(
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> list,
    int count,
    int style,
    ffi.Pointer<XTextProperty> text_prop_return,
  ) {
    _XmbTextListToTextProperty ??= _dylib.lookupFunction<
        _c_XmbTextListToTextProperty,
        _dart_XmbTextListToTextProperty>('XmbTextListToTextProperty');
    return _XmbTextListToTextProperty(
      display,
      list,
      count,
      style,
      text_prop_return,
    );
  }

  _dart_XmbTextListToTextProperty _XmbTextListToTextProperty;

  int XwcTextListToTextProperty(
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> list,
    int count,
    int style,
    ffi.Pointer<XTextProperty> text_prop_return,
  ) {
    _XwcTextListToTextProperty ??= _dylib.lookupFunction<
        _c_XwcTextListToTextProperty,
        _dart_XwcTextListToTextProperty>('XwcTextListToTextProperty');
    return _XwcTextListToTextProperty(
      display,
      list,
      count,
      style,
      text_prop_return,
    );
  }

  _dart_XwcTextListToTextProperty _XwcTextListToTextProperty;

  int Xutf8TextListToTextProperty(
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> list,
    int count,
    int style,
    ffi.Pointer<XTextProperty> text_prop_return,
  ) {
    _Xutf8TextListToTextProperty ??= _dylib.lookupFunction<
        _c_Xutf8TextListToTextProperty,
        _dart_Xutf8TextListToTextProperty>('Xutf8TextListToTextProperty');
    return _Xutf8TextListToTextProperty(
      display,
      list,
      count,
      style,
      text_prop_return,
    );
  }

  _dart_Xutf8TextListToTextProperty _Xutf8TextListToTextProperty;

  void XwcFreeStringList(
    ffi.Pointer<ffi.Pointer<ffi.Int32>> list,
  ) {
    _XwcFreeStringList ??=
        _dylib.lookupFunction<_c_XwcFreeStringList, _dart_XwcFreeStringList>(
            'XwcFreeStringList');
    return _XwcFreeStringList(
      list,
    );
  }

  _dart_XwcFreeStringList _XwcFreeStringList;

  int XTextPropertyToStringList(
    ffi.Pointer<XTextProperty> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XTextPropertyToStringList ??= _dylib.lookupFunction<
        _c_XTextPropertyToStringList,
        _dart_XTextPropertyToStringList>('XTextPropertyToStringList');
    return _XTextPropertyToStringList(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XTextPropertyToStringList _XTextPropertyToStringList;

  int XmbTextPropertyToTextList(
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<XTextProperty> text_prop,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_return,
    ffi.Pointer<ffi.Int32> count_return,
  ) {
    _XmbTextPropertyToTextList ??= _dylib.lookupFunction<
        _c_XmbTextPropertyToTextList,
        _dart_XmbTextPropertyToTextList>('XmbTextPropertyToTextList');
    return _XmbTextPropertyToTextList(
      display,
      text_prop,
      list_return,
      count_return,
    );
  }

  _dart_XmbTextPropertyToTextList _XmbTextPropertyToTextList;

  int XwcTextPropertyToTextList(
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<XTextProperty> text_prop,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> list_return,
    ffi.Pointer<ffi.Int32> count_return,
  ) {
    _XwcTextPropertyToTextList ??= _dylib.lookupFunction<
        _c_XwcTextPropertyToTextList,
        _dart_XwcTextPropertyToTextList>('XwcTextPropertyToTextList');
    return _XwcTextPropertyToTextList(
      display,
      text_prop,
      list_return,
      count_return,
    );
  }

  _dart_XwcTextPropertyToTextList _XwcTextPropertyToTextList;

  int Xutf8TextPropertyToTextList(
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<XTextProperty> text_prop,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_return,
    ffi.Pointer<ffi.Int32> count_return,
  ) {
    _Xutf8TextPropertyToTextList ??= _dylib.lookupFunction<
        _c_Xutf8TextPropertyToTextList,
        _dart_Xutf8TextPropertyToTextList>('Xutf8TextPropertyToTextList');
    return _Xutf8TextPropertyToTextList(
      display,
      text_prop,
      list_return,
      count_return,
    );
  }

  _dart_Xutf8TextPropertyToTextList _Xutf8TextPropertyToTextList;

  int XUnionRectWithRegion(
    ffi.Pointer<XRectangle> arg0,
    ffi.Pointer<_XRegion> arg1,
    ffi.Pointer<_XRegion> arg2,
  ) {
    _XUnionRectWithRegion ??= _dylib.lookupFunction<_c_XUnionRectWithRegion,
        _dart_XUnionRectWithRegion>('XUnionRectWithRegion');
    return _XUnionRectWithRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XUnionRectWithRegion _XUnionRectWithRegion;

  int XUnionRegion(
    ffi.Pointer<_XRegion> arg0,
    ffi.Pointer<_XRegion> arg1,
    ffi.Pointer<_XRegion> arg2,
  ) {
    _XUnionRegion ??= _dylib
        .lookupFunction<_c_XUnionRegion, _dart_XUnionRegion>('XUnionRegion');
    return _XUnionRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XUnionRegion _XUnionRegion;

  int XWMGeometry(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
    ffi.Pointer<XSizeHints> arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<ffi.Int32> arg7,
    ffi.Pointer<ffi.Int32> arg8,
    ffi.Pointer<ffi.Int32> arg9,
    ffi.Pointer<ffi.Int32> arg10,
  ) {
    _XWMGeometry ??=
        _dylib.lookupFunction<_c_XWMGeometry, _dart_XWMGeometry>('XWMGeometry');
    return _XWMGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  _dart_XWMGeometry _XWMGeometry;

  int XXorRegion(
    ffi.Pointer<_XRegion> arg0,
    ffi.Pointer<_XRegion> arg1,
    ffi.Pointer<_XRegion> arg2,
  ) {
    _XXorRegion ??=
        _dylib.lookupFunction<_c_XXorRegion, _dart_XXorRegion>('XXorRegion');
    return _XXorRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XXorRegion _XXorRegion;

  int eglChooseConfig(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Int32> attrib_list,
    ffi.Pointer<ffi.Pointer<ffi.Void>> configs,
    int config_size,
    ffi.Pointer<ffi.Int32> num_config,
  ) {
    _eglChooseConfig ??=
        _dylib.lookupFunction<_c_eglChooseConfig, _dart_eglChooseConfig>(
            'eglChooseConfig');
    return _eglChooseConfig(
      dpy,
      attrib_list,
      configs,
      config_size,
      num_config,
    );
  }

  _dart_eglChooseConfig _eglChooseConfig;

  int eglCopyBuffers(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> surface,
    int target,
  ) {
    _eglCopyBuffers ??=
        _dylib.lookupFunction<_c_eglCopyBuffers, _dart_eglCopyBuffers>(
            'eglCopyBuffers');
    return _eglCopyBuffers(
      dpy,
      surface,
      target,
    );
  }

  _dart_eglCopyBuffers _eglCopyBuffers;

  ffi.Pointer<ffi.Void> eglCreateContext(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> config,
    ffi.Pointer<ffi.Void> share_context,
    ffi.Pointer<ffi.Int32> attrib_list,
  ) {
    _eglCreateContext ??=
        _dylib.lookupFunction<_c_eglCreateContext, _dart_eglCreateContext>(
            'eglCreateContext');
    return _eglCreateContext(
      dpy,
      config,
      share_context,
      attrib_list,
    );
  }

  _dart_eglCreateContext _eglCreateContext;

  ffi.Pointer<ffi.Void> eglCreatePbufferSurface(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> config,
    ffi.Pointer<ffi.Int32> attrib_list,
  ) {
    _eglCreatePbufferSurface ??= _dylib.lookupFunction<
        _c_eglCreatePbufferSurface,
        _dart_eglCreatePbufferSurface>('eglCreatePbufferSurface');
    return _eglCreatePbufferSurface(
      dpy,
      config,
      attrib_list,
    );
  }

  _dart_eglCreatePbufferSurface _eglCreatePbufferSurface;

  ffi.Pointer<ffi.Void> eglCreatePixmapSurface(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> config,
    int pixmap,
    ffi.Pointer<ffi.Int32> attrib_list,
  ) {
    _eglCreatePixmapSurface ??= _dylib.lookupFunction<_c_eglCreatePixmapSurface,
        _dart_eglCreatePixmapSurface>('eglCreatePixmapSurface');
    return _eglCreatePixmapSurface(
      dpy,
      config,
      pixmap,
      attrib_list,
    );
  }

  _dart_eglCreatePixmapSurface _eglCreatePixmapSurface;

  ffi.Pointer<ffi.Void> eglCreateWindowSurface(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> config,
    int win,
    ffi.Pointer<ffi.Int32> attrib_list,
  ) {
    _eglCreateWindowSurface ??= _dylib.lookupFunction<_c_eglCreateWindowSurface,
        _dart_eglCreateWindowSurface>('eglCreateWindowSurface');
    return _eglCreateWindowSurface(
      dpy,
      config,
      win,
      attrib_list,
    );
  }

  _dart_eglCreateWindowSurface _eglCreateWindowSurface;

  int eglDestroyContext(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    _eglDestroyContext ??=
        _dylib.lookupFunction<_c_eglDestroyContext, _dart_eglDestroyContext>(
            'eglDestroyContext');
    return _eglDestroyContext(
      dpy,
      ctx,
    );
  }

  _dart_eglDestroyContext _eglDestroyContext;

  int eglDestroySurface(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> surface,
  ) {
    _eglDestroySurface ??=
        _dylib.lookupFunction<_c_eglDestroySurface, _dart_eglDestroySurface>(
            'eglDestroySurface');
    return _eglDestroySurface(
      dpy,
      surface,
    );
  }

  _dart_eglDestroySurface _eglDestroySurface;

  int eglGetConfigAttrib(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> config,
    int attribute,
    ffi.Pointer<ffi.Int32> value,
  ) {
    _eglGetConfigAttrib ??=
        _dylib.lookupFunction<_c_eglGetConfigAttrib, _dart_eglGetConfigAttrib>(
            'eglGetConfigAttrib');
    return _eglGetConfigAttrib(
      dpy,
      config,
      attribute,
      value,
    );
  }

  _dart_eglGetConfigAttrib _eglGetConfigAttrib;

  int eglGetConfigs(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Pointer<ffi.Void>> configs,
    int config_size,
    ffi.Pointer<ffi.Int32> num_config,
  ) {
    _eglGetConfigs ??= _dylib
        .lookupFunction<_c_eglGetConfigs, _dart_eglGetConfigs>('eglGetConfigs');
    return _eglGetConfigs(
      dpy,
      configs,
      config_size,
      num_config,
    );
  }

  _dart_eglGetConfigs _eglGetConfigs;

  ffi.Pointer<ffi.Void> eglGetCurrentDisplay() {
    _eglGetCurrentDisplay ??= _dylib.lookupFunction<_c_eglGetCurrentDisplay,
        _dart_eglGetCurrentDisplay>('eglGetCurrentDisplay');
    return _eglGetCurrentDisplay();
  }

  _dart_eglGetCurrentDisplay _eglGetCurrentDisplay;

  ffi.Pointer<ffi.Void> eglGetCurrentSurface(
    int readdraw,
  ) {
    _eglGetCurrentSurface ??= _dylib.lookupFunction<_c_eglGetCurrentSurface,
        _dart_eglGetCurrentSurface>('eglGetCurrentSurface');
    return _eglGetCurrentSurface(
      readdraw,
    );
  }

  _dart_eglGetCurrentSurface _eglGetCurrentSurface;

  ffi.Pointer<ffi.Void> eglGetDisplay(
    ffi.Pointer<_XDisplay> display_id,
  ) {
    _eglGetDisplay ??= _dylib
        .lookupFunction<_c_eglGetDisplay, _dart_eglGetDisplay>('eglGetDisplay');
    return _eglGetDisplay(
      display_id,
    );
  }

  _dart_eglGetDisplay _eglGetDisplay;

  int eglGetError() {
    _eglGetError ??=
        _dylib.lookupFunction<_c_eglGetError, _dart_eglGetError>('eglGetError');
    return _eglGetError();
  }

  _dart_eglGetError _eglGetError;

  ffi.Pointer<ffi.NativeFunction<__eglMustCastToProperFunctionPointerType>>
      eglGetProcAddress(
    ffi.Pointer<ffi.Int8> procname,
  ) {
    _eglGetProcAddress ??=
        _dylib.lookupFunction<_c_eglGetProcAddress, _dart_eglGetProcAddress>(
            'eglGetProcAddress');
    return _eglGetProcAddress(
      procname,
    );
  }

  _dart_eglGetProcAddress _eglGetProcAddress;

  int eglInitialize(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Int32> major,
    ffi.Pointer<ffi.Int32> minor,
  ) {
    _eglInitialize ??= _dylib
        .lookupFunction<_c_eglInitialize, _dart_eglInitialize>('eglInitialize');
    return _eglInitialize(
      dpy,
      major,
      minor,
    );
  }

  _dart_eglInitialize _eglInitialize;

  int eglMakeCurrent(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> draw,
    ffi.Pointer<ffi.Void> read,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    _eglMakeCurrent ??=
        _dylib.lookupFunction<_c_eglMakeCurrent, _dart_eglMakeCurrent>(
            'eglMakeCurrent');
    return _eglMakeCurrent(
      dpy,
      draw,
      read,
      ctx,
    );
  }

  _dart_eglMakeCurrent _eglMakeCurrent;

  int eglQueryContext(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> ctx,
    int attribute,
    ffi.Pointer<ffi.Int32> value,
  ) {
    _eglQueryContext ??=
        _dylib.lookupFunction<_c_eglQueryContext, _dart_eglQueryContext>(
            'eglQueryContext');
    return _eglQueryContext(
      dpy,
      ctx,
      attribute,
      value,
    );
  }

  _dart_eglQueryContext _eglQueryContext;

  ffi.Pointer<ffi.Int8> eglQueryString(
    ffi.Pointer<ffi.Void> dpy,
    int name,
  ) {
    _eglQueryString ??=
        _dylib.lookupFunction<_c_eglQueryString, _dart_eglQueryString>(
            'eglQueryString');
    return _eglQueryString(
      dpy,
      name,
    );
  }

  _dart_eglQueryString _eglQueryString;

  int eglQuerySurface(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> surface,
    int attribute,
    ffi.Pointer<ffi.Int32> value,
  ) {
    _eglQuerySurface ??=
        _dylib.lookupFunction<_c_eglQuerySurface, _dart_eglQuerySurface>(
            'eglQuerySurface');
    return _eglQuerySurface(
      dpy,
      surface,
      attribute,
      value,
    );
  }

  _dart_eglQuerySurface _eglQuerySurface;

  int eglSwapBuffers(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> surface,
  ) {
    _eglSwapBuffers ??=
        _dylib.lookupFunction<_c_eglSwapBuffers, _dart_eglSwapBuffers>(
            'eglSwapBuffers');
    return _eglSwapBuffers(
      dpy,
      surface,
    );
  }

  _dart_eglSwapBuffers _eglSwapBuffers;

  int eglTerminate(
    ffi.Pointer<ffi.Void> dpy,
  ) {
    _eglTerminate ??= _dylib
        .lookupFunction<_c_eglTerminate, _dart_eglTerminate>('eglTerminate');
    return _eglTerminate(
      dpy,
    );
  }

  _dart_eglTerminate _eglTerminate;

  int eglWaitGL() {
    _eglWaitGL ??=
        _dylib.lookupFunction<_c_eglWaitGL, _dart_eglWaitGL>('eglWaitGL');
    return _eglWaitGL();
  }

  _dart_eglWaitGL _eglWaitGL;

  int eglWaitNative(
    int engine,
  ) {
    _eglWaitNative ??= _dylib
        .lookupFunction<_c_eglWaitNative, _dart_eglWaitNative>('eglWaitNative');
    return _eglWaitNative(
      engine,
    );
  }

  _dart_eglWaitNative _eglWaitNative;

  int eglBindTexImage(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> surface,
    int buffer,
  ) {
    _eglBindTexImage ??=
        _dylib.lookupFunction<_c_eglBindTexImage, _dart_eglBindTexImage>(
            'eglBindTexImage');
    return _eglBindTexImage(
      dpy,
      surface,
      buffer,
    );
  }

  _dart_eglBindTexImage _eglBindTexImage;

  int eglReleaseTexImage(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> surface,
    int buffer,
  ) {
    _eglReleaseTexImage ??=
        _dylib.lookupFunction<_c_eglReleaseTexImage, _dart_eglReleaseTexImage>(
            'eglReleaseTexImage');
    return _eglReleaseTexImage(
      dpy,
      surface,
      buffer,
    );
  }

  _dart_eglReleaseTexImage _eglReleaseTexImage;

  int eglSurfaceAttrib(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> surface,
    int attribute,
    int value,
  ) {
    _eglSurfaceAttrib ??=
        _dylib.lookupFunction<_c_eglSurfaceAttrib, _dart_eglSurfaceAttrib>(
            'eglSurfaceAttrib');
    return _eglSurfaceAttrib(
      dpy,
      surface,
      attribute,
      value,
    );
  }

  _dart_eglSurfaceAttrib _eglSurfaceAttrib;

  int eglSwapInterval(
    ffi.Pointer<ffi.Void> dpy,
    int interval,
  ) {
    _eglSwapInterval ??=
        _dylib.lookupFunction<_c_eglSwapInterval, _dart_eglSwapInterval>(
            'eglSwapInterval');
    return _eglSwapInterval(
      dpy,
      interval,
    );
  }

  _dart_eglSwapInterval _eglSwapInterval;

  int eglBindAPI(
    int api,
  ) {
    _eglBindAPI ??=
        _dylib.lookupFunction<_c_eglBindAPI, _dart_eglBindAPI>('eglBindAPI');
    return _eglBindAPI(
      api,
    );
  }

  _dart_eglBindAPI _eglBindAPI;

  int eglQueryAPI() {
    _eglQueryAPI ??=
        _dylib.lookupFunction<_c_eglQueryAPI, _dart_eglQueryAPI>('eglQueryAPI');
    return _eglQueryAPI();
  }

  _dart_eglQueryAPI _eglQueryAPI;

  ffi.Pointer<ffi.Void> eglCreatePbufferFromClientBuffer(
    ffi.Pointer<ffi.Void> dpy,
    int buftype,
    ffi.Pointer<ffi.Void> buffer,
    ffi.Pointer<ffi.Void> config,
    ffi.Pointer<ffi.Int32> attrib_list,
  ) {
    _eglCreatePbufferFromClientBuffer ??= _dylib.lookupFunction<
            _c_eglCreatePbufferFromClientBuffer,
            _dart_eglCreatePbufferFromClientBuffer>(
        'eglCreatePbufferFromClientBuffer');
    return _eglCreatePbufferFromClientBuffer(
      dpy,
      buftype,
      buffer,
      config,
      attrib_list,
    );
  }

  _dart_eglCreatePbufferFromClientBuffer _eglCreatePbufferFromClientBuffer;

  int eglReleaseThread() {
    _eglReleaseThread ??=
        _dylib.lookupFunction<_c_eglReleaseThread, _dart_eglReleaseThread>(
            'eglReleaseThread');
    return _eglReleaseThread();
  }

  _dart_eglReleaseThread _eglReleaseThread;

  int eglWaitClient() {
    _eglWaitClient ??= _dylib
        .lookupFunction<_c_eglWaitClient, _dart_eglWaitClient>('eglWaitClient');
    return _eglWaitClient();
  }

  _dart_eglWaitClient _eglWaitClient;

  ffi.Pointer<ffi.Void> eglGetCurrentContext() {
    _eglGetCurrentContext ??= _dylib.lookupFunction<_c_eglGetCurrentContext,
        _dart_eglGetCurrentContext>('eglGetCurrentContext');
    return _eglGetCurrentContext();
  }

  _dart_eglGetCurrentContext _eglGetCurrentContext;

  ffi.Pointer<ffi.Void> eglCreateSync(
    ffi.Pointer<ffi.Void> dpy,
    int type,
    ffi.Pointer<ffi.Int64> attrib_list,
  ) {
    _eglCreateSync ??= _dylib
        .lookupFunction<_c_eglCreateSync, _dart_eglCreateSync>('eglCreateSync');
    return _eglCreateSync(
      dpy,
      type,
      attrib_list,
    );
  }

  _dart_eglCreateSync _eglCreateSync;

  int eglDestroySync(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> sync_1,
  ) {
    _eglDestroySync ??=
        _dylib.lookupFunction<_c_eglDestroySync, _dart_eglDestroySync>(
            'eglDestroySync');
    return _eglDestroySync(
      dpy,
      sync_1,
    );
  }

  _dart_eglDestroySync _eglDestroySync;

  int eglClientWaitSync(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> sync_1,
    int flags,
    int timeout,
  ) {
    _eglClientWaitSync ??=
        _dylib.lookupFunction<_c_eglClientWaitSync, _dart_eglClientWaitSync>(
            'eglClientWaitSync');
    return _eglClientWaitSync(
      dpy,
      sync_1,
      flags,
      timeout,
    );
  }

  _dart_eglClientWaitSync _eglClientWaitSync;

  int eglGetSyncAttrib(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> sync_1,
    int attribute,
    ffi.Pointer<ffi.Int64> value,
  ) {
    _eglGetSyncAttrib ??=
        _dylib.lookupFunction<_c_eglGetSyncAttrib, _dart_eglGetSyncAttrib>(
            'eglGetSyncAttrib');
    return _eglGetSyncAttrib(
      dpy,
      sync_1,
      attribute,
      value,
    );
  }

  _dart_eglGetSyncAttrib _eglGetSyncAttrib;

  ffi.Pointer<ffi.Void> eglCreateImage(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> ctx,
    int target,
    ffi.Pointer<ffi.Void> buffer,
    ffi.Pointer<ffi.Int64> attrib_list,
  ) {
    _eglCreateImage ??=
        _dylib.lookupFunction<_c_eglCreateImage, _dart_eglCreateImage>(
            'eglCreateImage');
    return _eglCreateImage(
      dpy,
      ctx,
      target,
      buffer,
      attrib_list,
    );
  }

  _dart_eglCreateImage _eglCreateImage;

  int eglDestroyImage(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> image,
  ) {
    _eglDestroyImage ??=
        _dylib.lookupFunction<_c_eglDestroyImage, _dart_eglDestroyImage>(
            'eglDestroyImage');
    return _eglDestroyImage(
      dpy,
      image,
    );
  }

  _dart_eglDestroyImage _eglDestroyImage;

  ffi.Pointer<ffi.Void> eglGetPlatformDisplay(
    int platform,
    ffi.Pointer<ffi.Void> native_display,
    ffi.Pointer<ffi.Int64> attrib_list,
  ) {
    _eglGetPlatformDisplay ??= _dylib.lookupFunction<_c_eglGetPlatformDisplay,
        _dart_eglGetPlatformDisplay>('eglGetPlatformDisplay');
    return _eglGetPlatformDisplay(
      platform,
      native_display,
      attrib_list,
    );
  }

  _dart_eglGetPlatformDisplay _eglGetPlatformDisplay;

  ffi.Pointer<ffi.Void> eglCreatePlatformWindowSurface(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> config,
    ffi.Pointer<ffi.Void> native_window,
    ffi.Pointer<ffi.Int64> attrib_list,
  ) {
    _eglCreatePlatformWindowSurface ??= _dylib.lookupFunction<
        _c_eglCreatePlatformWindowSurface,
        _dart_eglCreatePlatformWindowSurface>('eglCreatePlatformWindowSurface');
    return _eglCreatePlatformWindowSurface(
      dpy,
      config,
      native_window,
      attrib_list,
    );
  }

  _dart_eglCreatePlatformWindowSurface _eglCreatePlatformWindowSurface;

  ffi.Pointer<ffi.Void> eglCreatePlatformPixmapSurface(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> config,
    ffi.Pointer<ffi.Void> native_pixmap,
    ffi.Pointer<ffi.Int64> attrib_list,
  ) {
    _eglCreatePlatformPixmapSurface ??= _dylib.lookupFunction<
        _c_eglCreatePlatformPixmapSurface,
        _dart_eglCreatePlatformPixmapSurface>('eglCreatePlatformPixmapSurface');
    return _eglCreatePlatformPixmapSurface(
      dpy,
      config,
      native_pixmap,
      attrib_list,
    );
  }

  _dart_eglCreatePlatformPixmapSurface _eglCreatePlatformPixmapSurface;

  int eglWaitSync(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> sync_1,
    int flags,
  ) {
    _eglWaitSync ??=
        _dylib.lookupFunction<_c_eglWaitSync, _dart_eglWaitSync>('eglWaitSync');
    return _eglWaitSync(
      dpy,
      sync_1,
      flags,
    );
  }

  _dart_eglWaitSync _eglWaitSync;

  void glAttachShader(
    int program,
    int shader,
  ) {
    _glAttachShader ??=
        _dylib.lookupFunction<_c_glAttachShader, _dart_glAttachShader>(
            'glAttachShader');
    return _glAttachShader(
      program,
      shader,
    );
  }

  _dart_glAttachShader _glAttachShader;

  void glBindAttribLocation(
    int program,
    int index,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _glBindAttribLocation ??= _dylib.lookupFunction<_c_glBindAttribLocation,
        _dart_glBindAttribLocation>('glBindAttribLocation');
    return _glBindAttribLocation(
      program,
      index,
      name,
    );
  }

  _dart_glBindAttribLocation _glBindAttribLocation;

  void glBindFramebuffer(
    int target,
    int framebuffer,
  ) {
    _glBindFramebuffer ??=
        _dylib.lookupFunction<_c_glBindFramebuffer, _dart_glBindFramebuffer>(
            'glBindFramebuffer');
    return _glBindFramebuffer(
      target,
      framebuffer,
    );
  }

  _dart_glBindFramebuffer _glBindFramebuffer;

  void glBindRenderbuffer(
    int target,
    int renderbuffer,
  ) {
    _glBindRenderbuffer ??=
        _dylib.lookupFunction<_c_glBindRenderbuffer, _dart_glBindRenderbuffer>(
            'glBindRenderbuffer');
    return _glBindRenderbuffer(
      target,
      renderbuffer,
    );
  }

  _dart_glBindRenderbuffer _glBindRenderbuffer;

  void glBlendEquationSeparate(
    int modeRGB,
    int modeAlpha,
  ) {
    _glBlendEquationSeparate ??= _dylib.lookupFunction<
        _c_glBlendEquationSeparate,
        _dart_glBlendEquationSeparate>('glBlendEquationSeparate');
    return _glBlendEquationSeparate(
      modeRGB,
      modeAlpha,
    );
  }

  _dart_glBlendEquationSeparate _glBlendEquationSeparate;

  void glBlendFuncSeparate(
    int sfactorRGB,
    int dfactorRGB,
    int sfactorAlpha,
    int dfactorAlpha,
  ) {
    _glBlendFuncSeparate ??= _dylib.lookupFunction<_c_glBlendFuncSeparate,
        _dart_glBlendFuncSeparate>('glBlendFuncSeparate');
    return _glBlendFuncSeparate(
      sfactorRGB,
      dfactorRGB,
      sfactorAlpha,
      dfactorAlpha,
    );
  }

  _dart_glBlendFuncSeparate _glBlendFuncSeparate;

  int glCheckFramebufferStatus(
    int target,
  ) {
    _glCheckFramebufferStatus ??= _dylib.lookupFunction<
        _c_glCheckFramebufferStatus,
        _dart_glCheckFramebufferStatus>('glCheckFramebufferStatus');
    return _glCheckFramebufferStatus(
      target,
    );
  }

  _dart_glCheckFramebufferStatus _glCheckFramebufferStatus;

  void glCompileShader(
    int shader,
  ) {
    _glCompileShader ??=
        _dylib.lookupFunction<_c_glCompileShader, _dart_glCompileShader>(
            'glCompileShader');
    return _glCompileShader(
      shader,
    );
  }

  _dart_glCompileShader _glCompileShader;

  int glCreateProgram() {
    _glCreateProgram ??=
        _dylib.lookupFunction<_c_glCreateProgram, _dart_glCreateProgram>(
            'glCreateProgram');
    return _glCreateProgram();
  }

  _dart_glCreateProgram _glCreateProgram;

  int glCreateShader(
    int type,
  ) {
    _glCreateShader ??=
        _dylib.lookupFunction<_c_glCreateShader, _dart_glCreateShader>(
            'glCreateShader');
    return _glCreateShader(
      type,
    );
  }

  _dart_glCreateShader _glCreateShader;

  void glDeleteFramebuffers(
    int n,
    ffi.Pointer<ffi.Uint32> framebuffers,
  ) {
    _glDeleteFramebuffers ??= _dylib.lookupFunction<_c_glDeleteFramebuffers,
        _dart_glDeleteFramebuffers>('glDeleteFramebuffers');
    return _glDeleteFramebuffers(
      n,
      framebuffers,
    );
  }

  _dart_glDeleteFramebuffers _glDeleteFramebuffers;

  void glDeleteProgram(
    int program,
  ) {
    _glDeleteProgram ??=
        _dylib.lookupFunction<_c_glDeleteProgram, _dart_glDeleteProgram>(
            'glDeleteProgram');
    return _glDeleteProgram(
      program,
    );
  }

  _dart_glDeleteProgram _glDeleteProgram;

  void glDeleteRenderbuffers(
    int n,
    ffi.Pointer<ffi.Uint32> renderbuffers,
  ) {
    _glDeleteRenderbuffers ??= _dylib.lookupFunction<_c_glDeleteRenderbuffers,
        _dart_glDeleteRenderbuffers>('glDeleteRenderbuffers');
    return _glDeleteRenderbuffers(
      n,
      renderbuffers,
    );
  }

  _dart_glDeleteRenderbuffers _glDeleteRenderbuffers;

  void glDeleteShader(
    int shader,
  ) {
    _glDeleteShader ??=
        _dylib.lookupFunction<_c_glDeleteShader, _dart_glDeleteShader>(
            'glDeleteShader');
    return _glDeleteShader(
      shader,
    );
  }

  _dart_glDeleteShader _glDeleteShader;

  void glDetachShader(
    int program,
    int shader,
  ) {
    _glDetachShader ??=
        _dylib.lookupFunction<_c_glDetachShader, _dart_glDetachShader>(
            'glDetachShader');
    return _glDetachShader(
      program,
      shader,
    );
  }

  _dart_glDetachShader _glDetachShader;

  void glDisableVertexAttribArray(
    int index,
  ) {
    _glDisableVertexAttribArray ??= _dylib.lookupFunction<
        _c_glDisableVertexAttribArray,
        _dart_glDisableVertexAttribArray>('glDisableVertexAttribArray');
    return _glDisableVertexAttribArray(
      index,
    );
  }

  _dart_glDisableVertexAttribArray _glDisableVertexAttribArray;

  void glEnableVertexAttribArray(
    int index,
  ) {
    _glEnableVertexAttribArray ??= _dylib.lookupFunction<
        _c_glEnableVertexAttribArray,
        _dart_glEnableVertexAttribArray>('glEnableVertexAttribArray');
    return _glEnableVertexAttribArray(
      index,
    );
  }

  _dart_glEnableVertexAttribArray _glEnableVertexAttribArray;

  void glFramebufferRenderbuffer(
    int target,
    int attachment,
    int renderbuffertarget,
    int renderbuffer,
  ) {
    _glFramebufferRenderbuffer ??= _dylib.lookupFunction<
        _c_glFramebufferRenderbuffer,
        _dart_glFramebufferRenderbuffer>('glFramebufferRenderbuffer');
    return _glFramebufferRenderbuffer(
      target,
      attachment,
      renderbuffertarget,
      renderbuffer,
    );
  }

  _dart_glFramebufferRenderbuffer _glFramebufferRenderbuffer;

  void glFramebufferTexture2D(
    int target,
    int attachment,
    int textarget,
    int texture,
    int level,
  ) {
    _glFramebufferTexture2D ??= _dylib.lookupFunction<_c_glFramebufferTexture2D,
        _dart_glFramebufferTexture2D>('glFramebufferTexture2D');
    return _glFramebufferTexture2D(
      target,
      attachment,
      textarget,
      texture,
      level,
    );
  }

  _dart_glFramebufferTexture2D _glFramebufferTexture2D;

  void glGenerateMipmap(
    int target,
  ) {
    _glGenerateMipmap ??=
        _dylib.lookupFunction<_c_glGenerateMipmap, _dart_glGenerateMipmap>(
            'glGenerateMipmap');
    return _glGenerateMipmap(
      target,
    );
  }

  _dart_glGenerateMipmap _glGenerateMipmap;

  void glGenFramebuffers(
    int n,
    ffi.Pointer<ffi.Uint32> framebuffers,
  ) {
    _glGenFramebuffers ??=
        _dylib.lookupFunction<_c_glGenFramebuffers, _dart_glGenFramebuffers>(
            'glGenFramebuffers');
    return _glGenFramebuffers(
      n,
      framebuffers,
    );
  }

  _dart_glGenFramebuffers _glGenFramebuffers;

  void glGenRenderbuffers(
    int n,
    ffi.Pointer<ffi.Uint32> renderbuffers,
  ) {
    _glGenRenderbuffers ??=
        _dylib.lookupFunction<_c_glGenRenderbuffers, _dart_glGenRenderbuffers>(
            'glGenRenderbuffers');
    return _glGenRenderbuffers(
      n,
      renderbuffers,
    );
  }

  _dart_glGenRenderbuffers _glGenRenderbuffers;

  void glGetActiveAttrib(
    int program,
    int index,
    int bufSize,
    ffi.Pointer<ffi.Int32> length,
    ffi.Pointer<ffi.Int32> size,
    ffi.Pointer<ffi.Uint32> type,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _glGetActiveAttrib ??=
        _dylib.lookupFunction<_c_glGetActiveAttrib, _dart_glGetActiveAttrib>(
            'glGetActiveAttrib');
    return _glGetActiveAttrib(
      program,
      index,
      bufSize,
      length,
      size,
      type,
      name,
    );
  }

  _dart_glGetActiveAttrib _glGetActiveAttrib;

  void glGetActiveUniform(
    int program,
    int index,
    int bufSize,
    ffi.Pointer<ffi.Int32> length,
    ffi.Pointer<ffi.Int32> size,
    ffi.Pointer<ffi.Uint32> type,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _glGetActiveUniform ??=
        _dylib.lookupFunction<_c_glGetActiveUniform, _dart_glGetActiveUniform>(
            'glGetActiveUniform');
    return _glGetActiveUniform(
      program,
      index,
      bufSize,
      length,
      size,
      type,
      name,
    );
  }

  _dart_glGetActiveUniform _glGetActiveUniform;

  void glGetAttachedShaders(
    int program,
    int maxCount,
    ffi.Pointer<ffi.Int32> count,
    ffi.Pointer<ffi.Uint32> shaders,
  ) {
    _glGetAttachedShaders ??= _dylib.lookupFunction<_c_glGetAttachedShaders,
        _dart_glGetAttachedShaders>('glGetAttachedShaders');
    return _glGetAttachedShaders(
      program,
      maxCount,
      count,
      shaders,
    );
  }

  _dart_glGetAttachedShaders _glGetAttachedShaders;

  int glGetAttribLocation(
    int program,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _glGetAttribLocation ??= _dylib.lookupFunction<_c_glGetAttribLocation,
        _dart_glGetAttribLocation>('glGetAttribLocation');
    return _glGetAttribLocation(
      program,
      name,
    );
  }

  _dart_glGetAttribLocation _glGetAttribLocation;

  void glGetFramebufferAttachmentParameteriv(
    int target,
    int attachment,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetFramebufferAttachmentParameteriv ??= _dylib.lookupFunction<
            _c_glGetFramebufferAttachmentParameteriv,
            _dart_glGetFramebufferAttachmentParameteriv>(
        'glGetFramebufferAttachmentParameteriv');
    return _glGetFramebufferAttachmentParameteriv(
      target,
      attachment,
      pname,
      params,
    );
  }

  _dart_glGetFramebufferAttachmentParameteriv
      _glGetFramebufferAttachmentParameteriv;

  void glGetProgramiv(
    int program,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetProgramiv ??=
        _dylib.lookupFunction<_c_glGetProgramiv, _dart_glGetProgramiv>(
            'glGetProgramiv');
    return _glGetProgramiv(
      program,
      pname,
      params,
    );
  }

  _dart_glGetProgramiv _glGetProgramiv;

  void glGetProgramInfoLog(
    int program,
    int bufSize,
    ffi.Pointer<ffi.Int32> length,
    ffi.Pointer<ffi.Int8> infoLog,
  ) {
    _glGetProgramInfoLog ??= _dylib.lookupFunction<_c_glGetProgramInfoLog,
        _dart_glGetProgramInfoLog>('glGetProgramInfoLog');
    return _glGetProgramInfoLog(
      program,
      bufSize,
      length,
      infoLog,
    );
  }

  _dart_glGetProgramInfoLog _glGetProgramInfoLog;

  void glGetRenderbufferParameteriv(
    int target,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetRenderbufferParameteriv ??= _dylib.lookupFunction<
        _c_glGetRenderbufferParameteriv,
        _dart_glGetRenderbufferParameteriv>('glGetRenderbufferParameteriv');
    return _glGetRenderbufferParameteriv(
      target,
      pname,
      params,
    );
  }

  _dart_glGetRenderbufferParameteriv _glGetRenderbufferParameteriv;

  void glGetShaderiv(
    int shader,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetShaderiv ??= _dylib
        .lookupFunction<_c_glGetShaderiv, _dart_glGetShaderiv>('glGetShaderiv');
    return _glGetShaderiv(
      shader,
      pname,
      params,
    );
  }

  _dart_glGetShaderiv _glGetShaderiv;

  void glGetShaderInfoLog(
    int shader,
    int bufSize,
    ffi.Pointer<ffi.Int32> length,
    ffi.Pointer<ffi.Int8> infoLog,
  ) {
    _glGetShaderInfoLog ??=
        _dylib.lookupFunction<_c_glGetShaderInfoLog, _dart_glGetShaderInfoLog>(
            'glGetShaderInfoLog');
    return _glGetShaderInfoLog(
      shader,
      bufSize,
      length,
      infoLog,
    );
  }

  _dart_glGetShaderInfoLog _glGetShaderInfoLog;

  void glGetShaderPrecisionFormat(
    int shadertype,
    int precisiontype,
    ffi.Pointer<ffi.Int32> range,
    ffi.Pointer<ffi.Int32> precision,
  ) {
    _glGetShaderPrecisionFormat ??= _dylib.lookupFunction<
        _c_glGetShaderPrecisionFormat,
        _dart_glGetShaderPrecisionFormat>('glGetShaderPrecisionFormat');
    return _glGetShaderPrecisionFormat(
      shadertype,
      precisiontype,
      range,
      precision,
    );
  }

  _dart_glGetShaderPrecisionFormat _glGetShaderPrecisionFormat;

  void glGetShaderSource(
    int shader,
    int bufSize,
    ffi.Pointer<ffi.Int32> length,
    ffi.Pointer<ffi.Int8> source,
  ) {
    _glGetShaderSource ??=
        _dylib.lookupFunction<_c_glGetShaderSource, _dart_glGetShaderSource>(
            'glGetShaderSource');
    return _glGetShaderSource(
      shader,
      bufSize,
      length,
      source,
    );
  }

  _dart_glGetShaderSource _glGetShaderSource;

  void glGetUniformfv(
    int program,
    int location,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glGetUniformfv ??=
        _dylib.lookupFunction<_c_glGetUniformfv, _dart_glGetUniformfv>(
            'glGetUniformfv');
    return _glGetUniformfv(
      program,
      location,
      params,
    );
  }

  _dart_glGetUniformfv _glGetUniformfv;

  void glGetUniformiv(
    int program,
    int location,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetUniformiv ??=
        _dylib.lookupFunction<_c_glGetUniformiv, _dart_glGetUniformiv>(
            'glGetUniformiv');
    return _glGetUniformiv(
      program,
      location,
      params,
    );
  }

  _dart_glGetUniformiv _glGetUniformiv;

  int glGetUniformLocation(
    int program,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _glGetUniformLocation ??= _dylib.lookupFunction<_c_glGetUniformLocation,
        _dart_glGetUniformLocation>('glGetUniformLocation');
    return _glGetUniformLocation(
      program,
      name,
    );
  }

  _dart_glGetUniformLocation _glGetUniformLocation;

  void glGetVertexAttribfv(
    int index,
    int pname,
    ffi.Pointer<ffi.Float> params,
  ) {
    _glGetVertexAttribfv ??= _dylib.lookupFunction<_c_glGetVertexAttribfv,
        _dart_glGetVertexAttribfv>('glGetVertexAttribfv');
    return _glGetVertexAttribfv(
      index,
      pname,
      params,
    );
  }

  _dart_glGetVertexAttribfv _glGetVertexAttribfv;

  void glGetVertexAttribiv(
    int index,
    int pname,
    ffi.Pointer<ffi.Int32> params,
  ) {
    _glGetVertexAttribiv ??= _dylib.lookupFunction<_c_glGetVertexAttribiv,
        _dart_glGetVertexAttribiv>('glGetVertexAttribiv');
    return _glGetVertexAttribiv(
      index,
      pname,
      params,
    );
  }

  _dart_glGetVertexAttribiv _glGetVertexAttribiv;

  void glGetVertexAttribPointerv(
    int index,
    int pname,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pointer,
  ) {
    _glGetVertexAttribPointerv ??= _dylib.lookupFunction<
        _c_glGetVertexAttribPointerv,
        _dart_glGetVertexAttribPointerv>('glGetVertexAttribPointerv');
    return _glGetVertexAttribPointerv(
      index,
      pname,
      pointer,
    );
  }

  _dart_glGetVertexAttribPointerv _glGetVertexAttribPointerv;

  int glIsFramebuffer(
    int framebuffer,
  ) {
    _glIsFramebuffer ??=
        _dylib.lookupFunction<_c_glIsFramebuffer, _dart_glIsFramebuffer>(
            'glIsFramebuffer');
    return _glIsFramebuffer(
      framebuffer,
    );
  }

  _dart_glIsFramebuffer _glIsFramebuffer;

  int glIsProgram(
    int program,
  ) {
    _glIsProgram ??=
        _dylib.lookupFunction<_c_glIsProgram, _dart_glIsProgram>('glIsProgram');
    return _glIsProgram(
      program,
    );
  }

  _dart_glIsProgram _glIsProgram;

  int glIsRenderbuffer(
    int renderbuffer,
  ) {
    _glIsRenderbuffer ??=
        _dylib.lookupFunction<_c_glIsRenderbuffer, _dart_glIsRenderbuffer>(
            'glIsRenderbuffer');
    return _glIsRenderbuffer(
      renderbuffer,
    );
  }

  _dart_glIsRenderbuffer _glIsRenderbuffer;

  int glIsShader(
    int shader,
  ) {
    _glIsShader ??=
        _dylib.lookupFunction<_c_glIsShader, _dart_glIsShader>('glIsShader');
    return _glIsShader(
      shader,
    );
  }

  _dart_glIsShader _glIsShader;

  void glLinkProgram(
    int program,
  ) {
    _glLinkProgram ??= _dylib
        .lookupFunction<_c_glLinkProgram, _dart_glLinkProgram>('glLinkProgram');
    return _glLinkProgram(
      program,
    );
  }

  _dart_glLinkProgram _glLinkProgram;

  void glReleaseShaderCompiler() {
    _glReleaseShaderCompiler ??= _dylib.lookupFunction<
        _c_glReleaseShaderCompiler,
        _dart_glReleaseShaderCompiler>('glReleaseShaderCompiler');
    return _glReleaseShaderCompiler();
  }

  _dart_glReleaseShaderCompiler _glReleaseShaderCompiler;

  void glRenderbufferStorage(
    int target,
    int internalformat,
    int width,
    int height,
  ) {
    _glRenderbufferStorage ??= _dylib.lookupFunction<_c_glRenderbufferStorage,
        _dart_glRenderbufferStorage>('glRenderbufferStorage');
    return _glRenderbufferStorage(
      target,
      internalformat,
      width,
      height,
    );
  }

  _dart_glRenderbufferStorage _glRenderbufferStorage;

  void glShaderBinary(
    int count,
    ffi.Pointer<ffi.Uint32> shaders,
    int binaryformat,
    ffi.Pointer<ffi.Void> binary,
    int length,
  ) {
    _glShaderBinary ??=
        _dylib.lookupFunction<_c_glShaderBinary, _dart_glShaderBinary>(
            'glShaderBinary');
    return _glShaderBinary(
      count,
      shaders,
      binaryformat,
      binary,
      length,
    );
  }

  _dart_glShaderBinary _glShaderBinary;

  void glShaderSource(
    int shader,
    int count,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> string,
    ffi.Pointer<ffi.Int32> length,
  ) {
    _glShaderSource ??=
        _dylib.lookupFunction<_c_glShaderSource, _dart_glShaderSource>(
            'glShaderSource');
    return _glShaderSource(
      shader,
      count,
      string,
      length,
    );
  }

  _dart_glShaderSource _glShaderSource;

  void glStencilFuncSeparate(
    int face,
    int func,
    int ref,
    int mask,
  ) {
    _glStencilFuncSeparate ??= _dylib.lookupFunction<_c_glStencilFuncSeparate,
        _dart_glStencilFuncSeparate>('glStencilFuncSeparate');
    return _glStencilFuncSeparate(
      face,
      func,
      ref,
      mask,
    );
  }

  _dart_glStencilFuncSeparate _glStencilFuncSeparate;

  void glStencilMaskSeparate(
    int face,
    int mask,
  ) {
    _glStencilMaskSeparate ??= _dylib.lookupFunction<_c_glStencilMaskSeparate,
        _dart_glStencilMaskSeparate>('glStencilMaskSeparate');
    return _glStencilMaskSeparate(
      face,
      mask,
    );
  }

  _dart_glStencilMaskSeparate _glStencilMaskSeparate;

  void glStencilOpSeparate(
    int face,
    int sfail,
    int dpfail,
    int dppass,
  ) {
    _glStencilOpSeparate ??= _dylib.lookupFunction<_c_glStencilOpSeparate,
        _dart_glStencilOpSeparate>('glStencilOpSeparate');
    return _glStencilOpSeparate(
      face,
      sfail,
      dpfail,
      dppass,
    );
  }

  _dart_glStencilOpSeparate _glStencilOpSeparate;

  void glUniform1f(
    int location,
    double v0,
  ) {
    _glUniform1f ??=
        _dylib.lookupFunction<_c_glUniform1f, _dart_glUniform1f>('glUniform1f');
    return _glUniform1f(
      location,
      v0,
    );
  }

  _dart_glUniform1f _glUniform1f;

  void glUniform1fv(
    int location,
    int count,
    ffi.Pointer<ffi.Float> value,
  ) {
    _glUniform1fv ??= _dylib
        .lookupFunction<_c_glUniform1fv, _dart_glUniform1fv>('glUniform1fv');
    return _glUniform1fv(
      location,
      count,
      value,
    );
  }

  _dart_glUniform1fv _glUniform1fv;

  void glUniform1i(
    int location,
    int v0,
  ) {
    _glUniform1i ??=
        _dylib.lookupFunction<_c_glUniform1i, _dart_glUniform1i>('glUniform1i');
    return _glUniform1i(
      location,
      v0,
    );
  }

  _dart_glUniform1i _glUniform1i;

  void glUniform1iv(
    int location,
    int count,
    ffi.Pointer<ffi.Int32> value,
  ) {
    _glUniform1iv ??= _dylib
        .lookupFunction<_c_glUniform1iv, _dart_glUniform1iv>('glUniform1iv');
    return _glUniform1iv(
      location,
      count,
      value,
    );
  }

  _dart_glUniform1iv _glUniform1iv;

  void glUniform2f(
    int location,
    double v0,
    double v1,
  ) {
    _glUniform2f ??=
        _dylib.lookupFunction<_c_glUniform2f, _dart_glUniform2f>('glUniform2f');
    return _glUniform2f(
      location,
      v0,
      v1,
    );
  }

  _dart_glUniform2f _glUniform2f;

  void glUniform2fv(
    int location,
    int count,
    ffi.Pointer<ffi.Float> value,
  ) {
    _glUniform2fv ??= _dylib
        .lookupFunction<_c_glUniform2fv, _dart_glUniform2fv>('glUniform2fv');
    return _glUniform2fv(
      location,
      count,
      value,
    );
  }

  _dart_glUniform2fv _glUniform2fv;

  void glUniform2i(
    int location,
    int v0,
    int v1,
  ) {
    _glUniform2i ??=
        _dylib.lookupFunction<_c_glUniform2i, _dart_glUniform2i>('glUniform2i');
    return _glUniform2i(
      location,
      v0,
      v1,
    );
  }

  _dart_glUniform2i _glUniform2i;

  void glUniform2iv(
    int location,
    int count,
    ffi.Pointer<ffi.Int32> value,
  ) {
    _glUniform2iv ??= _dylib
        .lookupFunction<_c_glUniform2iv, _dart_glUniform2iv>('glUniform2iv');
    return _glUniform2iv(
      location,
      count,
      value,
    );
  }

  _dart_glUniform2iv _glUniform2iv;

  void glUniform3f(
    int location,
    double v0,
    double v1,
    double v2,
  ) {
    _glUniform3f ??=
        _dylib.lookupFunction<_c_glUniform3f, _dart_glUniform3f>('glUniform3f');
    return _glUniform3f(
      location,
      v0,
      v1,
      v2,
    );
  }

  _dart_glUniform3f _glUniform3f;

  void glUniform3fv(
    int location,
    int count,
    ffi.Pointer<ffi.Float> value,
  ) {
    _glUniform3fv ??= _dylib
        .lookupFunction<_c_glUniform3fv, _dart_glUniform3fv>('glUniform3fv');
    return _glUniform3fv(
      location,
      count,
      value,
    );
  }

  _dart_glUniform3fv _glUniform3fv;

  void glUniform3i(
    int location,
    int v0,
    int v1,
    int v2,
  ) {
    _glUniform3i ??=
        _dylib.lookupFunction<_c_glUniform3i, _dart_glUniform3i>('glUniform3i');
    return _glUniform3i(
      location,
      v0,
      v1,
      v2,
    );
  }

  _dart_glUniform3i _glUniform3i;

  void glUniform3iv(
    int location,
    int count,
    ffi.Pointer<ffi.Int32> value,
  ) {
    _glUniform3iv ??= _dylib
        .lookupFunction<_c_glUniform3iv, _dart_glUniform3iv>('glUniform3iv');
    return _glUniform3iv(
      location,
      count,
      value,
    );
  }

  _dart_glUniform3iv _glUniform3iv;

  void glUniform4f(
    int location,
    double v0,
    double v1,
    double v2,
    double v3,
  ) {
    _glUniform4f ??=
        _dylib.lookupFunction<_c_glUniform4f, _dart_glUniform4f>('glUniform4f');
    return _glUniform4f(
      location,
      v0,
      v1,
      v2,
      v3,
    );
  }

  _dart_glUniform4f _glUniform4f;

  void glUniform4fv(
    int location,
    int count,
    ffi.Pointer<ffi.Float> value,
  ) {
    _glUniform4fv ??= _dylib
        .lookupFunction<_c_glUniform4fv, _dart_glUniform4fv>('glUniform4fv');
    return _glUniform4fv(
      location,
      count,
      value,
    );
  }

  _dart_glUniform4fv _glUniform4fv;

  void glUniform4i(
    int location,
    int v0,
    int v1,
    int v2,
    int v3,
  ) {
    _glUniform4i ??=
        _dylib.lookupFunction<_c_glUniform4i, _dart_glUniform4i>('glUniform4i');
    return _glUniform4i(
      location,
      v0,
      v1,
      v2,
      v3,
    );
  }

  _dart_glUniform4i _glUniform4i;

  void glUniform4iv(
    int location,
    int count,
    ffi.Pointer<ffi.Int32> value,
  ) {
    _glUniform4iv ??= _dylib
        .lookupFunction<_c_glUniform4iv, _dart_glUniform4iv>('glUniform4iv');
    return _glUniform4iv(
      location,
      count,
      value,
    );
  }

  _dart_glUniform4iv _glUniform4iv;

  void glUniformMatrix2fv(
    int location,
    int count,
    int transpose,
    ffi.Pointer<ffi.Float> value,
  ) {
    _glUniformMatrix2fv ??=
        _dylib.lookupFunction<_c_glUniformMatrix2fv, _dart_glUniformMatrix2fv>(
            'glUniformMatrix2fv');
    return _glUniformMatrix2fv(
      location,
      count,
      transpose,
      value,
    );
  }

  _dart_glUniformMatrix2fv _glUniformMatrix2fv;

  void glUniformMatrix3fv(
    int location,
    int count,
    int transpose,
    ffi.Pointer<ffi.Float> value,
  ) {
    _glUniformMatrix3fv ??=
        _dylib.lookupFunction<_c_glUniformMatrix3fv, _dart_glUniformMatrix3fv>(
            'glUniformMatrix3fv');
    return _glUniformMatrix3fv(
      location,
      count,
      transpose,
      value,
    );
  }

  _dart_glUniformMatrix3fv _glUniformMatrix3fv;

  void glUniformMatrix4fv(
    int location,
    int count,
    int transpose,
    ffi.Pointer<ffi.Float> value,
  ) {
    _glUniformMatrix4fv ??=
        _dylib.lookupFunction<_c_glUniformMatrix4fv, _dart_glUniformMatrix4fv>(
            'glUniformMatrix4fv');
    return _glUniformMatrix4fv(
      location,
      count,
      transpose,
      value,
    );
  }

  _dart_glUniformMatrix4fv _glUniformMatrix4fv;

  void glUseProgram(
    int program,
  ) {
    _glUseProgram ??= _dylib
        .lookupFunction<_c_glUseProgram, _dart_glUseProgram>('glUseProgram');
    return _glUseProgram(
      program,
    );
  }

  _dart_glUseProgram _glUseProgram;

  void glValidateProgram(
    int program,
  ) {
    _glValidateProgram ??=
        _dylib.lookupFunction<_c_glValidateProgram, _dart_glValidateProgram>(
            'glValidateProgram');
    return _glValidateProgram(
      program,
    );
  }

  _dart_glValidateProgram _glValidateProgram;

  void glVertexAttrib1f(
    int index,
    double x,
  ) {
    _glVertexAttrib1f ??=
        _dylib.lookupFunction<_c_glVertexAttrib1f, _dart_glVertexAttrib1f>(
            'glVertexAttrib1f');
    return _glVertexAttrib1f(
      index,
      x,
    );
  }

  _dart_glVertexAttrib1f _glVertexAttrib1f;

  void glVertexAttrib1fv(
    int index,
    ffi.Pointer<ffi.Float> v,
  ) {
    _glVertexAttrib1fv ??=
        _dylib.lookupFunction<_c_glVertexAttrib1fv, _dart_glVertexAttrib1fv>(
            'glVertexAttrib1fv');
    return _glVertexAttrib1fv(
      index,
      v,
    );
  }

  _dart_glVertexAttrib1fv _glVertexAttrib1fv;

  void glVertexAttrib2f(
    int index,
    double x,
    double y,
  ) {
    _glVertexAttrib2f ??=
        _dylib.lookupFunction<_c_glVertexAttrib2f, _dart_glVertexAttrib2f>(
            'glVertexAttrib2f');
    return _glVertexAttrib2f(
      index,
      x,
      y,
    );
  }

  _dart_glVertexAttrib2f _glVertexAttrib2f;

  void glVertexAttrib2fv(
    int index,
    ffi.Pointer<ffi.Float> v,
  ) {
    _glVertexAttrib2fv ??=
        _dylib.lookupFunction<_c_glVertexAttrib2fv, _dart_glVertexAttrib2fv>(
            'glVertexAttrib2fv');
    return _glVertexAttrib2fv(
      index,
      v,
    );
  }

  _dart_glVertexAttrib2fv _glVertexAttrib2fv;

  void glVertexAttrib3f(
    int index,
    double x,
    double y,
    double z,
  ) {
    _glVertexAttrib3f ??=
        _dylib.lookupFunction<_c_glVertexAttrib3f, _dart_glVertexAttrib3f>(
            'glVertexAttrib3f');
    return _glVertexAttrib3f(
      index,
      x,
      y,
      z,
    );
  }

  _dart_glVertexAttrib3f _glVertexAttrib3f;

  void glVertexAttrib3fv(
    int index,
    ffi.Pointer<ffi.Float> v,
  ) {
    _glVertexAttrib3fv ??=
        _dylib.lookupFunction<_c_glVertexAttrib3fv, _dart_glVertexAttrib3fv>(
            'glVertexAttrib3fv');
    return _glVertexAttrib3fv(
      index,
      v,
    );
  }

  _dart_glVertexAttrib3fv _glVertexAttrib3fv;

  void glVertexAttrib4f(
    int index,
    double x,
    double y,
    double z,
    double w,
  ) {
    _glVertexAttrib4f ??=
        _dylib.lookupFunction<_c_glVertexAttrib4f, _dart_glVertexAttrib4f>(
            'glVertexAttrib4f');
    return _glVertexAttrib4f(
      index,
      x,
      y,
      z,
      w,
    );
  }

  _dart_glVertexAttrib4f _glVertexAttrib4f;

  void glVertexAttrib4fv(
    int index,
    ffi.Pointer<ffi.Float> v,
  ) {
    _glVertexAttrib4fv ??=
        _dylib.lookupFunction<_c_glVertexAttrib4fv, _dart_glVertexAttrib4fv>(
            'glVertexAttrib4fv');
    return _glVertexAttrib4fv(
      index,
      v,
    );
  }

  _dart_glVertexAttrib4fv _glVertexAttrib4fv;

  void glVertexAttribPointer(
    int index,
    int size,
    int type,
    int normalized,
    int stride,
    ffi.Pointer<ffi.Void> pointer,
  ) {
    _glVertexAttribPointer ??= _dylib.lookupFunction<_c_glVertexAttribPointer,
        _dart_glVertexAttribPointer>('glVertexAttribPointer');
    return _glVertexAttribPointer(
      index,
      size,
      type,
      normalized,
      stride,
      pointer,
    );
  }

  _dart_glVertexAttribPointer _glVertexAttribPointer;

  /// \brief Initialize random number generator with two integers.
  ///
  /// Note: The random sequence of numbers returned by ...Random() is the
  /// same for the same two integers and has a period of 2^31.
  ///
  /// \param rndContext     pointer to context structure
  /// \param xi         integer that defines the random sequence
  /// \param ci         integer that defines the random sequence
  void SDLTest_RandomInit(
    ffi.Pointer<SDLTest_RandomContext> rndContext,
    int xi,
    int ci,
  ) {
    _SDLTest_RandomInit ??=
        _dylib.lookupFunction<_c_SDLTest_RandomInit, _dart_SDLTest_RandomInit>(
            'SDLTest_RandomInit');
    return _SDLTest_RandomInit(
      rndContext,
      xi,
      ci,
    );
  }

  _dart_SDLTest_RandomInit _SDLTest_RandomInit;

  /// \brief Initialize random number generator based on current system time.
  ///
  /// \param rndContext     pointer to context structure
  void SDLTest_RandomInitTime(
    ffi.Pointer<SDLTest_RandomContext> rndContext,
  ) {
    _SDLTest_RandomInitTime ??= _dylib.lookupFunction<_c_SDLTest_RandomInitTime,
        _dart_SDLTest_RandomInitTime>('SDLTest_RandomInitTime');
    return _SDLTest_RandomInitTime(
      rndContext,
    );
  }

  _dart_SDLTest_RandomInitTime _SDLTest_RandomInitTime;

  /// \brief Initialize random number generator based on current system time.
  ///
  /// Note: ...RandomInit() or ...RandomInitTime() must have been called
  /// before using this function.
  ///
  /// \param rndContext     pointer to context structure
  ///
  /// \returns A random number (32bit unsigned integer)
  int SDLTest_Random(
    ffi.Pointer<SDLTest_RandomContext> rndContext,
  ) {
    _SDLTest_Random ??=
        _dylib.lookupFunction<_c_SDLTest_Random, _dart_SDLTest_Random>(
            'SDLTest_Random');
    return _SDLTest_Random(
      rndContext,
    );
  }

  _dart_SDLTest_Random _SDLTest_Random;

  /// \brief Assert that logs and break execution flow on failures.
  ///
  /// \param assertCondition Evaluated condition or variable to assert; fail (==0) or pass (!=0).
  /// \param assertDescription Message to log with the assert describing it.
  void SDLTest_Assert(
    int assertCondition,
    ffi.Pointer<ffi.Int8> assertDescription,
  ) {
    _SDLTest_Assert ??=
        _dylib.lookupFunction<_c_SDLTest_Assert, _dart_SDLTest_Assert>(
            'SDLTest_Assert');
    return _SDLTest_Assert(
      assertCondition,
      assertDescription,
    );
  }

  _dart_SDLTest_Assert _SDLTest_Assert;

  /// \brief Assert for test cases that logs but does not break execution flow on failures. Updates assertion counters.
  ///
  /// \param assertCondition Evaluated condition or variable to assert; fail (==0) or pass (!=0).
  /// \param assertDescription Message to log with the assert describing it.
  ///
  /// \returns Returns the assertCondition so it can be used to externally to break execution flow if desired.
  int SDLTest_AssertCheck(
    int assertCondition,
    ffi.Pointer<ffi.Int8> assertDescription,
  ) {
    _SDLTest_AssertCheck ??= _dylib.lookupFunction<_c_SDLTest_AssertCheck,
        _dart_SDLTest_AssertCheck>('SDLTest_AssertCheck');
    return _SDLTest_AssertCheck(
      assertCondition,
      assertDescription,
    );
  }

  _dart_SDLTest_AssertCheck _SDLTest_AssertCheck;

  /// \brief Explicitly pass without checking an assertion condition. Updates assertion counter.
  ///
  /// \param assertDescription Message to log with the assert describing it.
  void SDLTest_AssertPass(
    ffi.Pointer<ffi.Int8> assertDescription,
  ) {
    _SDLTest_AssertPass ??=
        _dylib.lookupFunction<_c_SDLTest_AssertPass, _dart_SDLTest_AssertPass>(
            'SDLTest_AssertPass');
    return _SDLTest_AssertPass(
      assertDescription,
    );
  }

  _dart_SDLTest_AssertPass _SDLTest_AssertPass;

  /// \brief Parse command line parameters and create common state.
  ///
  /// \param argv Array of command line parameters
  /// \param flags Flags indicating which subsystem to initialize (i.e. SDL_INIT_VIDEO | SDL_INIT_AUDIO)
  ///
  /// \returns Returns a newly allocated common state object.
  ffi.Pointer<SDLTest_CommonState> SDLTest_CommonCreateState(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
    int flags,
  ) {
    _SDLTest_CommonCreateState ??= _dylib.lookupFunction<
        _c_SDLTest_CommonCreateState,
        _dart_SDLTest_CommonCreateState>('SDLTest_CommonCreateState');
    return _SDLTest_CommonCreateState(
      argv,
      flags,
    );
  }

  _dart_SDLTest_CommonCreateState _SDLTest_CommonCreateState;

  /// \brief Process one common argument.
  ///
  /// \param state The common state describing the test window to create.
  /// \param index The index of the argument to process in argv[].
  ///
  /// \returns The number of arguments processed (i.e. 1 for --fullscreen, 2 for --video [videodriver], or -1 on error.
  int SDLTest_CommonArg(
    ffi.Pointer<SDLTest_CommonState> state,
    int index,
  ) {
    _SDLTest_CommonArg ??=
        _dylib.lookupFunction<_c_SDLTest_CommonArg, _dart_SDLTest_CommonArg>(
            'SDLTest_CommonArg');
    return _SDLTest_CommonArg(
      state,
      index,
    );
  }

  _dart_SDLTest_CommonArg _SDLTest_CommonArg;

  /// \brief Logs command line usage info.
  ///
  /// This logs the appropriate command line options for the subsystems in use
  /// plus other common options, and then any application-specific options.
  /// This uses the SDL_Log() function and splits up output to be friendly to
  /// 80-character-wide terminals.
  ///
  /// \param state The common state describing the test window for the app.
  /// \param argv0 argv[0], as passed to main/SDL_main.
  /// \param options an array of strings for application specific options. The last element of the array should be NULL.
  void SDLTest_CommonLogUsage(
    ffi.Pointer<SDLTest_CommonState> state,
    ffi.Pointer<ffi.Int8> argv0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> options,
  ) {
    _SDLTest_CommonLogUsage ??= _dylib.lookupFunction<_c_SDLTest_CommonLogUsage,
        _dart_SDLTest_CommonLogUsage>('SDLTest_CommonLogUsage');
    return _SDLTest_CommonLogUsage(
      state,
      argv0,
      options,
    );
  }

  _dart_SDLTest_CommonLogUsage _SDLTest_CommonLogUsage;

  /// \brief Returns common usage information
  ///
  /// You should (probably) be using SDLTest_CommonLogUsage() instead, but this
  /// function remains for binary compatibility. Strings returned from this
  /// function are valid until SDLTest_CommonQuit() is called, in which case
  /// those strings' memory is freed and can no longer be used.
  ///
  /// \param state The common state describing the test window to create.
  /// \returns String with usage information
  ffi.Pointer<ffi.Int8> SDLTest_CommonUsage(
    ffi.Pointer<SDLTest_CommonState> state,
  ) {
    _SDLTest_CommonUsage ??= _dylib.lookupFunction<_c_SDLTest_CommonUsage,
        _dart_SDLTest_CommonUsage>('SDLTest_CommonUsage');
    return _SDLTest_CommonUsage(
      state,
    );
  }

  _dart_SDLTest_CommonUsage _SDLTest_CommonUsage;

  /// \brief Open test window.
  ///
  /// \param state The common state describing the test window to create.
  ///
  /// \returns True if initialization succeeded, false otherwise
  int SDLTest_CommonInit(
    ffi.Pointer<SDLTest_CommonState> state,
  ) {
    _SDLTest_CommonInit ??=
        _dylib.lookupFunction<_c_SDLTest_CommonInit, _dart_SDLTest_CommonInit>(
            'SDLTest_CommonInit');
    return _SDLTest_CommonInit(
      state,
    );
  }

  _dart_SDLTest_CommonInit _SDLTest_CommonInit;

  /// \brief Easy argument handling when test app doesn't need any custom args.
  ///
  /// \param state The common state describing the test window to create.
  /// \param argc argc, as supplied to SDL_main
  /// \param argv argv, as supplied to SDL_main
  ///
  /// \returns False if app should quit, true otherwise.
  int SDLTest_CommonDefaultArgs(
    ffi.Pointer<SDLTest_CommonState> state,
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ) {
    _SDLTest_CommonDefaultArgs ??= _dylib.lookupFunction<
        _c_SDLTest_CommonDefaultArgs,
        _dart_SDLTest_CommonDefaultArgs>('SDLTest_CommonDefaultArgs');
    return _SDLTest_CommonDefaultArgs(
      state,
      argc,
      argv,
    );
  }

  _dart_SDLTest_CommonDefaultArgs _SDLTest_CommonDefaultArgs;

  /// \brief Close test window.
  ///
  /// \param state The common state used to create test window.
  void SDLTest_CommonQuit(
    ffi.Pointer<SDLTest_CommonState> state,
  ) {
    _SDLTest_CommonQuit ??=
        _dylib.lookupFunction<_c_SDLTest_CommonQuit, _dart_SDLTest_CommonQuit>(
            'SDLTest_CommonQuit');
    return _SDLTest_CommonQuit(
      state,
    );
  }

  _dart_SDLTest_CommonQuit _SDLTest_CommonQuit;

  /// \brief Prints given message with a timestamp in the TEST category and INFO priority.
  ///
  /// \param fmt Message to be logged
  void SDLTest_Log(
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    _SDLTest_Log ??=
        _dylib.lookupFunction<_c_SDLTest_Log, _dart_SDLTest_Log>('SDLTest_Log');
    return _SDLTest_Log(
      fmt,
    );
  }

  _dart_SDLTest_Log _SDLTest_Log;

  /// \brief Prints given message with a timestamp in the TEST category and the ERROR priority.
  ///
  /// \param fmt Message to be logged
  void SDLTest_LogError(
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    _SDLTest_LogError ??=
        _dylib.lookupFunction<_c_SDLTest_LogError, _dart_SDLTest_LogError>(
            'SDLTest_LogError');
    return _SDLTest_LogError(
      fmt,
    );
  }

  _dart_SDLTest_LogError _SDLTest_LogError;
}

/// Data structure for CRC32 (checksum) computation
class SDLTest_Crc32Context extends ffi.Struct {}

class __fsid_t extends ffi.Struct {}

class __sigset_t extends ffi.Struct {}

class timeval extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_usec;
}

class timespec extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_nsec;
}

class fd_set extends ffi.Struct {}

class __pthread_list_t extends ffi.Struct {
  ffi.Pointer<__pthread_list_t> __prev;

  ffi.Pointer<__pthread_list_t> __next;
}

class __pthread_slist_t extends ffi.Struct {
  ffi.Pointer<__pthread_slist_t> __next;
}

class __pthread_mutex_s extends ffi.Struct {}

class __pthread_rwlock_arch_t extends ffi.Struct {}

class __pthread_cond_s extends ffi.Struct {}

class __once_flag extends ffi.Struct {
  @ffi.Int32()
  int __data;
}

class __mbstate_t extends ffi.Struct {}

class __fpos_t extends ffi.Struct {}

class __fpos64_t extends ffi.Struct {}

class _IO_FILE extends ffi.Struct {}

class _IO_marker extends ffi.Struct {}

class _IO_codecvt extends ffi.Struct {}

class _IO_wide_data extends ffi.Struct {}

class __va_list_tag extends ffi.Struct {
  @ffi.Uint32()
  int gp_offset;

  @ffi.Uint32()
  int fp_offset;

  ffi.Pointer<ffi.Void> overflow_arg_area;

  ffi.Pointer<ffi.Void> reg_save_area;
}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  int quot;

  @ffi.Int32()
  int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  int quot;

  @ffi.Int64()
  int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  int quot;

  @ffi.Int64()
  int rem;
}

class random_data extends ffi.Struct {
  ffi.Pointer<ffi.Int32> fptr;

  ffi.Pointer<ffi.Int32> rptr;

  ffi.Pointer<ffi.Int32> state;

  @ffi.Int32()
  int rand_type;

  @ffi.Int32()
  int rand_deg;

  @ffi.Int32()
  int rand_sep;

  ffi.Pointer<ffi.Int32> end_ptr;
}

class drand48_data extends ffi.Struct {}

class max_align_t extends ffi.Struct {}

class __locale_data extends ffi.Struct {}

class __locale_struct extends ffi.Struct {}

class tm extends ffi.Struct {}

class imaxdiv_t extends ffi.Struct {
  @ffi.Int64()
  int quot;

  @ffi.Int64()
  int rem;
}

abstract class SDL_bool {
  static const int SDL_FALSE = 0;
  static const int SDL_TRUE = 1;
}

abstract class SDL_DUMMY_ENUM {
  static const int DUMMY_ENUM_VALUE = 0;
}

class _SDL_iconv_t extends ffi.Struct {}

abstract class SDL_errorcode {
  static const int SDL_ENOMEM = 0;
  static const int SDL_EFREAD = 1;
  static const int SDL_EFWRITE = 2;
  static const int SDL_EFSEEK = 3;
  static const int SDL_UNSUPPORTED = 4;
  static const int SDL_LASTERROR = 5;
}

class SDL_mutex extends ffi.Struct {}

class SDL_semaphore extends ffi.Struct {}

class SDL_cond extends ffi.Struct {}

/// \brief A type representing an atomic integer value.  It is a struct
/// so people don't accidentally use numeric operations on it.
class SDL_atomic_t extends ffi.Struct {
  @ffi.Int32()
  int value;
}

class SDL_Thread extends ffi.Struct {}

/// The SDL thread priority.
///
/// \note On many systems you require special privileges to set high or time critical priority.
abstract class SDL_ThreadPriority {
  static const int SDL_THREAD_PRIORITY_LOW = 0;
  static const int SDL_THREAD_PRIORITY_NORMAL = 1;
  static const int SDL_THREAD_PRIORITY_HIGH = 2;
  static const int SDL_THREAD_PRIORITY_TIME_CRITICAL = 3;
}

/// This is the read/write operation structure -- very basic.
class SDL_RWops extends ffi.Struct {}

/// The calculated values in this structure are calculated by SDL_OpenAudio().
///
/// For multi-channel audio, the default SDL channel mapping is:
/// 2:  FL FR                       (stereo)
/// 3:  FL FR LFE                   (2.1 surround)
/// 4:  FL FR BL BR                 (quad)
/// 5:  FL FR FC BL BR              (quad + center)
/// 6:  FL FR FC LFE SL SR          (5.1 surround - last two can also be BL BR)
/// 7:  FL FR FC LFE BC SL SR       (6.1 surround)
/// 8:  FL FR FC LFE BL BR SL SR    (7.1 surround)
class SDL_AudioSpec extends ffi.Struct {
  /// < DSP frequency -- samples per second
  @ffi.Int32()
  int freq;

  /// < Audio data format
  @ffi.Uint16()
  int format;

  /// < Number of channels: 1 mono, 2 stereo
  @ffi.Uint8()
  int channels;

  /// < Audio buffer silence value (calculated)
  @ffi.Uint8()
  int silence;

  /// < Audio buffer size in sample FRAMES (total samples divided by channel count)
  @ffi.Uint16()
  int samples;

  /// < Necessary for some compile environments
  @ffi.Uint16()
  int padding;

  /// < Audio buffer size in bytes (calculated)
  @ffi.Uint32()
  int size;

  /// < Callback that feeds the audio device (NULL to use SDL_QueueAudio()).
  ffi.Pointer<ffi.NativeFunction<SDL_AudioCallback>> callback;

  /// < Userdata passed to callback (ignored for NULL callbacks).
  ffi.Pointer<ffi.Void> userdata;
}

class SDL_AudioCVT extends ffi.Struct {}

abstract class SDL_AudioStatus {
  static const int SDL_AUDIO_STOPPED = 0;
  static const int SDL_AUDIO_PLAYING = 1;
  static const int SDL_AUDIO_PAUSED = 2;
}

class _SDL_AudioStream extends ffi.Struct {}

/// \brief The SDL keyboard scancode representation.
///
/// Values of this type are used to represent keyboard keys, among other places
/// in the \link SDL_Keysym::scancode key.keysym.scancode \endlink field of the
/// SDL_Event structure.
///
/// The values in this enumeration are based on the USB usage page standard:
/// https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf
abstract class SDL_Scancode {
  static const int SDL_SCANCODE_UNKNOWN = 0;
  static const int SDL_SCANCODE_A = 4;
  static const int SDL_SCANCODE_B = 5;
  static const int SDL_SCANCODE_C = 6;
  static const int SDL_SCANCODE_D = 7;
  static const int SDL_SCANCODE_E = 8;
  static const int SDL_SCANCODE_F = 9;
  static const int SDL_SCANCODE_G = 10;
  static const int SDL_SCANCODE_H = 11;
  static const int SDL_SCANCODE_I = 12;
  static const int SDL_SCANCODE_J = 13;
  static const int SDL_SCANCODE_K = 14;
  static const int SDL_SCANCODE_L = 15;
  static const int SDL_SCANCODE_M = 16;
  static const int SDL_SCANCODE_N = 17;
  static const int SDL_SCANCODE_O = 18;
  static const int SDL_SCANCODE_P = 19;
  static const int SDL_SCANCODE_Q = 20;
  static const int SDL_SCANCODE_R = 21;
  static const int SDL_SCANCODE_S = 22;
  static const int SDL_SCANCODE_T = 23;
  static const int SDL_SCANCODE_U = 24;
  static const int SDL_SCANCODE_V = 25;
  static const int SDL_SCANCODE_W = 26;
  static const int SDL_SCANCODE_X = 27;
  static const int SDL_SCANCODE_Y = 28;
  static const int SDL_SCANCODE_Z = 29;
  static const int SDL_SCANCODE_1 = 30;
  static const int SDL_SCANCODE_2 = 31;
  static const int SDL_SCANCODE_3 = 32;
  static const int SDL_SCANCODE_4 = 33;
  static const int SDL_SCANCODE_5 = 34;
  static const int SDL_SCANCODE_6 = 35;
  static const int SDL_SCANCODE_7 = 36;
  static const int SDL_SCANCODE_8 = 37;
  static const int SDL_SCANCODE_9 = 38;
  static const int SDL_SCANCODE_0 = 39;
  static const int SDL_SCANCODE_RETURN = 40;
  static const int SDL_SCANCODE_ESCAPE = 41;
  static const int SDL_SCANCODE_BACKSPACE = 42;
  static const int SDL_SCANCODE_TAB = 43;
  static const int SDL_SCANCODE_SPACE = 44;
  static const int SDL_SCANCODE_MINUS = 45;
  static const int SDL_SCANCODE_EQUALS = 46;
  static const int SDL_SCANCODE_LEFTBRACKET = 47;
  static const int SDL_SCANCODE_RIGHTBRACKET = 48;

  /// < Located at the lower left of the return
  /// key on ISO keyboards and at the right end
  /// of the QWERTY row on ANSI keyboards.
  /// Produces REVERSE SOLIDUS (backslash) and
  /// VERTICAL LINE in a US layout, REVERSE
  /// SOLIDUS and VERTICAL LINE in a UK Mac
  /// layout, NUMBER SIGN and TILDE in a UK
  /// Windows layout, DOLLAR SIGN and POUND SIGN
  /// in a Swiss German layout, NUMBER SIGN and
  /// APOSTROPHE in a German layout, GRAVE
  /// ACCENT and POUND SIGN in a French Mac
  /// layout, and ASTERISK and MICRO SIGN in a
  /// French Windows layout.
  static const int SDL_SCANCODE_BACKSLASH = 49;

  /// < ISO USB keyboards actually use this code
  /// instead of 49 for the same key, but all
  /// OSes I've seen treat the two codes
  /// identically. So, as an implementor, unless
  /// your keyboard generates both of those
  /// codes and your OS treats them differently,
  /// you should generate SDL_SCANCODE_BACKSLASH
  /// instead of this code. As a user, you
  /// should not rely on this code because SDL
  /// will never generate it with most (all?)
  /// keyboards.
  static const int SDL_SCANCODE_NONUSHASH = 50;
  static const int SDL_SCANCODE_SEMICOLON = 51;
  static const int SDL_SCANCODE_APOSTROPHE = 52;

  /// < Located in the top left corner (on both ANSI
  /// and ISO keyboards). Produces GRAVE ACCENT and
  /// TILDE in a US Windows layout and in US and UK
  /// Mac layouts on ANSI keyboards, GRAVE ACCENT
  /// and NOT SIGN in a UK Windows layout, SECTION
  /// SIGN and PLUS-MINUS SIGN in US and UK Mac
  /// layouts on ISO keyboards, SECTION SIGN and
  /// DEGREE SIGN in a Swiss German layout (Mac:
  /// only on ISO keyboards), CIRCUMFLEX ACCENT and
  /// DEGREE SIGN in a German layout (Mac: only on
  /// ISO keyboards), SUPERSCRIPT TWO and TILDE in a
  /// French Windows layout, COMMERCIAL AT and
  /// NUMBER SIGN in a French Mac layout on ISO
  /// keyboards, and LESS-THAN SIGN and GREATER-THAN
  /// SIGN in a Swiss German, German, or French Mac
  /// layout on ANSI keyboards.
  static const int SDL_SCANCODE_GRAVE = 53;
  static const int SDL_SCANCODE_COMMA = 54;
  static const int SDL_SCANCODE_PERIOD = 55;
  static const int SDL_SCANCODE_SLASH = 56;
  static const int SDL_SCANCODE_CAPSLOCK = 57;
  static const int SDL_SCANCODE_F1 = 58;
  static const int SDL_SCANCODE_F2 = 59;
  static const int SDL_SCANCODE_F3 = 60;
  static const int SDL_SCANCODE_F4 = 61;
  static const int SDL_SCANCODE_F5 = 62;
  static const int SDL_SCANCODE_F6 = 63;
  static const int SDL_SCANCODE_F7 = 64;
  static const int SDL_SCANCODE_F8 = 65;
  static const int SDL_SCANCODE_F9 = 66;
  static const int SDL_SCANCODE_F10 = 67;
  static const int SDL_SCANCODE_F11 = 68;
  static const int SDL_SCANCODE_F12 = 69;
  static const int SDL_SCANCODE_PRINTSCREEN = 70;
  static const int SDL_SCANCODE_SCROLLLOCK = 71;
  static const int SDL_SCANCODE_PAUSE = 72;

  /// < insert on PC, help on some Mac keyboards (but
  /// does send code 73, not 117)
  static const int SDL_SCANCODE_INSERT = 73;
  static const int SDL_SCANCODE_HOME = 74;
  static const int SDL_SCANCODE_PAGEUP = 75;
  static const int SDL_SCANCODE_DELETE = 76;
  static const int SDL_SCANCODE_END = 77;
  static const int SDL_SCANCODE_PAGEDOWN = 78;
  static const int SDL_SCANCODE_RIGHT = 79;
  static const int SDL_SCANCODE_LEFT = 80;
  static const int SDL_SCANCODE_DOWN = 81;
  static const int SDL_SCANCODE_UP = 82;

  /// < num lock on PC, clear on Mac keyboards
  static const int SDL_SCANCODE_NUMLOCKCLEAR = 83;
  static const int SDL_SCANCODE_KP_DIVIDE = 84;
  static const int SDL_SCANCODE_KP_MULTIPLY = 85;
  static const int SDL_SCANCODE_KP_MINUS = 86;
  static const int SDL_SCANCODE_KP_PLUS = 87;
  static const int SDL_SCANCODE_KP_ENTER = 88;
  static const int SDL_SCANCODE_KP_1 = 89;
  static const int SDL_SCANCODE_KP_2 = 90;
  static const int SDL_SCANCODE_KP_3 = 91;
  static const int SDL_SCANCODE_KP_4 = 92;
  static const int SDL_SCANCODE_KP_5 = 93;
  static const int SDL_SCANCODE_KP_6 = 94;
  static const int SDL_SCANCODE_KP_7 = 95;
  static const int SDL_SCANCODE_KP_8 = 96;
  static const int SDL_SCANCODE_KP_9 = 97;
  static const int SDL_SCANCODE_KP_0 = 98;
  static const int SDL_SCANCODE_KP_PERIOD = 99;

  /// < This is the additional key that ISO
  /// keyboards have over ANSI ones,
  /// located between left shift and Y.
  /// Produces GRAVE ACCENT and TILDE in a
  /// US or UK Mac layout, REVERSE SOLIDUS
  /// (backslash) and VERTICAL LINE in a
  /// US or UK Windows layout, and
  /// LESS-THAN SIGN and GREATER-THAN SIGN
  /// in a Swiss German, German, or French
  /// layout.
  static const int SDL_SCANCODE_NONUSBACKSLASH = 100;

  /// < windows contextual menu, compose
  static const int SDL_SCANCODE_APPLICATION = 101;

  /// < The USB document says this is a status flag,
  /// not a physical key - but some Mac keyboards
  /// do have a power key.
  static const int SDL_SCANCODE_POWER = 102;
  static const int SDL_SCANCODE_KP_EQUALS = 103;
  static const int SDL_SCANCODE_F13 = 104;
  static const int SDL_SCANCODE_F14 = 105;
  static const int SDL_SCANCODE_F15 = 106;
  static const int SDL_SCANCODE_F16 = 107;
  static const int SDL_SCANCODE_F17 = 108;
  static const int SDL_SCANCODE_F18 = 109;
  static const int SDL_SCANCODE_F19 = 110;
  static const int SDL_SCANCODE_F20 = 111;
  static const int SDL_SCANCODE_F21 = 112;
  static const int SDL_SCANCODE_F22 = 113;
  static const int SDL_SCANCODE_F23 = 114;
  static const int SDL_SCANCODE_F24 = 115;
  static const int SDL_SCANCODE_EXECUTE = 116;
  static const int SDL_SCANCODE_HELP = 117;
  static const int SDL_SCANCODE_MENU = 118;
  static const int SDL_SCANCODE_SELECT = 119;
  static const int SDL_SCANCODE_STOP = 120;

  /// < redo
  static const int SDL_SCANCODE_AGAIN = 121;
  static const int SDL_SCANCODE_UNDO = 122;
  static const int SDL_SCANCODE_CUT = 123;
  static const int SDL_SCANCODE_COPY = 124;
  static const int SDL_SCANCODE_PASTE = 125;
  static const int SDL_SCANCODE_FIND = 126;
  static const int SDL_SCANCODE_MUTE = 127;
  static const int SDL_SCANCODE_VOLUMEUP = 128;
  static const int SDL_SCANCODE_VOLUMEDOWN = 129;
  static const int SDL_SCANCODE_KP_COMMA = 133;
  static const int SDL_SCANCODE_KP_EQUALSAS400 = 134;

  /// < used on Asian keyboards, see
  /// footnotes in USB doc
  static const int SDL_SCANCODE_INTERNATIONAL1 = 135;
  static const int SDL_SCANCODE_INTERNATIONAL2 = 136;

  /// < Yen
  static const int SDL_SCANCODE_INTERNATIONAL3 = 137;
  static const int SDL_SCANCODE_INTERNATIONAL4 = 138;
  static const int SDL_SCANCODE_INTERNATIONAL5 = 139;
  static const int SDL_SCANCODE_INTERNATIONAL6 = 140;
  static const int SDL_SCANCODE_INTERNATIONAL7 = 141;
  static const int SDL_SCANCODE_INTERNATIONAL8 = 142;
  static const int SDL_SCANCODE_INTERNATIONAL9 = 143;

  /// < Hangul/English toggle
  static const int SDL_SCANCODE_LANG1 = 144;

  /// < Hanja conversion
  static const int SDL_SCANCODE_LANG2 = 145;

  /// < Katakana
  static const int SDL_SCANCODE_LANG3 = 146;

  /// < Hiragana
  static const int SDL_SCANCODE_LANG4 = 147;

  /// < Zenkaku/Hankaku
  static const int SDL_SCANCODE_LANG5 = 148;

  /// < reserved
  static const int SDL_SCANCODE_LANG6 = 149;

  /// < reserved
  static const int SDL_SCANCODE_LANG7 = 150;

  /// < reserved
  static const int SDL_SCANCODE_LANG8 = 151;

  /// < reserved
  static const int SDL_SCANCODE_LANG9 = 152;

  /// < Erase-Eaze
  static const int SDL_SCANCODE_ALTERASE = 153;
  static const int SDL_SCANCODE_SYSREQ = 154;
  static const int SDL_SCANCODE_CANCEL = 155;
  static const int SDL_SCANCODE_CLEAR = 156;
  static const int SDL_SCANCODE_PRIOR = 157;
  static const int SDL_SCANCODE_RETURN2 = 158;
  static const int SDL_SCANCODE_SEPARATOR = 159;
  static const int SDL_SCANCODE_OUT = 160;
  static const int SDL_SCANCODE_OPER = 161;
  static const int SDL_SCANCODE_CLEARAGAIN = 162;
  static const int SDL_SCANCODE_CRSEL = 163;
  static const int SDL_SCANCODE_EXSEL = 164;
  static const int SDL_SCANCODE_KP_00 = 176;
  static const int SDL_SCANCODE_KP_000 = 177;
  static const int SDL_SCANCODE_THOUSANDSSEPARATOR = 178;
  static const int SDL_SCANCODE_DECIMALSEPARATOR = 179;
  static const int SDL_SCANCODE_CURRENCYUNIT = 180;
  static const int SDL_SCANCODE_CURRENCYSUBUNIT = 181;
  static const int SDL_SCANCODE_KP_LEFTPAREN = 182;
  static const int SDL_SCANCODE_KP_RIGHTPAREN = 183;
  static const int SDL_SCANCODE_KP_LEFTBRACE = 184;
  static const int SDL_SCANCODE_KP_RIGHTBRACE = 185;
  static const int SDL_SCANCODE_KP_TAB = 186;
  static const int SDL_SCANCODE_KP_BACKSPACE = 187;
  static const int SDL_SCANCODE_KP_A = 188;
  static const int SDL_SCANCODE_KP_B = 189;
  static const int SDL_SCANCODE_KP_C = 190;
  static const int SDL_SCANCODE_KP_D = 191;
  static const int SDL_SCANCODE_KP_E = 192;
  static const int SDL_SCANCODE_KP_F = 193;
  static const int SDL_SCANCODE_KP_XOR = 194;
  static const int SDL_SCANCODE_KP_POWER = 195;
  static const int SDL_SCANCODE_KP_PERCENT = 196;
  static const int SDL_SCANCODE_KP_LESS = 197;
  static const int SDL_SCANCODE_KP_GREATER = 198;
  static const int SDL_SCANCODE_KP_AMPERSAND = 199;
  static const int SDL_SCANCODE_KP_DBLAMPERSAND = 200;
  static const int SDL_SCANCODE_KP_VERTICALBAR = 201;
  static const int SDL_SCANCODE_KP_DBLVERTICALBAR = 202;
  static const int SDL_SCANCODE_KP_COLON = 203;
  static const int SDL_SCANCODE_KP_HASH = 204;
  static const int SDL_SCANCODE_KP_SPACE = 205;
  static const int SDL_SCANCODE_KP_AT = 206;
  static const int SDL_SCANCODE_KP_EXCLAM = 207;
  static const int SDL_SCANCODE_KP_MEMSTORE = 208;
  static const int SDL_SCANCODE_KP_MEMRECALL = 209;
  static const int SDL_SCANCODE_KP_MEMCLEAR = 210;
  static const int SDL_SCANCODE_KP_MEMADD = 211;
  static const int SDL_SCANCODE_KP_MEMSUBTRACT = 212;
  static const int SDL_SCANCODE_KP_MEMMULTIPLY = 213;
  static const int SDL_SCANCODE_KP_MEMDIVIDE = 214;
  static const int SDL_SCANCODE_KP_PLUSMINUS = 215;
  static const int SDL_SCANCODE_KP_CLEAR = 216;
  static const int SDL_SCANCODE_KP_CLEARENTRY = 217;
  static const int SDL_SCANCODE_KP_BINARY = 218;
  static const int SDL_SCANCODE_KP_OCTAL = 219;
  static const int SDL_SCANCODE_KP_DECIMAL = 220;
  static const int SDL_SCANCODE_KP_HEXADECIMAL = 221;
  static const int SDL_SCANCODE_LCTRL = 224;
  static const int SDL_SCANCODE_LSHIFT = 225;

  /// < alt, option
  static const int SDL_SCANCODE_LALT = 226;

  /// < windows, command (apple), meta
  static const int SDL_SCANCODE_LGUI = 227;
  static const int SDL_SCANCODE_RCTRL = 228;
  static const int SDL_SCANCODE_RSHIFT = 229;

  /// < alt gr, option
  static const int SDL_SCANCODE_RALT = 230;

  /// < windows, command (apple), meta
  static const int SDL_SCANCODE_RGUI = 231;

  /// < I'm not sure if this is really not covered
  /// by any of the above, but since there's a
  /// special KMOD_MODE for it I'm adding it here
  static const int SDL_SCANCODE_MODE = 257;
  static const int SDL_SCANCODE_AUDIONEXT = 258;
  static const int SDL_SCANCODE_AUDIOPREV = 259;
  static const int SDL_SCANCODE_AUDIOSTOP = 260;
  static const int SDL_SCANCODE_AUDIOPLAY = 261;
  static const int SDL_SCANCODE_AUDIOMUTE = 262;
  static const int SDL_SCANCODE_MEDIASELECT = 263;
  static const int SDL_SCANCODE_WWW = 264;
  static const int SDL_SCANCODE_MAIL = 265;
  static const int SDL_SCANCODE_CALCULATOR = 266;
  static const int SDL_SCANCODE_COMPUTER = 267;
  static const int SDL_SCANCODE_AC_SEARCH = 268;
  static const int SDL_SCANCODE_AC_HOME = 269;
  static const int SDL_SCANCODE_AC_BACK = 270;
  static const int SDL_SCANCODE_AC_FORWARD = 271;
  static const int SDL_SCANCODE_AC_STOP = 272;
  static const int SDL_SCANCODE_AC_REFRESH = 273;
  static const int SDL_SCANCODE_AC_BOOKMARKS = 274;
  static const int SDL_SCANCODE_BRIGHTNESSDOWN = 275;
  static const int SDL_SCANCODE_BRIGHTNESSUP = 276;

  /// < display mirroring/dual display
  /// switch, video mode switch
  static const int SDL_SCANCODE_DISPLAYSWITCH = 277;
  static const int SDL_SCANCODE_KBDILLUMTOGGLE = 278;
  static const int SDL_SCANCODE_KBDILLUMDOWN = 279;
  static const int SDL_SCANCODE_KBDILLUMUP = 280;
  static const int SDL_SCANCODE_EJECT = 281;
  static const int SDL_SCANCODE_SLEEP = 282;
  static const int SDL_SCANCODE_APP1 = 283;
  static const int SDL_SCANCODE_APP2 = 284;
  static const int SDL_SCANCODE_AUDIOREWIND = 285;
  static const int SDL_SCANCODE_AUDIOFASTFORWARD = 286;

  /// < not a key, just marks the number of scancodes
  /// for array bounds
  static const int SDL_NUM_SCANCODES = 512;
}

abstract class SDL_KeyCode {
  static const int SDLK_UNKNOWN = 0;
  static const int SDLK_RETURN = 13;
  static const int SDLK_ESCAPE = 27;
  static const int SDLK_BACKSPACE = 8;
  static const int SDLK_TAB = 9;
  static const int SDLK_SPACE = 32;
  static const int SDLK_EXCLAIM = 33;
  static const int SDLK_QUOTEDBL = 34;
  static const int SDLK_HASH = 35;
  static const int SDLK_PERCENT = 37;
  static const int SDLK_DOLLAR = 36;
  static const int SDLK_AMPERSAND = 38;
  static const int SDLK_QUOTE = 39;
  static const int SDLK_LEFTPAREN = 40;
  static const int SDLK_RIGHTPAREN = 41;
  static const int SDLK_ASTERISK = 42;
  static const int SDLK_PLUS = 43;
  static const int SDLK_COMMA = 44;
  static const int SDLK_MINUS = 45;
  static const int SDLK_PERIOD = 46;
  static const int SDLK_SLASH = 47;
  static const int SDLK_0 = 48;
  static const int SDLK_1 = 49;
  static const int SDLK_2 = 50;
  static const int SDLK_3 = 51;
  static const int SDLK_4 = 52;
  static const int SDLK_5 = 53;
  static const int SDLK_6 = 54;
  static const int SDLK_7 = 55;
  static const int SDLK_8 = 56;
  static const int SDLK_9 = 57;
  static const int SDLK_COLON = 58;
  static const int SDLK_SEMICOLON = 59;
  static const int SDLK_LESS = 60;
  static const int SDLK_EQUALS = 61;
  static const int SDLK_GREATER = 62;
  static const int SDLK_QUESTION = 63;
  static const int SDLK_AT = 64;
  static const int SDLK_LEFTBRACKET = 91;
  static const int SDLK_BACKSLASH = 92;
  static const int SDLK_RIGHTBRACKET = 93;
  static const int SDLK_CARET = 94;
  static const int SDLK_UNDERSCORE = 95;
  static const int SDLK_BACKQUOTE = 96;
  static const int SDLK_a = 97;
  static const int SDLK_b = 98;
  static const int SDLK_c = 99;
  static const int SDLK_d = 100;
  static const int SDLK_e = 101;
  static const int SDLK_f = 102;
  static const int SDLK_g = 103;
  static const int SDLK_h = 104;
  static const int SDLK_i = 105;
  static const int SDLK_j = 106;
  static const int SDLK_k = 107;
  static const int SDLK_l = 108;
  static const int SDLK_m = 109;
  static const int SDLK_n = 110;
  static const int SDLK_o = 111;
  static const int SDLK_p = 112;
  static const int SDLK_q = 113;
  static const int SDLK_r = 114;
  static const int SDLK_s = 115;
  static const int SDLK_t = 116;
  static const int SDLK_u = 117;
  static const int SDLK_v = 118;
  static const int SDLK_w = 119;
  static const int SDLK_x = 120;
  static const int SDLK_y = 121;
  static const int SDLK_z = 122;
  static const int SDLK_CAPSLOCK = 1073741881;
  static const int SDLK_F1 = 1073741882;
  static const int SDLK_F2 = 1073741883;
  static const int SDLK_F3 = 1073741884;
  static const int SDLK_F4 = 1073741885;
  static const int SDLK_F5 = 1073741886;
  static const int SDLK_F6 = 1073741887;
  static const int SDLK_F7 = 1073741888;
  static const int SDLK_F8 = 1073741889;
  static const int SDLK_F9 = 1073741890;
  static const int SDLK_F10 = 1073741891;
  static const int SDLK_F11 = 1073741892;
  static const int SDLK_F12 = 1073741893;
  static const int SDLK_PRINTSCREEN = 1073741894;
  static const int SDLK_SCROLLLOCK = 1073741895;
  static const int SDLK_PAUSE = 1073741896;
  static const int SDLK_INSERT = 1073741897;
  static const int SDLK_HOME = 1073741898;
  static const int SDLK_PAGEUP = 1073741899;
  static const int SDLK_DELETE = 127;
  static const int SDLK_END = 1073741901;
  static const int SDLK_PAGEDOWN = 1073741902;
  static const int SDLK_RIGHT = 1073741903;
  static const int SDLK_LEFT = 1073741904;
  static const int SDLK_DOWN = 1073741905;
  static const int SDLK_UP = 1073741906;
  static const int SDLK_NUMLOCKCLEAR = 1073741907;
  static const int SDLK_KP_DIVIDE = 1073741908;
  static const int SDLK_KP_MULTIPLY = 1073741909;
  static const int SDLK_KP_MINUS = 1073741910;
  static const int SDLK_KP_PLUS = 1073741911;
  static const int SDLK_KP_ENTER = 1073741912;
  static const int SDLK_KP_1 = 1073741913;
  static const int SDLK_KP_2 = 1073741914;
  static const int SDLK_KP_3 = 1073741915;
  static const int SDLK_KP_4 = 1073741916;
  static const int SDLK_KP_5 = 1073741917;
  static const int SDLK_KP_6 = 1073741918;
  static const int SDLK_KP_7 = 1073741919;
  static const int SDLK_KP_8 = 1073741920;
  static const int SDLK_KP_9 = 1073741921;
  static const int SDLK_KP_0 = 1073741922;
  static const int SDLK_KP_PERIOD = 1073741923;
  static const int SDLK_APPLICATION = 1073741925;
  static const int SDLK_POWER = 1073741926;
  static const int SDLK_KP_EQUALS = 1073741927;
  static const int SDLK_F13 = 1073741928;
  static const int SDLK_F14 = 1073741929;
  static const int SDLK_F15 = 1073741930;
  static const int SDLK_F16 = 1073741931;
  static const int SDLK_F17 = 1073741932;
  static const int SDLK_F18 = 1073741933;
  static const int SDLK_F19 = 1073741934;
  static const int SDLK_F20 = 1073741935;
  static const int SDLK_F21 = 1073741936;
  static const int SDLK_F22 = 1073741937;
  static const int SDLK_F23 = 1073741938;
  static const int SDLK_F24 = 1073741939;
  static const int SDLK_EXECUTE = 1073741940;
  static const int SDLK_HELP = 1073741941;
  static const int SDLK_MENU = 1073741942;
  static const int SDLK_SELECT = 1073741943;
  static const int SDLK_STOP = 1073741944;
  static const int SDLK_AGAIN = 1073741945;
  static const int SDLK_UNDO = 1073741946;
  static const int SDLK_CUT = 1073741947;
  static const int SDLK_COPY = 1073741948;
  static const int SDLK_PASTE = 1073741949;
  static const int SDLK_FIND = 1073741950;
  static const int SDLK_MUTE = 1073741951;
  static const int SDLK_VOLUMEUP = 1073741952;
  static const int SDLK_VOLUMEDOWN = 1073741953;
  static const int SDLK_KP_COMMA = 1073741957;
  static const int SDLK_KP_EQUALSAS400 = 1073741958;
  static const int SDLK_ALTERASE = 1073741977;
  static const int SDLK_SYSREQ = 1073741978;
  static const int SDLK_CANCEL = 1073741979;
  static const int SDLK_CLEAR = 1073741980;
  static const int SDLK_PRIOR = 1073741981;
  static const int SDLK_RETURN2 = 1073741982;
  static const int SDLK_SEPARATOR = 1073741983;
  static const int SDLK_OUT = 1073741984;
  static const int SDLK_OPER = 1073741985;
  static const int SDLK_CLEARAGAIN = 1073741986;
  static const int SDLK_CRSEL = 1073741987;
  static const int SDLK_EXSEL = 1073741988;
  static const int SDLK_KP_00 = 1073742000;
  static const int SDLK_KP_000 = 1073742001;
  static const int SDLK_THOUSANDSSEPARATOR = 1073742002;
  static const int SDLK_DECIMALSEPARATOR = 1073742003;
  static const int SDLK_CURRENCYUNIT = 1073742004;
  static const int SDLK_CURRENCYSUBUNIT = 1073742005;
  static const int SDLK_KP_LEFTPAREN = 1073742006;
  static const int SDLK_KP_RIGHTPAREN = 1073742007;
  static const int SDLK_KP_LEFTBRACE = 1073742008;
  static const int SDLK_KP_RIGHTBRACE = 1073742009;
  static const int SDLK_KP_TAB = 1073742010;
  static const int SDLK_KP_BACKSPACE = 1073742011;
  static const int SDLK_KP_A = 1073742012;
  static const int SDLK_KP_B = 1073742013;
  static const int SDLK_KP_C = 1073742014;
  static const int SDLK_KP_D = 1073742015;
  static const int SDLK_KP_E = 1073742016;
  static const int SDLK_KP_F = 1073742017;
  static const int SDLK_KP_XOR = 1073742018;
  static const int SDLK_KP_POWER = 1073742019;
  static const int SDLK_KP_PERCENT = 1073742020;
  static const int SDLK_KP_LESS = 1073742021;
  static const int SDLK_KP_GREATER = 1073742022;
  static const int SDLK_KP_AMPERSAND = 1073742023;
  static const int SDLK_KP_DBLAMPERSAND = 1073742024;
  static const int SDLK_KP_VERTICALBAR = 1073742025;
  static const int SDLK_KP_DBLVERTICALBAR = 1073742026;
  static const int SDLK_KP_COLON = 1073742027;
  static const int SDLK_KP_HASH = 1073742028;
  static const int SDLK_KP_SPACE = 1073742029;
  static const int SDLK_KP_AT = 1073742030;
  static const int SDLK_KP_EXCLAM = 1073742031;
  static const int SDLK_KP_MEMSTORE = 1073742032;
  static const int SDLK_KP_MEMRECALL = 1073742033;
  static const int SDLK_KP_MEMCLEAR = 1073742034;
  static const int SDLK_KP_MEMADD = 1073742035;
  static const int SDLK_KP_MEMSUBTRACT = 1073742036;
  static const int SDLK_KP_MEMMULTIPLY = 1073742037;
  static const int SDLK_KP_MEMDIVIDE = 1073742038;
  static const int SDLK_KP_PLUSMINUS = 1073742039;
  static const int SDLK_KP_CLEAR = 1073742040;
  static const int SDLK_KP_CLEARENTRY = 1073742041;
  static const int SDLK_KP_BINARY = 1073742042;
  static const int SDLK_KP_OCTAL = 1073742043;
  static const int SDLK_KP_DECIMAL = 1073742044;
  static const int SDLK_KP_HEXADECIMAL = 1073742045;
  static const int SDLK_LCTRL = 1073742048;
  static const int SDLK_LSHIFT = 1073742049;
  static const int SDLK_LALT = 1073742050;
  static const int SDLK_LGUI = 1073742051;
  static const int SDLK_RCTRL = 1073742052;
  static const int SDLK_RSHIFT = 1073742053;
  static const int SDLK_RALT = 1073742054;
  static const int SDLK_RGUI = 1073742055;
  static const int SDLK_MODE = 1073742081;
  static const int SDLK_AUDIONEXT = 1073742082;
  static const int SDLK_AUDIOPREV = 1073742083;
  static const int SDLK_AUDIOSTOP = 1073742084;
  static const int SDLK_AUDIOPLAY = 1073742085;
  static const int SDLK_AUDIOMUTE = 1073742086;
  static const int SDLK_MEDIASELECT = 1073742087;
  static const int SDLK_WWW = 1073742088;
  static const int SDLK_MAIL = 1073742089;
  static const int SDLK_CALCULATOR = 1073742090;
  static const int SDLK_COMPUTER = 1073742091;
  static const int SDLK_AC_SEARCH = 1073742092;
  static const int SDLK_AC_HOME = 1073742093;
  static const int SDLK_AC_BACK = 1073742094;
  static const int SDLK_AC_FORWARD = 1073742095;
  static const int SDLK_AC_STOP = 1073742096;
  static const int SDLK_AC_REFRESH = 1073742097;
  static const int SDLK_AC_BOOKMARKS = 1073742098;
  static const int SDLK_BRIGHTNESSDOWN = 1073742099;
  static const int SDLK_BRIGHTNESSUP = 1073742100;
  static const int SDLK_DISPLAYSWITCH = 1073742101;
  static const int SDLK_KBDILLUMTOGGLE = 1073742102;
  static const int SDLK_KBDILLUMDOWN = 1073742103;
  static const int SDLK_KBDILLUMUP = 1073742104;
  static const int SDLK_EJECT = 1073742105;
  static const int SDLK_SLEEP = 1073742106;
  static const int SDLK_APP1 = 1073742107;
  static const int SDLK_APP2 = 1073742108;
  static const int SDLK_AUDIOREWIND = 1073742109;
  static const int SDLK_AUDIOFASTFORWARD = 1073742110;
}

/// \brief Enumeration of valid key mods (possibly OR'd together).
abstract class SDL_Keymod {
  static const int KMOD_NONE = 0;
  static const int KMOD_LSHIFT = 1;
  static const int KMOD_RSHIFT = 2;
  static const int KMOD_LCTRL = 64;
  static const int KMOD_RCTRL = 128;
  static const int KMOD_LALT = 256;
  static const int KMOD_RALT = 512;
  static const int KMOD_LGUI = 1024;
  static const int KMOD_RGUI = 2048;
  static const int KMOD_NUM = 4096;
  static const int KMOD_CAPS = 8192;
  static const int KMOD_MODE = 16384;
  static const int KMOD_RESERVED = 32768;
}

/// Pixel type.
abstract class SDL_PixelType {
  static const int SDL_PIXELTYPE_UNKNOWN = 0;
  static const int SDL_PIXELTYPE_INDEX1 = 1;
  static const int SDL_PIXELTYPE_INDEX4 = 2;
  static const int SDL_PIXELTYPE_INDEX8 = 3;
  static const int SDL_PIXELTYPE_PACKED8 = 4;
  static const int SDL_PIXELTYPE_PACKED16 = 5;
  static const int SDL_PIXELTYPE_PACKED32 = 6;
  static const int SDL_PIXELTYPE_ARRAYU8 = 7;
  static const int SDL_PIXELTYPE_ARRAYU16 = 8;
  static const int SDL_PIXELTYPE_ARRAYU32 = 9;
  static const int SDL_PIXELTYPE_ARRAYF16 = 10;
  static const int SDL_PIXELTYPE_ARRAYF32 = 11;
}

/// Bitmap pixel order, high bit -> low bit.
abstract class SDL_BitmapOrder {
  static const int SDL_BITMAPORDER_NONE = 0;
  static const int SDL_BITMAPORDER_4321 = 1;
  static const int SDL_BITMAPORDER_1234 = 2;
}

/// Packed component order, high bit -> low bit.
abstract class SDL_PackedOrder {
  static const int SDL_PACKEDORDER_NONE = 0;
  static const int SDL_PACKEDORDER_XRGB = 1;
  static const int SDL_PACKEDORDER_RGBX = 2;
  static const int SDL_PACKEDORDER_ARGB = 3;
  static const int SDL_PACKEDORDER_RGBA = 4;
  static const int SDL_PACKEDORDER_XBGR = 5;
  static const int SDL_PACKEDORDER_BGRX = 6;
  static const int SDL_PACKEDORDER_ABGR = 7;
  static const int SDL_PACKEDORDER_BGRA = 8;
}

/// Array component order, low byte -> high byte.
abstract class SDL_ArrayOrder {
  static const int SDL_ARRAYORDER_NONE = 0;
  static const int SDL_ARRAYORDER_RGB = 1;
  static const int SDL_ARRAYORDER_RGBA = 2;
  static const int SDL_ARRAYORDER_ARGB = 3;
  static const int SDL_ARRAYORDER_BGR = 4;
  static const int SDL_ARRAYORDER_BGRA = 5;
  static const int SDL_ARRAYORDER_ABGR = 6;
}

/// Packed component layout.
abstract class SDL_PackedLayout {
  static const int SDL_PACKEDLAYOUT_NONE = 0;
  static const int SDL_PACKEDLAYOUT_332 = 1;
  static const int SDL_PACKEDLAYOUT_4444 = 2;
  static const int SDL_PACKEDLAYOUT_1555 = 3;
  static const int SDL_PACKEDLAYOUT_5551 = 4;
  static const int SDL_PACKEDLAYOUT_565 = 5;
  static const int SDL_PACKEDLAYOUT_8888 = 6;
  static const int SDL_PACKEDLAYOUT_2101010 = 7;
  static const int SDL_PACKEDLAYOUT_1010102 = 8;
}

abstract class SDL_PixelFormatEnum {
  static const int SDL_PIXELFORMAT_UNKNOWN = 0;
  static const int SDL_PIXELFORMAT_INDEX1LSB = 286261504;
  static const int SDL_PIXELFORMAT_INDEX1MSB = 287310080;
  static const int SDL_PIXELFORMAT_INDEX4LSB = 303039488;
  static const int SDL_PIXELFORMAT_INDEX4MSB = 304088064;
  static const int SDL_PIXELFORMAT_INDEX8 = 318769153;
  static const int SDL_PIXELFORMAT_RGB332 = 336660481;
  static const int SDL_PIXELFORMAT_RGB444 = 353504258;
  static const int SDL_PIXELFORMAT_BGR444 = 357698562;
  static const int SDL_PIXELFORMAT_RGB555 = 353570562;
  static const int SDL_PIXELFORMAT_BGR555 = 357764866;
  static const int SDL_PIXELFORMAT_ARGB4444 = 355602434;
  static const int SDL_PIXELFORMAT_RGBA4444 = 356651010;
  static const int SDL_PIXELFORMAT_ABGR4444 = 359796738;
  static const int SDL_PIXELFORMAT_BGRA4444 = 360845314;
  static const int SDL_PIXELFORMAT_ARGB1555 = 355667970;
  static const int SDL_PIXELFORMAT_RGBA5551 = 356782082;
  static const int SDL_PIXELFORMAT_ABGR1555 = 359862274;
  static const int SDL_PIXELFORMAT_BGRA5551 = 360976386;
  static const int SDL_PIXELFORMAT_RGB565 = 353701890;
  static const int SDL_PIXELFORMAT_BGR565 = 357896194;
  static const int SDL_PIXELFORMAT_RGB24 = 386930691;
  static const int SDL_PIXELFORMAT_BGR24 = 390076419;
  static const int SDL_PIXELFORMAT_RGB888 = 370546692;
  static const int SDL_PIXELFORMAT_RGBX8888 = 371595268;
  static const int SDL_PIXELFORMAT_BGR888 = 374740996;
  static const int SDL_PIXELFORMAT_BGRX8888 = 375789572;
  static const int SDL_PIXELFORMAT_ARGB8888 = 372645892;
  static const int SDL_PIXELFORMAT_RGBA8888 = 373694468;
  static const int SDL_PIXELFORMAT_ABGR8888 = 376840196;
  static const int SDL_PIXELFORMAT_BGRA8888 = 377888772;
  static const int SDL_PIXELFORMAT_ARGB2101010 = 372711428;
  static const int SDL_PIXELFORMAT_RGBA32 = 376840196;
  static const int SDL_PIXELFORMAT_ARGB32 = 377888772;
  static const int SDL_PIXELFORMAT_BGRA32 = 372645892;
  static const int SDL_PIXELFORMAT_ABGR32 = 373694468;

  /// < Planar mode: Y + V + U  (3 planes)
  static const int SDL_PIXELFORMAT_YV12 = 842094169;

  /// < Planar mode: Y + U + V  (3 planes)
  static const int SDL_PIXELFORMAT_IYUV = 1448433993;

  /// < Packed mode: Y0+U0+Y1+V0 (1 plane)
  static const int SDL_PIXELFORMAT_YUY2 = 844715353;

  /// < Packed mode: U0+Y0+V0+Y1 (1 plane)
  static const int SDL_PIXELFORMAT_UYVY = 1498831189;

  /// < Packed mode: Y0+V0+Y1+U0 (1 plane)
  static const int SDL_PIXELFORMAT_YVYU = 1431918169;

  /// < Planar mode: Y + U/V interleaved  (2 planes)
  static const int SDL_PIXELFORMAT_NV12 = 842094158;

  /// < Planar mode: Y + V/U interleaved  (2 planes)
  static const int SDL_PIXELFORMAT_NV21 = 825382478;

  /// < Android video texture format
  static const int SDL_PIXELFORMAT_EXTERNAL_OES = 542328143;
}

class SDL_Color extends ffi.Struct {
  @ffi.Uint8()
  int r;

  @ffi.Uint8()
  int g;

  @ffi.Uint8()
  int b;

  @ffi.Uint8()
  int a;
}

class SDL_Palette extends ffi.Struct {
  @ffi.Int32()
  int ncolors;

  ffi.Pointer<SDL_Color> colors;

  @ffi.Uint32()
  int version;

  @ffi.Int32()
  int refcount;
}

/// \note Everything in the pixel format structure is read-only.
class SDL_PixelFormat extends ffi.Struct {}

/// \brief  The structure that defines a point (integer)
///
/// \sa SDL_EnclosePoints
/// \sa SDL_PointInRect
class SDL_Point extends ffi.Struct {
  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;
}

/// \brief  The structure that defines a point (floating point)
///
/// \sa SDL_EnclosePoints
/// \sa SDL_PointInRect
class SDL_FPoint extends ffi.Struct {
  @ffi.Float()
  double x;

  @ffi.Float()
  double y;
}

/// \brief A rectangle, with the origin at the upper left (integer).
///
/// \sa SDL_RectEmpty
/// \sa SDL_RectEquals
/// \sa SDL_HasIntersection
/// \sa SDL_IntersectRect
/// \sa SDL_UnionRect
/// \sa SDL_EnclosePoints
class SDL_Rect extends ffi.Struct {
  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int w;

  @ffi.Int32()
  int h;
}

/// \brief A rectangle, with the origin at the upper left (floating point).
class SDL_FRect extends ffi.Struct {
  @ffi.Float()
  double x;

  @ffi.Float()
  double y;

  @ffi.Float()
  double w;

  @ffi.Float()
  double h;
}

/// \brief The blend mode used in SDL_RenderCopy() and drawing operations.
abstract class SDL_BlendMode {
  /// < no blending
  /// dstRGBA = srcRGBA
  static const int SDL_BLENDMODE_NONE = 0;

  /// < alpha blending
  /// dstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA))
  /// dstA = srcA + (dstA * (1-srcA))
  static const int SDL_BLENDMODE_BLEND = 1;

  /// < additive blending
  /// dstRGB = (srcRGB * srcA) + dstRGB
  /// dstA = dstA
  static const int SDL_BLENDMODE_ADD = 2;

  /// < color modulate
  /// dstRGB = srcRGB * dstRGB
  /// dstA = dstA
  static const int SDL_BLENDMODE_MOD = 4;

  /// < color multiply
  /// dstRGB = (srcRGB * dstRGB) + (dstRGB * (1-srcA))
  /// dstA = (srcA * dstA) + (dstA * (1-srcA))
  static const int SDL_BLENDMODE_MUL = 8;
  static const int SDL_BLENDMODE_INVALID = 2147483647;
}

/// \brief The blend operation used when combining source and destination pixel components
abstract class SDL_BlendOperation {
  /// < dst + src: supported by all renderers
  static const int SDL_BLENDOPERATION_ADD = 1;

  /// < dst - src : supported by D3D9, D3D11, OpenGL, OpenGLES
  static const int SDL_BLENDOPERATION_SUBTRACT = 2;

  /// < src - dst : supported by D3D9, D3D11, OpenGL, OpenGLES
  static const int SDL_BLENDOPERATION_REV_SUBTRACT = 3;

  /// < min(dst, src) : supported by D3D11
  static const int SDL_BLENDOPERATION_MINIMUM = 4;

  /// < max(dst, src) : supported by D3D11
  static const int SDL_BLENDOPERATION_MAXIMUM = 5;
}

/// \brief The normalized factor used to multiply pixel components
abstract class SDL_BlendFactor {
  /// < 0, 0, 0, 0
  static const int SDL_BLENDFACTOR_ZERO = 1;

  /// < 1, 1, 1, 1
  static const int SDL_BLENDFACTOR_ONE = 2;

  /// < srcR, srcG, srcB, srcA
  static const int SDL_BLENDFACTOR_SRC_COLOR = 3;

  /// < 1-srcR, 1-srcG, 1-srcB, 1-srcA
  static const int SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4;

  /// < srcA, srcA, srcA, srcA
  static const int SDL_BLENDFACTOR_SRC_ALPHA = 5;

  /// < 1-srcA, 1-srcA, 1-srcA, 1-srcA
  static const int SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6;

  /// < dstR, dstG, dstB, dstA
  static const int SDL_BLENDFACTOR_DST_COLOR = 7;

  /// < 1-dstR, 1-dstG, 1-dstB, 1-dstA
  static const int SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8;

  /// < dstA, dstA, dstA, dstA
  static const int SDL_BLENDFACTOR_DST_ALPHA = 9;

  /// < 1-dstA, 1-dstA, 1-dstA, 1-dstA
  static const int SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10;
}

class SDL_BlitMap extends ffi.Struct {}

/// \brief A collection of pixels used in software blitting.
///
/// \note  This structure should be treated as read-only, except for \c pixels,
/// which, if not NULL, contains the raw pixel data for the surface.
class SDL_Surface extends ffi.Struct {}

/// \brief The formula used for converting between YUV and RGB
abstract class SDL_YUV_CONVERSION_MODE {
  /// < Full range JPEG
  static const int SDL_YUV_CONVERSION_JPEG = 0;

  /// < BT.601 (the default)
  static const int SDL_YUV_CONVERSION_BT601 = 1;

  /// < BT.709
  static const int SDL_YUV_CONVERSION_BT709 = 2;

  /// < BT.601 for SD content, BT.709 for HD content
  static const int SDL_YUV_CONVERSION_AUTOMATIC = 3;
}

/// \brief  The structure that defines a display mode
///
/// \sa SDL_GetNumDisplayModes()
/// \sa SDL_GetDisplayMode()
/// \sa SDL_GetDesktopDisplayMode()
/// \sa SDL_GetCurrentDisplayMode()
/// \sa SDL_GetClosestDisplayMode()
/// \sa SDL_SetWindowDisplayMode()
/// \sa SDL_GetWindowDisplayMode()
class SDL_DisplayMode extends ffi.Struct {
  /// < pixel format
  @ffi.Uint32()
  int format;

  /// < width, in screen coordinates
  @ffi.Int32()
  int w;

  /// < height, in screen coordinates
  @ffi.Int32()
  int h;

  /// < refresh rate (or zero for unspecified)
  @ffi.Int32()
  int refresh_rate;

  /// < driver-specific data, initialize to 0
  ffi.Pointer<ffi.Void> driverdata;
}

class SDL_Window extends ffi.Struct {}

/// \brief The flags on a window
///
/// \sa SDL_GetWindowFlags()
abstract class SDL_WindowFlags {
  /// < fullscreen window
  static const int SDL_WINDOW_FULLSCREEN = 1;

  /// < window usable with OpenGL context
  static const int SDL_WINDOW_OPENGL = 2;

  /// < window is visible
  static const int SDL_WINDOW_SHOWN = 4;

  /// < window is not visible
  static const int SDL_WINDOW_HIDDEN = 8;

  /// < no window decoration
  static const int SDL_WINDOW_BORDERLESS = 16;

  /// < window can be resized
  static const int SDL_WINDOW_RESIZABLE = 32;

  /// < window is minimized
  static const int SDL_WINDOW_MINIMIZED = 64;

  /// < window is maximized
  static const int SDL_WINDOW_MAXIMIZED = 128;

  /// < window has grabbed input focus
  static const int SDL_WINDOW_INPUT_GRABBED = 256;

  /// < window has input focus
  static const int SDL_WINDOW_INPUT_FOCUS = 512;

  /// < window has mouse focus
  static const int SDL_WINDOW_MOUSE_FOCUS = 1024;
  static const int SDL_WINDOW_FULLSCREEN_DESKTOP = 4097;

  /// < window not created by SDL
  static const int SDL_WINDOW_FOREIGN = 2048;

  /// < window should be created in high-DPI mode if supported.
  /// On macOS NSHighResolutionCapable must be set true in the
  /// application's Info.plist for this to have any effect.
  static const int SDL_WINDOW_ALLOW_HIGHDPI = 8192;

  /// < window has mouse captured (unrelated to INPUT_GRABBED)
  static const int SDL_WINDOW_MOUSE_CAPTURE = 16384;

  /// < window should always be above others
  static const int SDL_WINDOW_ALWAYS_ON_TOP = 32768;

  /// < window should not be added to the taskbar
  static const int SDL_WINDOW_SKIP_TASKBAR = 65536;

  /// < window should be treated as a utility window
  static const int SDL_WINDOW_UTILITY = 131072;

  /// < window should be treated as a tooltip
  static const int SDL_WINDOW_TOOLTIP = 262144;

  /// < window should be treated as a popup menu
  static const int SDL_WINDOW_POPUP_MENU = 524288;

  /// < window usable for Vulkan surface
  static const int SDL_WINDOW_VULKAN = 268435456;
}

/// \brief Event subtype for window events
abstract class SDL_WindowEventID {
  /// < Never used
  static const int SDL_WINDOWEVENT_NONE = 0;

  /// < Window has been shown
  static const int SDL_WINDOWEVENT_SHOWN = 1;

  /// < Window has been hidden
  static const int SDL_WINDOWEVENT_HIDDEN = 2;

  /// < Window has been exposed and should be
  /// redrawn
  static const int SDL_WINDOWEVENT_EXPOSED = 3;

  /// < Window has been moved to data1, data2
  static const int SDL_WINDOWEVENT_MOVED = 4;

  /// < Window has been resized to data1xdata2
  static const int SDL_WINDOWEVENT_RESIZED = 5;

  /// < The window size has changed, either as
  /// a result of an API call or through the
  /// system or user changing the window size.
  static const int SDL_WINDOWEVENT_SIZE_CHANGED = 6;

  /// < Window has been minimized
  static const int SDL_WINDOWEVENT_MINIMIZED = 7;

  /// < Window has been maximized
  static const int SDL_WINDOWEVENT_MAXIMIZED = 8;

  /// < Window has been restored to normal size
  /// and position
  static const int SDL_WINDOWEVENT_RESTORED = 9;

  /// < Window has gained mouse focus
  static const int SDL_WINDOWEVENT_ENTER = 10;

  /// < Window has lost mouse focus
  static const int SDL_WINDOWEVENT_LEAVE = 11;

  /// < Window has gained keyboard focus
  static const int SDL_WINDOWEVENT_FOCUS_GAINED = 12;

  /// < Window has lost keyboard focus
  static const int SDL_WINDOWEVENT_FOCUS_LOST = 13;

  /// < The window manager requests that the window be closed
  static const int SDL_WINDOWEVENT_CLOSE = 14;

  /// < Window is being offered a focus (should SetWindowInputFocus() on itself or a subwindow, or ignore)
  static const int SDL_WINDOWEVENT_TAKE_FOCUS = 15;

  /// < Window had a hit test that wasn't SDL_HITTEST_NORMAL.
  static const int SDL_WINDOWEVENT_HIT_TEST = 16;
}

/// \brief Event subtype for display events
abstract class SDL_DisplayEventID {
  /// < Never used
  static const int SDL_DISPLAYEVENT_NONE = 0;

  /// < Display orientation has changed to data1
  static const int SDL_DISPLAYEVENT_ORIENTATION = 1;
}

abstract class SDL_DisplayOrientation {
  /// < The display orientation can't be determined
  static const int SDL_ORIENTATION_UNKNOWN = 0;

  /// < The display is in landscape mode, with the right side up, relative to portrait mode
  static const int SDL_ORIENTATION_LANDSCAPE = 1;

  /// < The display is in landscape mode, with the left side up, relative to portrait mode
  static const int SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2;

  /// < The display is in portrait mode
  static const int SDL_ORIENTATION_PORTRAIT = 3;

  /// < The display is in portrait mode, upside down
  static const int SDL_ORIENTATION_PORTRAIT_FLIPPED = 4;
}

/// \brief OpenGL configuration attributes
abstract class SDL_GLattr {
  static const int SDL_GL_RED_SIZE = 0;
  static const int SDL_GL_GREEN_SIZE = 1;
  static const int SDL_GL_BLUE_SIZE = 2;
  static const int SDL_GL_ALPHA_SIZE = 3;
  static const int SDL_GL_BUFFER_SIZE = 4;
  static const int SDL_GL_DOUBLEBUFFER = 5;
  static const int SDL_GL_DEPTH_SIZE = 6;
  static const int SDL_GL_STENCIL_SIZE = 7;
  static const int SDL_GL_ACCUM_RED_SIZE = 8;
  static const int SDL_GL_ACCUM_GREEN_SIZE = 9;
  static const int SDL_GL_ACCUM_BLUE_SIZE = 10;
  static const int SDL_GL_ACCUM_ALPHA_SIZE = 11;
  static const int SDL_GL_STEREO = 12;
  static const int SDL_GL_MULTISAMPLEBUFFERS = 13;
  static const int SDL_GL_MULTISAMPLESAMPLES = 14;
  static const int SDL_GL_ACCELERATED_VISUAL = 15;
  static const int SDL_GL_RETAINED_BACKING = 16;
  static const int SDL_GL_CONTEXT_MAJOR_VERSION = 17;
  static const int SDL_GL_CONTEXT_MINOR_VERSION = 18;
  static const int SDL_GL_CONTEXT_EGL = 19;
  static const int SDL_GL_CONTEXT_FLAGS = 20;
  static const int SDL_GL_CONTEXT_PROFILE_MASK = 21;
  static const int SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22;
  static const int SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23;
  static const int SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24;
  static const int SDL_GL_CONTEXT_RESET_NOTIFICATION = 25;
  static const int SDL_GL_CONTEXT_NO_ERROR = 26;
}

abstract class SDL_GLprofile {
  static const int SDL_GL_CONTEXT_PROFILE_CORE = 1;
  static const int SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 2;

  /// < GLX_CONTEXT_ES2_PROFILE_BIT_EXT
  static const int SDL_GL_CONTEXT_PROFILE_ES = 4;
}

abstract class SDL_GLcontextFlag {
  static const int SDL_GL_CONTEXT_DEBUG_FLAG = 1;
  static const int SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2;
  static const int SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 4;
  static const int SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 8;
}

abstract class SDL_GLcontextReleaseFlag {
  static const int SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0;
  static const int SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 1;
}

abstract class SDL_GLContextResetNotification {
  static const int SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0;
  static const int SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 1;
}

/// \brief Possible return values from the SDL_HitTest callback.
///
/// \sa SDL_HitTest
abstract class SDL_HitTestResult {
  /// < Region is normal. No special properties.
  static const int SDL_HITTEST_NORMAL = 0;

  /// < Region can drag entire window.
  static const int SDL_HITTEST_DRAGGABLE = 1;
  static const int SDL_HITTEST_RESIZE_TOPLEFT = 2;
  static const int SDL_HITTEST_RESIZE_TOP = 3;
  static const int SDL_HITTEST_RESIZE_TOPRIGHT = 4;
  static const int SDL_HITTEST_RESIZE_RIGHT = 5;
  static const int SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6;
  static const int SDL_HITTEST_RESIZE_BOTTOM = 7;
  static const int SDL_HITTEST_RESIZE_BOTTOMLEFT = 8;
  static const int SDL_HITTEST_RESIZE_LEFT = 9;
}

/// \brief The SDL keysym structure, used in key events.
///
/// \note  If you are looking for translated character input, see the ::SDL_TEXTINPUT event.
class SDL_Keysym extends ffi.Struct {
  /// < SDL physical key code - see ::SDL_Scancode for details
  @ffi.Int32()
  int scancode;

  /// < SDL virtual key code - see ::SDL_Keycode for details
  @ffi.Int32()
  int sym;

  /// < current key modifiers
  @ffi.Uint16()
  int mod;

  @ffi.Uint32()
  int unused;
}

/// Holds information about a single test case.
class SDLTest_TestCaseReference extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<SDLTest_TestCaseFp>> testCase;

  ffi.Pointer<ffi.Int8> name;

  ffi.Pointer<ffi.Int8> description;

  @ffi.Int32()
  int enabled;
}

/// Holds information about a test suite (multiple test cases).
class SDLTest_TestSuiteReference extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  ffi.Pointer<ffi.NativeFunction<SDLTest_TestCaseSetUpFp>> testSetUp;

  ffi.Pointer<ffi.Pointer<SDLTest_TestCaseReference>> testCases;

  ffi.Pointer<ffi.NativeFunction<SDLTest_TestCaseTearDownFp>> testTearDown;
}

abstract class SDL_AssertState {
  /// < Retry the assert immediately.
  static const int SDL_ASSERTION_RETRY = 0;

  /// < Make the debugger trigger a breakpoint.
  static const int SDL_ASSERTION_BREAK = 1;

  /// < Terminate the program.
  static const int SDL_ASSERTION_ABORT = 2;

  /// < Ignore the assert.
  static const int SDL_ASSERTION_IGNORE = 3;

  /// < Ignore the assert from now on.
  static const int SDL_ASSERTION_ALWAYS_IGNORE = 4;
}

class SDL_AssertData extends ffi.Struct {
  @ffi.Int32()
  int always_ignore;

  @ffi.Uint32()
  int trigger_count;

  ffi.Pointer<ffi.Int8> condition;

  ffi.Pointer<ffi.Int8> filename;

  @ffi.Int32()
  int linenum;

  ffi.Pointer<ffi.Int8> function;

  ffi.Pointer<SDL_AssertData> next;
}

abstract class _MM_CMPINT_ENUM {
  static const int _MM_CMPINT_EQ = 0;
  static const int _MM_CMPINT_LT = 1;
  static const int _MM_CMPINT_LE = 2;
  static const int _MM_CMPINT_UNUSED = 3;
  static const int _MM_CMPINT_NE = 4;
  static const int _MM_CMPINT_NLT = 5;
  static const int _MM_CMPINT_NLE = 6;
}

abstract class _MM_PERM_ENUM {
  static const int _MM_PERM_AAAA = 0;
  static const int _MM_PERM_AAAB = 1;
  static const int _MM_PERM_AAAC = 2;
  static const int _MM_PERM_AAAD = 3;
  static const int _MM_PERM_AABA = 4;
  static const int _MM_PERM_AABB = 5;
  static const int _MM_PERM_AABC = 6;
  static const int _MM_PERM_AABD = 7;
  static const int _MM_PERM_AACA = 8;
  static const int _MM_PERM_AACB = 9;
  static const int _MM_PERM_AACC = 10;
  static const int _MM_PERM_AACD = 11;
  static const int _MM_PERM_AADA = 12;
  static const int _MM_PERM_AADB = 13;
  static const int _MM_PERM_AADC = 14;
  static const int _MM_PERM_AADD = 15;
  static const int _MM_PERM_ABAA = 16;
  static const int _MM_PERM_ABAB = 17;
  static const int _MM_PERM_ABAC = 18;
  static const int _MM_PERM_ABAD = 19;
  static const int _MM_PERM_ABBA = 20;
  static const int _MM_PERM_ABBB = 21;
  static const int _MM_PERM_ABBC = 22;
  static const int _MM_PERM_ABBD = 23;
  static const int _MM_PERM_ABCA = 24;
  static const int _MM_PERM_ABCB = 25;
  static const int _MM_PERM_ABCC = 26;
  static const int _MM_PERM_ABCD = 27;
  static const int _MM_PERM_ABDA = 28;
  static const int _MM_PERM_ABDB = 29;
  static const int _MM_PERM_ABDC = 30;
  static const int _MM_PERM_ABDD = 31;
  static const int _MM_PERM_ACAA = 32;
  static const int _MM_PERM_ACAB = 33;
  static const int _MM_PERM_ACAC = 34;
  static const int _MM_PERM_ACAD = 35;
  static const int _MM_PERM_ACBA = 36;
  static const int _MM_PERM_ACBB = 37;
  static const int _MM_PERM_ACBC = 38;
  static const int _MM_PERM_ACBD = 39;
  static const int _MM_PERM_ACCA = 40;
  static const int _MM_PERM_ACCB = 41;
  static const int _MM_PERM_ACCC = 42;
  static const int _MM_PERM_ACCD = 43;
  static const int _MM_PERM_ACDA = 44;
  static const int _MM_PERM_ACDB = 45;
  static const int _MM_PERM_ACDC = 46;
  static const int _MM_PERM_ACDD = 47;
  static const int _MM_PERM_ADAA = 48;
  static const int _MM_PERM_ADAB = 49;
  static const int _MM_PERM_ADAC = 50;
  static const int _MM_PERM_ADAD = 51;
  static const int _MM_PERM_ADBA = 52;
  static const int _MM_PERM_ADBB = 53;
  static const int _MM_PERM_ADBC = 54;
  static const int _MM_PERM_ADBD = 55;
  static const int _MM_PERM_ADCA = 56;
  static const int _MM_PERM_ADCB = 57;
  static const int _MM_PERM_ADCC = 58;
  static const int _MM_PERM_ADCD = 59;
  static const int _MM_PERM_ADDA = 60;
  static const int _MM_PERM_ADDB = 61;
  static const int _MM_PERM_ADDC = 62;
  static const int _MM_PERM_ADDD = 63;
  static const int _MM_PERM_BAAA = 64;
  static const int _MM_PERM_BAAB = 65;
  static const int _MM_PERM_BAAC = 66;
  static const int _MM_PERM_BAAD = 67;
  static const int _MM_PERM_BABA = 68;
  static const int _MM_PERM_BABB = 69;
  static const int _MM_PERM_BABC = 70;
  static const int _MM_PERM_BABD = 71;
  static const int _MM_PERM_BACA = 72;
  static const int _MM_PERM_BACB = 73;
  static const int _MM_PERM_BACC = 74;
  static const int _MM_PERM_BACD = 75;
  static const int _MM_PERM_BADA = 76;
  static const int _MM_PERM_BADB = 77;
  static const int _MM_PERM_BADC = 78;
  static const int _MM_PERM_BADD = 79;
  static const int _MM_PERM_BBAA = 80;
  static const int _MM_PERM_BBAB = 81;
  static const int _MM_PERM_BBAC = 82;
  static const int _MM_PERM_BBAD = 83;
  static const int _MM_PERM_BBBA = 84;
  static const int _MM_PERM_BBBB = 85;
  static const int _MM_PERM_BBBC = 86;
  static const int _MM_PERM_BBBD = 87;
  static const int _MM_PERM_BBCA = 88;
  static const int _MM_PERM_BBCB = 89;
  static const int _MM_PERM_BBCC = 90;
  static const int _MM_PERM_BBCD = 91;
  static const int _MM_PERM_BBDA = 92;
  static const int _MM_PERM_BBDB = 93;
  static const int _MM_PERM_BBDC = 94;
  static const int _MM_PERM_BBDD = 95;
  static const int _MM_PERM_BCAA = 96;
  static const int _MM_PERM_BCAB = 97;
  static const int _MM_PERM_BCAC = 98;
  static const int _MM_PERM_BCAD = 99;
  static const int _MM_PERM_BCBA = 100;
  static const int _MM_PERM_BCBB = 101;
  static const int _MM_PERM_BCBC = 102;
  static const int _MM_PERM_BCBD = 103;
  static const int _MM_PERM_BCCA = 104;
  static const int _MM_PERM_BCCB = 105;
  static const int _MM_PERM_BCCC = 106;
  static const int _MM_PERM_BCCD = 107;
  static const int _MM_PERM_BCDA = 108;
  static const int _MM_PERM_BCDB = 109;
  static const int _MM_PERM_BCDC = 110;
  static const int _MM_PERM_BCDD = 111;
  static const int _MM_PERM_BDAA = 112;
  static const int _MM_PERM_BDAB = 113;
  static const int _MM_PERM_BDAC = 114;
  static const int _MM_PERM_BDAD = 115;
  static const int _MM_PERM_BDBA = 116;
  static const int _MM_PERM_BDBB = 117;
  static const int _MM_PERM_BDBC = 118;
  static const int _MM_PERM_BDBD = 119;
  static const int _MM_PERM_BDCA = 120;
  static const int _MM_PERM_BDCB = 121;
  static const int _MM_PERM_BDCC = 122;
  static const int _MM_PERM_BDCD = 123;
  static const int _MM_PERM_BDDA = 124;
  static const int _MM_PERM_BDDB = 125;
  static const int _MM_PERM_BDDC = 126;
  static const int _MM_PERM_BDDD = 127;
  static const int _MM_PERM_CAAA = 128;
  static const int _MM_PERM_CAAB = 129;
  static const int _MM_PERM_CAAC = 130;
  static const int _MM_PERM_CAAD = 131;
  static const int _MM_PERM_CABA = 132;
  static const int _MM_PERM_CABB = 133;
  static const int _MM_PERM_CABC = 134;
  static const int _MM_PERM_CABD = 135;
  static const int _MM_PERM_CACA = 136;
  static const int _MM_PERM_CACB = 137;
  static const int _MM_PERM_CACC = 138;
  static const int _MM_PERM_CACD = 139;
  static const int _MM_PERM_CADA = 140;
  static const int _MM_PERM_CADB = 141;
  static const int _MM_PERM_CADC = 142;
  static const int _MM_PERM_CADD = 143;
  static const int _MM_PERM_CBAA = 144;
  static const int _MM_PERM_CBAB = 145;
  static const int _MM_PERM_CBAC = 146;
  static const int _MM_PERM_CBAD = 147;
  static const int _MM_PERM_CBBA = 148;
  static const int _MM_PERM_CBBB = 149;
  static const int _MM_PERM_CBBC = 150;
  static const int _MM_PERM_CBBD = 151;
  static const int _MM_PERM_CBCA = 152;
  static const int _MM_PERM_CBCB = 153;
  static const int _MM_PERM_CBCC = 154;
  static const int _MM_PERM_CBCD = 155;
  static const int _MM_PERM_CBDA = 156;
  static const int _MM_PERM_CBDB = 157;
  static const int _MM_PERM_CBDC = 158;
  static const int _MM_PERM_CBDD = 159;
  static const int _MM_PERM_CCAA = 160;
  static const int _MM_PERM_CCAB = 161;
  static const int _MM_PERM_CCAC = 162;
  static const int _MM_PERM_CCAD = 163;
  static const int _MM_PERM_CCBA = 164;
  static const int _MM_PERM_CCBB = 165;
  static const int _MM_PERM_CCBC = 166;
  static const int _MM_PERM_CCBD = 167;
  static const int _MM_PERM_CCCA = 168;
  static const int _MM_PERM_CCCB = 169;
  static const int _MM_PERM_CCCC = 170;
  static const int _MM_PERM_CCCD = 171;
  static const int _MM_PERM_CCDA = 172;
  static const int _MM_PERM_CCDB = 173;
  static const int _MM_PERM_CCDC = 174;
  static const int _MM_PERM_CCDD = 175;
  static const int _MM_PERM_CDAA = 176;
  static const int _MM_PERM_CDAB = 177;
  static const int _MM_PERM_CDAC = 178;
  static const int _MM_PERM_CDAD = 179;
  static const int _MM_PERM_CDBA = 180;
  static const int _MM_PERM_CDBB = 181;
  static const int _MM_PERM_CDBC = 182;
  static const int _MM_PERM_CDBD = 183;
  static const int _MM_PERM_CDCA = 184;
  static const int _MM_PERM_CDCB = 185;
  static const int _MM_PERM_CDCC = 186;
  static const int _MM_PERM_CDCD = 187;
  static const int _MM_PERM_CDDA = 188;
  static const int _MM_PERM_CDDB = 189;
  static const int _MM_PERM_CDDC = 190;
  static const int _MM_PERM_CDDD = 191;
  static const int _MM_PERM_DAAA = 192;
  static const int _MM_PERM_DAAB = 193;
  static const int _MM_PERM_DAAC = 194;
  static const int _MM_PERM_DAAD = 195;
  static const int _MM_PERM_DABA = 196;
  static const int _MM_PERM_DABB = 197;
  static const int _MM_PERM_DABC = 198;
  static const int _MM_PERM_DABD = 199;
  static const int _MM_PERM_DACA = 200;
  static const int _MM_PERM_DACB = 201;
  static const int _MM_PERM_DACC = 202;
  static const int _MM_PERM_DACD = 203;
  static const int _MM_PERM_DADA = 204;
  static const int _MM_PERM_DADB = 205;
  static const int _MM_PERM_DADC = 206;
  static const int _MM_PERM_DADD = 207;
  static const int _MM_PERM_DBAA = 208;
  static const int _MM_PERM_DBAB = 209;
  static const int _MM_PERM_DBAC = 210;
  static const int _MM_PERM_DBAD = 211;
  static const int _MM_PERM_DBBA = 212;
  static const int _MM_PERM_DBBB = 213;
  static const int _MM_PERM_DBBC = 214;
  static const int _MM_PERM_DBBD = 215;
  static const int _MM_PERM_DBCA = 216;
  static const int _MM_PERM_DBCB = 217;
  static const int _MM_PERM_DBCC = 218;
  static const int _MM_PERM_DBCD = 219;
  static const int _MM_PERM_DBDA = 220;
  static const int _MM_PERM_DBDB = 221;
  static const int _MM_PERM_DBDC = 222;
  static const int _MM_PERM_DBDD = 223;
  static const int _MM_PERM_DCAA = 224;
  static const int _MM_PERM_DCAB = 225;
  static const int _MM_PERM_DCAC = 226;
  static const int _MM_PERM_DCAD = 227;
  static const int _MM_PERM_DCBA = 228;
  static const int _MM_PERM_DCBB = 229;
  static const int _MM_PERM_DCBC = 230;
  static const int _MM_PERM_DCBD = 231;
  static const int _MM_PERM_DCCA = 232;
  static const int _MM_PERM_DCCB = 233;
  static const int _MM_PERM_DCCC = 234;
  static const int _MM_PERM_DCCD = 235;
  static const int _MM_PERM_DCDA = 236;
  static const int _MM_PERM_DCDB = 237;
  static const int _MM_PERM_DCDC = 238;
  static const int _MM_PERM_DCDD = 239;
  static const int _MM_PERM_DDAA = 240;
  static const int _MM_PERM_DDAB = 241;
  static const int _MM_PERM_DDAC = 242;
  static const int _MM_PERM_DDAD = 243;
  static const int _MM_PERM_DDBA = 244;
  static const int _MM_PERM_DDBB = 245;
  static const int _MM_PERM_DDBC = 246;
  static const int _MM_PERM_DDBD = 247;
  static const int _MM_PERM_DDCA = 248;
  static const int _MM_PERM_DDCB = 249;
  static const int _MM_PERM_DDCC = 250;
  static const int _MM_PERM_DDCD = 251;
  static const int _MM_PERM_DDDA = 252;
  static const int _MM_PERM_DDDB = 253;
  static const int _MM_PERM_DDDC = 254;
  static const int _MM_PERM_DDDD = 255;
}

abstract class _MM_MANTISSA_NORM_ENUM {
  static const int _MM_MANT_NORM_1_2 = 0;
  static const int _MM_MANT_NORM_p5_2 = 1;
  static const int _MM_MANT_NORM_p5_1 = 2;
  static const int _MM_MANT_NORM_p75_1p5 = 3;
}

abstract class _MM_MANTISSA_SIGN_ENUM {
  static const int _MM_MANT_SIGN_src = 0;
  static const int _MM_MANT_SIGN_zero = 1;
  static const int _MM_MANT_SIGN_nan = 2;
}

class SDL_Cursor extends ffi.Struct {}

/// \brief Cursor types for SDL_CreateSystemCursor().
abstract class SDL_SystemCursor {
  /// < Arrow
  static const int SDL_SYSTEM_CURSOR_ARROW = 0;

  /// < I-beam
  static const int SDL_SYSTEM_CURSOR_IBEAM = 1;

  /// < Wait
  static const int SDL_SYSTEM_CURSOR_WAIT = 2;

  /// < Crosshair
  static const int SDL_SYSTEM_CURSOR_CROSSHAIR = 3;

  /// < Small wait cursor (or Wait if not available)
  static const int SDL_SYSTEM_CURSOR_WAITARROW = 4;

  /// < Double arrow pointing northwest and southeast
  static const int SDL_SYSTEM_CURSOR_SIZENWSE = 5;

  /// < Double arrow pointing northeast and southwest
  static const int SDL_SYSTEM_CURSOR_SIZENESW = 6;

  /// < Double arrow pointing west and east
  static const int SDL_SYSTEM_CURSOR_SIZEWE = 7;

  /// < Double arrow pointing north and south
  static const int SDL_SYSTEM_CURSOR_SIZENS = 8;

  /// < Four pointed arrow pointing north, south, east, and west
  static const int SDL_SYSTEM_CURSOR_SIZEALL = 9;

  /// < Slashed circle or crossbones
  static const int SDL_SYSTEM_CURSOR_NO = 10;

  /// < Hand
  static const int SDL_SYSTEM_CURSOR_HAND = 11;
  static const int SDL_NUM_SYSTEM_CURSORS = 12;
}

/// \brief Scroll direction types for the Scroll event
abstract class SDL_MouseWheelDirection {
  /// < The scroll direction is normal
  static const int SDL_MOUSEWHEEL_NORMAL = 0;

  /// < The scroll direction is flipped / natural
  static const int SDL_MOUSEWHEEL_FLIPPED = 1;
}

/// The joystick structure used to identify an SDL joystick
class _SDL_Joystick extends ffi.Struct {}

class SDL_JoystickGUID extends ffi.Struct {}

abstract class SDL_JoystickType {
  static const int SDL_JOYSTICK_TYPE_UNKNOWN = 0;
  static const int SDL_JOYSTICK_TYPE_GAMECONTROLLER = 1;
  static const int SDL_JOYSTICK_TYPE_WHEEL = 2;
  static const int SDL_JOYSTICK_TYPE_ARCADE_STICK = 3;
  static const int SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4;
  static const int SDL_JOYSTICK_TYPE_DANCE_PAD = 5;
  static const int SDL_JOYSTICK_TYPE_GUITAR = 6;
  static const int SDL_JOYSTICK_TYPE_DRUM_KIT = 7;
  static const int SDL_JOYSTICK_TYPE_ARCADE_PAD = 8;
  static const int SDL_JOYSTICK_TYPE_THROTTLE = 9;
}

abstract class SDL_JoystickPowerLevel {
  static const int SDL_JOYSTICK_POWER_UNKNOWN = -1;
  static const int SDL_JOYSTICK_POWER_EMPTY = 0;
  static const int SDL_JOYSTICK_POWER_LOW = 1;
  static const int SDL_JOYSTICK_POWER_MEDIUM = 2;
  static const int SDL_JOYSTICK_POWER_FULL = 3;
  static const int SDL_JOYSTICK_POWER_WIRED = 4;
  static const int SDL_JOYSTICK_POWER_MAX = 5;
}

/// The gamecontroller structure used to identify an SDL game controller
class _SDL_GameController extends ffi.Struct {}

abstract class SDL_GameControllerType {
  static const int SDL_CONTROLLER_TYPE_UNKNOWN = 0;
  static const int SDL_CONTROLLER_TYPE_XBOX360 = 1;
  static const int SDL_CONTROLLER_TYPE_XBOXONE = 2;
  static const int SDL_CONTROLLER_TYPE_PS3 = 3;
  static const int SDL_CONTROLLER_TYPE_PS4 = 4;
  static const int SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO = 5;
}

abstract class SDL_GameControllerBindType {
  static const int SDL_CONTROLLER_BINDTYPE_NONE = 0;
  static const int SDL_CONTROLLER_BINDTYPE_BUTTON = 1;
  static const int SDL_CONTROLLER_BINDTYPE_AXIS = 2;
  static const int SDL_CONTROLLER_BINDTYPE_HAT = 3;
}

/// Get the SDL joystick layer binding for this controller button/axis mapping
class SDL_GameControllerButtonBind extends ffi.Struct {}

/// The list of axes available from a controller
///
/// Thumbstick axis values range from SDL_JOYSTICK_AXIS_MIN to SDL_JOYSTICK_AXIS_MAX,
/// and are centered within ~8000 of zero, though advanced UI will allow users to set
/// or autodetect the dead zone, which varies between controllers.
///
/// Trigger axis values range from 0 to SDL_JOYSTICK_AXIS_MAX.
abstract class SDL_GameControllerAxis {
  static const int SDL_CONTROLLER_AXIS_INVALID = -1;
  static const int SDL_CONTROLLER_AXIS_LEFTX = 0;
  static const int SDL_CONTROLLER_AXIS_LEFTY = 1;
  static const int SDL_CONTROLLER_AXIS_RIGHTX = 2;
  static const int SDL_CONTROLLER_AXIS_RIGHTY = 3;
  static const int SDL_CONTROLLER_AXIS_TRIGGERLEFT = 4;
  static const int SDL_CONTROLLER_AXIS_TRIGGERRIGHT = 5;
  static const int SDL_CONTROLLER_AXIS_MAX = 6;
}

/// The list of buttons available from a controller
abstract class SDL_GameControllerButton {
  static const int SDL_CONTROLLER_BUTTON_INVALID = -1;
  static const int SDL_CONTROLLER_BUTTON_A = 0;
  static const int SDL_CONTROLLER_BUTTON_B = 1;
  static const int SDL_CONTROLLER_BUTTON_X = 2;
  static const int SDL_CONTROLLER_BUTTON_Y = 3;
  static const int SDL_CONTROLLER_BUTTON_BACK = 4;
  static const int SDL_CONTROLLER_BUTTON_GUIDE = 5;
  static const int SDL_CONTROLLER_BUTTON_START = 6;
  static const int SDL_CONTROLLER_BUTTON_LEFTSTICK = 7;
  static const int SDL_CONTROLLER_BUTTON_RIGHTSTICK = 8;
  static const int SDL_CONTROLLER_BUTTON_LEFTSHOULDER = 9;
  static const int SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = 10;
  static const int SDL_CONTROLLER_BUTTON_DPAD_UP = 11;
  static const int SDL_CONTROLLER_BUTTON_DPAD_DOWN = 12;
  static const int SDL_CONTROLLER_BUTTON_DPAD_LEFT = 13;
  static const int SDL_CONTROLLER_BUTTON_DPAD_RIGHT = 14;
  static const int SDL_CONTROLLER_BUTTON_MAX = 15;
}

abstract class SDL_TouchDeviceType {
  static const int SDL_TOUCH_DEVICE_INVALID = -1;
  static const int SDL_TOUCH_DEVICE_DIRECT = 0;
  static const int SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1;
  static const int SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2;
}

class SDL_Finger extends ffi.Struct {
  @ffi.Int64()
  int id;

  @ffi.Float()
  double x;

  @ffi.Float()
  double y;

  @ffi.Float()
  double pressure;
}

/// \brief The types of events that can be delivered.
abstract class SDL_EventType {
  /// < Unused (do not remove)
  static const int SDL_FIRSTEVENT = 0;

  /// < User-requested quit
  static const int SDL_QUIT = 256;

  /// < The application is being terminated by the OS
  /// Called on iOS in applicationWillTerminate()
  /// Called on Android in onDestroy()
  static const int SDL_APP_TERMINATING = 257;

  /// < The application is low on memory, free memory if possible.
  /// Called on iOS in applicationDidReceiveMemoryWarning()
  /// Called on Android in onLowMemory()
  static const int SDL_APP_LOWMEMORY = 258;

  /// < The application is about to enter the background
  /// Called on iOS in applicationWillResignActive()
  /// Called on Android in onPause()
  static const int SDL_APP_WILLENTERBACKGROUND = 259;

  /// < The application did enter the background and may not get CPU for some time
  /// Called on iOS in applicationDidEnterBackground()
  /// Called on Android in onPause()
  static const int SDL_APP_DIDENTERBACKGROUND = 260;

  /// < The application is about to enter the foreground
  /// Called on iOS in applicationWillEnterForeground()
  /// Called on Android in onResume()
  static const int SDL_APP_WILLENTERFOREGROUND = 261;

  /// < The application is now interactive
  /// Called on iOS in applicationDidBecomeActive()
  /// Called on Android in onResume()
  static const int SDL_APP_DIDENTERFOREGROUND = 262;

  /// < Display state change
  static const int SDL_DISPLAYEVENT = 336;

  /// < Window state change
  static const int SDL_WINDOWEVENT = 512;

  /// < System specific event
  static const int SDL_SYSWMEVENT = 513;

  /// < Key pressed
  static const int SDL_KEYDOWN = 768;

  /// < Key released
  static const int SDL_KEYUP = 769;

  /// < Keyboard text editing (composition)
  static const int SDL_TEXTEDITING = 770;

  /// < Keyboard text input
  static const int SDL_TEXTINPUT = 771;

  /// < Keymap changed due to a system event such as an
  /// input language or keyboard layout change.
  static const int SDL_KEYMAPCHANGED = 772;

  /// < Mouse moved
  static const int SDL_MOUSEMOTION = 1024;

  /// < Mouse button pressed
  static const int SDL_MOUSEBUTTONDOWN = 1025;

  /// < Mouse button released
  static const int SDL_MOUSEBUTTONUP = 1026;

  /// < Mouse wheel motion
  static const int SDL_MOUSEWHEEL = 1027;

  /// < Joystick axis motion
  static const int SDL_JOYAXISMOTION = 1536;

  /// < Joystick trackball motion
  static const int SDL_JOYBALLMOTION = 1537;

  /// < Joystick hat position change
  static const int SDL_JOYHATMOTION = 1538;

  /// < Joystick button pressed
  static const int SDL_JOYBUTTONDOWN = 1539;

  /// < Joystick button released
  static const int SDL_JOYBUTTONUP = 1540;

  /// < A new joystick has been inserted into the system
  static const int SDL_JOYDEVICEADDED = 1541;

  /// < An opened joystick has been removed
  static const int SDL_JOYDEVICEREMOVED = 1542;

  /// < Game controller axis motion
  static const int SDL_CONTROLLERAXISMOTION = 1616;

  /// < Game controller button pressed
  static const int SDL_CONTROLLERBUTTONDOWN = 1617;

  /// < Game controller button released
  static const int SDL_CONTROLLERBUTTONUP = 1618;

  /// < A new Game controller has been inserted into the system
  static const int SDL_CONTROLLERDEVICEADDED = 1619;

  /// < An opened Game controller has been removed
  static const int SDL_CONTROLLERDEVICEREMOVED = 1620;

  /// < The controller mapping was updated
  static const int SDL_CONTROLLERDEVICEREMAPPED = 1621;
  static const int SDL_FINGERDOWN = 1792;
  static const int SDL_FINGERUP = 1793;
  static const int SDL_FINGERMOTION = 1794;
  static const int SDL_DOLLARGESTURE = 2048;
  static const int SDL_DOLLARRECORD = 2049;
  static const int SDL_MULTIGESTURE = 2050;

  /// < The clipboard changed
  static const int SDL_CLIPBOARDUPDATE = 2304;

  /// < The system requests a file open
  static const int SDL_DROPFILE = 4096;

  /// < text/plain drag-and-drop event
  static const int SDL_DROPTEXT = 4097;

  /// < A new set of drops is beginning (NULL filename)
  static const int SDL_DROPBEGIN = 4098;

  /// < Current set of drops is now complete (NULL filename)
  static const int SDL_DROPCOMPLETE = 4099;

  /// < A new audio device is available
  static const int SDL_AUDIODEVICEADDED = 4352;

  /// < An audio device has been removed.
  static const int SDL_AUDIODEVICEREMOVED = 4353;

  /// < A sensor was updated
  static const int SDL_SENSORUPDATE = 4608;

  /// < The render targets have been reset and their contents need to be updated
  static const int SDL_RENDER_TARGETS_RESET = 8192;

  /// < The device has been reset and all textures need to be recreated
  static const int SDL_RENDER_DEVICE_RESET = 8193;

  /// Events ::SDL_USEREVENT through ::SDL_LASTEVENT are for your use,
  /// and should be allocated with SDL_RegisterEvents()
  static const int SDL_USEREVENT = 32768;

  /// This last event is only for bounding internal arrays
  static const int SDL_LASTEVENT = 65535;
}

/// \brief Fields shared by every event
class SDL_CommonEvent extends ffi.Struct {
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;
}

/// \brief Display state change event data (event.display.*)
class SDL_DisplayEvent extends ffi.Struct {
  /// < ::SDL_DISPLAYEVENT
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The associated display index
  @ffi.Uint32()
  int display;

  /// < ::SDL_DisplayEventID
  @ffi.Uint8()
  int event;

  @ffi.Uint8()
  int padding1;

  @ffi.Uint8()
  int padding2;

  @ffi.Uint8()
  int padding3;

  /// < event dependent data
  @ffi.Int32()
  int data1;
}

/// \brief Window state change event data (event.window.*)
class SDL_WindowEvent extends ffi.Struct {
  /// < ::SDL_WINDOWEVENT
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The associated window
  @ffi.Uint32()
  int windowID;

  /// < ::SDL_WindowEventID
  @ffi.Uint8()
  int event;

  @ffi.Uint8()
  int padding1;

  @ffi.Uint8()
  int padding2;

  @ffi.Uint8()
  int padding3;

  /// < event dependent data
  @ffi.Int32()
  int data1;

  /// < event dependent data
  @ffi.Int32()
  int data2;
}

/// \brief Keyboard button event structure (event.key.*)
class SDL_KeyboardEvent extends ffi.Struct {}

/// \brief Keyboard text editing event structure (event.edit.*)
class SDL_TextEditingEvent extends ffi.Struct {}

/// \brief Keyboard text input event structure (event.text.*)
class SDL_TextInputEvent extends ffi.Struct {}

/// \brief Mouse motion event structure (event.motion.*)
class SDL_MouseMotionEvent extends ffi.Struct {
  /// < ::SDL_MOUSEMOTION
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The window with mouse focus, if any
  @ffi.Uint32()
  int windowID;

  /// < The mouse instance id, or SDL_TOUCH_MOUSEID
  @ffi.Uint32()
  int which;

  /// < The current button state
  @ffi.Uint32()
  int state;

  /// < X coordinate, relative to window
  @ffi.Int32()
  int x;

  /// < Y coordinate, relative to window
  @ffi.Int32()
  int y;

  /// < The relative motion in the X direction
  @ffi.Int32()
  int xrel;

  /// < The relative motion in the Y direction
  @ffi.Int32()
  int yrel;
}

/// \brief Mouse button event structure (event.button.*)
class SDL_MouseButtonEvent extends ffi.Struct {
  /// < ::SDL_MOUSEBUTTONDOWN or ::SDL_MOUSEBUTTONUP
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The window with mouse focus, if any
  @ffi.Uint32()
  int windowID;

  /// < The mouse instance id, or SDL_TOUCH_MOUSEID
  @ffi.Uint32()
  int which;

  /// < The mouse button index
  @ffi.Uint8()
  int button;

  /// < ::SDL_PRESSED or ::SDL_RELEASED
  @ffi.Uint8()
  int state;

  /// < 1 for single-click, 2 for double-click, etc.
  @ffi.Uint8()
  int clicks;

  @ffi.Uint8()
  int padding1;

  /// < X coordinate, relative to window
  @ffi.Int32()
  int x;

  /// < Y coordinate, relative to window
  @ffi.Int32()
  int y;
}

/// \brief Mouse wheel event structure (event.wheel.*)
class SDL_MouseWheelEvent extends ffi.Struct {
  /// < ::SDL_MOUSEWHEEL
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The window with mouse focus, if any
  @ffi.Uint32()
  int windowID;

  /// < The mouse instance id, or SDL_TOUCH_MOUSEID
  @ffi.Uint32()
  int which;

  /// < The amount scrolled horizontally, positive to the right and negative to the left
  @ffi.Int32()
  int x;

  /// < The amount scrolled vertically, positive away from the user and negative toward the user
  @ffi.Int32()
  int y;

  /// < Set to one of the SDL_MOUSEWHEEL_* defines. When FLIPPED the values in X and Y will be opposite. Multiply by -1 to change them back
  @ffi.Uint32()
  int direction;
}

/// \brief Joystick axis motion event structure (event.jaxis.*)
class SDL_JoyAxisEvent extends ffi.Struct {
  /// < ::SDL_JOYAXISMOTION
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The joystick instance id
  @ffi.Int32()
  int which;

  /// < The joystick axis index
  @ffi.Uint8()
  int axis;

  @ffi.Uint8()
  int padding1;

  @ffi.Uint8()
  int padding2;

  @ffi.Uint8()
  int padding3;

  /// < The axis value (range: -32768 to 32767)
  @ffi.Int16()
  int value;

  @ffi.Uint16()
  int padding4;
}

/// \brief Joystick trackball motion event structure (event.jball.*)
class SDL_JoyBallEvent extends ffi.Struct {
  /// < ::SDL_JOYBALLMOTION
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The joystick instance id
  @ffi.Int32()
  int which;

  /// < The joystick trackball index
  @ffi.Uint8()
  int ball;

  @ffi.Uint8()
  int padding1;

  @ffi.Uint8()
  int padding2;

  @ffi.Uint8()
  int padding3;

  /// < The relative motion in the X direction
  @ffi.Int16()
  int xrel;

  /// < The relative motion in the Y direction
  @ffi.Int16()
  int yrel;
}

/// \brief Joystick hat position change event structure (event.jhat.*)
class SDL_JoyHatEvent extends ffi.Struct {
  /// < ::SDL_JOYHATMOTION
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The joystick instance id
  @ffi.Int32()
  int which;

  /// < The joystick hat index
  @ffi.Uint8()
  int hat;

  /// < The hat position value.
  /// \sa ::SDL_HAT_LEFTUP ::SDL_HAT_UP ::SDL_HAT_RIGHTUP
  /// \sa ::SDL_HAT_LEFT ::SDL_HAT_CENTERED ::SDL_HAT_RIGHT
  /// \sa ::SDL_HAT_LEFTDOWN ::SDL_HAT_DOWN ::SDL_HAT_RIGHTDOWN
  ///
  /// Note that zero means the POV is centered.
  @ffi.Uint8()
  int value;

  @ffi.Uint8()
  int padding1;

  @ffi.Uint8()
  int padding2;
}

/// \brief Joystick button event structure (event.jbutton.*)
class SDL_JoyButtonEvent extends ffi.Struct {
  /// < ::SDL_JOYBUTTONDOWN or ::SDL_JOYBUTTONUP
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The joystick instance id
  @ffi.Int32()
  int which;

  /// < The joystick button index
  @ffi.Uint8()
  int button;

  /// < ::SDL_PRESSED or ::SDL_RELEASED
  @ffi.Uint8()
  int state;

  @ffi.Uint8()
  int padding1;

  @ffi.Uint8()
  int padding2;
}

/// \brief Joystick device event structure (event.jdevice.*)
class SDL_JoyDeviceEvent extends ffi.Struct {
  /// < ::SDL_JOYDEVICEADDED or ::SDL_JOYDEVICEREMOVED
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The joystick device index for the ADDED event, instance id for the REMOVED event
  @ffi.Int32()
  int which;
}

/// \brief Game controller axis motion event structure (event.caxis.*)
class SDL_ControllerAxisEvent extends ffi.Struct {
  /// < ::SDL_CONTROLLERAXISMOTION
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The joystick instance id
  @ffi.Int32()
  int which;

  /// < The controller axis (SDL_GameControllerAxis)
  @ffi.Uint8()
  int axis;

  @ffi.Uint8()
  int padding1;

  @ffi.Uint8()
  int padding2;

  @ffi.Uint8()
  int padding3;

  /// < The axis value (range: -32768 to 32767)
  @ffi.Int16()
  int value;

  @ffi.Uint16()
  int padding4;
}

/// \brief Game controller button event structure (event.cbutton.*)
class SDL_ControllerButtonEvent extends ffi.Struct {
  /// < ::SDL_CONTROLLERBUTTONDOWN or ::SDL_CONTROLLERBUTTONUP
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The joystick instance id
  @ffi.Int32()
  int which;

  /// < The controller button (SDL_GameControllerButton)
  @ffi.Uint8()
  int button;

  /// < ::SDL_PRESSED or ::SDL_RELEASED
  @ffi.Uint8()
  int state;

  @ffi.Uint8()
  int padding1;

  @ffi.Uint8()
  int padding2;
}

/// \brief Controller device event structure (event.cdevice.*)
class SDL_ControllerDeviceEvent extends ffi.Struct {
  /// < ::SDL_CONTROLLERDEVICEADDED, ::SDL_CONTROLLERDEVICEREMOVED, or ::SDL_CONTROLLERDEVICEREMAPPED
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The joystick device index for the ADDED event, instance id for the REMOVED or REMAPPED event
  @ffi.Int32()
  int which;
}

/// \brief Audio device event structure (event.adevice.*)
class SDL_AudioDeviceEvent extends ffi.Struct {
  /// < ::SDL_AUDIODEVICEADDED, or ::SDL_AUDIODEVICEREMOVED
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The audio device index for the ADDED event (valid until next SDL_GetNumAudioDevices() call), SDL_AudioDeviceID for the REMOVED event
  @ffi.Uint32()
  int which;

  /// < zero if an output device, non-zero if a capture device.
  @ffi.Uint8()
  int iscapture;

  @ffi.Uint8()
  int padding1;

  @ffi.Uint8()
  int padding2;

  @ffi.Uint8()
  int padding3;
}

/// \brief Touch finger event structure (event.tfinger.*)
class SDL_TouchFingerEvent extends ffi.Struct {
  /// < ::SDL_FINGERMOTION or ::SDL_FINGERDOWN or ::SDL_FINGERUP
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The touch device id
  @ffi.Int64()
  int touchId;

  @ffi.Int64()
  int fingerId;

  /// < Normalized in the range 0...1
  @ffi.Float()
  double x;

  /// < Normalized in the range 0...1
  @ffi.Float()
  double y;

  /// < Normalized in the range -1...1
  @ffi.Float()
  double dx;

  /// < Normalized in the range -1...1
  @ffi.Float()
  double dy;

  /// < Normalized in the range 0...1
  @ffi.Float()
  double pressure;

  /// < The window underneath the finger, if any
  @ffi.Uint32()
  int windowID;
}

/// \brief Multiple Finger Gesture Event (event.mgesture.*)
class SDL_MultiGestureEvent extends ffi.Struct {
  /// < ::SDL_MULTIGESTURE
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The touch device id
  @ffi.Int64()
  int touchId;

  @ffi.Float()
  double dTheta;

  @ffi.Float()
  double dDist;

  @ffi.Float()
  double x;

  @ffi.Float()
  double y;

  @ffi.Uint16()
  int numFingers;

  @ffi.Uint16()
  int padding;
}

/// \brief Dollar Gesture Event (event.dgesture.*)
class SDL_DollarGestureEvent extends ffi.Struct {
  /// < ::SDL_DOLLARGESTURE or ::SDL_DOLLARRECORD
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The touch device id
  @ffi.Int64()
  int touchId;

  @ffi.Int64()
  int gestureId;

  @ffi.Uint32()
  int numFingers;

  @ffi.Float()
  double error;

  /// < Normalized center of gesture
  @ffi.Float()
  double x;

  /// < Normalized center of gesture
  @ffi.Float()
  double y;
}

/// \brief An event used to request a file open by the system (event.drop.*)
/// This event is enabled by default, you can disable it with SDL_EventState().
/// \note If this event is enabled, you must free the filename in the event.
class SDL_DropEvent extends ffi.Struct {
  /// < ::SDL_DROPBEGIN or ::SDL_DROPFILE or ::SDL_DROPTEXT or ::SDL_DROPCOMPLETE
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The file name, which should be freed with SDL_free(), is NULL on begin/complete
  ffi.Pointer<ffi.Int8> file;

  /// < The window that was dropped on, if any
  @ffi.Uint32()
  int windowID;
}

/// \brief Sensor event structure (event.sensor.*)
class SDL_SensorEvent extends ffi.Struct {}

/// \brief The "quit requested" event
class SDL_QuitEvent extends ffi.Struct {
  /// < ::SDL_QUIT
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;
}

/// \brief OS Specific event
class SDL_OSEvent extends ffi.Struct {
  /// < ::SDL_QUIT
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;
}

/// \brief A user-defined event type (event.user.*)
class SDL_UserEvent extends ffi.Struct {
  /// < ::SDL_USEREVENT through ::SDL_LASTEVENT-1
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < The associated window if any
  @ffi.Uint32()
  int windowID;

  /// < User defined event code
  @ffi.Int32()
  int code;

  /// < User defined data pointer
  ffi.Pointer<ffi.Void> data1;

  /// < User defined data pointer
  ffi.Pointer<ffi.Void> data2;
}

class SDL_SysWMmsg extends ffi.Struct {}

/// \brief A video driver dependent system event (event.syswm.*)
/// This event is disabled by default, you can enable it with SDL_EventState()
///
/// \note If you want to use this event, you should include SDL_syswm.h.
class SDL_SysWMEvent extends ffi.Struct {
  /// < ::SDL_SYSWMEVENT
  @ffi.Uint32()
  int type;

  /// < In milliseconds, populated using SDL_GetTicks()
  @ffi.Uint32()
  int timestamp;

  /// < driver dependent data, defined in SDL_syswm.h
  ffi.Pointer<SDL_SysWMmsg> msg;
}

abstract class SDL_eventaction {
  static const int SDL_ADDEVENT = 0;
  static const int SDL_PEEKEVENT = 1;
  static const int SDL_GETEVENT = 2;
}

/// \typedef SDL_Haptic
///
/// \brief The haptic structure used to identify an SDL haptic.
///
/// \sa SDL_HapticOpen
/// \sa SDL_HapticOpenFromJoystick
/// \sa SDL_HapticClose
class _SDL_Haptic extends ffi.Struct {}

/// \brief Structure that represents a haptic direction.
///
/// This is the direction where the force comes from,
/// instead of the direction in which the force is exerted.
///
/// Directions can be specified by:
/// - ::SDL_HAPTIC_POLAR : Specified by polar coordinates.
/// - ::SDL_HAPTIC_CARTESIAN : Specified by cartesian coordinates.
/// - ::SDL_HAPTIC_SPHERICAL : Specified by spherical coordinates.
///
/// Cardinal directions of the haptic device are relative to the positioning
/// of the device.  North is considered to be away from the user.
///
/// The following diagram represents the cardinal directions:
/// \verbatim
/// .--.
/// |__| .-------.
/// |=.| |.-----.|
/// |--| ||     ||
/// |  | |'-----'|
/// |__|~')_____('
/// [ COMPUTER ]
///
///
/// North (0,-1)
/// ^
/// |
/// |
/// (-1,0)  West <----[ HAPTIC ]----> East (1,0)
/// |
/// |
/// v
/// South (0,1)
///
///
/// [ USER ]
/// \|||/
/// (o o)
/// ---ooO-(_)-Ooo---
/// \endverbatim
///
/// If type is ::SDL_HAPTIC_POLAR, direction is encoded by hundredths of a
/// degree starting north and turning clockwise.  ::SDL_HAPTIC_POLAR only uses
/// the first \c dir parameter.  The cardinal directions would be:
/// - North: 0 (0 degrees)
/// - East: 9000 (90 degrees)
/// - South: 18000 (180 degrees)
/// - West: 27000 (270 degrees)
///
/// If type is ::SDL_HAPTIC_CARTESIAN, direction is encoded by three positions
/// (X axis, Y axis and Z axis (with 3 axes)).  ::SDL_HAPTIC_CARTESIAN uses
/// the first three \c dir parameters.  The cardinal directions would be:
/// - North:  0,-1, 0
/// - East:   1, 0, 0
/// - South:  0, 1, 0
/// - West:  -1, 0, 0
///
/// The Z axis represents the height of the effect if supported, otherwise
/// it's unused.  In cartesian encoding (1, 2) would be the same as (2, 4), you
/// can use any multiple you want, only the direction matters.
///
/// If type is ::SDL_HAPTIC_SPHERICAL, direction is encoded by two rotations.
/// The first two \c dir parameters are used.  The \c dir parameters are as
/// follows (all values are in hundredths of degrees):
/// - Degrees from (1, 0) rotated towards (0, 1).
/// - Degrees towards (0, 0, 1) (device needs at least 3 axes).
///
///
/// Example of force coming from the south with all encodings (force coming
/// from the south means the user will have to pull the stick to counteract):
/// \code
/// SDL_HapticDirection direction;
///
/// // Cartesian directions
/// direction.type = SDL_HAPTIC_CARTESIAN; // Using cartesian direction encoding.
/// direction.dir[0] = 0; // X position
/// direction.dir[1] = 1; // Y position
/// // Assuming the device has 2 axes, we don't need to specify third parameter.
///
/// // Polar directions
/// direction.type = SDL_HAPTIC_POLAR; // We'll be using polar direction encoding.
/// direction.dir[0] = 18000; // Polar only uses first parameter
///
/// // Spherical coordinates
/// direction.type = SDL_HAPTIC_SPHERICAL; // Spherical encoding
/// direction.dir[0] = 9000; // Since we only have two axes we don't need more parameters.
/// \endcode
///
/// \sa SDL_HAPTIC_POLAR
/// \sa SDL_HAPTIC_CARTESIAN
/// \sa SDL_HAPTIC_SPHERICAL
/// \sa SDL_HapticEffect
/// \sa SDL_HapticNumAxes
class SDL_HapticDirection extends ffi.Struct {}

/// \brief A structure containing a template for a Constant effect.
///
/// This struct is exclusively for the ::SDL_HAPTIC_CONSTANT effect.
///
/// A constant effect applies a constant force in the specified direction
/// to the joystick.
///
/// \sa SDL_HAPTIC_CONSTANT
/// \sa SDL_HapticEffect
class SDL_HapticConstant extends ffi.Struct {}

/// \brief A structure containing a template for a Periodic effect.
///
/// The struct handles the following effects:
/// - ::SDL_HAPTIC_SINE
/// - ::SDL_HAPTIC_LEFTRIGHT
/// - ::SDL_HAPTIC_TRIANGLE
/// - ::SDL_HAPTIC_SAWTOOTHUP
/// - ::SDL_HAPTIC_SAWTOOTHDOWN
///
/// A periodic effect consists in a wave-shaped effect that repeats itself
/// over time.  The type determines the shape of the wave and the parameters
/// determine the dimensions of the wave.
///
/// Phase is given by hundredth of a degree meaning that giving the phase a value
/// of 9000 will displace it 25% of its period.  Here are sample values:
/// -     0: No phase displacement.
/// -  9000: Displaced 25% of its period.
/// - 18000: Displaced 50% of its period.
/// - 27000: Displaced 75% of its period.
/// - 36000: Displaced 100% of its period, same as 0, but 0 is preferred.
///
/// Examples:
/// \verbatim
/// SDL_HAPTIC_SINE
/// __      __      __      __
/// /  \    /  \    /  \    /
/// /    \__/    \__/    \__/
///
/// SDL_HAPTIC_SQUARE
/// __    __    __    __    __
/// |  |  |  |  |  |  |  |  |  |
/// |  |__|  |__|  |__|  |__|  |
///
/// SDL_HAPTIC_TRIANGLE
/// /\    /\    /\    /\    /\
/// /  \  /  \  /  \  /  \  /
/// /    \/    \/    \/    \/
///
/// SDL_HAPTIC_SAWTOOTHUP
/// /|  /|  /|  /|  /|  /|  /|
/// / | / | / | / | / | / | / |
/// /  |/  |/  |/  |/  |/  |/  |
///
/// SDL_HAPTIC_SAWTOOTHDOWN
/// \  |\  |\  |\  |\  |\  |\  |
/// \ | \ | \ | \ | \ | \ | \ |
/// \|  \|  \|  \|  \|  \|  \|
/// \endverbatim
///
/// \sa SDL_HAPTIC_SINE
/// \sa SDL_HAPTIC_LEFTRIGHT
/// \sa SDL_HAPTIC_TRIANGLE
/// \sa SDL_HAPTIC_SAWTOOTHUP
/// \sa SDL_HAPTIC_SAWTOOTHDOWN
/// \sa SDL_HapticEffect
class SDL_HapticPeriodic extends ffi.Struct {}

/// \brief A structure containing a template for a Condition effect.
///
/// The struct handles the following effects:
/// - ::SDL_HAPTIC_SPRING: Effect based on axes position.
/// - ::SDL_HAPTIC_DAMPER: Effect based on axes velocity.
/// - ::SDL_HAPTIC_INERTIA: Effect based on axes acceleration.
/// - ::SDL_HAPTIC_FRICTION: Effect based on axes movement.
///
/// Direction is handled by condition internals instead of a direction member.
/// The condition effect specific members have three parameters.  The first
/// refers to the X axis, the second refers to the Y axis and the third
/// refers to the Z axis.  The right terms refer to the positive side of the
/// axis and the left terms refer to the negative side of the axis.  Please
/// refer to the ::SDL_HapticDirection diagram for which side is positive and
/// which is negative.
///
/// \sa SDL_HapticDirection
/// \sa SDL_HAPTIC_SPRING
/// \sa SDL_HAPTIC_DAMPER
/// \sa SDL_HAPTIC_INERTIA
/// \sa SDL_HAPTIC_FRICTION
/// \sa SDL_HapticEffect
class SDL_HapticCondition extends ffi.Struct {}

/// \brief A structure containing a template for a Ramp effect.
///
/// This struct is exclusively for the ::SDL_HAPTIC_RAMP effect.
///
/// The ramp effect starts at start strength and ends at end strength.
/// It augments in linear fashion.  If you use attack and fade with a ramp
/// the effects get added to the ramp effect making the effect become
/// quadratic instead of linear.
///
/// \sa SDL_HAPTIC_RAMP
/// \sa SDL_HapticEffect
class SDL_HapticRamp extends ffi.Struct {}

/// \brief A structure containing a template for a Left/Right effect.
///
/// This struct is exclusively for the ::SDL_HAPTIC_LEFTRIGHT effect.
///
/// The Left/Right effect is used to explicitly control the large and small
/// motors, commonly found in modern game controllers. The small (right) motor
/// is high frequency, and the large (left) motor is low frequency.
///
/// \sa SDL_HAPTIC_LEFTRIGHT
/// \sa SDL_HapticEffect
class SDL_HapticLeftRight extends ffi.Struct {
  /// < ::SDL_HAPTIC_LEFTRIGHT
  @ffi.Uint16()
  int type;

  /// < Duration of the effect in milliseconds.
  @ffi.Uint32()
  int length;

  /// < Control of the large controller motor.
  @ffi.Uint16()
  int large_magnitude;

  /// < Control of the small controller motor.
  @ffi.Uint16()
  int small_magnitude;
}

/// \brief A structure containing a template for the ::SDL_HAPTIC_CUSTOM effect.
///
/// This struct is exclusively for the ::SDL_HAPTIC_CUSTOM effect.
///
/// A custom force feedback effect is much like a periodic effect, where the
/// application can define its exact shape.  You will have to allocate the
/// data yourself.  Data should consist of channels * samples Uint16 samples.
///
/// If channels is one, the effect is rotated using the defined direction.
/// Otherwise it uses the samples in data for the different axes.
///
/// \sa SDL_HAPTIC_CUSTOM
/// \sa SDL_HapticEffect
class SDL_HapticCustom extends ffi.Struct {}

/// \brief  An enumeration of hint priorities
abstract class SDL_HintPriority {
  static const int SDL_HINT_DEFAULT = 0;
  static const int SDL_HINT_NORMAL = 1;
  static const int SDL_HINT_OVERRIDE = 2;
}

/// \brief The predefined log categories
///
/// By default the application category is enabled at the INFO level,
/// the assert category is enabled at the WARN level, test is enabled
/// at the VERBOSE level and all other categories are enabled at the
/// CRITICAL level.
abstract class SDL_LogCategory {
  static const int SDL_LOG_CATEGORY_APPLICATION = 0;
  static const int SDL_LOG_CATEGORY_ERROR = 1;
  static const int SDL_LOG_CATEGORY_ASSERT = 2;
  static const int SDL_LOG_CATEGORY_SYSTEM = 3;
  static const int SDL_LOG_CATEGORY_AUDIO = 4;
  static const int SDL_LOG_CATEGORY_VIDEO = 5;
  static const int SDL_LOG_CATEGORY_RENDER = 6;
  static const int SDL_LOG_CATEGORY_INPUT = 7;
  static const int SDL_LOG_CATEGORY_TEST = 8;
  static const int SDL_LOG_CATEGORY_RESERVED1 = 9;
  static const int SDL_LOG_CATEGORY_RESERVED2 = 10;
  static const int SDL_LOG_CATEGORY_RESERVED3 = 11;
  static const int SDL_LOG_CATEGORY_RESERVED4 = 12;
  static const int SDL_LOG_CATEGORY_RESERVED5 = 13;
  static const int SDL_LOG_CATEGORY_RESERVED6 = 14;
  static const int SDL_LOG_CATEGORY_RESERVED7 = 15;
  static const int SDL_LOG_CATEGORY_RESERVED8 = 16;
  static const int SDL_LOG_CATEGORY_RESERVED9 = 17;
  static const int SDL_LOG_CATEGORY_RESERVED10 = 18;
  static const int SDL_LOG_CATEGORY_CUSTOM = 19;
}

/// \brief The predefined log priorities
abstract class SDL_LogPriority {
  static const int SDL_LOG_PRIORITY_VERBOSE = 1;
  static const int SDL_LOG_PRIORITY_DEBUG = 2;
  static const int SDL_LOG_PRIORITY_INFO = 3;
  static const int SDL_LOG_PRIORITY_WARN = 4;
  static const int SDL_LOG_PRIORITY_ERROR = 5;
  static const int SDL_LOG_PRIORITY_CRITICAL = 6;
  static const int SDL_NUM_LOG_PRIORITIES = 7;
}

/// \brief SDL_MessageBox flags. If supported will display warning icon, etc.
abstract class SDL_MessageBoxFlags {
  /// < error dialog
  static const int SDL_MESSAGEBOX_ERROR = 16;

  /// < warning dialog
  static const int SDL_MESSAGEBOX_WARNING = 32;

  /// < informational dialog
  static const int SDL_MESSAGEBOX_INFORMATION = 64;

  /// < buttons placed left to right
  static const int SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 128;

  /// < buttons placed right to left
  static const int SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 256;
}

/// \brief Flags for SDL_MessageBoxButtonData.
abstract class SDL_MessageBoxButtonFlags {
  /// < Marks the default button when return is hit
  static const int SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 1;

  /// < Marks the default button when escape is hit
  static const int SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 2;
}

/// \brief Individual button data.
class SDL_MessageBoxButtonData extends ffi.Struct {
  /// < ::SDL_MessageBoxButtonFlags
  @ffi.Uint32()
  int flags;

  /// < User defined button id (value returned via SDL_ShowMessageBox)
  @ffi.Int32()
  int buttonid;

  /// < The UTF-8 button text
  ffi.Pointer<ffi.Int8> text;
}

/// \brief RGB value used in a message box color scheme
class SDL_MessageBoxColor extends ffi.Struct {
  @ffi.Uint8()
  int r;

  @ffi.Uint8()
  int g;

  @ffi.Uint8()
  int b;
}

abstract class SDL_MessageBoxColorType {
  static const int SDL_MESSAGEBOX_COLOR_BACKGROUND = 0;
  static const int SDL_MESSAGEBOX_COLOR_TEXT = 1;
  static const int SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2;
  static const int SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3;
  static const int SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4;
  static const int SDL_MESSAGEBOX_COLOR_MAX = 5;
}

/// \brief A set of colors to use for message box dialogs
class SDL_MessageBoxColorScheme extends ffi.Struct {}

/// \brief MessageBox structure containing title, text, window, etc.
class SDL_MessageBoxData extends ffi.Struct {
  /// < ::SDL_MessageBoxFlags
  @ffi.Uint32()
  int flags;

  /// < Parent window, can be NULL
  ffi.Pointer<SDL_Window> window;

  /// < UTF-8 title
  ffi.Pointer<ffi.Int8> title;

  /// < UTF-8 message text
  ffi.Pointer<ffi.Int8> message;

  @ffi.Int32()
  int numbuttons;

  ffi.Pointer<SDL_MessageBoxButtonData> buttons;

  /// < ::SDL_MessageBoxColorScheme, can be NULL to use system settings
  ffi.Pointer<SDL_MessageBoxColorScheme> colorScheme;
}

/// \brief The basic state for the system's power supply.
abstract class SDL_PowerState {
  /// < cannot determine power status
  static const int SDL_POWERSTATE_UNKNOWN = 0;

  /// < Not plugged in, running on the battery
  static const int SDL_POWERSTATE_ON_BATTERY = 1;

  /// < Plugged in, no battery available
  static const int SDL_POWERSTATE_NO_BATTERY = 2;

  /// < Plugged in, charging battery
  static const int SDL_POWERSTATE_CHARGING = 3;

  /// < Plugged in, battery charged
  static const int SDL_POWERSTATE_CHARGED = 4;
}

/// \brief Flags used when creating a rendering context
abstract class SDL_RendererFlags {
  /// < The renderer is a software fallback
  static const int SDL_RENDERER_SOFTWARE = 1;

  /// < The renderer uses hardware
  /// acceleration
  static const int SDL_RENDERER_ACCELERATED = 2;

  /// < Present is synchronized
  /// with the refresh rate
  static const int SDL_RENDERER_PRESENTVSYNC = 4;

  /// < The renderer supports
  /// rendering to texture
  static const int SDL_RENDERER_TARGETTEXTURE = 8;
}

/// \brief Information on the capabilities of a render driver or context.
class SDL_RendererInfo extends ffi.Struct {}

/// \brief The scaling mode for a texture.
abstract class SDL_ScaleMode {
  /// < nearest pixel sampling
  static const int SDL_ScaleModeNearest = 0;

  /// < linear filtering
  static const int SDL_ScaleModeLinear = 1;

  /// < anisotropic filtering
  static const int SDL_ScaleModeBest = 2;
}

/// \brief The access pattern allowed for a texture.
abstract class SDL_TextureAccess {
  /// < Changes rarely, not lockable
  static const int SDL_TEXTUREACCESS_STATIC = 0;

  /// < Changes frequently, lockable
  static const int SDL_TEXTUREACCESS_STREAMING = 1;

  /// < Texture can be used as a render target
  static const int SDL_TEXTUREACCESS_TARGET = 2;
}

/// \brief The texture channel modulation used in SDL_RenderCopy().
abstract class SDL_TextureModulate {
  /// < No modulation
  static const int SDL_TEXTUREMODULATE_NONE = 0;

  /// < srcC = srcC * color
  static const int SDL_TEXTUREMODULATE_COLOR = 1;

  /// < srcA = srcA * alpha
  static const int SDL_TEXTUREMODULATE_ALPHA = 2;
}

/// \brief Flip constants for SDL_RenderCopyEx
abstract class SDL_RendererFlip {
  /// < Do not flip
  static const int SDL_FLIP_NONE = 0;

  /// < flip horizontally
  static const int SDL_FLIP_HORIZONTAL = 1;

  /// < flip vertically
  static const int SDL_FLIP_VERTICAL = 2;
}

/// \brief A structure representing rendering state
class SDL_Renderer extends ffi.Struct {}

/// \brief An efficient driver-specific representation of pixel data
class SDL_Texture extends ffi.Struct {}

/// \brief SDL_sensor.h
///
/// In order to use these functions, SDL_Init() must have been called
/// with the ::SDL_INIT_SENSOR flag.  This causes SDL to scan the system
/// for sensors, and load appropriate drivers.
class _SDL_Sensor extends ffi.Struct {}

abstract class SDL_SensorType {
  /// < Returned for an invalid sensor
  static const int SDL_SENSOR_INVALID = -1;

  /// < Unknown sensor type
  static const int SDL_SENSOR_UNKNOWN = 0;

  /// < Accelerometer
  static const int SDL_SENSOR_ACCEL = 1;

  /// < Gyroscope
  static const int SDL_SENSOR_GYRO = 2;
}

/// \brief An enum denoting the specific type of contents present in an SDL_WindowShapeParams union.
abstract class WindowShapeMode {
  /// \brief The default mode, a binarized alpha cutoff of 1.
  static const int ShapeModeDefault = 0;

  /// \brief A binarized alpha cutoff with a given integer value.
  static const int ShapeModeBinarizeAlpha = 1;

  /// \brief A binarized alpha cutoff with a given integer value, but with the opposite comparison.
  static const int ShapeModeReverseBinarizeAlpha = 2;

  /// \brief A color key is applied.
  static const int ShapeModeColorKey = 3;
}

/// \brief A struct that tags the SDL_WindowShapeParams union with an enum describing the type of its contents.
class SDL_WindowShapeMode extends ffi.Struct {}

/// \brief Information the version of SDL in use.
///
/// Represents the library's version as three levels: major revision
/// (increments with massive changes, additions, and enhancements),
/// minor revision (increments with backwards-compatible changes to the
/// major revision), and patchlevel (increments with fixes to the minor
/// revision).
///
/// \sa SDL_VERSION
/// \sa SDL_GetVersion
class SDL_version extends ffi.Struct {
  /// < major version
  @ffi.Uint8()
  int major;

  /// < minor version
  @ffi.Uint8()
  int minor;

  /// < update version
  @ffi.Uint8()
  int patch;
}

/// Type for test images.
class SDLTest_SurfaceImage_t extends ffi.Struct {
  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Uint32()
  int bytes_per_pixel;

  ffi.Pointer<ffi.Int8> pixel_data;
}

class __GLsync extends ffi.Struct {}

class SDLTest_Md5Context extends ffi.Struct {}

class _cl_context extends ffi.Struct {}

class _cl_event extends ffi.Struct {}

/// \brief SDL_syswm.h
///
/// Your application has access to a special type of event ::SDL_SYSWMEVENT,
/// which contains window-manager specific information and arrives whenever
/// an unhandled window event occurs.  This event is ignored by default, but
/// you can enable it with SDL_EventState().
class SDL_SysWMinfo extends ffi.Struct {}

class XExtData extends ffi.Struct {
  @ffi.Int32()
  int number;

  ffi.Pointer<XExtData> next;

  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> free_private;

  ffi.Pointer<ffi.Int8> private_data;
}

class XExtCodes extends ffi.Struct {
  @ffi.Int32()
  int extension_1;

  @ffi.Int32()
  int major_opcode;

  @ffi.Int32()
  int first_event;

  @ffi.Int32()
  int first_error;
}

class XPixmapFormatValues extends ffi.Struct {
  @ffi.Int32()
  int depth;

  @ffi.Int32()
  int bits_per_pixel;

  @ffi.Int32()
  int scanline_pad;
}

class XGCValues extends ffi.Struct {
  @ffi.Int32()
  int function;

  @ffi.Uint64()
  int plane_mask;

  @ffi.Uint64()
  int foreground;

  @ffi.Uint64()
  int background;

  @ffi.Int32()
  int line_width;

  @ffi.Int32()
  int line_style;

  @ffi.Int32()
  int cap_style;

  @ffi.Int32()
  int join_style;

  @ffi.Int32()
  int fill_style;

  @ffi.Int32()
  int fill_rule;

  @ffi.Int32()
  int arc_mode;

  @ffi.Uint64()
  int tile;

  @ffi.Uint64()
  int stipple;

  @ffi.Int32()
  int ts_x_origin;

  @ffi.Int32()
  int ts_y_origin;

  @ffi.Uint64()
  int font;

  @ffi.Int32()
  int subwindow_mode;

  @ffi.Int32()
  int graphics_exposures;

  @ffi.Int32()
  int clip_x_origin;

  @ffi.Int32()
  int clip_y_origin;

  @ffi.Uint64()
  int clip_mask;

  @ffi.Int32()
  int dash_offset;

  @ffi.Int8()
  int dashes;
}

class _XGC extends ffi.Struct {}

class Visual extends ffi.Struct {
  ffi.Pointer<XExtData> ext_data;

  @ffi.Uint64()
  int visualid;

  @ffi.Int32()
  int class_1;

  @ffi.Uint64()
  int red_mask;

  @ffi.Uint64()
  int green_mask;

  @ffi.Uint64()
  int blue_mask;

  @ffi.Int32()
  int bits_per_rgb;

  @ffi.Int32()
  int map_entries;
}

class Depth extends ffi.Struct {
  @ffi.Int32()
  int depth;

  @ffi.Int32()
  int nvisuals;

  ffi.Pointer<Visual> visuals;
}

class _XDisplay extends ffi.Struct {}

class Screen extends ffi.Struct {
  ffi.Pointer<XExtData> ext_data;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int root;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int mwidth;

  @ffi.Int32()
  int mheight;

  @ffi.Int32()
  int ndepths;

  ffi.Pointer<Depth> depths;

  @ffi.Int32()
  int root_depth;

  ffi.Pointer<Visual> root_visual;

  ffi.Pointer<_XGC> default_gc;

  @ffi.Uint64()
  int cmap;

  @ffi.Uint64()
  int white_pixel;

  @ffi.Uint64()
  int black_pixel;

  @ffi.Int32()
  int max_maps;

  @ffi.Int32()
  int min_maps;

  @ffi.Int32()
  int backing_store;

  @ffi.Int32()
  int save_unders;

  @ffi.Int64()
  int root_input_mask;
}

class ScreenFormat extends ffi.Struct {
  ffi.Pointer<XExtData> ext_data;

  @ffi.Int32()
  int depth;

  @ffi.Int32()
  int bits_per_pixel;

  @ffi.Int32()
  int scanline_pad;
}

class XSetWindowAttributes extends ffi.Struct {
  @ffi.Uint64()
  int background_pixmap;

  @ffi.Uint64()
  int background_pixel;

  @ffi.Uint64()
  int border_pixmap;

  @ffi.Uint64()
  int border_pixel;

  @ffi.Int32()
  int bit_gravity;

  @ffi.Int32()
  int win_gravity;

  @ffi.Int32()
  int backing_store;

  @ffi.Uint64()
  int backing_planes;

  @ffi.Uint64()
  int backing_pixel;

  @ffi.Int32()
  int save_under;

  @ffi.Int64()
  int event_mask;

  @ffi.Int64()
  int do_not_propagate_mask;

  @ffi.Int32()
  int override_redirect;

  @ffi.Uint64()
  int colormap;

  @ffi.Uint64()
  int cursor;
}

class XWindowAttributes extends ffi.Struct {
  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int border_width;

  @ffi.Int32()
  int depth;

  ffi.Pointer<Visual> visual;

  @ffi.Uint64()
  int root;

  @ffi.Int32()
  int class_1;

  @ffi.Int32()
  int bit_gravity;

  @ffi.Int32()
  int win_gravity;

  @ffi.Int32()
  int backing_store;

  @ffi.Uint64()
  int backing_planes;

  @ffi.Uint64()
  int backing_pixel;

  @ffi.Int32()
  int save_under;

  @ffi.Uint64()
  int colormap;

  @ffi.Int32()
  int map_installed;

  @ffi.Int32()
  int map_state;

  @ffi.Int64()
  int all_event_masks;

  @ffi.Int64()
  int your_event_mask;

  @ffi.Int64()
  int do_not_propagate_mask;

  @ffi.Int32()
  int override_redirect;

  ffi.Pointer<Screen> screen;
}

class XHostAddress extends ffi.Struct {
  @ffi.Int32()
  int family;

  @ffi.Int32()
  int length;

  ffi.Pointer<ffi.Int8> address;
}

class XServerInterpretedAddress extends ffi.Struct {
  @ffi.Int32()
  int typelength;

  @ffi.Int32()
  int valuelength;

  ffi.Pointer<ffi.Int8> type;

  ffi.Pointer<ffi.Int8> value;
}

class funcs extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> create_image;

  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> destroy_image;

  ffi.Pointer<ffi.NativeFunction<_typedefC_14>> get_pixel;

  ffi.Pointer<ffi.NativeFunction<_typedefC_15>> put_pixel;

  ffi.Pointer<ffi.NativeFunction<_typedefC_16>> sub_image;

  ffi.Pointer<ffi.NativeFunction<_typedefC_17>> add_pixel;
}

class XImage extends ffi.Struct {}

class XWindowChanges extends ffi.Struct {
  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int border_width;

  @ffi.Uint64()
  int sibling;

  @ffi.Int32()
  int stack_mode;
}

class XColor extends ffi.Struct {
  @ffi.Uint64()
  int pixel;

  @ffi.Uint16()
  int red;

  @ffi.Uint16()
  int green;

  @ffi.Uint16()
  int blue;

  @ffi.Int8()
  int flags;

  @ffi.Int8()
  int pad;
}

class XSegment extends ffi.Struct {
  @ffi.Int16()
  int x1;

  @ffi.Int16()
  int y1;

  @ffi.Int16()
  int x2;

  @ffi.Int16()
  int y2;
}

class XPoint extends ffi.Struct {
  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class XRectangle extends ffi.Struct {
  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;
}

class XArc extends ffi.Struct {
  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Int16()
  int angle1;

  @ffi.Int16()
  int angle2;
}

class XKeyboardControl extends ffi.Struct {
  @ffi.Int32()
  int key_click_percent;

  @ffi.Int32()
  int bell_percent;

  @ffi.Int32()
  int bell_pitch;

  @ffi.Int32()
  int bell_duration;

  @ffi.Int32()
  int led;

  @ffi.Int32()
  int led_mode;

  @ffi.Int32()
  int key;

  @ffi.Int32()
  int auto_repeat_mode;
}

class XKeyboardState extends ffi.Struct {}

class XTimeCoord extends ffi.Struct {
  @ffi.Uint64()
  int time;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class XModifierKeymap extends ffi.Struct {
  @ffi.Int32()
  int max_keypermod;

  ffi.Pointer<ffi.Uint8> modifiermap;
}

class _XPrivate extends ffi.Struct {}

class _XrmHashBucketRec extends ffi.Struct {}

class _XPrivDisplay extends ffi.Struct {
  ffi.Pointer<XExtData> ext_data;

  ffi.Pointer<_XPrivate> private1;

  @ffi.Int32()
  int fd;

  @ffi.Int32()
  int private2;

  @ffi.Int32()
  int proto_major_version;

  @ffi.Int32()
  int proto_minor_version;

  ffi.Pointer<ffi.Int8> vendor;

  @ffi.Uint64()
  int private3;

  @ffi.Uint64()
  int private4;

  @ffi.Uint64()
  int private5;

  @ffi.Int32()
  int private6;

  ffi.Pointer<ffi.NativeFunction<_typedefC_18>> resource_alloc;

  @ffi.Int32()
  int byte_order;

  @ffi.Int32()
  int bitmap_unit;

  @ffi.Int32()
  int bitmap_pad;

  @ffi.Int32()
  int bitmap_bit_order;

  @ffi.Int32()
  int nformats;

  ffi.Pointer<ScreenFormat> pixmap_format;

  @ffi.Int32()
  int private8;

  @ffi.Int32()
  int release;

  ffi.Pointer<_XPrivate> private9;

  ffi.Pointer<_XPrivate> private10;

  @ffi.Int32()
  int qlen;

  @ffi.Uint64()
  int last_request_read;

  @ffi.Uint64()
  int request;

  ffi.Pointer<ffi.Int8> private11;

  ffi.Pointer<ffi.Int8> private12;

  ffi.Pointer<ffi.Int8> private13;

  ffi.Pointer<ffi.Int8> private14;

  @ffi.Uint32()
  int max_request_size;

  ffi.Pointer<_XrmHashBucketRec> db;

  ffi.Pointer<ffi.NativeFunction<_typedefC_19>> private15;

  ffi.Pointer<ffi.Int8> display_name;

  @ffi.Int32()
  int default_screen;

  @ffi.Int32()
  int nscreens;

  ffi.Pointer<Screen> screens;

  @ffi.Uint64()
  int motion_buffer;

  @ffi.Uint64()
  int private16;

  @ffi.Int32()
  int min_keycode;

  @ffi.Int32()
  int max_keycode;

  ffi.Pointer<ffi.Int8> private17;

  ffi.Pointer<ffi.Int8> private18;

  @ffi.Int32()
  int private19;

  ffi.Pointer<ffi.Int8> xdefaults;
}

class XKeyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int root;

  @ffi.Uint64()
  int subwindow;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int x_root;

  @ffi.Int32()
  int y_root;

  @ffi.Uint32()
  int state;

  @ffi.Uint32()
  int keycode;

  @ffi.Int32()
  int same_screen;
}

class XButtonEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int root;

  @ffi.Uint64()
  int subwindow;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int x_root;

  @ffi.Int32()
  int y_root;

  @ffi.Uint32()
  int state;

  @ffi.Uint32()
  int button;

  @ffi.Int32()
  int same_screen;
}

class XMotionEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int root;

  @ffi.Uint64()
  int subwindow;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int x_root;

  @ffi.Int32()
  int y_root;

  @ffi.Uint32()
  int state;

  @ffi.Int8()
  int is_hint;

  @ffi.Int32()
  int same_screen;
}

class XCrossingEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int root;

  @ffi.Uint64()
  int subwindow;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int x_root;

  @ffi.Int32()
  int y_root;

  @ffi.Int32()
  int mode;

  @ffi.Int32()
  int detail;

  @ffi.Int32()
  int same_screen;

  @ffi.Int32()
  int focus;

  @ffi.Uint32()
  int state;
}

class XFocusChangeEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int mode;

  @ffi.Int32()
  int detail;
}

class XKeymapEvent extends ffi.Struct {}

class XExposeEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int count;
}

class XGraphicsExposeEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int drawable;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int count;

  @ffi.Int32()
  int major_code;

  @ffi.Int32()
  int minor_code;
}

class XNoExposeEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int drawable;

  @ffi.Int32()
  int major_code;

  @ffi.Int32()
  int minor_code;
}

class XVisibilityEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int state;
}

class XCreateWindowEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int parent;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int border_width;

  @ffi.Int32()
  int override_redirect;
}

class XDestroyWindowEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int event;

  @ffi.Uint64()
  int window;
}

class XUnmapEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int event;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int from_configure;
}

class XMapEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int event;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int override_redirect;
}

class XMapRequestEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int parent;

  @ffi.Uint64()
  int window;
}

class XReparentEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int event;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int parent;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int override_redirect;
}

class XConfigureEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int event;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int border_width;

  @ffi.Uint64()
  int above;

  @ffi.Int32()
  int override_redirect;
}

class XGravityEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int event;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;
}

class XResizeRequestEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;
}

class XConfigureRequestEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int parent;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int border_width;

  @ffi.Uint64()
  int above;

  @ffi.Int32()
  int detail;

  @ffi.Uint64()
  int value_mask;
}

class XCirculateEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int event;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int place;
}

class XCirculateRequestEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int parent;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int place;
}

class XPropertyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int atom;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int state;
}

class XSelectionClearEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int selection;

  @ffi.Uint64()
  int time;
}

class XSelectionRequestEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int owner;

  @ffi.Uint64()
  int requestor;

  @ffi.Uint64()
  int selection;

  @ffi.Uint64()
  int target;

  @ffi.Uint64()
  int property;

  @ffi.Uint64()
  int time;
}

class XSelectionEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int requestor;

  @ffi.Uint64()
  int selection;

  @ffi.Uint64()
  int target;

  @ffi.Uint64()
  int property;

  @ffi.Uint64()
  int time;
}

class XColormapEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int colormap;

  @ffi.Int32()
  int new_1;

  @ffi.Int32()
  int state;
}

class XClientMessageEvent extends ffi.Struct {}

class XMappingEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int request;

  @ffi.Int32()
  int first_keycode;

  @ffi.Int32()
  int count;
}

class XErrorEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int resourceid;

  @ffi.Uint64()
  int serial;

  @ffi.Uint8()
  int error_code;

  @ffi.Uint8()
  int request_code;

  @ffi.Uint8()
  int minor_code;
}

class XAnyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;
}

class XGenericEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Int32()
  int extension_1;

  @ffi.Int32()
  int evtype;
}

class XGenericEventCookie extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Int32()
  int extension_1;

  @ffi.Int32()
  int evtype;

  @ffi.Uint32()
  int cookie;

  ffi.Pointer<ffi.Void> data;
}

class XCharStruct extends ffi.Struct {
  @ffi.Int16()
  int lbearing;

  @ffi.Int16()
  int rbearing;

  @ffi.Int16()
  int width;

  @ffi.Int16()
  int ascent;

  @ffi.Int16()
  int descent;

  @ffi.Uint16()
  int attributes;
}

class XFontProp extends ffi.Struct {
  @ffi.Uint64()
  int name;

  @ffi.Uint64()
  int card32;
}

class XFontStruct extends ffi.Struct {}

class XTextItem extends ffi.Struct {
  ffi.Pointer<ffi.Int8> chars;

  @ffi.Int32()
  int nchars;

  @ffi.Int32()
  int delta;

  @ffi.Uint64()
  int font;
}

class XChar2b extends ffi.Struct {
  @ffi.Uint8()
  int byte1;

  @ffi.Uint8()
  int byte2;
}

class XTextItem16 extends ffi.Struct {
  ffi.Pointer<XChar2b> chars;

  @ffi.Int32()
  int nchars;

  @ffi.Int32()
  int delta;

  @ffi.Uint64()
  int font;
}

class XFontSetExtents extends ffi.Struct {}

class _XOM extends ffi.Struct {}

class _XOC extends ffi.Struct {}

class XmbTextItem extends ffi.Struct {
  ffi.Pointer<ffi.Int8> chars;

  @ffi.Int32()
  int nchars;

  @ffi.Int32()
  int delta;

  ffi.Pointer<_XOC> font_set;
}

class XwcTextItem extends ffi.Struct {
  ffi.Pointer<ffi.Int32> chars;

  @ffi.Int32()
  int nchars;

  @ffi.Int32()
  int delta;

  ffi.Pointer<_XOC> font_set;
}

class XOMCharSetList extends ffi.Struct {
  @ffi.Int32()
  int charset_count;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> charset_list;
}

abstract class XOrientation {
  static const int XOMOrientation_LTR_TTB = 0;
  static const int XOMOrientation_RTL_TTB = 1;
  static const int XOMOrientation_TTB_LTR = 2;
  static const int XOMOrientation_TTB_RTL = 3;
  static const int XOMOrientation_Context = 4;
}

class XOMOrientation extends ffi.Struct {
  @ffi.Int32()
  int num_orientation;

  ffi.Pointer<ffi.Int32> orientation;
}

class XOMFontInfo extends ffi.Struct {
  @ffi.Int32()
  int num_font;

  ffi.Pointer<ffi.Pointer<XFontStruct>> font_struct_list;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> font_name_list;
}

class _XIM extends ffi.Struct {}

class _XIC extends ffi.Struct {}

class XIMStyles extends ffi.Struct {
  @ffi.Uint16()
  int count_styles;

  ffi.Pointer<ffi.Uint64> supported_styles;
}

class XIMCallback extends ffi.Struct {
  ffi.Pointer<ffi.Int8> client_data;

  ffi.Pointer<ffi.NativeFunction<XIMProc>> callback;
}

class XICCallback extends ffi.Struct {
  ffi.Pointer<ffi.Int8> client_data;

  ffi.Pointer<ffi.NativeFunction<XICProc>> callback;
}

class XIMText extends ffi.Struct {}

class XIMPreeditStateNotifyCallbackStruct extends ffi.Struct {
  @ffi.Uint64()
  int state;
}

class XIMStringConversionText extends ffi.Struct {}

abstract class XIMCaretDirection {
  static const int XIMForwardChar = 0;
  static const int XIMBackwardChar = 1;
  static const int XIMForwardWord = 2;
  static const int XIMBackwardWord = 3;
  static const int XIMCaretUp = 4;
  static const int XIMCaretDown = 5;
  static const int XIMNextLine = 6;
  static const int XIMPreviousLine = 7;
  static const int XIMLineStart = 8;
  static const int XIMLineEnd = 9;
  static const int XIMAbsolutePosition = 10;
  static const int XIMDontChange = 11;
}

class XIMStringConversionCallbackStruct extends ffi.Struct {
  @ffi.Uint16()
  int position;

  @ffi.Int32()
  int direction;

  @ffi.Uint16()
  int operation;

  @ffi.Uint16()
  int factor;

  ffi.Pointer<XIMStringConversionText> text;
}

class XIMPreeditDrawCallbackStruct extends ffi.Struct {
  @ffi.Int32()
  int caret;

  @ffi.Int32()
  int chg_first;

  @ffi.Int32()
  int chg_length;

  ffi.Pointer<XIMText> text;
}

abstract class XIMCaretStyle {
  static const int XIMIsInvisible = 0;
  static const int XIMIsPrimary = 1;
  static const int XIMIsSecondary = 2;
}

class XIMPreeditCaretCallbackStruct extends ffi.Struct {
  @ffi.Int32()
  int position;

  @ffi.Int32()
  int direction;

  @ffi.Int32()
  int style;
}

abstract class XIMStatusDataType {
  static const int XIMTextType = 0;
  static const int XIMBitmapType = 1;
}

class XIMStatusDrawCallbackStruct extends ffi.Struct {}

class XIMHotKeyTrigger extends ffi.Struct {
  @ffi.Uint64()
  int keysym;

  @ffi.Int32()
  int modifier;

  @ffi.Int32()
  int modifier_mask;
}

class XIMHotKeyTriggers extends ffi.Struct {
  @ffi.Int32()
  int num_hot_key;

  ffi.Pointer<XIMHotKeyTrigger> key;
}

class XIMValuesList extends ffi.Struct {
  @ffi.Uint16()
  int count_values;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> supported_values;
}

/// These are the various supported windowing subsystems
abstract class SDL_SYSWM_TYPE {
  static const int SDL_SYSWM_UNKNOWN = 0;
  static const int SDL_SYSWM_WINDOWS = 1;
  static const int SDL_SYSWM_X11 = 2;
  static const int SDL_SYSWM_DIRECTFB = 3;
  static const int SDL_SYSWM_COCOA = 4;
  static const int SDL_SYSWM_UIKIT = 5;
  static const int SDL_SYSWM_WAYLAND = 6;
  static const int SDL_SYSWM_MIR = 7;
  static const int SDL_SYSWM_WINRT = 8;
  static const int SDL_SYSWM_ANDROID = 9;
  static const int SDL_SYSWM_VIVANTE = 10;
  static const int SDL_SYSWM_OS2 = 11;
  static const int SDL_SYSWM_HAIKU = 12;
}

abstract class khronos_boolean_enum_t {
  static const int KHRONOS_FALSE = 0;
  static const int KHRONOS_TRUE = 1;
  static const int KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = 2147483647;
}

class VkInstance_T extends ffi.Struct {}

class VkSurfaceKHR_T extends ffi.Struct {}

class XSizeHints extends ffi.Struct {}

class XWMHints extends ffi.Struct {
  @ffi.Int64()
  int flags;

  @ffi.Int32()
  int input;

  @ffi.Int32()
  int initial_state;

  @ffi.Uint64()
  int icon_pixmap;

  @ffi.Uint64()
  int icon_window;

  @ffi.Int32()
  int icon_x;

  @ffi.Int32()
  int icon_y;

  @ffi.Uint64()
  int icon_mask;

  @ffi.Uint64()
  int window_group;
}

class XTextProperty extends ffi.Struct {
  ffi.Pointer<ffi.Uint8> value;

  @ffi.Uint64()
  int encoding;

  @ffi.Int32()
  int format;

  @ffi.Uint64()
  int nitems;
}

abstract class XICCEncodingStyle {
  static const int XStringStyle = 0;
  static const int XCompoundTextStyle = 1;
  static const int XTextStyle = 2;
  static const int XStdICCTextStyle = 3;
  static const int XUTF8StringStyle = 4;
}

class XIconSize extends ffi.Struct {
  @ffi.Int32()
  int min_width;

  @ffi.Int32()
  int min_height;

  @ffi.Int32()
  int max_width;

  @ffi.Int32()
  int max_height;

  @ffi.Int32()
  int width_inc;

  @ffi.Int32()
  int height_inc;
}

class XClassHint extends ffi.Struct {
  ffi.Pointer<ffi.Int8> res_name;

  ffi.Pointer<ffi.Int8> res_class;
}

class XComposeStatus extends ffi.Struct {
  ffi.Pointer<ffi.Int8> compose_ptr;

  @ffi.Int32()
  int chars_matched;
}

class _XRegion extends ffi.Struct {}

class XVisualInfo extends ffi.Struct {
  ffi.Pointer<Visual> visual;

  @ffi.Uint64()
  int visualid;

  @ffi.Int32()
  int screen;

  @ffi.Int32()
  int depth;

  @ffi.Int32()
  int class_1;

  @ffi.Uint64()
  int red_mask;

  @ffi.Uint64()
  int green_mask;

  @ffi.Uint64()
  int blue_mask;

  @ffi.Int32()
  int colormap_size;

  @ffi.Int32()
  int bits_per_rgb;
}

class XStandardColormap extends ffi.Struct {
  @ffi.Uint64()
  int colormap;

  @ffi.Uint64()
  int red_max;

  @ffi.Uint64()
  int red_mult;

  @ffi.Uint64()
  int green_max;

  @ffi.Uint64()
  int green_mult;

  @ffi.Uint64()
  int blue_max;

  @ffi.Uint64()
  int blue_mult;

  @ffi.Uint64()
  int base_pixel;

  @ffi.Uint64()
  int visualid;

  @ffi.Uint64()
  int killid;
}

class AHardwareBuffer extends ffi.Struct {}

class EGLClientPixmapHI extends ffi.Struct {
  ffi.Pointer<ffi.Void> pData;

  @ffi.Int32()
  int iWidth;

  @ffi.Int32()
  int iHeight;

  @ffi.Int32()
  int iStride;
}

class wl_display extends ffi.Struct {}

class wl_resource extends ffi.Struct {}

class wl_buffer extends ffi.Struct {}

class SDLTest_RandomContext extends ffi.Struct {
  @ffi.Uint32()
  int a;

  @ffi.Uint32()
  int x;

  @ffi.Uint32()
  int c;

  @ffi.Uint32()
  int ah;

  @ffi.Uint32()
  int al;
}

class SDLTest_CommonState extends ffi.Struct {}

const int _ISupper = 256;

const int _ISlower = 512;

const int _ISalpha = 1024;

const int _ISdigit = 2048;

const int _ISxdigit = 4096;

const int _ISspace = 8192;

const int _ISprint = 16384;

const int _ISgraph = 32768;

const int _ISblank = 1;

const int _IScntrl = 2;

const int _ISpunct = 4;

const int _ISalnum = 8;

const int FP_NAN = 0;

const int FP_INFINITE = 1;

const int FP_ZERO = 2;

const int FP_SUBNORMAL = 3;

const int FP_NORMAL = 4;

const int _ISupper_1 = 256;

const int _ISlower_1 = 512;

const int _ISalpha_1 = 1024;

const int _ISdigit_1 = 2048;

const int _ISxdigit_1 = 4096;

const int _ISspace_1 = 8192;

const int _ISprint_1 = 16384;

const int _ISgraph_1 = 32768;

const int _ISblank_1 = 1;

const int _IScntrl_1 = 2;

const int _ISpunct_1 = 4;

const int _ISalnum_1 = 8;

const int FP_NAN_1 = 0;

const int FP_INFINITE_1 = 1;

const int FP_ZERO_1 = 2;

const int FP_SUBNORMAL_1 = 3;

const int FP_NORMAL_1 = 4;

const int _ISupper_2 = 256;

const int _ISlower_2 = 512;

const int _ISalpha_2 = 1024;

const int _ISdigit_2 = 2048;

const int _ISxdigit_2 = 4096;

const int _ISspace_2 = 8192;

const int _ISprint_2 = 16384;

const int _ISgraph_2 = 32768;

const int _ISblank_2 = 1;

const int _IScntrl_2 = 2;

const int _ISpunct_2 = 4;

const int _ISalnum_2 = 8;

const int FP_NAN_2 = 0;

const int FP_INFINITE_2 = 1;

const int FP_ZERO_2 = 2;

const int FP_SUBNORMAL_2 = 3;

const int FP_NORMAL_2 = 4;

const int _ISupper_3 = 256;

const int _ISlower_3 = 512;

const int _ISalpha_3 = 1024;

const int _ISdigit_3 = 2048;

const int _ISxdigit_3 = 4096;

const int _ISspace_3 = 8192;

const int _ISprint_3 = 16384;

const int _ISgraph_3 = 32768;

const int _ISblank_3 = 1;

const int _IScntrl_3 = 2;

const int _ISpunct_3 = 4;

const int _ISalnum_3 = 8;

const int FP_NAN_3 = 0;

const int FP_INFINITE_3 = 1;

const int FP_ZERO_3 = 2;

const int FP_SUBNORMAL_3 = 3;

const int FP_NORMAL_3 = 4;

const int _ISupper_4 = 256;

const int _ISlower_4 = 512;

const int _ISalpha_4 = 1024;

const int _ISdigit_4 = 2048;

const int _ISxdigit_4 = 4096;

const int _ISspace_4 = 8192;

const int _ISprint_4 = 16384;

const int _ISgraph_4 = 32768;

const int _ISblank_4 = 1;

const int _IScntrl_4 = 2;

const int _ISpunct_4 = 4;

const int _ISalnum_4 = 8;

const int FP_NAN_4 = 0;

const int FP_INFINITE_4 = 1;

const int FP_ZERO_4 = 2;

const int FP_SUBNORMAL_4 = 3;

const int FP_NORMAL_4 = 4;

const int _ISupper_5 = 256;

const int _ISlower_5 = 512;

const int _ISalpha_5 = 1024;

const int _ISdigit_5 = 2048;

const int _ISxdigit_5 = 4096;

const int _ISspace_5 = 8192;

const int _ISprint_5 = 16384;

const int _ISgraph_5 = 32768;

const int _ISblank_5 = 1;

const int _IScntrl_5 = 2;

const int _ISpunct_5 = 4;

const int _ISalnum_5 = 8;

const int FP_NAN_5 = 0;

const int FP_INFINITE_5 = 1;

const int FP_ZERO_5 = 2;

const int FP_SUBNORMAL_5 = 3;

const int FP_NORMAL_5 = 4;

const int _ISupper_6 = 256;

const int _ISlower_6 = 512;

const int _ISalpha_6 = 1024;

const int _ISdigit_6 = 2048;

const int _ISxdigit_6 = 4096;

const int _ISspace_6 = 8192;

const int _ISprint_6 = 16384;

const int _ISgraph_6 = 32768;

const int _ISblank_6 = 1;

const int _IScntrl_6 = 2;

const int _ISpunct_6 = 4;

const int _ISalnum_6 = 8;

const int FP_NAN_6 = 0;

const int FP_INFINITE_6 = 1;

const int FP_ZERO_6 = 2;

const int FP_SUBNORMAL_6 = 3;

const int FP_NORMAL_6 = 4;

const int _ISupper_7 = 256;

const int _ISlower_7 = 512;

const int _ISalpha_7 = 1024;

const int _ISdigit_7 = 2048;

const int _ISxdigit_7 = 4096;

const int _ISspace_7 = 8192;

const int _ISprint_7 = 16384;

const int _ISgraph_7 = 32768;

const int _ISblank_7 = 1;

const int _IScntrl_7 = 2;

const int _ISpunct_7 = 4;

const int _ISalnum_7 = 8;

const int FP_NAN_7 = 0;

const int FP_INFINITE_7 = 1;

const int FP_ZERO_7 = 2;

const int FP_SUBNORMAL_7 = 3;

const int FP_NORMAL_7 = 4;

const int _ISupper_8 = 256;

const int _ISlower_8 = 512;

const int _ISalpha_8 = 1024;

const int _ISdigit_8 = 2048;

const int _ISxdigit_8 = 4096;

const int _ISspace_8 = 8192;

const int _ISprint_8 = 16384;

const int _ISgraph_8 = 32768;

const int _ISblank_8 = 1;

const int _IScntrl_8 = 2;

const int _ISpunct_8 = 4;

const int _ISalnum_8 = 8;

const int FP_NAN_8 = 0;

const int FP_INFINITE_8 = 1;

const int FP_ZERO_8 = 2;

const int FP_SUBNORMAL_8 = 3;

const int FP_NORMAL_8 = 4;

const int _ISupper_9 = 256;

const int _ISlower_9 = 512;

const int _ISalpha_9 = 1024;

const int _ISdigit_9 = 2048;

const int _ISxdigit_9 = 4096;

const int _ISspace_9 = 8192;

const int _ISprint_9 = 16384;

const int _ISgraph_9 = 32768;

const int _ISblank_9 = 1;

const int _IScntrl_9 = 2;

const int _ISpunct_9 = 4;

const int _ISalnum_9 = 8;

const int FP_NAN_9 = 0;

const int FP_INFINITE_9 = 1;

const int FP_ZERO_9 = 2;

const int FP_SUBNORMAL_9 = 3;

const int FP_NORMAL_9 = 4;

const int _ISupper_10 = 256;

const int _ISlower_10 = 512;

const int _ISalpha_10 = 1024;

const int _ISdigit_10 = 2048;

const int _ISxdigit_10 = 4096;

const int _ISspace_10 = 8192;

const int _ISprint_10 = 16384;

const int _ISgraph_10 = 32768;

const int _ISblank_10 = 1;

const int _IScntrl_10 = 2;

const int _ISpunct_10 = 4;

const int _ISalnum_10 = 8;

const int FP_NAN_10 = 0;

const int FP_INFINITE_10 = 1;

const int FP_ZERO_10 = 2;

const int FP_SUBNORMAL_10 = 3;

const int FP_NORMAL_10 = 4;

const int _ISupper_11 = 256;

const int _ISlower_11 = 512;

const int _ISalpha_11 = 1024;

const int _ISdigit_11 = 2048;

const int _ISxdigit_11 = 4096;

const int _ISspace_11 = 8192;

const int _ISprint_11 = 16384;

const int _ISgraph_11 = 32768;

const int _ISblank_11 = 1;

const int _IScntrl_11 = 2;

const int _ISpunct_11 = 4;

const int _ISalnum_11 = 8;

const int FP_NAN_11 = 0;

const int FP_INFINITE_11 = 1;

const int FP_ZERO_11 = 2;

const int FP_SUBNORMAL_11 = 3;

const int FP_NORMAL_11 = 4;

const int _ISupper_12 = 256;

const int _ISlower_12 = 512;

const int _ISalpha_12 = 1024;

const int _ISdigit_12 = 2048;

const int _ISxdigit_12 = 4096;

const int _ISspace_12 = 8192;

const int _ISprint_12 = 16384;

const int _ISgraph_12 = 32768;

const int _ISblank_12 = 1;

const int _IScntrl_12 = 2;

const int _ISpunct_12 = 4;

const int _ISalnum_12 = 8;

const int FP_NAN_12 = 0;

const int FP_INFINITE_12 = 1;

const int FP_ZERO_12 = 2;

const int FP_SUBNORMAL_12 = 3;

const int FP_NORMAL_12 = 4;

const int _ISupper_13 = 256;

const int _ISlower_13 = 512;

const int _ISalpha_13 = 1024;

const int _ISdigit_13 = 2048;

const int _ISxdigit_13 = 4096;

const int _ISspace_13 = 8192;

const int _ISprint_13 = 16384;

const int _ISgraph_13 = 32768;

const int _ISblank_13 = 1;

const int _IScntrl_13 = 2;

const int _ISpunct_13 = 4;

const int _ISalnum_13 = 8;

const int FP_NAN_13 = 0;

const int FP_INFINITE_13 = 1;

const int FP_ZERO_13 = 2;

const int FP_SUBNORMAL_13 = 3;

const int FP_NORMAL_13 = 4;

const int _ISupper_14 = 256;

const int _ISlower_14 = 512;

const int _ISalpha_14 = 1024;

const int _ISdigit_14 = 2048;

const int _ISxdigit_14 = 4096;

const int _ISspace_14 = 8192;

const int _ISprint_14 = 16384;

const int _ISgraph_14 = 32768;

const int _ISblank_14 = 1;

const int _IScntrl_14 = 2;

const int _ISpunct_14 = 4;

const int _ISalnum_14 = 8;

const int FP_NAN_14 = 0;

const int FP_INFINITE_14 = 1;

const int FP_ZERO_14 = 2;

const int FP_SUBNORMAL_14 = 3;

const int FP_NORMAL_14 = 4;

const int _ISupper_15 = 256;

const int _ISlower_15 = 512;

const int _ISalpha_15 = 1024;

const int _ISdigit_15 = 2048;

const int _ISxdigit_15 = 4096;

const int _ISspace_15 = 8192;

const int _ISprint_15 = 16384;

const int _ISgraph_15 = 32768;

const int _ISblank_15 = 1;

const int _IScntrl_15 = 2;

const int _ISpunct_15 = 4;

const int _ISalnum_15 = 8;

const int FP_NAN_15 = 0;

const int FP_INFINITE_15 = 1;

const int FP_ZERO_15 = 2;

const int FP_SUBNORMAL_15 = 3;

const int FP_NORMAL_15 = 4;

const int _ISupper_16 = 256;

const int _ISlower_16 = 512;

const int _ISalpha_16 = 1024;

const int _ISdigit_16 = 2048;

const int _ISxdigit_16 = 4096;

const int _ISspace_16 = 8192;

const int _ISprint_16 = 16384;

const int _ISgraph_16 = 32768;

const int _ISblank_16 = 1;

const int _IScntrl_16 = 2;

const int _ISpunct_16 = 4;

const int _ISalnum_16 = 8;

const int FP_NAN_16 = 0;

const int FP_INFINITE_16 = 1;

const int FP_ZERO_16 = 2;

const int FP_SUBNORMAL_16 = 3;

const int FP_NORMAL_16 = 4;

const int _ISupper_17 = 256;

const int _ISlower_17 = 512;

const int _ISalpha_17 = 1024;

const int _ISdigit_17 = 2048;

const int _ISxdigit_17 = 4096;

const int _ISspace_17 = 8192;

const int _ISprint_17 = 16384;

const int _ISgraph_17 = 32768;

const int _ISblank_17 = 1;

const int _IScntrl_17 = 2;

const int _ISpunct_17 = 4;

const int _ISalnum_17 = 8;

const int FP_NAN_17 = 0;

const int FP_INFINITE_17 = 1;

const int FP_ZERO_17 = 2;

const int FP_SUBNORMAL_17 = 3;

const int FP_NORMAL_17 = 4;

const int _ISupper_18 = 256;

const int _ISlower_18 = 512;

const int _ISalpha_18 = 1024;

const int _ISdigit_18 = 2048;

const int _ISxdigit_18 = 4096;

const int _ISspace_18 = 8192;

const int _ISprint_18 = 16384;

const int _ISgraph_18 = 32768;

const int _ISblank_18 = 1;

const int _IScntrl_18 = 2;

const int _ISpunct_18 = 4;

const int _ISalnum_18 = 8;

const int FP_NAN_18 = 0;

const int FP_INFINITE_18 = 1;

const int FP_ZERO_18 = 2;

const int FP_SUBNORMAL_18 = 3;

const int FP_NORMAL_18 = 4;

const int _ISupper_19 = 256;

const int _ISlower_19 = 512;

const int _ISalpha_19 = 1024;

const int _ISdigit_19 = 2048;

const int _ISxdigit_19 = 4096;

const int _ISspace_19 = 8192;

const int _ISprint_19 = 16384;

const int _ISgraph_19 = 32768;

const int _ISblank_19 = 1;

const int _IScntrl_19 = 2;

const int _ISpunct_19 = 4;

const int _ISalnum_19 = 8;

const int FP_NAN_19 = 0;

const int FP_INFINITE_19 = 1;

const int FP_ZERO_19 = 2;

const int FP_SUBNORMAL_19 = 3;

const int FP_NORMAL_19 = 4;

const int _ISupper_20 = 256;

const int _ISlower_20 = 512;

const int _ISalpha_20 = 1024;

const int _ISdigit_20 = 2048;

const int _ISxdigit_20 = 4096;

const int _ISspace_20 = 8192;

const int _ISprint_20 = 16384;

const int _ISgraph_20 = 32768;

const int _ISblank_20 = 1;

const int _IScntrl_20 = 2;

const int _ISpunct_20 = 4;

const int _ISalnum_20 = 8;

const int FP_NAN_20 = 0;

const int FP_INFINITE_20 = 1;

const int FP_ZERO_20 = 2;

const int FP_SUBNORMAL_20 = 3;

const int FP_NORMAL_20 = 4;

const int _ISupper_21 = 256;

const int _ISlower_21 = 512;

const int _ISalpha_21 = 1024;

const int _ISdigit_21 = 2048;

const int _ISxdigit_21 = 4096;

const int _ISspace_21 = 8192;

const int _ISprint_21 = 16384;

const int _ISgraph_21 = 32768;

const int _ISblank_21 = 1;

const int _IScntrl_21 = 2;

const int _ISpunct_21 = 4;

const int _ISalnum_21 = 8;

const int FP_NAN_21 = 0;

const int FP_INFINITE_21 = 1;

const int FP_ZERO_21 = 2;

const int FP_SUBNORMAL_21 = 3;

const int FP_NORMAL_21 = 4;

const int _ISupper_22 = 256;

const int _ISlower_22 = 512;

const int _ISalpha_22 = 1024;

const int _ISdigit_22 = 2048;

const int _ISxdigit_22 = 4096;

const int _ISspace_22 = 8192;

const int _ISprint_22 = 16384;

const int _ISgraph_22 = 32768;

const int _ISblank_22 = 1;

const int _IScntrl_22 = 2;

const int _ISpunct_22 = 4;

const int _ISalnum_22 = 8;

const int FP_NAN_22 = 0;

const int FP_INFINITE_22 = 1;

const int FP_ZERO_22 = 2;

const int FP_SUBNORMAL_22 = 3;

const int FP_NORMAL_22 = 4;

const int _ISupper_23 = 256;

const int _ISlower_23 = 512;

const int _ISalpha_23 = 1024;

const int _ISdigit_23 = 2048;

const int _ISxdigit_23 = 4096;

const int _ISspace_23 = 8192;

const int _ISprint_23 = 16384;

const int _ISgraph_23 = 32768;

const int _ISblank_23 = 1;

const int _IScntrl_23 = 2;

const int _ISpunct_23 = 4;

const int _ISalnum_23 = 8;

const int FP_NAN_23 = 0;

const int FP_INFINITE_23 = 1;

const int FP_ZERO_23 = 2;

const int FP_SUBNORMAL_23 = 3;

const int FP_NORMAL_23 = 4;

const int _ISupper_24 = 256;

const int _ISlower_24 = 512;

const int _ISalpha_24 = 1024;

const int _ISdigit_24 = 2048;

const int _ISxdigit_24 = 4096;

const int _ISspace_24 = 8192;

const int _ISprint_24 = 16384;

const int _ISgraph_24 = 32768;

const int _ISblank_24 = 1;

const int _IScntrl_24 = 2;

const int _ISpunct_24 = 4;

const int _ISalnum_24 = 8;

const int FP_NAN_24 = 0;

const int FP_INFINITE_24 = 1;

const int FP_ZERO_24 = 2;

const int FP_SUBNORMAL_24 = 3;

const int FP_NORMAL_24 = 4;

const int _ISupper_25 = 256;

const int _ISlower_25 = 512;

const int _ISalpha_25 = 1024;

const int _ISdigit_25 = 2048;

const int _ISxdigit_25 = 4096;

const int _ISspace_25 = 8192;

const int _ISprint_25 = 16384;

const int _ISgraph_25 = 32768;

const int _ISblank_25 = 1;

const int _IScntrl_25 = 2;

const int _ISpunct_25 = 4;

const int _ISalnum_25 = 8;

const int FP_NAN_25 = 0;

const int FP_INFINITE_25 = 1;

const int FP_ZERO_25 = 2;

const int FP_SUBNORMAL_25 = 3;

const int FP_NORMAL_25 = 4;

const int _ISupper_26 = 256;

const int _ISlower_26 = 512;

const int _ISalpha_26 = 1024;

const int _ISdigit_26 = 2048;

const int _ISxdigit_26 = 4096;

const int _ISspace_26 = 8192;

const int _ISprint_26 = 16384;

const int _ISgraph_26 = 32768;

const int _ISblank_26 = 1;

const int _IScntrl_26 = 2;

const int _ISpunct_26 = 4;

const int _ISalnum_26 = 8;

const int FP_NAN_26 = 0;

const int FP_INFINITE_26 = 1;

const int FP_ZERO_26 = 2;

const int FP_SUBNORMAL_26 = 3;

const int FP_NORMAL_26 = 4;

const int _ISupper_27 = 256;

const int _ISlower_27 = 512;

const int _ISalpha_27 = 1024;

const int _ISdigit_27 = 2048;

const int _ISxdigit_27 = 4096;

const int _ISspace_27 = 8192;

const int _ISprint_27 = 16384;

const int _ISgraph_27 = 32768;

const int _ISblank_27 = 1;

const int _IScntrl_27 = 2;

const int _ISpunct_27 = 4;

const int _ISalnum_27 = 8;

const int FP_NAN_27 = 0;

const int FP_INFINITE_27 = 1;

const int FP_ZERO_27 = 2;

const int FP_SUBNORMAL_27 = 3;

const int FP_NORMAL_27 = 4;

const int _ISupper_28 = 256;

const int _ISlower_28 = 512;

const int _ISalpha_28 = 1024;

const int _ISdigit_28 = 2048;

const int _ISxdigit_28 = 4096;

const int _ISspace_28 = 8192;

const int _ISprint_28 = 16384;

const int _ISgraph_28 = 32768;

const int _ISblank_28 = 1;

const int _IScntrl_28 = 2;

const int _ISpunct_28 = 4;

const int _ISalnum_28 = 8;

const int FP_NAN_28 = 0;

const int FP_INFINITE_28 = 1;

const int FP_ZERO_28 = 2;

const int FP_SUBNORMAL_28 = 3;

const int FP_NORMAL_28 = 4;

const int _ISupper_29 = 256;

const int _ISlower_29 = 512;

const int _ISalpha_29 = 1024;

const int _ISdigit_29 = 2048;

const int _ISxdigit_29 = 4096;

const int _ISspace_29 = 8192;

const int _ISprint_29 = 16384;

const int _ISgraph_29 = 32768;

const int _ISblank_29 = 1;

const int _IScntrl_29 = 2;

const int _ISpunct_29 = 4;

const int _ISalnum_29 = 8;

const int FP_NAN_29 = 0;

const int FP_INFINITE_29 = 1;

const int FP_ZERO_29 = 2;

const int FP_SUBNORMAL_29 = 3;

const int FP_NORMAL_29 = 4;

const int _ISupper_30 = 256;

const int _ISlower_30 = 512;

const int _ISalpha_30 = 1024;

const int _ISdigit_30 = 2048;

const int _ISxdigit_30 = 4096;

const int _ISspace_30 = 8192;

const int _ISprint_30 = 16384;

const int _ISgraph_30 = 32768;

const int _ISblank_30 = 1;

const int _IScntrl_30 = 2;

const int _ISpunct_30 = 4;

const int _ISalnum_30 = 8;

const int FP_NAN_30 = 0;

const int FP_INFINITE_30 = 1;

const int FP_ZERO_30 = 2;

const int FP_SUBNORMAL_30 = 3;

const int FP_NORMAL_30 = 4;

const int _ISupper_31 = 256;

const int _ISlower_31 = 512;

const int _ISalpha_31 = 1024;

const int _ISdigit_31 = 2048;

const int _ISxdigit_31 = 4096;

const int _ISspace_31 = 8192;

const int _ISprint_31 = 16384;

const int _ISgraph_31 = 32768;

const int _ISblank_31 = 1;

const int _IScntrl_31 = 2;

const int _ISpunct_31 = 4;

const int _ISalnum_31 = 8;

const int FP_NAN_31 = 0;

const int FP_INFINITE_31 = 1;

const int FP_ZERO_31 = 2;

const int FP_SUBNORMAL_31 = 3;

const int FP_NORMAL_31 = 4;

const int _ISupper_32 = 256;

const int _ISlower_32 = 512;

const int _ISalpha_32 = 1024;

const int _ISdigit_32 = 2048;

const int _ISxdigit_32 = 4096;

const int _ISspace_32 = 8192;

const int _ISprint_32 = 16384;

const int _ISgraph_32 = 32768;

const int _ISblank_32 = 1;

const int _IScntrl_32 = 2;

const int _ISpunct_32 = 4;

const int _ISalnum_32 = 8;

const int FP_NAN_32 = 0;

const int FP_INFINITE_32 = 1;

const int FP_ZERO_32 = 2;

const int FP_SUBNORMAL_32 = 3;

const int FP_NORMAL_32 = 4;

const int _ISupper_33 = 256;

const int _ISlower_33 = 512;

const int _ISalpha_33 = 1024;

const int _ISdigit_33 = 2048;

const int _ISxdigit_33 = 4096;

const int _ISspace_33 = 8192;

const int _ISprint_33 = 16384;

const int _ISgraph_33 = 32768;

const int _ISblank_33 = 1;

const int _IScntrl_33 = 2;

const int _ISpunct_33 = 4;

const int _ISalnum_33 = 8;

const int FP_NAN_33 = 0;

const int FP_INFINITE_33 = 1;

const int FP_ZERO_33 = 2;

const int FP_SUBNORMAL_33 = 3;

const int FP_NORMAL_33 = 4;

const int _ISupper_34 = 256;

const int _ISlower_34 = 512;

const int _ISalpha_34 = 1024;

const int _ISdigit_34 = 2048;

const int _ISxdigit_34 = 4096;

const int _ISspace_34 = 8192;

const int _ISprint_34 = 16384;

const int _ISgraph_34 = 32768;

const int _ISblank_34 = 1;

const int _IScntrl_34 = 2;

const int _ISpunct_34 = 4;

const int _ISalnum_34 = 8;

const int FP_NAN_34 = 0;

const int FP_INFINITE_34 = 1;

const int FP_ZERO_34 = 2;

const int FP_SUBNORMAL_34 = 3;

const int FP_NORMAL_34 = 4;

const int _ISupper_35 = 256;

const int _ISlower_35 = 512;

const int _ISalpha_35 = 1024;

const int _ISdigit_35 = 2048;

const int _ISxdigit_35 = 4096;

const int _ISspace_35 = 8192;

const int _ISprint_35 = 16384;

const int _ISgraph_35 = 32768;

const int _ISblank_35 = 1;

const int _IScntrl_35 = 2;

const int _ISpunct_35 = 4;

const int _ISalnum_35 = 8;

const int FP_NAN_35 = 0;

const int FP_INFINITE_35 = 1;

const int FP_ZERO_35 = 2;

const int FP_SUBNORMAL_35 = 3;

const int FP_NORMAL_35 = 4;

const int _ISupper_36 = 256;

const int _ISlower_36 = 512;

const int _ISalpha_36 = 1024;

const int _ISdigit_36 = 2048;

const int _ISxdigit_36 = 4096;

const int _ISspace_36 = 8192;

const int _ISprint_36 = 16384;

const int _ISgraph_36 = 32768;

const int _ISblank_36 = 1;

const int _IScntrl_36 = 2;

const int _ISpunct_36 = 4;

const int _ISalnum_36 = 8;

const int FP_NAN_36 = 0;

const int FP_INFINITE_36 = 1;

const int FP_ZERO_36 = 2;

const int FP_SUBNORMAL_36 = 3;

const int FP_NORMAL_36 = 4;

const int _ISupper_37 = 256;

const int _ISlower_37 = 512;

const int _ISalpha_37 = 1024;

const int _ISdigit_37 = 2048;

const int _ISxdigit_37 = 4096;

const int _ISspace_37 = 8192;

const int _ISprint_37 = 16384;

const int _ISgraph_37 = 32768;

const int _ISblank_37 = 1;

const int _IScntrl_37 = 2;

const int _ISpunct_37 = 4;

const int _ISalnum_37 = 8;

const int FP_NAN_37 = 0;

const int FP_INFINITE_37 = 1;

const int FP_ZERO_37 = 2;

const int FP_SUBNORMAL_37 = 3;

const int FP_NORMAL_37 = 4;

const int _ISupper_38 = 256;

const int _ISlower_38 = 512;

const int _ISalpha_38 = 1024;

const int _ISdigit_38 = 2048;

const int _ISxdigit_38 = 4096;

const int _ISspace_38 = 8192;

const int _ISprint_38 = 16384;

const int _ISgraph_38 = 32768;

const int _ISblank_38 = 1;

const int _IScntrl_38 = 2;

const int _ISpunct_38 = 4;

const int _ISalnum_38 = 8;

const int FP_NAN_38 = 0;

const int FP_INFINITE_38 = 1;

const int FP_ZERO_38 = 2;

const int FP_SUBNORMAL_38 = 3;

const int FP_NORMAL_38 = 4;

const int _ISupper_39 = 256;

const int _ISlower_39 = 512;

const int _ISalpha_39 = 1024;

const int _ISdigit_39 = 2048;

const int _ISxdigit_39 = 4096;

const int _ISspace_39 = 8192;

const int _ISprint_39 = 16384;

const int _ISgraph_39 = 32768;

const int _ISblank_39 = 1;

const int _IScntrl_39 = 2;

const int _ISpunct_39 = 4;

const int _ISalnum_39 = 8;

const int FP_NAN_39 = 0;

const int FP_INFINITE_39 = 1;

const int FP_ZERO_39 = 2;

const int FP_SUBNORMAL_39 = 3;

const int FP_NORMAL_39 = 4;

const int _ISupper_40 = 256;

const int _ISlower_40 = 512;

const int _ISalpha_40 = 1024;

const int _ISdigit_40 = 2048;

const int _ISxdigit_40 = 4096;

const int _ISspace_40 = 8192;

const int _ISprint_40 = 16384;

const int _ISgraph_40 = 32768;

const int _ISblank_40 = 1;

const int _IScntrl_40 = 2;

const int _ISpunct_40 = 4;

const int _ISalnum_40 = 8;

const int FP_NAN_40 = 0;

const int FP_INFINITE_40 = 1;

const int FP_ZERO_40 = 2;

const int FP_SUBNORMAL_40 = 3;

const int FP_NORMAL_40 = 4;

const int _ISupper_41 = 256;

const int _ISlower_41 = 512;

const int _ISalpha_41 = 1024;

const int _ISdigit_41 = 2048;

const int _ISxdigit_41 = 4096;

const int _ISspace_41 = 8192;

const int _ISprint_41 = 16384;

const int _ISgraph_41 = 32768;

const int _ISblank_41 = 1;

const int _IScntrl_41 = 2;

const int _ISpunct_41 = 4;

const int _ISalnum_41 = 8;

const int FP_NAN_41 = 0;

const int FP_INFINITE_41 = 1;

const int FP_ZERO_41 = 2;

const int FP_SUBNORMAL_41 = 3;

const int FP_NORMAL_41 = 4;

const int _ISupper_42 = 256;

const int _ISlower_42 = 512;

const int _ISalpha_42 = 1024;

const int _ISdigit_42 = 2048;

const int _ISxdigit_42 = 4096;

const int _ISspace_42 = 8192;

const int _ISprint_42 = 16384;

const int _ISgraph_42 = 32768;

const int _ISblank_42 = 1;

const int _IScntrl_42 = 2;

const int _ISpunct_42 = 4;

const int _ISalnum_42 = 8;

const int FP_NAN_42 = 0;

const int FP_INFINITE_42 = 1;

const int FP_ZERO_42 = 2;

const int FP_SUBNORMAL_42 = 3;

const int FP_NORMAL_42 = 4;

const int _ISupper_43 = 256;

const int _ISlower_43 = 512;

const int _ISalpha_43 = 1024;

const int _ISdigit_43 = 2048;

const int _ISxdigit_43 = 4096;

const int _ISspace_43 = 8192;

const int _ISprint_43 = 16384;

const int _ISgraph_43 = 32768;

const int _ISblank_43 = 1;

const int _IScntrl_43 = 2;

const int _ISpunct_43 = 4;

const int _ISalnum_43 = 8;

const int FP_NAN_43 = 0;

const int FP_INFINITE_43 = 1;

const int FP_ZERO_43 = 2;

const int FP_SUBNORMAL_43 = 3;

const int FP_NORMAL_43 = 4;

const int _ISupper_44 = 256;

const int _ISlower_44 = 512;

const int _ISalpha_44 = 1024;

const int _ISdigit_44 = 2048;

const int _ISxdigit_44 = 4096;

const int _ISspace_44 = 8192;

const int _ISprint_44 = 16384;

const int _ISgraph_44 = 32768;

const int _ISblank_44 = 1;

const int _IScntrl_44 = 2;

const int _ISpunct_44 = 4;

const int _ISalnum_44 = 8;

const int FP_NAN_44 = 0;

const int FP_INFINITE_44 = 1;

const int FP_ZERO_44 = 2;

const int FP_SUBNORMAL_44 = 3;

const int FP_NORMAL_44 = 4;

const int _ISupper_45 = 256;

const int _ISlower_45 = 512;

const int _ISalpha_45 = 1024;

const int _ISdigit_45 = 2048;

const int _ISxdigit_45 = 4096;

const int _ISspace_45 = 8192;

const int _ISprint_45 = 16384;

const int _ISgraph_45 = 32768;

const int _ISblank_45 = 1;

const int _IScntrl_45 = 2;

const int _ISpunct_45 = 4;

const int _ISalnum_45 = 8;

const int FP_NAN_45 = 0;

const int FP_INFINITE_45 = 1;

const int FP_ZERO_45 = 2;

const int FP_SUBNORMAL_45 = 3;

const int FP_NORMAL_45 = 4;

const int _ISupper_46 = 256;

const int _ISlower_46 = 512;

const int _ISalpha_46 = 1024;

const int _ISdigit_46 = 2048;

const int _ISxdigit_46 = 4096;

const int _ISspace_46 = 8192;

const int _ISprint_46 = 16384;

const int _ISgraph_46 = 32768;

const int _ISblank_46 = 1;

const int _IScntrl_46 = 2;

const int _ISpunct_46 = 4;

const int _ISalnum_46 = 8;

const int FP_NAN_46 = 0;

const int FP_INFINITE_46 = 1;

const int FP_ZERO_46 = 2;

const int FP_SUBNORMAL_46 = 3;

const int FP_NORMAL_46 = 4;

const int _ISupper_47 = 256;

const int _ISlower_47 = 512;

const int _ISalpha_47 = 1024;

const int _ISdigit_47 = 2048;

const int _ISxdigit_47 = 4096;

const int _ISspace_47 = 8192;

const int _ISprint_47 = 16384;

const int _ISgraph_47 = 32768;

const int _ISblank_47 = 1;

const int _IScntrl_47 = 2;

const int _ISpunct_47 = 4;

const int _ISalnum_47 = 8;

const int FP_NAN_47 = 0;

const int FP_INFINITE_47 = 1;

const int FP_ZERO_47 = 2;

const int FP_SUBNORMAL_47 = 3;

const int FP_NORMAL_47 = 4;

const int NULL = 0;

const int CRC32_POLY = 3988292384;

const int __LINUX__ = 1;

const int SIZEOF_VOIDP = 8;

const int HAVE_GCC_ATOMICS = 1;

const int HAVE_LIBC = 1;

const int STDC_HEADERS = 1;

const int HAVE_ALLOCA_H = 1;

const int HAVE_CTYPE_H = 1;

const int HAVE_FLOAT_H = 1;

const int HAVE_ICONV_H = 1;

const int HAVE_INTTYPES_H = 1;

const int HAVE_LIMITS_H = 1;

const int HAVE_MALLOC_H = 1;

const int HAVE_MATH_H = 1;

const int HAVE_MEMORY_H = 1;

const int HAVE_SIGNAL_H = 1;

const int HAVE_STDARG_H = 1;

const int HAVE_STDINT_H = 1;

const int HAVE_STDIO_H = 1;

const int HAVE_STDLIB_H = 1;

const int HAVE_STRINGS_H = 1;

const int HAVE_STRING_H = 1;

const int HAVE_SYS_TYPES_H = 1;

const int HAVE_WCHAR_H = 1;

const int HAVE_MALLOC = 1;

const int HAVE_CALLOC = 1;

const int HAVE_REALLOC = 1;

const int HAVE_FREE = 1;

const int HAVE_ALLOCA = 1;

const int HAVE_GETENV = 1;

const int HAVE_SETENV = 1;

const int HAVE_PUTENV = 1;

const int HAVE_UNSETENV = 1;

const int HAVE_QSORT = 1;

const int HAVE_ABS = 1;

const int HAVE_BCOPY = 1;

const int HAVE_MEMSET = 1;

const int HAVE_MEMCPY = 1;

const int HAVE_MEMMOVE = 1;

const int HAVE_MEMCMP = 1;

const int HAVE_WCSLEN = 1;

const int HAVE_WCSDUP = 1;

const int HAVE_WCSSTR = 1;

const int HAVE_WCSCMP = 1;

const int HAVE_WCSNCMP = 1;

const int HAVE_STRLEN = 1;

const int HAVE_STRCHR = 1;

const int HAVE_STRRCHR = 1;

const int HAVE_STRSTR = 1;

const int HAVE_STRTOK_R = 1;

const int HAVE_STRTOL = 1;

const int HAVE_STRTOUL = 1;

const int HAVE_STRTOLL = 1;

const int HAVE_STRTOULL = 1;

const int HAVE_STRTOD = 1;

const int HAVE_ATOI = 1;

const int HAVE_ATOF = 1;

const int HAVE_STRCMP = 1;

const int HAVE_STRNCMP = 1;

const int HAVE_STRCASECMP = 1;

const int HAVE_STRNCASECMP = 1;

const int HAVE_VSSCANF = 1;

const int HAVE_VSNPRINTF = 1;

const int HAVE_M_PI = 1;

const int HAVE_ACOS = 1;

const int HAVE_ACOSF = 1;

const int HAVE_ASIN = 1;

const int HAVE_ASINF = 1;

const int HAVE_ATAN = 1;

const int HAVE_ATANF = 1;

const int HAVE_ATAN2 = 1;

const int HAVE_ATAN2F = 1;

const int HAVE_CEIL = 1;

const int HAVE_CEILF = 1;

const int HAVE_COPYSIGN = 1;

const int HAVE_COPYSIGNF = 1;

const int HAVE_COS = 1;

const int HAVE_COSF = 1;

const int HAVE_EXP = 1;

const int HAVE_EXPF = 1;

const int HAVE_FABS = 1;

const int HAVE_FABSF = 1;

const int HAVE_FLOOR = 1;

const int HAVE_FLOORF = 1;

const int HAVE_FMOD = 1;

const int HAVE_FMODF = 1;

const int HAVE_LOG = 1;

const int HAVE_LOGF = 1;

const int HAVE_LOG10 = 1;

const int HAVE_LOG10F = 1;

const int HAVE_POW = 1;

const int HAVE_POWF = 1;

const int HAVE_SCALBN = 1;

const int HAVE_SCALBNF = 1;

const int HAVE_SIN = 1;

const int HAVE_SINF = 1;

const int HAVE_SQRT = 1;

const int HAVE_SQRTF = 1;

const int HAVE_TAN = 1;

const int HAVE_TANF = 1;

const int HAVE_FOPEN64 = 1;

const int HAVE_FSEEKO = 1;

const int HAVE_FSEEKO64 = 1;

const int HAVE_SIGACTION = 1;

const int HAVE_SA_SIGACTION = 1;

const int HAVE_SETJMP = 1;

const int HAVE_NANOSLEEP = 1;

const int HAVE_SYSCONF = 1;

const int HAVE_CLOCK_GETTIME = 1;

const int HAVE_MPROTECT = 1;

const int HAVE_ICONV = 1;

const int HAVE_PTHREAD_SETNAME_NP = 1;

const int HAVE_SEM_TIMEDWAIT = 1;

const int HAVE_GETAUXVAL = 1;

const int HAVE_POLL = 1;

const int HAVE__EXIT = 1;

const int HAVE_IMMINTRIN_H = 1;

const int SDL_AUDIO_DRIVER_DISK = 1;

const int SDL_AUDIO_DRIVER_DUMMY = 1;

const int SDL_AUDIO_DRIVER_OSS = 1;

const int SDL_INPUT_LINUXEV = 1;

const int SDL_INPUT_LINUXKD = 1;

const int SDL_JOYSTICK_LINUX = 1;

const int SDL_HAPTIC_LINUX = 1;

const int SDL_SENSOR_DUMMY = 1;

const int SDL_LOADSO_DLOPEN = 1;

const int SDL_THREAD_PTHREAD = 1;

const int SDL_THREAD_PTHREAD_RECURSIVE_MUTEX = 1;

const int SDL_TIMER_UNIX = 1;

const int SDL_VIDEO_DRIVER_DUMMY = 1;

const int SDL_VIDEO_DRIVER_X11 = 1;

const String SDL_VIDEO_DRIVER_X11_DYNAMIC = '/opt/X11/lib/libX11.6.dylib';

const String SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT = '/opt/X11/lib/libXext.6.dylib';

const String SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR = 'libXcursor.so.1';

const String SDL_VIDEO_DRIVER_X11_DYNAMIC_XINERAMA =
    '/opt/X11/lib/libXinerama.1.dylib';

const String SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2 =
    '/opt/X11/lib/libXi.6.dylib';

const String SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR =
    '/opt/X11/lib/libXrandr.2.dylib';

const String SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS = '/opt/X11/lib/libXss.1.dylib';

const String SDL_VIDEO_DRIVER_X11_DYNAMIC_XVIDMODE =
    '/opt/X11/lib/libXxf86vm.1.dylib';

const int SDL_VIDEO_DRIVER_X11_XCURSOR = 1;

const int SDL_VIDEO_DRIVER_X11_XDBE = 1;

const int SDL_VIDEO_DRIVER_X11_XINERAMA = 1;

const int SDL_VIDEO_DRIVER_X11_XINPUT2 = 1;

const int SDL_VIDEO_DRIVER_X11_XINPUT2_SUPPORTS_MULTITOUCH = 1;

const int SDL_VIDEO_DRIVER_X11_XRANDR = 1;

const int SDL_VIDEO_DRIVER_X11_XSCRNSAVER = 1;

const int SDL_VIDEO_DRIVER_X11_XSHAPE = 1;

const int SDL_VIDEO_DRIVER_X11_XVIDMODE = 1;

const int SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS = 1;

const int SDL_VIDEO_DRIVER_X11_CONST_PARAM_XEXTADDDISPLAY = 1;

const int SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM = 1;

const int SDL_VIDEO_RENDER_OGL = 1;

const int SDL_VIDEO_RENDER_OGL_ES2 = 1;

const int SDL_VIDEO_OPENGL = 1;

const int SDL_VIDEO_OPENGL_ES2 = 1;

const int SDL_VIDEO_OPENGL_EGL = 1;

const int SDL_VIDEO_OPENGL_GLX = 1;

const int SDL_VIDEO_VULKAN = 1;

const int SDL_POWER_LINUX = 1;

const int SDL_FILESYSTEM_UNIX = 1;

const int SDL_ASSEMBLY_ROUTINES = 1;

const int SDL_USE_IME = 1;

const int _SYS_TYPES_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 32;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int _BITS_STDINT_INTN_H = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _STDIO_H = 1;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int __GNUC_VA_LIST = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __ENUM_IDTYPE_T = 1;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _ALLOCA_H = 1;

const int _STRING_H = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int _STRINGS_H = 1;

const int _WCHAR_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int __wint_t_defined = 1;

const int _WINT_T = 1;

const int __mbstate_t_defined = 1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WEOF = 4294967295;

const int _INTTYPES_H = 1;

const int _STDINT_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int ____gwchar_t_defined = 1;

const String __PRI64_PREFIX = 'l';

const String __PRIPTR_PREFIX = 'l';

const String PRId8 = 'd';

const String PRId16 = 'd';

const String PRId32 = 'd';

const String PRId64 = 'ld';

const String PRIdLEAST8 = 'd';

const String PRIdLEAST16 = 'd';

const String PRIdLEAST32 = 'd';

const String PRIdLEAST64 = 'ld';

const String PRIdFAST8 = 'd';

const String PRIdFAST16 = 'ld';

const String PRIdFAST32 = 'ld';

const String PRIdFAST64 = 'ld';

const String PRIi8 = 'i';

const String PRIi16 = 'i';

const String PRIi32 = 'i';

const String PRIi64 = 'li';

const String PRIiLEAST8 = 'i';

const String PRIiLEAST16 = 'i';

const String PRIiLEAST32 = 'i';

const String PRIiLEAST64 = 'li';

const String PRIiFAST8 = 'i';

const String PRIiFAST16 = 'li';

const String PRIiFAST32 = 'li';

const String PRIiFAST64 = 'li';

const String PRIo8 = 'o';

const String PRIo16 = 'o';

const String PRIo32 = 'o';

const String PRIo64 = 'lo';

const String PRIoLEAST8 = 'o';

const String PRIoLEAST16 = 'o';

const String PRIoLEAST32 = 'o';

const String PRIoLEAST64 = 'lo';

const String PRIoFAST8 = 'o';

const String PRIoFAST16 = 'lo';

const String PRIoFAST32 = 'lo';

const String PRIoFAST64 = 'lo';

const String PRIu8 = 'u';

const String PRIu16 = 'u';

const String PRIu32 = 'u';

const String PRIu64 = 'lu';

const String PRIuLEAST8 = 'u';

const String PRIuLEAST16 = 'u';

const String PRIuLEAST32 = 'u';

const String PRIuLEAST64 = 'lu';

const String PRIuFAST8 = 'u';

const String PRIuFAST16 = 'lu';

const String PRIuFAST32 = 'lu';

const String PRIuFAST64 = 'lu';

const String PRIx8 = 'x';

const String PRIx16 = 'x';

const String PRIx32 = 'x';

const String PRIx64 = 'lx';

const String PRIxLEAST8 = 'x';

const String PRIxLEAST16 = 'x';

const String PRIxLEAST32 = 'x';

const String PRIxLEAST64 = 'lx';

const String PRIxFAST8 = 'x';

const String PRIxFAST16 = 'lx';

const String PRIxFAST32 = 'lx';

const String PRIxFAST64 = 'lx';

const String PRIX8 = 'X';

const String PRIX16 = 'X';

const String PRIX32 = 'X';

const String PRIX64 = 'lX';

const String PRIXLEAST8 = 'X';

const String PRIXLEAST16 = 'X';

const String PRIXLEAST32 = 'X';

const String PRIXLEAST64 = 'lX';

const String PRIXFAST8 = 'X';

const String PRIXFAST16 = 'lX';

const String PRIXFAST32 = 'lX';

const String PRIXFAST64 = 'lX';

const String PRIdMAX = 'ld';

const String PRIiMAX = 'li';

const String PRIoMAX = 'lo';

const String PRIuMAX = 'lu';

const String PRIxMAX = 'lx';

const String PRIXMAX = 'lX';

const String PRIdPTR = 'ld';

const String PRIiPTR = 'li';

const String PRIoPTR = 'lo';

const String PRIuPTR = 'lu';

const String PRIxPTR = 'lx';

const String PRIXPTR = 'lX';

const String SCNd8 = 'hhd';

const String SCNd16 = 'hd';

const String SCNd32 = 'd';

const String SCNd64 = 'ld';

const String SCNdLEAST8 = 'hhd';

const String SCNdLEAST16 = 'hd';

const String SCNdLEAST32 = 'd';

const String SCNdLEAST64 = 'ld';

const String SCNdFAST8 = 'hhd';

const String SCNdFAST16 = 'ld';

const String SCNdFAST32 = 'ld';

const String SCNdFAST64 = 'ld';

const String SCNi8 = 'hhi';

const String SCNi16 = 'hi';

const String SCNi32 = 'i';

const String SCNi64 = 'li';

const String SCNiLEAST8 = 'hhi';

const String SCNiLEAST16 = 'hi';

const String SCNiLEAST32 = 'i';

const String SCNiLEAST64 = 'li';

const String SCNiFAST8 = 'hhi';

const String SCNiFAST16 = 'li';

const String SCNiFAST32 = 'li';

const String SCNiFAST64 = 'li';

const String SCNu8 = 'hhu';

const String SCNu16 = 'hu';

const String SCNu32 = 'u';

const String SCNu64 = 'lu';

const String SCNuLEAST8 = 'hhu';

const String SCNuLEAST16 = 'hu';

const String SCNuLEAST32 = 'u';

const String SCNuLEAST64 = 'lu';

const String SCNuFAST8 = 'hhu';

const String SCNuFAST16 = 'lu';

const String SCNuFAST32 = 'lu';

const String SCNuFAST64 = 'lu';

const String SCNo8 = 'hho';

const String SCNo16 = 'ho';

const String SCNo32 = 'o';

const String SCNo64 = 'lo';

const String SCNoLEAST8 = 'hho';

const String SCNoLEAST16 = 'ho';

const String SCNoLEAST32 = 'o';

const String SCNoLEAST64 = 'lo';

const String SCNoFAST8 = 'hho';

const String SCNoFAST16 = 'lo';

const String SCNoFAST32 = 'lo';

const String SCNoFAST64 = 'lo';

const String SCNx8 = 'hhx';

const String SCNx16 = 'hx';

const String SCNx32 = 'x';

const String SCNx64 = 'lx';

const String SCNxLEAST8 = 'hhx';

const String SCNxLEAST16 = 'hx';

const String SCNxLEAST32 = 'x';

const String SCNxLEAST64 = 'lx';

const String SCNxFAST8 = 'hhx';

const String SCNxFAST16 = 'lx';

const String SCNxFAST32 = 'lx';

const String SCNxFAST64 = 'lx';

const String SCNdMAX = 'ld';

const String SCNiMAX = 'li';

const String SCNoMAX = 'lo';

const String SCNuMAX = 'lu';

const String SCNxMAX = 'lx';

const String SCNdPTR = 'ld';

const String SCNiPTR = 'li';

const String SCNoPTR = 'lo';

const String SCNuPTR = 'lu';

const String SCNxPTR = 'lx';

const int _CTYPE_H = 1;

const int _MATH_H = 1;

const int _BITS_LIBM_SIMD_DECL_STUBS_H = 1;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double INFINITY = double.infinity;

const double NAN = double.nan;

const int __GLIBC_FLT_EVAL_METHOD = 0;

const int __FP_LOGB0_IS_MIN = 1;

const int __FP_LOGBNAN_IS_MIN = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = -2147483648;

const int __MATH_DECLARE_LDOUBLE = 1;

const int FP_NAN_48 = 0;

const int FP_INFINITE_48 = 1;

const int FP_ZERO_48 = 2;

const int FP_SUBNORMAL_48 = 3;

const int FP_NORMAL_48 = 4;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const double M_E = 2.718281828459045;

const double M_LOG2E = 1.4426950408889634;

const double M_LOG10E = 0.4342944819032518;

const double M_LN2 = 0.6931471805599453;

const double M_LN10 = 2.302585092994046;

const double M_PI = 3.141592653589793;

const double M_PI_2 = 1.5707963267948966;

const double M_PI_4 = 0.7853981633974483;

const double M_1_PI = 0.3183098861837907;

const double M_2_PI = 0.6366197723675814;

const double M_2_SQRTPI = 1.1283791670955126;

const double M_SQRT2 = 1.4142135623730951;

const double M_SQRT1_2 = 0.7071067811865476;

const int FLT_EVAL_METHOD = 0;

const int FLT_RADIX = 2;

const int FLT_MANT_DIG = 24;

const int DBL_MANT_DIG = 53;

const int LDBL_MANT_DIG = 64;

const int DECIMAL_DIG = 21;

const int FLT_DIG = 6;

const int DBL_DIG = 15;

const int LDBL_DIG = 18;

const int FLT_MIN_EXP = -125;

const int DBL_MIN_EXP = -1021;

const int LDBL_MIN_EXP = -16381;

const int FLT_MIN_10_EXP = -37;

const int DBL_MIN_10_EXP = -307;

const int LDBL_MIN_10_EXP = -4931;

const int FLT_MAX_EXP = 128;

const int DBL_MAX_EXP = 1024;

const int LDBL_MAX_EXP = 16384;

const int FLT_MAX_10_EXP = 38;

const int DBL_MAX_10_EXP = 308;

const int LDBL_MAX_10_EXP = 4932;

const double FLT_MAX = 3.4028234663852886e+38;

const double DBL_MAX = 1.7976931348623157e+308;

const double LDBL_MAX = double.infinity;

const double FLT_EPSILON = 1.1920928955078125e-7;

const double DBL_EPSILON = 2.220446049250313e-16;

const double LDBL_EPSILON = 1.0842021724855044e-19;

const double FLT_MIN = 1.1754943508222875e-38;

const double DBL_MIN = 2.2250738585072014e-308;

const double LDBL_MIN = 0.0;

const double FLT_TRUE_MIN = 1.401298464324817e-45;

const double DBL_TRUE_MIN = 5e-324;

const double LDBL_TRUE_MIN = 0.0;

const int FLT_DECIMAL_DIG = 9;

const int DBL_DECIMAL_DIG = 17;

const int LDBL_DECIMAL_DIG = 21;

const int FLT_HAS_SUBNORM = 1;

const int DBL_HAS_SUBNORM = 1;

const int LDBL_HAS_SUBNORM = 1;

const int SDL_MAX_SINT8 = 127;

const int SDL_MIN_SINT8 = -128;

const int SDL_MAX_UINT8 = 255;

const int SDL_MIN_UINT8 = 0;

const int SDL_MAX_SINT16 = 32767;

const int SDL_MIN_SINT16 = -32768;

const int SDL_MAX_UINT16 = 65535;

const int SDL_MIN_UINT16 = 0;

const int SDL_MAX_SINT32 = 2147483647;

const int SDL_MIN_SINT32 = -2147483648;

const int SDL_MAX_UINT32 = 4294967295;

const int SDL_MIN_UINT32 = 0;

const int SDL_MAX_SINT64 = 9223372036854775807;

const int SDL_MIN_SINT64 = -9223372036854775808;

const int SDL_MAX_UINT64 = -1;

const int SDL_MIN_UINT64 = 0;

const String SDL_PRIs64 = 'ld';

const String SDL_PRIu64 = 'lu';

const String SDL_PRIx64 = 'lx';

const String SDL_PRIX64 = 'lX';

const int SDL_ICONV_ERROR = -1;

const int SDL_ICONV_E2BIG = -2;

const int SDL_ICONV_EILSEQ = -3;

const int SDL_ICONV_EINVAL = -4;

const int SDL_LIL_ENDIAN = 1234;

const int SDL_BIG_ENDIAN = 4321;

const int SDL_BYTEORDER = 1234;

const int SDL_MUTEX_TIMEDOUT = 1;

const int SDL_MUTEX_MAXWAIT = 4294967295;

const int SDL_RWOPS_UNKNOWN = 0;

const int SDL_RWOPS_WINFILE = 1;

const int SDL_RWOPS_STDFILE = 2;

const int SDL_RWOPS_JNIFILE = 3;

const int SDL_RWOPS_MEMORY = 4;

const int SDL_RWOPS_MEMORY_RO = 5;

const int RW_SEEK_SET = 0;

const int RW_SEEK_CUR = 1;

const int RW_SEEK_END = 2;

const int SDL_AUDIO_MASK_BITSIZE = 255;

const int SDL_AUDIO_MASK_DATATYPE = 256;

const int SDL_AUDIO_MASK_ENDIAN = 4096;

const int SDL_AUDIO_MASK_SIGNED = 32768;

const int AUDIO_U8 = 8;

const int AUDIO_S8 = 32776;

const int AUDIO_U16LSB = 16;

const int AUDIO_S16LSB = 32784;

const int AUDIO_U16MSB = 4112;

const int AUDIO_S16MSB = 36880;

const int AUDIO_U16 = 16;

const int AUDIO_S16 = 32784;

const int AUDIO_S32LSB = 32800;

const int AUDIO_S32MSB = 36896;

const int AUDIO_S32 = 32800;

const int AUDIO_F32LSB = 33056;

const int AUDIO_F32MSB = 37152;

const int AUDIO_F32 = 33056;

const int AUDIO_U16SYS = 16;

const int AUDIO_S16SYS = 32784;

const int AUDIO_S32SYS = 32800;

const int AUDIO_F32SYS = 33056;

const int SDL_AUDIO_ALLOW_FREQUENCY_CHANGE = 1;

const int SDL_AUDIO_ALLOW_FORMAT_CHANGE = 2;

const int SDL_AUDIO_ALLOW_CHANNELS_CHANGE = 4;

const int SDL_AUDIO_ALLOW_SAMPLES_CHANGE = 8;

const int SDL_AUDIO_ALLOW_ANY_CHANGE = 15;

const int SDL_AUDIOCVT_MAX_FILTERS = 9;

const int SDL_MIX_MAXVOLUME = 128;

const int NeedFunctionPrototypes = 1;

const int SDLK_SCANCODE_MASK = 1073741824;

const int KMOD_CTRL = 192;

const int KMOD_SHIFT = 3;

const int KMOD_ALT = 768;

const int KMOD_GUI = 3072;

const int SDL_ALPHA_OPAQUE = 255;

const int SDL_ALPHA_TRANSPARENT = 0;

const int SDL_SWSURFACE = 0;

const int SDL_PREALLOC = 1;

const int SDL_RLEACCEL = 2;

const int SDL_DONTFREE = 4;

const int SDL_SIMD_ALIGNED = 8;

const int SDL_WINDOWPOS_UNDEFINED_MASK = 536805376;

const int SDL_WINDOWPOS_UNDEFINED = 536805376;

const int SDL_WINDOWPOS_CENTERED_MASK = 805240832;

const int SDL_WINDOWPOS_CENTERED = 805240832;

const int TEST_ENABLED = 1;

const int TEST_DISABLED = 0;

const int TEST_ABORTED = -1;

const int TEST_STARTED = 0;

const int TEST_COMPLETED = 1;

const int TEST_SKIPPED = 2;

const int TEST_RESULT_PASSED = 0;

const int TEST_RESULT_FAILED = 1;

const int TEST_RESULT_NO_ASSERT = 2;

const int TEST_RESULT_SKIPPED = 3;

const int TEST_RESULT_SETUP_FAILURE = 4;

const int SDL_ASSERT_LEVEL = 2;

const String SDL_FILE = 'temp_for_macros.hpp';

const int SDL_LINE = 1057;

const int SDL_NULL_WHILE_LOOP_CONDITION = 0;

const int _MM_HINT_ET0 = 7;

const int _MM_HINT_ET1 = 6;

const int _MM_HINT_T0 = 3;

const int _MM_HINT_T1 = 2;

const int _MM_HINT_T2 = 1;

const int _MM_HINT_NTA = 0;

const int _MM_EXCEPT_INVALID = 1;

const int _MM_EXCEPT_DENORM = 2;

const int _MM_EXCEPT_DIV_ZERO = 4;

const int _MM_EXCEPT_OVERFLOW = 8;

const int _MM_EXCEPT_UNDERFLOW = 16;

const int _MM_EXCEPT_INEXACT = 32;

const int _MM_EXCEPT_MASK = 63;

const int _MM_MASK_INVALID = 128;

const int _MM_MASK_DENORM = 256;

const int _MM_MASK_DIV_ZERO = 512;

const int _MM_MASK_OVERFLOW = 1024;

const int _MM_MASK_UNDERFLOW = 2048;

const int _MM_MASK_INEXACT = 4096;

const int _MM_MASK_MASK = 8064;

const int _MM_ROUND_NEAREST = 0;

const int _MM_ROUND_DOWN = 8192;

const int _MM_ROUND_UP = 16384;

const int _MM_ROUND_TOWARD_ZERO = 24576;

const int _MM_ROUND_MASK = 24576;

const int _MM_FLUSH_ZERO_MASK = 32768;

const int _MM_FLUSH_ZERO_ON = 32768;

const int _MM_FLUSH_ZERO_OFF = 0;

const int _MM_DENORMALS_ZERO_ON = 64;

const int _MM_DENORMALS_ZERO_OFF = 0;

const int _MM_DENORMALS_ZERO_MASK = 64;

const int _MM_FROUND_TO_NEAREST_INT = 0;

const int _MM_FROUND_TO_NEG_INF = 1;

const int _MM_FROUND_TO_POS_INF = 2;

const int _MM_FROUND_TO_ZERO = 3;

const int _MM_FROUND_CUR_DIRECTION = 4;

const int _MM_FROUND_RAISE_EXC = 0;

const int _MM_FROUND_NO_EXC = 8;

const int _MM_FROUND_NINT = 0;

const int _MM_FROUND_FLOOR = 1;

const int _MM_FROUND_CEIL = 2;

const int _MM_FROUND_TRUNC = 3;

const int _MM_FROUND_RINT = 4;

const int _MM_FROUND_NEARBYINT = 12;

const int _SIDD_UBYTE_OPS = 0;

const int _SIDD_UWORD_OPS = 1;

const int _SIDD_SBYTE_OPS = 2;

const int _SIDD_SWORD_OPS = 3;

const int _SIDD_CMP_EQUAL_ANY = 0;

const int _SIDD_CMP_RANGES = 4;

const int _SIDD_CMP_EQUAL_EACH = 8;

const int _SIDD_CMP_EQUAL_ORDERED = 12;

const int _SIDD_POSITIVE_POLARITY = 0;

const int _SIDD_NEGATIVE_POLARITY = 16;

const int _SIDD_MASKED_POSITIVE_POLARITY = 32;

const int _SIDD_MASKED_NEGATIVE_POLARITY = 48;

const int _SIDD_LEAST_SIGNIFICANT = 0;

const int _SIDD_MOST_SIGNIFICANT = 64;

const int _SIDD_BIT_MASK = 0;

const int _SIDD_UNIT_MASK = 64;

const int _CMP_EQ_OQ = 0;

const int _CMP_LT_OS = 1;

const int _CMP_LE_OS = 2;

const int _CMP_UNORD_Q = 3;

const int _CMP_NEQ_UQ = 4;

const int _CMP_NLT_US = 5;

const int _CMP_NLE_US = 6;

const int _CMP_ORD_Q = 7;

const int _CMP_EQ_UQ = 8;

const int _CMP_NGE_US = 9;

const int _CMP_NGT_US = 10;

const int _CMP_FALSE_OQ = 11;

const int _CMP_NEQ_OQ = 12;

const int _CMP_GE_OS = 13;

const int _CMP_GT_OS = 14;

const int _CMP_TRUE_UQ = 15;

const int _CMP_EQ_OS = 16;

const int _CMP_LT_OQ = 17;

const int _CMP_LE_OQ = 18;

const int _CMP_UNORD_S = 19;

const int _CMP_NEQ_US = 20;

const int _CMP_NLT_UQ = 21;

const int _CMP_NLE_UQ = 22;

const int _CMP_ORD_S = 23;

const int _CMP_EQ_US = 24;

const int _CMP_NGE_UQ = 25;

const int _CMP_NGT_UQ = 26;

const int _CMP_FALSE_OS = 27;

const int _CMP_NEQ_OS = 28;

const int _CMP_GE_OQ = 29;

const int _CMP_GT_OQ = 30;

const int _CMP_TRUE_US = 31;

const int _MM_CMPINT_GE = 5;

const int _MM_CMPINT_GT = 6;

const int _XBEGIN_STARTED = 4294967295;

const int _XABORT_EXPLICIT = 1;

const int _XABORT_RETRY = 2;

const int _XABORT_CONFLICT = 4;

const int _XABORT_CAPACITY = 8;

const int _XABORT_DEBUG = 16;

const int _XABORT_NESTED = 32;

const int __PCONFIG_KEY_PROGRAM = 1;

const int SDL_CACHELINE_SIZE = 128;

const int SDL_BUTTON_LEFT = 1;

const int SDL_BUTTON_MIDDLE = 2;

const int SDL_BUTTON_RIGHT = 3;

const int SDL_BUTTON_X1 = 4;

const int SDL_BUTTON_X2 = 5;

const int SDL_BUTTON_LMASK = 1;

const int SDL_BUTTON_MMASK = 2;

const int SDL_BUTTON_RMASK = 4;

const int SDL_BUTTON_X1MASK = 8;

const int SDL_BUTTON_X2MASK = 16;

const int SDL_JOYSTICK_AXIS_MAX = 32767;

const int SDL_JOYSTICK_AXIS_MIN = -32768;

const int SDL_HAT_CENTERED = 0;

const int SDL_HAT_UP = 1;

const int SDL_HAT_RIGHT = 2;

const int SDL_HAT_DOWN = 4;

const int SDL_HAT_LEFT = 8;

const int SDL_HAT_RIGHTUP = 3;

const int SDL_HAT_RIGHTDOWN = 6;

const int SDL_HAT_LEFTUP = 9;

const int SDL_HAT_LEFTDOWN = 12;

const int SDL_TOUCH_MOUSEID = 4294967295;

const int SDL_MOUSE_TOUCHID = -1;

const int SDL_RELEASED = 0;

const int SDL_PRESSED = 1;

const int SDL_TEXTEDITINGEVENT_TEXT_SIZE = 32;

const int SDL_TEXTINPUTEVENT_TEXT_SIZE = 32;

const int SDL_QUERY = -1;

const int SDL_IGNORE = 0;

const int SDL_DISABLE = 0;

const int SDL_ENABLE = 1;

const int SDL_HAPTIC_CONSTANT = 1;

const int SDL_HAPTIC_SINE = 2;

const int SDL_HAPTIC_LEFTRIGHT = 4;

const int SDL_HAPTIC_TRIANGLE = 8;

const int SDL_HAPTIC_SAWTOOTHUP = 16;

const int SDL_HAPTIC_SAWTOOTHDOWN = 32;

const int SDL_HAPTIC_RAMP = 64;

const int SDL_HAPTIC_SPRING = 128;

const int SDL_HAPTIC_DAMPER = 256;

const int SDL_HAPTIC_INERTIA = 512;

const int SDL_HAPTIC_FRICTION = 1024;

const int SDL_HAPTIC_CUSTOM = 2048;

const int SDL_HAPTIC_GAIN = 4096;

const int SDL_HAPTIC_AUTOCENTER = 8192;

const int SDL_HAPTIC_STATUS = 16384;

const int SDL_HAPTIC_PAUSE = 32768;

const int SDL_HAPTIC_POLAR = 0;

const int SDL_HAPTIC_CARTESIAN = 1;

const int SDL_HAPTIC_SPHERICAL = 2;

const int SDL_HAPTIC_INFINITY = 4294967295;

const String SDL_HINT_FRAMEBUFFER_ACCELERATION = 'SDL_FRAMEBUFFER_ACCELERATION';

const String SDL_HINT_RENDER_DRIVER = 'SDL_RENDER_DRIVER';

const String SDL_HINT_RENDER_OPENGL_SHADERS = 'SDL_RENDER_OPENGL_SHADERS';

const String SDL_HINT_RENDER_DIRECT3D_THREADSAFE =
    'SDL_RENDER_DIRECT3D_THREADSAFE';

const String SDL_HINT_RENDER_DIRECT3D11_DEBUG = 'SDL_RENDER_DIRECT3D11_DEBUG';

const String SDL_HINT_RENDER_LOGICAL_SIZE_MODE = 'SDL_RENDER_LOGICAL_SIZE_MODE';

const String SDL_HINT_RENDER_SCALE_QUALITY = 'SDL_RENDER_SCALE_QUALITY';

const String SDL_HINT_RENDER_VSYNC = 'SDL_RENDER_VSYNC';

const String SDL_HINT_VIDEO_ALLOW_SCREENSAVER = 'SDL_VIDEO_ALLOW_SCREENSAVER';

const String SDL_HINT_VIDEO_EXTERNAL_CONTEXT = 'SDL_VIDEO_EXTERNAL_CONTEXT';

const String SDL_HINT_VIDEO_X11_XVIDMODE = 'SDL_VIDEO_X11_XVIDMODE';

const String SDL_HINT_VIDEO_X11_XINERAMA = 'SDL_VIDEO_X11_XINERAMA';

const String SDL_HINT_VIDEO_X11_XRANDR = 'SDL_VIDEO_X11_XRANDR';

const String SDL_HINT_VIDEO_X11_WINDOW_VISUALID =
    'SDL_VIDEO_X11_WINDOW_VISUALID';

const String SDL_HINT_VIDEO_X11_NET_WM_PING = 'SDL_VIDEO_X11_NET_WM_PING';

const String SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR =
    'SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR';

const String SDL_HINT_VIDEO_X11_FORCE_EGL = 'SDL_VIDEO_X11_FORCE_EGL';

const String SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN =
    'SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN';

const String SDL_HINT_WINDOWS_INTRESOURCE_ICON = 'SDL_WINDOWS_INTRESOURCE_ICON';

const String SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL =
    'SDL_WINDOWS_INTRESOURCE_ICON_SMALL';

const String SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP =
    'SDL_WINDOWS_ENABLE_MESSAGELOOP';

const String SDL_HINT_GRAB_KEYBOARD = 'SDL_GRAB_KEYBOARD';

const String SDL_HINT_MOUSE_DOUBLE_CLICK_TIME = 'SDL_MOUSE_DOUBLE_CLICK_TIME';

const String SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS =
    'SDL_MOUSE_DOUBLE_CLICK_RADIUS';

const String SDL_HINT_MOUSE_NORMAL_SPEED_SCALE = 'SDL_MOUSE_NORMAL_SPEED_SCALE';

const String SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE =
    'SDL_MOUSE_RELATIVE_SPEED_SCALE';

const String SDL_HINT_MOUSE_RELATIVE_MODE_WARP = 'SDL_MOUSE_RELATIVE_MODE_WARP';

const String SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH = 'SDL_MOUSE_FOCUS_CLICKTHROUGH';

const String SDL_HINT_TOUCH_MOUSE_EVENTS = 'SDL_TOUCH_MOUSE_EVENTS';

const String SDL_HINT_MOUSE_TOUCH_EVENTS = 'SDL_MOUSE_TOUCH_EVENTS';

const String SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS =
    'SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS';

const String SDL_HINT_IDLE_TIMER_DISABLED = 'SDL_IOS_IDLE_TIMER_DISABLED';

const String SDL_HINT_ORIENTATIONS = 'SDL_IOS_ORIENTATIONS';

const String SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS =
    'SDL_APPLE_TV_CONTROLLER_UI_EVENTS';

const String SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION =
    'SDL_APPLE_TV_REMOTE_ALLOW_ROTATION';

const String SDL_HINT_IOS_HIDE_HOME_INDICATOR = 'SDL_IOS_HIDE_HOME_INDICATOR';

const String SDL_HINT_ACCELEROMETER_AS_JOYSTICK =
    'SDL_ACCELEROMETER_AS_JOYSTICK';

const String SDL_HINT_TV_REMOTE_AS_JOYSTICK = 'SDL_TV_REMOTE_AS_JOYSTICK';

const String SDL_HINT_XINPUT_ENABLED = 'SDL_XINPUT_ENABLED';

const String SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING =
    'SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING';

const String SDL_HINT_GAMECONTROLLERTYPE = 'SDL_GAMECONTROLLERTYPE';

const String SDL_HINT_GAMECONTROLLERCONFIG = 'SDL_GAMECONTROLLERCONFIG';

const String SDL_HINT_GAMECONTROLLERCONFIG_FILE =
    'SDL_GAMECONTROLLERCONFIG_FILE';

const String SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES =
    'SDL_GAMECONTROLLER_IGNORE_DEVICES';

const String SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT =
    'SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT';

const String SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS =
    'SDL_GAMECONTROLLER_USE_BUTTON_LABELS';

const String SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS =
    'SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS';

const String SDL_HINT_JOYSTICK_HIDAPI = 'SDL_JOYSTICK_HIDAPI';

const String SDL_HINT_JOYSTICK_HIDAPI_PS4 = 'SDL_JOYSTICK_HIDAPI_PS4';

const String SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE =
    'SDL_JOYSTICK_HIDAPI_PS4_RUMBLE';

const String SDL_HINT_JOYSTICK_HIDAPI_STEAM = 'SDL_JOYSTICK_HIDAPI_STEAM';

const String SDL_HINT_JOYSTICK_HIDAPI_SWITCH = 'SDL_JOYSTICK_HIDAPI_SWITCH';

const String SDL_HINT_JOYSTICK_HIDAPI_XBOX = 'SDL_JOYSTICK_HIDAPI_XBOX';

const String SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE = 'SDL_JOYSTICK_HIDAPI_GAMECUBE';

const String SDL_HINT_ENABLE_STEAM_CONTROLLERS = 'SDL_ENABLE_STEAM_CONTROLLERS';

const String SDL_HINT_ALLOW_TOPMOST = 'SDL_ALLOW_TOPMOST';

const String SDL_HINT_TIMER_RESOLUTION = 'SDL_TIMER_RESOLUTION';

const String SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION =
    'SDL_QTWAYLAND_CONTENT_ORIENTATION';

const String SDL_HINT_QTWAYLAND_WINDOW_FLAGS = 'SDL_QTWAYLAND_WINDOW_FLAGS';

const String SDL_HINT_THREAD_STACK_SIZE = 'SDL_THREAD_STACK_SIZE';

const String SDL_HINT_VIDEO_HIGHDPI_DISABLED = 'SDL_VIDEO_HIGHDPI_DISABLED';

const String SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK =
    'SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK';

const String SDL_HINT_VIDEO_WIN_D3DCOMPILER = 'SDL_VIDEO_WIN_D3DCOMPILER';

const String SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT =
    'SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT';

const String SDL_HINT_WINRT_PRIVACY_POLICY_URL = 'SDL_WINRT_PRIVACY_POLICY_URL';

const String SDL_HINT_WINRT_PRIVACY_POLICY_LABEL =
    'SDL_WINRT_PRIVACY_POLICY_LABEL';

const String SDL_HINT_WINRT_HANDLE_BACK_BUTTON = 'SDL_WINRT_HANDLE_BACK_BUTTON';

const String SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES =
    'SDL_VIDEO_MAC_FULLSCREEN_SPACES';

const String SDL_HINT_MAC_BACKGROUND_APP = 'SDL_MAC_BACKGROUND_APP';

const String SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION =
    'SDL_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION';

const String SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION =
    'SDL_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION';

const String SDL_HINT_IME_INTERNAL_EDITING = 'SDL_IME_INTERNAL_EDITING';

const String SDL_HINT_ANDROID_TRAP_BACK_BUTTON = 'SDL_ANDROID_TRAP_BACK_BUTTON';

const String SDL_HINT_ANDROID_BLOCK_ON_PAUSE = 'SDL_ANDROID_BLOCK_ON_PAUSE';

const String SDL_HINT_RETURN_KEY_HIDES_IME = 'SDL_RETURN_KEY_HIDES_IME';

const String SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT =
    'SDL_EMSCRIPTEN_KEYBOARD_ELEMENT';

const String SDL_HINT_NO_SIGNAL_HANDLERS = 'SDL_NO_SIGNAL_HANDLERS';

const String SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 =
    'SDL_WINDOWS_NO_CLOSE_ON_ALT_F4';

const String SDL_HINT_BMP_SAVE_LEGACY_FORMAT = 'SDL_BMP_SAVE_LEGACY_FORMAT';

const String SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING =
    'SDL_WINDOWS_DISABLE_THREAD_NAMING';

const String SDL_HINT_RPI_VIDEO_LAYER = 'SDL_RPI_VIDEO_LAYER';

const String SDL_HINT_VIDEO_DOUBLE_BUFFER = 'SDL_VIDEO_DOUBLE_BUFFER';

const String SDL_HINT_OPENGL_ES_DRIVER = 'SDL_OPENGL_ES_DRIVER';

const String SDL_HINT_AUDIO_RESAMPLING_MODE = 'SDL_AUDIO_RESAMPLING_MODE';

const String SDL_HINT_AUDIO_CATEGORY = 'SDL_AUDIO_CATEGORY';

const String SDL_HINT_RENDER_BATCHING = 'SDL_RENDER_BATCHING';

const String SDL_HINT_EVENT_LOGGING = 'SDL_EVENT_LOGGING';

const String SDL_HINT_WAVE_RIFF_CHUNK_SIZE = 'SDL_WAVE_RIFF_CHUNK_SIZE';

const String SDL_HINT_WAVE_TRUNCATION = 'SDL_WAVE_TRUNCATION';

const String SDL_HINT_WAVE_FACT_CHUNK = 'SDL_WAVE_FACT_CHUNK';

const String SDL_HINT_DISPLAY_USABLE_BOUNDS = 'SDL_DISPLAY_USABLE_BOUNDS';

const int SDL_MAX_LOG_MESSAGE = 4096;

const double SDL_STANDARD_GRAVITY = 9.806650161743164;

const int SDL_NONSHAPEABLE_WINDOW = -1;

const int SDL_INVALID_SHAPE_ARGUMENT = -2;

const int SDL_WINDOW_LACKS_SHAPE = -3;

const int SDL_MAJOR_VERSION = 2;

const int SDL_MINOR_VERSION = 0;

const int SDL_PATCHLEVEL = 12;

const int SDL_COMPILEDVERSION = 2012;

const int SDL_INIT_TIMER = 1;

const int SDL_INIT_AUDIO = 16;

const int SDL_INIT_VIDEO = 32;

const int SDL_INIT_JOYSTICK = 512;

const int SDL_INIT_HAPTIC = 4096;

const int SDL_INIT_GAMECONTROLLER = 8192;

const int SDL_INIT_EVENTS = 16384;

const int SDL_INIT_SENSOR = 32768;

const int SDL_INIT_NOPARACHUTE = 1048576;

const int SDL_INIT_EVERYTHING = 62001;

const int SDL_POWER_DISABLED = 1;

const int SDL_JOYSTICK_DISABLED = 1;

const int SDL_HAPTIC_DISABLED = 1;

const int SDL_LOADSO_DISABLED = 1;

const int SDL_THREADS_DISABLED = 1;

const int SDL_TIMERS_DISABLED = 1;

const int SDL_FILESYSTEM_DUMMY = 1;

const int HAVE_STDDEF_H = 1;

const int HAVE_WCSLCPY = 1;

const int HAVE_WCSLCAT = 1;

const int HAVE_STRLCPY = 1;

const int HAVE_STRLCAT = 1;

const int HAVE__STRREV = 1;

const int HAVE__STRUPR = 1;

const int HAVE__STRLWR = 1;

const int HAVE_INDEX = 1;

const int HAVE_RINDEX = 1;

const int HAVE_ITOA = 1;

const int HAVE__LTOA = 1;

const int HAVE__ULTOA = 1;

const int HAVE__I64TOA = 1;

const int HAVE__UI64TOA = 1;

const int HAVE_STRICMP = 1;

const int HAVE_SSCANF = 1;

const int HAVE_SNPRINTF = 1;

const int GL_ETC1_RGB8_OES = 36196;

const int GL_PALETTE4_RGB8_OES = 35728;

const int GL_PALETTE4_RGBA8_OES = 35729;

const int GL_PALETTE4_R5_G6_B5_OES = 35730;

const int GL_PALETTE4_RGBA4_OES = 35731;

const int GL_PALETTE4_RGB5_A1_OES = 35732;

const int GL_PALETTE8_RGB8_OES = 35733;

const int GL_PALETTE8_RGBA8_OES = 35734;

const int GL_PALETTE8_R5_G6_B5_OES = 35735;

const int GL_PALETTE8_RGBA4_OES = 35736;

const int GL_PALETTE8_RGB5_A1_OES = 35737;

const int GL_DEPTH_COMPONENT24_OES = 33190;

const int GL_DEPTH_COMPONENT32_OES = 33191;

const int GL_TEXTURE_EXTERNAL_OES = 36197;

const int GL_SAMPLER_EXTERNAL_OES = 36198;

const int GL_TEXTURE_BINDING_EXTERNAL_OES = 36199;

const int GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 36200;

const int GL_UNSIGNED_INT = 5125;

const int GL_PROGRAM_BINARY_LENGTH_OES = 34625;

const int GL_NUM_PROGRAM_BINARY_FORMATS_OES = 34814;

const int GL_PROGRAM_BINARY_FORMATS_OES = 34815;

const int GL_WRITE_ONLY_OES = 35001;

const int GL_BUFFER_ACCESS_OES = 35003;

const int GL_BUFFER_MAPPED_OES = 35004;

const int GL_BUFFER_MAP_POINTER_OES = 35005;

const int GL_DEPTH_STENCIL_OES = 34041;

const int GL_UNSIGNED_INT_24_8_OES = 34042;

const int GL_DEPTH24_STENCIL8_OES = 35056;

const int GL_ALPHA8_OES = 32828;

const int GL_DEPTH_COMPONENT16_OES = 33189;

const int GL_LUMINANCE4_ALPHA4_OES = 32835;

const int GL_LUMINANCE8_ALPHA8_OES = 32837;

const int GL_LUMINANCE8_OES = 32832;

const int GL_RGBA4_OES = 32854;

const int GL_RGB5_A1_OES = 32855;

const int GL_RGB565_OES = 36194;

const int GL_RGB8_OES = 32849;

const int GL_RGBA8_OES = 32856;

const int GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 35723;

const int GL_STENCIL_INDEX1_OES = 36166;

const int GL_STENCIL_INDEX4_OES = 36167;

const int GL_FRAMEBUFFER_UNDEFINED_OES = 33305;

const int GL_TEXTURE_WRAP_R_OES = 32882;

const int GL_TEXTURE_3D_OES = 32879;

const int GL_TEXTURE_BINDING_3D_OES = 32874;

const int GL_MAX_3D_TEXTURE_SIZE_OES = 32883;

const int GL_SAMPLER_3D_OES = 35679;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 36052;

const int GL_HALF_FLOAT_OES = 36193;

const int GL_VERTEX_ARRAY_BINDING_OES = 34229;

const int GL_UNSIGNED_INT_10_10_10_2_OES = 36342;

const int GL_INT_10_10_10_2_OES = 36343;

const int GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 33346;

const int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 33347;

const int GL_DEBUG_CALLBACK_FUNCTION_KHR = 33348;

const int GL_DEBUG_CALLBACK_USER_PARAM_KHR = 33349;

const int GL_DEBUG_SOURCE_API_KHR = 33350;

const int GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 33351;

const int GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 33352;

const int GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 33353;

const int GL_DEBUG_SOURCE_APPLICATION_KHR = 33354;

const int GL_DEBUG_SOURCE_OTHER_KHR = 33355;

const int GL_DEBUG_TYPE_ERROR_KHR = 33356;

const int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 33357;

const int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 33358;

const int GL_DEBUG_TYPE_PORTABILITY_KHR = 33359;

const int GL_DEBUG_TYPE_PERFORMANCE_KHR = 33360;

const int GL_DEBUG_TYPE_OTHER_KHR = 33361;

const int GL_DEBUG_TYPE_MARKER_KHR = 33384;

const int GL_DEBUG_TYPE_PUSH_GROUP_KHR = 33385;

const int GL_DEBUG_TYPE_POP_GROUP_KHR = 33386;

const int GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 33387;

const int GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 33388;

const int GL_DEBUG_GROUP_STACK_DEPTH_KHR = 33389;

const int GL_BUFFER_KHR = 33504;

const int GL_SHADER_KHR = 33505;

const int GL_PROGRAM_KHR = 33506;

const int GL_QUERY_KHR = 33507;

const int GL_SAMPLER_KHR = 33510;

const int GL_MAX_LABEL_LENGTH_KHR = 33512;

const int GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 37187;

const int GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 37188;

const int GL_DEBUG_LOGGED_MESSAGES_KHR = 37189;

const int GL_DEBUG_SEVERITY_HIGH_KHR = 37190;

const int GL_DEBUG_SEVERITY_MEDIUM_KHR = 37191;

const int GL_DEBUG_SEVERITY_LOW_KHR = 37192;

const int GL_DEBUG_OUTPUT_KHR = 37600;

const int GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 2;

const int GL_STACK_OVERFLOW_KHR = 1283;

const int GL_STACK_UNDERFLOW_KHR = 1284;

const int GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 37808;

const int GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 37809;

const int GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 37810;

const int GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 37811;

const int GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 37812;

const int GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 37813;

const int GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 37814;

const int GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 37815;

const int GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 37816;

const int GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 37817;

const int GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 37818;

const int GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 37819;

const int GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 37820;

const int GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 37821;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 37841;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 37842;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 37843;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 37844;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 37845;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 37846;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 37847;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 37848;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 37849;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 37850;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 37851;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 37852;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 37853;

const int GL_3DC_X_AMD = 34809;

const int GL_3DC_XY_AMD = 34810;

const int GL_ATC_RGB_AMD = 35986;

const int GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 35987;

const int GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 34798;

const int GL_COUNTER_TYPE_AMD = 35776;

const int GL_COUNTER_RANGE_AMD = 35777;

const int GL_UNSIGNED_INT64_AMD = 35778;

const int GL_PERCENTAGE_AMD = 35779;

const int GL_PERFMON_RESULT_AVAILABLE_AMD = 35780;

const int GL_PERFMON_RESULT_SIZE_AMD = 35781;

const int GL_PERFMON_RESULT_AMD = 35782;

const int GL_Z400_BINARY_AMD = 34624;

const int GL_DEPTH_COMPONENT = 6402;

const int GL_UNSIGNED_SHORT = 5123;

const int GL_DEPTH_COMPONENT16 = 33189;

const int GL_READ_FRAMEBUFFER_ANGLE = 36008;

const int GL_DRAW_FRAMEBUFFER_ANGLE = 36009;

const int GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 36006;

const int GL_READ_FRAMEBUFFER_BINDING_ANGLE = 36010;

const int GL_RENDERBUFFER_SAMPLES_ANGLE = 36011;

const int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 36182;

const int GL_MAX_SAMPLES_ANGLE = 36183;

const int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 35070;

const int GL_PACK_REVERSE_ROW_ORDER_ANGLE = 37796;

const int GL_PROGRAM_BINARY_ANGLE = 37798;

const int GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 33778;

const int GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 33779;

const int GL_TEXTURE_USAGE_ANGLE = 37794;

const int GL_FRAMEBUFFER_ATTACHMENT_ANGLE = 37795;

const int GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 37792;

const int GL_RENDERBUFFER_SAMPLES_APPLE = 36011;

const int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 36182;

const int GL_MAX_SAMPLES_APPLE = 36183;

const int GL_READ_FRAMEBUFFER_APPLE = 36008;

const int GL_DRAW_FRAMEBUFFER_APPLE = 36009;

const int GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 36006;

const int GL_READ_FRAMEBUFFER_BINDING_APPLE = 36010;

const int GL_RGB_422_APPLE = 35359;

const int GL_UNSIGNED_SHORT_8_8_APPLE = 34234;

const int GL_UNSIGNED_SHORT_8_8_REV_APPLE = 34235;

const int GL_SYNC_OBJECT_APPLE = 35411;

const int GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = 37137;

const int GL_OBJECT_TYPE_APPLE = 37138;

const int GL_SYNC_CONDITION_APPLE = 37139;

const int GL_SYNC_STATUS_APPLE = 37140;

const int GL_SYNC_FLAGS_APPLE = 37141;

const int GL_SYNC_FENCE_APPLE = 37142;

const int GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = 37143;

const int GL_UNSIGNALED_APPLE = 37144;

const int GL_SIGNALED_APPLE = 37145;

const int GL_ALREADY_SIGNALED_APPLE = 37146;

const int GL_TIMEOUT_EXPIRED_APPLE = 37147;

const int GL_CONDITION_SATISFIED_APPLE = 37148;

const int GL_WAIT_FAILED_APPLE = 37149;

const int GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = 1;

const int GL_TIMEOUT_IGNORED_APPLE = -1;

const int GL_BGRA_EXT = 32993;

const int GL_TEXTURE_MAX_LEVEL_APPLE = 33085;

const int GL_MALI_PROGRAM_BINARY_ARM = 36705;

const int GL_MALI_SHADER_BINARY_ARM = 36704;

const int GL_MIN_EXT = 32775;

const int GL_MAX_EXT = 32776;

const int GL_RGBA16F_EXT = 34842;

const int GL_RGB16F_EXT = 34843;

const int GL_RG16F_EXT = 33327;

const int GL_R16F_EXT = 33325;

const int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 33297;

const int GL_UNSIGNED_NORMALIZED_EXT = 35863;

const int GL_PROGRAM_PIPELINE_OBJECT_EXT = 35407;

const int GL_PROGRAM_OBJECT_EXT = 35648;

const int GL_SHADER_OBJECT_EXT = 35656;

const int GL_BUFFER_OBJECT_EXT = 37201;

const int GL_QUERY_OBJECT_EXT = 37203;

const int GL_VERTEX_ARRAY_OBJECT_EXT = 37204;

const int GL_COLOR_EXT = 6144;

const int GL_DEPTH_EXT = 6145;

const int GL_STENCIL_EXT = 6146;

const int GL_QUERY_COUNTER_BITS_EXT = 34916;

const int GL_CURRENT_QUERY_EXT = 34917;

const int GL_QUERY_RESULT_EXT = 34918;

const int GL_QUERY_RESULT_AVAILABLE_EXT = 34919;

const int GL_TIME_ELAPSED_EXT = 35007;

const int GL_TIMESTAMP_EXT = 36392;

const int GL_GPU_DISJOINT_EXT = 36795;

const int GL_EXT_draw_buffers = 1;

const int GL_MAX_COLOR_ATTACHMENTS_EXT = 36063;

const int GL_MAX_DRAW_BUFFERS_EXT = 34852;

const int GL_DRAW_BUFFER0_EXT = 34853;

const int GL_DRAW_BUFFER1_EXT = 34854;

const int GL_DRAW_BUFFER2_EXT = 34855;

const int GL_DRAW_BUFFER3_EXT = 34856;

const int GL_DRAW_BUFFER4_EXT = 34857;

const int GL_DRAW_BUFFER5_EXT = 34858;

const int GL_DRAW_BUFFER6_EXT = 34859;

const int GL_DRAW_BUFFER7_EXT = 34860;

const int GL_DRAW_BUFFER8_EXT = 34861;

const int GL_DRAW_BUFFER9_EXT = 34862;

const int GL_DRAW_BUFFER10_EXT = 34863;

const int GL_DRAW_BUFFER11_EXT = 34864;

const int GL_DRAW_BUFFER12_EXT = 34865;

const int GL_DRAW_BUFFER13_EXT = 34866;

const int GL_DRAW_BUFFER14_EXT = 34867;

const int GL_DRAW_BUFFER15_EXT = 34868;

const int GL_COLOR_ATTACHMENT0_EXT = 36064;

const int GL_COLOR_ATTACHMENT1_EXT = 36065;

const int GL_COLOR_ATTACHMENT2_EXT = 36066;

const int GL_COLOR_ATTACHMENT3_EXT = 36067;

const int GL_COLOR_ATTACHMENT4_EXT = 36068;

const int GL_COLOR_ATTACHMENT5_EXT = 36069;

const int GL_COLOR_ATTACHMENT6_EXT = 36070;

const int GL_COLOR_ATTACHMENT7_EXT = 36071;

const int GL_COLOR_ATTACHMENT8_EXT = 36072;

const int GL_COLOR_ATTACHMENT9_EXT = 36073;

const int GL_COLOR_ATTACHMENT10_EXT = 36074;

const int GL_COLOR_ATTACHMENT11_EXT = 36075;

const int GL_COLOR_ATTACHMENT12_EXT = 36076;

const int GL_COLOR_ATTACHMENT13_EXT = 36077;

const int GL_COLOR_ATTACHMENT14_EXT = 36078;

const int GL_COLOR_ATTACHMENT15_EXT = 36079;

const int GL_MAP_READ_BIT_EXT = 1;

const int GL_MAP_WRITE_BIT_EXT = 2;

const int GL_MAP_INVALIDATE_RANGE_BIT_EXT = 4;

const int GL_MAP_INVALIDATE_BUFFER_BIT_EXT = 8;

const int GL_MAP_FLUSH_EXPLICIT_BIT_EXT = 16;

const int GL_MAP_UNSYNCHRONIZED_BIT_EXT = 32;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 36204;

const int GL_RENDERBUFFER_SAMPLES_EXT = 36011;

const int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 36182;

const int GL_MAX_SAMPLES_EXT = 36183;

const int GL_COLOR_ATTACHMENT_EXT = 37104;

const int GL_MULTIVIEW_EXT = 37105;

const int GL_DRAW_BUFFER_EXT = 3073;

const int GL_READ_BUFFER_EXT = 3074;

const int GL_MAX_MULTIVIEW_BUFFERS_EXT = 37106;

const int GL_ANY_SAMPLES_PASSED_EXT = 35887;

const int GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = 36202;

const int GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 33637;

const int GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 33638;

const int GL_GUILTY_CONTEXT_RESET_EXT = 33363;

const int GL_INNOCENT_CONTEXT_RESET_EXT = 33364;

const int GL_UNKNOWN_CONTEXT_RESET_EXT = 33365;

const int GL_CONTEXT_ROBUST_ACCESS_EXT = 37107;

const int GL_RESET_NOTIFICATION_STRATEGY_EXT = 33366;

const int GL_LOSE_CONTEXT_ON_RESET_EXT = 33362;

const int GL_NO_RESET_NOTIFICATION_EXT = 33377;

const int GL_VERTEX_SHADER_BIT_EXT = 1;

const int GL_FRAGMENT_SHADER_BIT_EXT = 2;

const int GL_ALL_SHADER_BITS_EXT = 4294967295;

const int GL_PROGRAM_SEPARABLE_EXT = 33368;

const int GL_ACTIVE_PROGRAM_EXT = 33369;

const int GL_PROGRAM_PIPELINE_BINDING_EXT = 33370;

const int GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 35410;

const int GL_TEXTURE_COMPARE_MODE_EXT = 34892;

const int GL_TEXTURE_COMPARE_FUNC_EXT = 34893;

const int GL_COMPARE_REF_TO_TEXTURE_EXT = 34894;

const int GL_SAMPLER_2D_SHADOW_EXT = 35682;

const int GL_SRGB_EXT = 35904;

const int GL_SRGB_ALPHA_EXT = 35906;

const int GL_SRGB8_ALPHA8_EXT = 35907;

const int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 33296;

const int GL_EXT_sRGB_write_control = 1;

const int GL_FRAMEBUFFER_SRGB_EXT = 36281;

const int GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776;

const int GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777;

const int GL_TEXTURE_MAX_ANISOTROPY_EXT = 34046;

const int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;

const int GL_RED_EXT = 6403;

const int GL_RG_EXT = 33319;

const int GL_R8_EXT = 33321;

const int GL_RG8_EXT = 33323;

const int GL_EXT_texture_sRGB_decode = 1;

const int GL_TEXTURE_SRGB_DECODE_EXT = 35400;

const int GL_DECODE_EXT = 35401;

const int GL_SKIP_DECODE_EXT = 35402;

const int GL_TEXTURE_IMMUTABLE_FORMAT_EXT = 37167;

const int GL_ALPHA8_EXT = 32828;

const int GL_LUMINANCE8_EXT = 32832;

const int GL_LUMINANCE8_ALPHA8_EXT = 32837;

const int GL_RGBA32F_EXT = 34836;

const int GL_RGB32F_EXT = 34837;

const int GL_ALPHA32F_EXT = 34838;

const int GL_LUMINANCE32F_EXT = 34840;

const int GL_LUMINANCE_ALPHA32F_EXT = 34841;

const int GL_ALPHA16F_EXT = 34844;

const int GL_LUMINANCE16F_EXT = 34846;

const int GL_LUMINANCE_ALPHA16F_EXT = 34847;

const int GL_RGB10_A2_EXT = 32857;

const int GL_RGB10_EXT = 32850;

const int GL_BGRA8_EXT = 37793;

const int GL_R32F_EXT = 33326;

const int GL_RG32F_EXT = 33328;

const int GL_UNSIGNED_INT_2_10_10_10_REV_EXT = 33640;

const int GL_UNPACK_ROW_LENGTH_EXT = 3314;

const int GL_UNPACK_SKIP_ROWS_EXT = 3315;

const int GL_UNPACK_SKIP_PIXELS_EXT = 3316;

const int GL_SHADER_BINARY_DMP = 37456;

const int GL_GCCSO_SHADER_BINARY_FJ = 37472;

const int GL_SGX_PROGRAM_BINARY_IMG = 37168;

const int GL_BGRA_IMG = 32993;

const int GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 33637;

const int GL_SGX_BINARY_IMG = 35850;

const int GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840;

const int GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841;

const int GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842;

const int GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843;

const int GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 37175;

const int GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 37176;

const int GL_RENDERBUFFER_SAMPLES_IMG = 37171;

const int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 37172;

const int GL_MAX_SAMPLES_IMG = 37173;

const int GL_TEXTURE_SAMPLES_IMG = 37174;

const int GL_COVERAGE_COMPONENT_NV = 36560;

const int GL_COVERAGE_COMPONENT4_NV = 36561;

const int GL_COVERAGE_ATTACHMENT_NV = 36562;

const int GL_COVERAGE_BUFFERS_NV = 36563;

const int GL_COVERAGE_SAMPLES_NV = 36564;

const int GL_COVERAGE_ALL_FRAGMENTS_NV = 36565;

const int GL_COVERAGE_EDGE_FRAGMENTS_NV = 36566;

const int GL_COVERAGE_AUTOMATIC_NV = 36567;

const int GL_COVERAGE_BUFFER_BIT_NV = 32768;

const int GL_DEPTH_COMPONENT16_NONLINEAR_NV = 36396;

const int GL_MAX_DRAW_BUFFERS_NV = 34852;

const int GL_DRAW_BUFFER0_NV = 34853;

const int GL_DRAW_BUFFER1_NV = 34854;

const int GL_DRAW_BUFFER2_NV = 34855;

const int GL_DRAW_BUFFER3_NV = 34856;

const int GL_DRAW_BUFFER4_NV = 34857;

const int GL_DRAW_BUFFER5_NV = 34858;

const int GL_DRAW_BUFFER6_NV = 34859;

const int GL_DRAW_BUFFER7_NV = 34860;

const int GL_DRAW_BUFFER8_NV = 34861;

const int GL_DRAW_BUFFER9_NV = 34862;

const int GL_DRAW_BUFFER10_NV = 34863;

const int GL_DRAW_BUFFER11_NV = 34864;

const int GL_DRAW_BUFFER12_NV = 34865;

const int GL_DRAW_BUFFER13_NV = 34866;

const int GL_DRAW_BUFFER14_NV = 34867;

const int GL_DRAW_BUFFER15_NV = 34868;

const int GL_COLOR_ATTACHMENT0_NV = 36064;

const int GL_COLOR_ATTACHMENT1_NV = 36065;

const int GL_COLOR_ATTACHMENT2_NV = 36066;

const int GL_COLOR_ATTACHMENT3_NV = 36067;

const int GL_COLOR_ATTACHMENT4_NV = 36068;

const int GL_COLOR_ATTACHMENT5_NV = 36069;

const int GL_COLOR_ATTACHMENT6_NV = 36070;

const int GL_COLOR_ATTACHMENT7_NV = 36071;

const int GL_COLOR_ATTACHMENT8_NV = 36072;

const int GL_COLOR_ATTACHMENT9_NV = 36073;

const int GL_COLOR_ATTACHMENT10_NV = 36074;

const int GL_COLOR_ATTACHMENT11_NV = 36075;

const int GL_COLOR_ATTACHMENT12_NV = 36076;

const int GL_COLOR_ATTACHMENT13_NV = 36077;

const int GL_COLOR_ATTACHMENT14_NV = 36078;

const int GL_COLOR_ATTACHMENT15_NV = 36079;

const int GL_MAX_COLOR_ATTACHMENTS_NV = 36063;

const int GL_ALL_COMPLETED_NV = 34034;

const int GL_FENCE_STATUS_NV = 34035;

const int GL_FENCE_CONDITION_NV = 34036;

const int GL_READ_FRAMEBUFFER_NV = 36008;

const int GL_DRAW_FRAMEBUFFER_NV = 36009;

const int GL_DRAW_FRAMEBUFFER_BINDING_NV = 36006;

const int GL_READ_FRAMEBUFFER_BINDING_NV = 36010;

const int GL_RENDERBUFFER_SAMPLES_NV = 36011;

const int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = 36182;

const int GL_MAX_SAMPLES_NV = 36183;

const int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = 35070;

const int GL_READ_BUFFER_NV = 3074;

const int GL_SAMPLER_2D_ARRAY_SHADOW_NV = 36292;

const int GL_SAMPLER_CUBE_SHADOW_NV = 36293;

const int GL_SLUMINANCE_NV = 35910;

const int GL_SLUMINANCE_ALPHA_NV = 35908;

const int GL_SRGB8_NV = 35905;

const int GL_SLUMINANCE8_NV = 35911;

const int GL_SLUMINANCE8_ALPHA8_NV = 35909;

const int GL_COMPRESSED_SRGB_S3TC_DXT1_NV = 35916;

const int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 35917;

const int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 35918;

const int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 35919;

const int GL_ETC1_SRGB8_NV = 35054;

const int GL_TEXTURE_BORDER_COLOR_NV = 4100;

const int GL_CLAMP_TO_BORDER_NV = 33069;

const int GL_ALPHA_TEST_QCOM = 3008;

const int GL_ALPHA_TEST_FUNC_QCOM = 3009;

const int GL_ALPHA_TEST_REF_QCOM = 3010;

const int GL_BINNING_CONTROL_HINT_QCOM = 36784;

const int GL_CPU_OPTIMIZED_QCOM = 36785;

const int GL_GPU_OPTIMIZED_QCOM = 36786;

const int GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 36787;

const int GL_TEXTURE_WIDTH_QCOM = 35794;

const int GL_TEXTURE_HEIGHT_QCOM = 35795;

const int GL_TEXTURE_DEPTH_QCOM = 35796;

const int GL_TEXTURE_INTERNAL_FORMAT_QCOM = 35797;

const int GL_TEXTURE_FORMAT_QCOM = 35798;

const int GL_TEXTURE_TYPE_QCOM = 35799;

const int GL_TEXTURE_IMAGE_VALID_QCOM = 35800;

const int GL_TEXTURE_NUM_LEVELS_QCOM = 35801;

const int GL_TEXTURE_TARGET_QCOM = 35802;

const int GL_TEXTURE_OBJECT_VALID_QCOM = 35803;

const int GL_STATE_RESTORE = 35804;

const int GL_PERFMON_GLOBAL_MODE_QCOM = 36768;

const int GL_WRITEONLY_RENDERING_QCOM = 34851;

const int GL_COLOR_BUFFER_BIT0_QCOM = 1;

const int GL_COLOR_BUFFER_BIT1_QCOM = 2;

const int GL_COLOR_BUFFER_BIT2_QCOM = 4;

const int GL_COLOR_BUFFER_BIT3_QCOM = 8;

const int GL_COLOR_BUFFER_BIT4_QCOM = 16;

const int GL_COLOR_BUFFER_BIT5_QCOM = 32;

const int GL_COLOR_BUFFER_BIT6_QCOM = 64;

const int GL_COLOR_BUFFER_BIT7_QCOM = 128;

const int GL_DEPTH_BUFFER_BIT0_QCOM = 256;

const int GL_DEPTH_BUFFER_BIT1_QCOM = 512;

const int GL_DEPTH_BUFFER_BIT2_QCOM = 1024;

const int GL_DEPTH_BUFFER_BIT3_QCOM = 2048;

const int GL_DEPTH_BUFFER_BIT4_QCOM = 4096;

const int GL_DEPTH_BUFFER_BIT5_QCOM = 8192;

const int GL_DEPTH_BUFFER_BIT6_QCOM = 16384;

const int GL_DEPTH_BUFFER_BIT7_QCOM = 32768;

const int GL_STENCIL_BUFFER_BIT0_QCOM = 65536;

const int GL_STENCIL_BUFFER_BIT1_QCOM = 131072;

const int GL_STENCIL_BUFFER_BIT2_QCOM = 262144;

const int GL_STENCIL_BUFFER_BIT3_QCOM = 524288;

const int GL_STENCIL_BUFFER_BIT4_QCOM = 1048576;

const int GL_STENCIL_BUFFER_BIT5_QCOM = 2097152;

const int GL_STENCIL_BUFFER_BIT6_QCOM = 4194304;

const int GL_STENCIL_BUFFER_BIT7_QCOM = 8388608;

const int GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 16777216;

const int GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 33554432;

const int GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 67108864;

const int GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 134217728;

const int GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 268435456;

const int GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 536870912;

const int GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 1073741824;

const int GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 2147483648;

const int GL_SHADER_BINARY_VIV = 36804;

const int GL_OES_compressed_ETC1_RGB8_texture = 1;

const int GL_OES_compressed_paletted_texture = 1;

const int GL_OES_depth24 = 1;

const int GL_OES_depth32 = 1;

const int GL_OES_depth_texture = 1;

const int GL_OES_EGL_image = 1;

const int GL_OES_EGL_image_external = 1;

const int GL_OES_element_index_uint = 1;

const int GL_OES_fbo_render_mipmap = 1;

const int GL_OES_fragment_precision_high = 1;

const int GL_OES_get_program_binary = 1;

const int GL_OES_mapbuffer = 1;

const int GL_OES_packed_depth_stencil = 1;

const int GL_OES_required_internalformat = 1;

const int GL_OES_rgb8_rgba8 = 1;

const int GL_OES_standard_derivatives = 1;

const int GL_OES_stencil1 = 1;

const int GL_OES_stencil4 = 1;

const int GL_OES_surfaceless_context = 1;

const int GL_OES_texture_3D = 1;

const int GL_OES_texture_float = 1;

const int GL_OES_texture_float_linear = 1;

const int GL_OES_texture_half_float = 1;

const int GL_OES_texture_half_float_linear = 1;

const int GL_OES_texture_npot = 1;

const int GL_OES_vertex_array_object = 1;

const int GL_OES_vertex_half_float = 1;

const int GL_OES_vertex_type_10_10_10_2 = 1;

const int GL_KHR_debug = 1;

const int GL_KHR_texture_compression_astc_ldr = 1;

const int GL_AMD_compressed_3DC_texture = 1;

const int GL_AMD_compressed_ATC_texture = 1;

const int GL_AMD_performance_monitor = 1;

const int GL_AMD_program_binary_Z400 = 1;

const int GL_ANGLE_depth_texture = 1;

const int GL_ANGLE_framebuffer_blit = 1;

const int GL_ANGLE_framebuffer_multisample = 1;

const int GL_ANGLE_instanced_arrays = 1;

const int GL_ANGLE_pack_reverse_row_order = 1;

const int GL_ANGLE_program_binary = 1;

const int GL_ANGLE_texture_compression_dxt3 = 1;

const int GL_ANGLE_texture_compression_dxt5 = 1;

const int GL_ANGLE_texture_usage = 1;

const int GL_ANGLE_translated_shader_source = 1;

const int GL_APPLE_copy_texture_levels = 1;

const int GL_APPLE_framebuffer_multisample = 1;

const int GL_APPLE_rgb_422 = 1;

const int GL_APPLE_sync = 1;

const int GL_APPLE_texture_format_BGRA8888 = 1;

const int GL_APPLE_texture_max_level = 1;

const int GL_ARM_mali_program_binary = 1;

const int GL_ARM_mali_shader_binary = 1;

const int GL_ARM_rgba8 = 1;

const int GL_EXT_blend_minmax = 1;

const int GL_EXT_color_buffer_half_float = 1;

const int GL_EXT_debug_label = 1;

const int GL_EXT_debug_marker = 1;

const int GL_EXT_discard_framebuffer = 1;

const int GL_EXT_disjoint_timer_query = 1;

const int GL_EXT_map_buffer_range = 1;

const int GL_EXT_multisampled_render_to_texture = 1;

const int GL_EXT_multiview_draw_buffers = 1;

const int GL_EXT_multi_draw_arrays = 1;

const int GL_EXT_occlusion_query_boolean = 1;

const int GL_EXT_read_format_bgra = 1;

const int GL_EXT_robustness = 1;

const int GL_EXT_separate_shader_objects = 1;

const int GL_EXT_shader_framebuffer_fetch = 1;

const int GL_EXT_shader_texture_lod = 1;

const int GL_EXT_shadow_samplers = 1;

const int GL_EXT_sRGB = 1;

const int GL_EXT_texture_compression_dxt1 = 1;

const int GL_EXT_texture_filter_anisotropic = 1;

const int GL_EXT_texture_format_BGRA8888 = 1;

const int GL_EXT_texture_rg = 1;

const int GL_EXT_texture_storage = 1;

const int GL_EXT_texture_type_2_10_10_10_REV = 1;

const int GL_EXT_unpack_subimage = 1;

const int GL_DMP_shader_binary = 1;

const int GL_FJ_shader_binary_GCCSO = 1;

const int GL_IMG_program_binary = 1;

const int GL_IMG_read_format = 1;

const int GL_IMG_shader_binary = 1;

const int GL_IMG_texture_compression_pvrtc = 1;

const int GL_IMG_texture_compression_pvrtc2 = 1;

const int GL_IMG_multisampled_render_to_texture = 1;

const int GL_NV_coverage_sample = 1;

const int GL_NV_depth_nonlinear = 1;

const int GL_NV_draw_buffers = 1;

const int GL_NV_draw_instanced = 1;

const int GL_NV_fbo_color_attachments = 1;

const int GL_NV_fence = 1;

const int GL_NV_framebuffer_blit = 1;

const int GL_NV_framebuffer_multisample = 1;

const int GL_NV_generate_mipmap_sRGB = 1;

const int GL_NV_instanced_arrays = 1;

const int GL_NV_read_buffer = 1;

const int GL_NV_read_buffer_front = 1;

const int GL_NV_read_depth = 1;

const int GL_NV_read_depth_stencil = 1;

const int GL_NV_read_stencil = 1;

const int GL_NV_shadow_samplers_array = 1;

const int GL_NV_shadow_samplers_cube = 1;

const int GL_NV_sRGB_formats = 1;

const int GL_NV_texture_border_clamp = 1;

const int GL_NV_texture_compression_s3tc_update = 1;

const int GL_NV_texture_npot_2D_mipmap = 1;

const int GL_QCOM_alpha_test = 1;

const int GL_QCOM_binning_control = 1;

const int GL_QCOM_driver_control = 1;

const int GL_QCOM_extended_get = 1;

const int GL_QCOM_extended_get2 = 1;

const int GL_QCOM_perfmon_global_mode = 1;

const int GL_QCOM_writeonly_rendering = 1;

const int GL_QCOM_tiled_rendering = 1;

const int GL_VIV_shader_binary = 1;

const int __glext_h_ = 1;

const int GL_GLEXT_VERSION = 20140521;

const int GL_VERSION_1_2 = 1;

const int GL_UNSIGNED_BYTE_3_3_2 = 32818;

const int GL_UNSIGNED_SHORT_4_4_4_4 = 32819;

const int GL_UNSIGNED_SHORT_5_5_5_1 = 32820;

const int GL_UNSIGNED_INT_8_8_8_8 = 32821;

const int GL_UNSIGNED_INT_10_10_10_2 = 32822;

const int GL_TEXTURE_BINDING_3D = 32874;

const int GL_PACK_SKIP_IMAGES = 32875;

const int GL_PACK_IMAGE_HEIGHT = 32876;

const int GL_UNPACK_SKIP_IMAGES = 32877;

const int GL_UNPACK_IMAGE_HEIGHT = 32878;

const int GL_TEXTURE_3D = 32879;

const int GL_PROXY_TEXTURE_3D = 32880;

const int GL_TEXTURE_DEPTH = 32881;

const int GL_TEXTURE_WRAP_R = 32882;

const int GL_MAX_3D_TEXTURE_SIZE = 32883;

const int GL_UNSIGNED_BYTE_2_3_3_REV = 33634;

const int GL_UNSIGNED_SHORT_5_6_5 = 33635;

const int GL_UNSIGNED_SHORT_5_6_5_REV = 33636;

const int GL_UNSIGNED_SHORT_4_4_4_4_REV = 33637;

const int GL_UNSIGNED_SHORT_1_5_5_5_REV = 33638;

const int GL_UNSIGNED_INT_8_8_8_8_REV = 33639;

const int GL_UNSIGNED_INT_2_10_10_10_REV = 33640;

const int GL_BGR = 32992;

const int GL_BGRA = 32993;

const int GL_MAX_ELEMENTS_VERTICES = 33000;

const int GL_MAX_ELEMENTS_INDICES = 33001;

const int GL_CLAMP_TO_EDGE = 33071;

const int GL_TEXTURE_MIN_LOD = 33082;

const int GL_TEXTURE_MAX_LOD = 33083;

const int GL_TEXTURE_BASE_LEVEL = 33084;

const int GL_TEXTURE_MAX_LEVEL = 33085;

const int GL_SMOOTH_POINT_SIZE_RANGE = 2834;

const int GL_SMOOTH_POINT_SIZE_GRANULARITY = 2835;

const int GL_SMOOTH_LINE_WIDTH_RANGE = 2850;

const int GL_SMOOTH_LINE_WIDTH_GRANULARITY = 2851;

const int GL_ALIASED_LINE_WIDTH_RANGE = 33902;

const int GL_RESCALE_NORMAL = 32826;

const int GL_LIGHT_MODEL_COLOR_CONTROL = 33272;

const int GL_SINGLE_COLOR = 33273;

const int GL_SEPARATE_SPECULAR_COLOR = 33274;

const int GL_ALIASED_POINT_SIZE_RANGE = 33901;

const int GL_VERSION_1_3 = 1;

const int GL_TEXTURE0 = 33984;

const int GL_TEXTURE1 = 33985;

const int GL_TEXTURE2 = 33986;

const int GL_TEXTURE3 = 33987;

const int GL_TEXTURE4 = 33988;

const int GL_TEXTURE5 = 33989;

const int GL_TEXTURE6 = 33990;

const int GL_TEXTURE7 = 33991;

const int GL_TEXTURE8 = 33992;

const int GL_TEXTURE9 = 33993;

const int GL_TEXTURE10 = 33994;

const int GL_TEXTURE11 = 33995;

const int GL_TEXTURE12 = 33996;

const int GL_TEXTURE13 = 33997;

const int GL_TEXTURE14 = 33998;

const int GL_TEXTURE15 = 33999;

const int GL_TEXTURE16 = 34000;

const int GL_TEXTURE17 = 34001;

const int GL_TEXTURE18 = 34002;

const int GL_TEXTURE19 = 34003;

const int GL_TEXTURE20 = 34004;

const int GL_TEXTURE21 = 34005;

const int GL_TEXTURE22 = 34006;

const int GL_TEXTURE23 = 34007;

const int GL_TEXTURE24 = 34008;

const int GL_TEXTURE25 = 34009;

const int GL_TEXTURE26 = 34010;

const int GL_TEXTURE27 = 34011;

const int GL_TEXTURE28 = 34012;

const int GL_TEXTURE29 = 34013;

const int GL_TEXTURE30 = 34014;

const int GL_TEXTURE31 = 34015;

const int GL_ACTIVE_TEXTURE = 34016;

const int GL_MULTISAMPLE = 32925;

const int GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;

const int GL_SAMPLE_ALPHA_TO_ONE = 32927;

const int GL_SAMPLE_COVERAGE = 32928;

const int GL_SAMPLE_BUFFERS = 32936;

const int GL_SAMPLES = 32937;

const int GL_SAMPLE_COVERAGE_VALUE = 32938;

const int GL_SAMPLE_COVERAGE_INVERT = 32939;

const int GL_TEXTURE_CUBE_MAP = 34067;

const int GL_TEXTURE_BINDING_CUBE_MAP = 34068;

const int GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;

const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;

const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;

const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;

const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;

const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;

const int GL_PROXY_TEXTURE_CUBE_MAP = 34075;

const int GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;

const int GL_COMPRESSED_RGB = 34029;

const int GL_COMPRESSED_RGBA = 34030;

const int GL_TEXTURE_COMPRESSION_HINT = 34031;

const int GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 34464;

const int GL_TEXTURE_COMPRESSED = 34465;

const int GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466;

const int GL_COMPRESSED_TEXTURE_FORMATS = 34467;

const int GL_CLAMP_TO_BORDER = 33069;

const int GL_CLIENT_ACTIVE_TEXTURE = 34017;

const int GL_MAX_TEXTURE_UNITS = 34018;

const int GL_TRANSPOSE_MODELVIEW_MATRIX = 34019;

const int GL_TRANSPOSE_PROJECTION_MATRIX = 34020;

const int GL_TRANSPOSE_TEXTURE_MATRIX = 34021;

const int GL_TRANSPOSE_COLOR_MATRIX = 34022;

const int GL_MULTISAMPLE_BIT = 536870912;

const int GL_NORMAL_MAP = 34065;

const int GL_REFLECTION_MAP = 34066;

const int GL_COMPRESSED_ALPHA = 34025;

const int GL_COMPRESSED_LUMINANCE = 34026;

const int GL_COMPRESSED_LUMINANCE_ALPHA = 34027;

const int GL_COMPRESSED_INTENSITY = 34028;

const int GL_COMBINE = 34160;

const int GL_COMBINE_RGB = 34161;

const int GL_COMBINE_ALPHA = 34162;

const int GL_SOURCE0_RGB = 34176;

const int GL_SOURCE1_RGB = 34177;

const int GL_SOURCE2_RGB = 34178;

const int GL_SOURCE0_ALPHA = 34184;

const int GL_SOURCE1_ALPHA = 34185;

const int GL_SOURCE2_ALPHA = 34186;

const int GL_OPERAND0_RGB = 34192;

const int GL_OPERAND1_RGB = 34193;

const int GL_OPERAND2_RGB = 34194;

const int GL_OPERAND0_ALPHA = 34200;

const int GL_OPERAND1_ALPHA = 34201;

const int GL_OPERAND2_ALPHA = 34202;

const int GL_RGB_SCALE = 34163;

const int GL_ADD_SIGNED = 34164;

const int GL_INTERPOLATE = 34165;

const int GL_SUBTRACT = 34023;

const int GL_CONSTANT = 34166;

const int GL_PRIMARY_COLOR = 34167;

const int GL_PREVIOUS = 34168;

const int GL_DOT3_RGB = 34478;

const int GL_DOT3_RGBA = 34479;

const int GL_VERSION_1_4 = 1;

const int GL_BLEND_DST_RGB = 32968;

const int GL_BLEND_SRC_RGB = 32969;

const int GL_BLEND_DST_ALPHA = 32970;

const int GL_BLEND_SRC_ALPHA = 32971;

const int GL_POINT_FADE_THRESHOLD_SIZE = 33064;

const int GL_DEPTH_COMPONENT24 = 33190;

const int GL_DEPTH_COMPONENT32 = 33191;

const int GL_MIRRORED_REPEAT = 33648;

const int GL_MAX_TEXTURE_LOD_BIAS = 34045;

const int GL_TEXTURE_LOD_BIAS = 34049;

const int GL_INCR_WRAP = 34055;

const int GL_DECR_WRAP = 34056;

const int GL_TEXTURE_DEPTH_SIZE = 34890;

const int GL_TEXTURE_COMPARE_MODE = 34892;

const int GL_TEXTURE_COMPARE_FUNC = 34893;

const int GL_POINT_SIZE_MIN = 33062;

const int GL_POINT_SIZE_MAX = 33063;

const int GL_POINT_DISTANCE_ATTENUATION = 33065;

const int GL_GENERATE_MIPMAP = 33169;

const int GL_GENERATE_MIPMAP_HINT = 33170;

const int GL_FOG_COORDINATE_SOURCE = 33872;

const int GL_FOG_COORDINATE = 33873;

const int GL_FRAGMENT_DEPTH = 33874;

const int GL_CURRENT_FOG_COORDINATE = 33875;

const int GL_FOG_COORDINATE_ARRAY_TYPE = 33876;

const int GL_FOG_COORDINATE_ARRAY_STRIDE = 33877;

const int GL_FOG_COORDINATE_ARRAY_POINTER = 33878;

const int GL_FOG_COORDINATE_ARRAY = 33879;

const int GL_COLOR_SUM = 33880;

const int GL_CURRENT_SECONDARY_COLOR = 33881;

const int GL_SECONDARY_COLOR_ARRAY_SIZE = 33882;

const int GL_SECONDARY_COLOR_ARRAY_TYPE = 33883;

const int GL_SECONDARY_COLOR_ARRAY_STRIDE = 33884;

const int GL_SECONDARY_COLOR_ARRAY_POINTER = 33885;

const int GL_SECONDARY_COLOR_ARRAY = 33886;

const int GL_TEXTURE_FILTER_CONTROL = 34048;

const int GL_DEPTH_TEXTURE_MODE = 34891;

const int GL_COMPARE_R_TO_TEXTURE = 34894;

const int GL_FUNC_ADD = 32774;

const int GL_FUNC_SUBTRACT = 32778;

const int GL_FUNC_REVERSE_SUBTRACT = 32779;

const int GL_MIN = 32775;

const int GL_MAX = 32776;

const int GL_CONSTANT_COLOR = 32769;

const int GL_ONE_MINUS_CONSTANT_COLOR = 32770;

const int GL_CONSTANT_ALPHA = 32771;

const int GL_ONE_MINUS_CONSTANT_ALPHA = 32772;

const int GL_VERSION_1_5 = 1;

const int GL_BUFFER_SIZE = 34660;

const int GL_BUFFER_USAGE = 34661;

const int GL_QUERY_COUNTER_BITS = 34916;

const int GL_CURRENT_QUERY = 34917;

const int GL_QUERY_RESULT = 34918;

const int GL_QUERY_RESULT_AVAILABLE = 34919;

const int GL_ARRAY_BUFFER = 34962;

const int GL_ELEMENT_ARRAY_BUFFER = 34963;

const int GL_ARRAY_BUFFER_BINDING = 34964;

const int GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965;

const int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;

const int GL_READ_ONLY = 35000;

const int GL_WRITE_ONLY = 35001;

const int GL_READ_WRITE = 35002;

const int GL_BUFFER_ACCESS = 35003;

const int GL_BUFFER_MAPPED = 35004;

const int GL_BUFFER_MAP_POINTER = 35005;

const int GL_STREAM_DRAW = 35040;

const int GL_STREAM_READ = 35041;

const int GL_STREAM_COPY = 35042;

const int GL_STATIC_DRAW = 35044;

const int GL_STATIC_READ = 35045;

const int GL_STATIC_COPY = 35046;

const int GL_DYNAMIC_DRAW = 35048;

const int GL_DYNAMIC_READ = 35049;

const int GL_DYNAMIC_COPY = 35050;

const int GL_SAMPLES_PASSED = 35092;

const int GL_SRC1_ALPHA = 34185;

const int GL_VERTEX_ARRAY_BUFFER_BINDING = 34966;

const int GL_NORMAL_ARRAY_BUFFER_BINDING = 34967;

const int GL_COLOR_ARRAY_BUFFER_BINDING = 34968;

const int GL_INDEX_ARRAY_BUFFER_BINDING = 34969;

const int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 34970;

const int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 34971;

const int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 34972;

const int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 34973;

const int GL_WEIGHT_ARRAY_BUFFER_BINDING = 34974;

const int GL_FOG_COORD_SRC = 33872;

const int GL_FOG_COORD = 33873;

const int GL_CURRENT_FOG_COORD = 33875;

const int GL_FOG_COORD_ARRAY_TYPE = 33876;

const int GL_FOG_COORD_ARRAY_STRIDE = 33877;

const int GL_FOG_COORD_ARRAY_POINTER = 33878;

const int GL_FOG_COORD_ARRAY = 33879;

const int GL_FOG_COORD_ARRAY_BUFFER_BINDING = 34973;

const int GL_SRC0_RGB = 34176;

const int GL_SRC1_RGB = 34177;

const int GL_SRC2_RGB = 34178;

const int GL_SRC0_ALPHA = 34184;

const int GL_SRC2_ALPHA = 34186;

const int GL_VERSION_2_0 = 1;

const int GL_BLEND_EQUATION_RGB = 32777;

const int GL_VERTEX_ATTRIB_ARRAY_ENABLED = 34338;

const int GL_VERTEX_ATTRIB_ARRAY_SIZE = 34339;

const int GL_VERTEX_ATTRIB_ARRAY_STRIDE = 34340;

const int GL_VERTEX_ATTRIB_ARRAY_TYPE = 34341;

const int GL_CURRENT_VERTEX_ATTRIB = 34342;

const int GL_VERTEX_PROGRAM_POINT_SIZE = 34370;

const int GL_VERTEX_ATTRIB_ARRAY_POINTER = 34373;

const int GL_STENCIL_BACK_FUNC = 34816;

const int GL_STENCIL_BACK_FAIL = 34817;

const int GL_STENCIL_BACK_PASS_DEPTH_FAIL = 34818;

const int GL_STENCIL_BACK_PASS_DEPTH_PASS = 34819;

const int GL_MAX_DRAW_BUFFERS = 34852;

const int GL_DRAW_BUFFER0 = 34853;

const int GL_DRAW_BUFFER1 = 34854;

const int GL_DRAW_BUFFER2 = 34855;

const int GL_DRAW_BUFFER3 = 34856;

const int GL_DRAW_BUFFER4 = 34857;

const int GL_DRAW_BUFFER5 = 34858;

const int GL_DRAW_BUFFER6 = 34859;

const int GL_DRAW_BUFFER7 = 34860;

const int GL_DRAW_BUFFER8 = 34861;

const int GL_DRAW_BUFFER9 = 34862;

const int GL_DRAW_BUFFER10 = 34863;

const int GL_DRAW_BUFFER11 = 34864;

const int GL_DRAW_BUFFER12 = 34865;

const int GL_DRAW_BUFFER13 = 34866;

const int GL_DRAW_BUFFER14 = 34867;

const int GL_DRAW_BUFFER15 = 34868;

const int GL_BLEND_EQUATION_ALPHA = 34877;

const int GL_MAX_VERTEX_ATTRIBS = 34921;

const int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;

const int GL_MAX_TEXTURE_IMAGE_UNITS = 34930;

const int GL_FRAGMENT_SHADER = 35632;

const int GL_VERTEX_SHADER = 35633;

const int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;

const int GL_MAX_VERTEX_UNIFORM_COMPONENTS = 35658;

const int GL_MAX_VARYING_FLOATS = 35659;

const int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;

const int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;

const int GL_SHADER_TYPE = 35663;

const int GL_FLOAT_VEC2 = 35664;

const int GL_FLOAT_VEC3 = 35665;

const int GL_FLOAT_VEC4 = 35666;

const int GL_INT_VEC2 = 35667;

const int GL_INT_VEC3 = 35668;

const int GL_INT_VEC4 = 35669;

const int GL_BOOL = 35670;

const int GL_BOOL_VEC2 = 35671;

const int GL_BOOL_VEC3 = 35672;

const int GL_BOOL_VEC4 = 35673;

const int GL_FLOAT_MAT2 = 35674;

const int GL_FLOAT_MAT3 = 35675;

const int GL_FLOAT_MAT4 = 35676;

const int GL_SAMPLER_1D = 35677;

const int GL_SAMPLER_2D = 35678;

const int GL_SAMPLER_3D = 35679;

const int GL_SAMPLER_CUBE = 35680;

const int GL_SAMPLER_1D_SHADOW = 35681;

const int GL_SAMPLER_2D_SHADOW = 35682;

const int GL_DELETE_STATUS = 35712;

const int GL_COMPILE_STATUS = 35713;

const int GL_LINK_STATUS = 35714;

const int GL_VALIDATE_STATUS = 35715;

const int GL_INFO_LOG_LENGTH = 35716;

const int GL_ATTACHED_SHADERS = 35717;

const int GL_ACTIVE_UNIFORMS = 35718;

const int GL_ACTIVE_UNIFORM_MAX_LENGTH = 35719;

const int GL_SHADER_SOURCE_LENGTH = 35720;

const int GL_ACTIVE_ATTRIBUTES = 35721;

const int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722;

const int GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;

const int GL_SHADING_LANGUAGE_VERSION = 35724;

const int GL_CURRENT_PROGRAM = 35725;

const int GL_POINT_SPRITE_COORD_ORIGIN = 36000;

const int GL_LOWER_LEFT = 36001;

const int GL_UPPER_LEFT = 36002;

const int GL_STENCIL_BACK_REF = 36003;

const int GL_STENCIL_BACK_VALUE_MASK = 36004;

const int GL_STENCIL_BACK_WRITEMASK = 36005;

const int GL_VERTEX_PROGRAM_TWO_SIDE = 34371;

const int GL_POINT_SPRITE = 34913;

const int GL_COORD_REPLACE = 34914;

const int GL_MAX_TEXTURE_COORDS = 34929;

const int GL_VERSION_2_1 = 1;

const int GL_PIXEL_PACK_BUFFER = 35051;

const int GL_PIXEL_UNPACK_BUFFER = 35052;

const int GL_PIXEL_PACK_BUFFER_BINDING = 35053;

const int GL_PIXEL_UNPACK_BUFFER_BINDING = 35055;

const int GL_FLOAT_MAT2x3 = 35685;

const int GL_FLOAT_MAT2x4 = 35686;

const int GL_FLOAT_MAT3x2 = 35687;

const int GL_FLOAT_MAT3x4 = 35688;

const int GL_FLOAT_MAT4x2 = 35689;

const int GL_FLOAT_MAT4x3 = 35690;

const int GL_SRGB = 35904;

const int GL_SRGB8 = 35905;

const int GL_SRGB_ALPHA = 35906;

const int GL_SRGB8_ALPHA8 = 35907;

const int GL_COMPRESSED_SRGB = 35912;

const int GL_COMPRESSED_SRGB_ALPHA = 35913;

const int GL_CURRENT_RASTER_SECONDARY_COLOR = 33887;

const int GL_SLUMINANCE_ALPHA = 35908;

const int GL_SLUMINANCE8_ALPHA8 = 35909;

const int GL_SLUMINANCE = 35910;

const int GL_SLUMINANCE8 = 35911;

const int GL_COMPRESSED_SLUMINANCE = 35914;

const int GL_COMPRESSED_SLUMINANCE_ALPHA = 35915;

const int GL_VERSION_3_0 = 1;

const int GL_COMPARE_REF_TO_TEXTURE = 34894;

const int GL_CLIP_DISTANCE0 = 12288;

const int GL_CLIP_DISTANCE1 = 12289;

const int GL_CLIP_DISTANCE2 = 12290;

const int GL_CLIP_DISTANCE3 = 12291;

const int GL_CLIP_DISTANCE4 = 12292;

const int GL_CLIP_DISTANCE5 = 12293;

const int GL_CLIP_DISTANCE6 = 12294;

const int GL_CLIP_DISTANCE7 = 12295;

const int GL_MAX_CLIP_DISTANCES = 3378;

const int GL_MAJOR_VERSION = 33307;

const int GL_MINOR_VERSION = 33308;

const int GL_NUM_EXTENSIONS = 33309;

const int GL_CONTEXT_FLAGS = 33310;

const int GL_COMPRESSED_RED = 33317;

const int GL_COMPRESSED_RG = 33318;

const int GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 1;

const int GL_RGBA32F = 34836;

const int GL_RGB32F = 34837;

const int GL_RGBA16F = 34842;

const int GL_RGB16F = 34843;

const int GL_VERTEX_ATTRIB_ARRAY_INTEGER = 35069;

const int GL_MAX_ARRAY_TEXTURE_LAYERS = 35071;

const int GL_MIN_PROGRAM_TEXEL_OFFSET = 35076;

const int GL_MAX_PROGRAM_TEXEL_OFFSET = 35077;

const int GL_CLAMP_READ_COLOR = 35100;

const int GL_FIXED_ONLY = 35101;

const int GL_MAX_VARYING_COMPONENTS = 35659;

const int GL_TEXTURE_1D_ARRAY = 35864;

const int GL_PROXY_TEXTURE_1D_ARRAY = 35865;

const int GL_TEXTURE_2D_ARRAY = 35866;

const int GL_PROXY_TEXTURE_2D_ARRAY = 35867;

const int GL_TEXTURE_BINDING_1D_ARRAY = 35868;

const int GL_TEXTURE_BINDING_2D_ARRAY = 35869;

const int GL_R11F_G11F_B10F = 35898;

const int GL_UNSIGNED_INT_10F_11F_11F_REV = 35899;

const int GL_RGB9_E5 = 35901;

const int GL_UNSIGNED_INT_5_9_9_9_REV = 35902;

const int GL_TEXTURE_SHARED_SIZE = 35903;

const int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 35958;

const int GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;

const int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;

const int GL_TRANSFORM_FEEDBACK_VARYINGS = 35971;

const int GL_TRANSFORM_FEEDBACK_BUFFER_START = 35972;

const int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;

const int GL_PRIMITIVES_GENERATED = 35975;

const int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;

const int GL_RASTERIZER_DISCARD = 35977;

const int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;

const int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;

const int GL_INTERLEAVED_ATTRIBS = 35980;

const int GL_SEPARATE_ATTRIBS = 35981;

const int GL_TRANSFORM_FEEDBACK_BUFFER = 35982;

const int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;

const int GL_RGBA32UI = 36208;

const int GL_RGB32UI = 36209;

const int GL_RGBA16UI = 36214;

const int GL_RGB16UI = 36215;

const int GL_RGBA8UI = 36220;

const int GL_RGB8UI = 36221;

const int GL_RGBA32I = 36226;

const int GL_RGB32I = 36227;

const int GL_RGBA16I = 36232;

const int GL_RGB16I = 36233;

const int GL_RGBA8I = 36238;

const int GL_RGB8I = 36239;

const int GL_RED_INTEGER = 36244;

const int GL_GREEN_INTEGER = 36245;

const int GL_BLUE_INTEGER = 36246;

const int GL_RGB_INTEGER = 36248;

const int GL_RGBA_INTEGER = 36249;

const int GL_BGR_INTEGER = 36250;

const int GL_BGRA_INTEGER = 36251;

const int GL_SAMPLER_1D_ARRAY = 36288;

const int GL_SAMPLER_2D_ARRAY = 36289;

const int GL_SAMPLER_1D_ARRAY_SHADOW = 36291;

const int GL_SAMPLER_2D_ARRAY_SHADOW = 36292;

const int GL_SAMPLER_CUBE_SHADOW = 36293;

const int GL_UNSIGNED_INT_VEC2 = 36294;

const int GL_UNSIGNED_INT_VEC3 = 36295;

const int GL_UNSIGNED_INT_VEC4 = 36296;

const int GL_INT_SAMPLER_1D = 36297;

const int GL_INT_SAMPLER_2D = 36298;

const int GL_INT_SAMPLER_3D = 36299;

const int GL_INT_SAMPLER_CUBE = 36300;

const int GL_INT_SAMPLER_1D_ARRAY = 36302;

const int GL_INT_SAMPLER_2D_ARRAY = 36303;

const int GL_UNSIGNED_INT_SAMPLER_1D = 36305;

const int GL_UNSIGNED_INT_SAMPLER_2D = 36306;

const int GL_UNSIGNED_INT_SAMPLER_3D = 36307;

const int GL_UNSIGNED_INT_SAMPLER_CUBE = 36308;

const int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 36310;

const int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;

const int GL_QUERY_WAIT = 36371;

const int GL_QUERY_NO_WAIT = 36372;

const int GL_QUERY_BY_REGION_WAIT = 36373;

const int GL_QUERY_BY_REGION_NO_WAIT = 36374;

const int GL_BUFFER_ACCESS_FLAGS = 37151;

const int GL_BUFFER_MAP_LENGTH = 37152;

const int GL_BUFFER_MAP_OFFSET = 37153;

const int GL_DEPTH_COMPONENT32F = 36012;

const int GL_DEPTH32F_STENCIL8 = 36013;

const int GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;

const int GL_INVALID_FRAMEBUFFER_OPERATION = 1286;

const int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;

const int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;

const int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;

const int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;

const int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;

const int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;

const int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;

const int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;

const int GL_FRAMEBUFFER_DEFAULT = 33304;

const int GL_FRAMEBUFFER_UNDEFINED = 33305;

const int GL_DEPTH_STENCIL_ATTACHMENT = 33306;

const int GL_MAX_RENDERBUFFER_SIZE = 34024;

const int GL_DEPTH_STENCIL = 34041;

const int GL_UNSIGNED_INT_24_8 = 34042;

const int GL_DEPTH24_STENCIL8 = 35056;

const int GL_TEXTURE_STENCIL_SIZE = 35057;

const int GL_TEXTURE_RED_TYPE = 35856;

const int GL_TEXTURE_GREEN_TYPE = 35857;

const int GL_TEXTURE_BLUE_TYPE = 35858;

const int GL_TEXTURE_ALPHA_TYPE = 35859;

const int GL_TEXTURE_DEPTH_TYPE = 35862;

const int GL_UNSIGNED_NORMALIZED = 35863;

const int GL_FRAMEBUFFER_BINDING = 36006;

const int GL_DRAW_FRAMEBUFFER_BINDING = 36006;

const int GL_RENDERBUFFER_BINDING = 36007;

const int GL_READ_FRAMEBUFFER = 36008;

const int GL_DRAW_FRAMEBUFFER = 36009;

const int GL_READ_FRAMEBUFFER_BINDING = 36010;

const int GL_RENDERBUFFER_SAMPLES = 36011;

const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;

const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;

const int GL_FRAMEBUFFER_COMPLETE = 36053;

const int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;

const int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;

const int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 36059;

const int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 36060;

const int GL_FRAMEBUFFER_UNSUPPORTED = 36061;

const int GL_MAX_COLOR_ATTACHMENTS = 36063;

const int GL_COLOR_ATTACHMENT0 = 36064;

const int GL_COLOR_ATTACHMENT1 = 36065;

const int GL_COLOR_ATTACHMENT2 = 36066;

const int GL_COLOR_ATTACHMENT3 = 36067;

const int GL_COLOR_ATTACHMENT4 = 36068;

const int GL_COLOR_ATTACHMENT5 = 36069;

const int GL_COLOR_ATTACHMENT6 = 36070;

const int GL_COLOR_ATTACHMENT7 = 36071;

const int GL_COLOR_ATTACHMENT8 = 36072;

const int GL_COLOR_ATTACHMENT9 = 36073;

const int GL_COLOR_ATTACHMENT10 = 36074;

const int GL_COLOR_ATTACHMENT11 = 36075;

const int GL_COLOR_ATTACHMENT12 = 36076;

const int GL_COLOR_ATTACHMENT13 = 36077;

const int GL_COLOR_ATTACHMENT14 = 36078;

const int GL_COLOR_ATTACHMENT15 = 36079;

const int GL_DEPTH_ATTACHMENT = 36096;

const int GL_STENCIL_ATTACHMENT = 36128;

const int GL_FRAMEBUFFER = 36160;

const int GL_RENDERBUFFER = 36161;

const int GL_RENDERBUFFER_WIDTH = 36162;

const int GL_RENDERBUFFER_HEIGHT = 36163;

const int GL_RENDERBUFFER_INTERNAL_FORMAT = 36164;

const int GL_STENCIL_INDEX1 = 36166;

const int GL_STENCIL_INDEX4 = 36167;

const int GL_STENCIL_INDEX8 = 36168;

const int GL_STENCIL_INDEX16 = 36169;

const int GL_RENDERBUFFER_RED_SIZE = 36176;

const int GL_RENDERBUFFER_GREEN_SIZE = 36177;

const int GL_RENDERBUFFER_BLUE_SIZE = 36178;

const int GL_RENDERBUFFER_ALPHA_SIZE = 36179;

const int GL_RENDERBUFFER_DEPTH_SIZE = 36180;

const int GL_RENDERBUFFER_STENCIL_SIZE = 36181;

const int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;

const int GL_MAX_SAMPLES = 36183;

const int GL_INDEX = 33314;

const int GL_TEXTURE_LUMINANCE_TYPE = 35860;

const int GL_TEXTURE_INTENSITY_TYPE = 35861;

const int GL_FRAMEBUFFER_SRGB = 36281;

const int GL_HALF_FLOAT = 5131;

const int GL_MAP_READ_BIT = 1;

const int GL_MAP_WRITE_BIT = 2;

const int GL_MAP_INVALIDATE_RANGE_BIT = 4;

const int GL_MAP_INVALIDATE_BUFFER_BIT = 8;

const int GL_MAP_FLUSH_EXPLICIT_BIT = 16;

const int GL_MAP_UNSYNCHRONIZED_BIT = 32;

const int GL_COMPRESSED_RED_RGTC1 = 36283;

const int GL_COMPRESSED_SIGNED_RED_RGTC1 = 36284;

const int GL_COMPRESSED_RG_RGTC2 = 36285;

const int GL_COMPRESSED_SIGNED_RG_RGTC2 = 36286;

const int GL_RG = 33319;

const int GL_RG_INTEGER = 33320;

const int GL_R8 = 33321;

const int GL_R16 = 33322;

const int GL_RG8 = 33323;

const int GL_RG16 = 33324;

const int GL_R16F = 33325;

const int GL_R32F = 33326;

const int GL_RG16F = 33327;

const int GL_RG32F = 33328;

const int GL_R8I = 33329;

const int GL_R8UI = 33330;

const int GL_R16I = 33331;

const int GL_R16UI = 33332;

const int GL_R32I = 33333;

const int GL_R32UI = 33334;

const int GL_RG8I = 33335;

const int GL_RG8UI = 33336;

const int GL_RG16I = 33337;

const int GL_RG16UI = 33338;

const int GL_RG32I = 33339;

const int GL_RG32UI = 33340;

const int GL_VERTEX_ARRAY_BINDING = 34229;

const int GL_CLAMP_VERTEX_COLOR = 35098;

const int GL_CLAMP_FRAGMENT_COLOR = 35099;

const int GL_ALPHA_INTEGER = 36247;

const int GL_VERSION_3_1 = 1;

const int GL_SAMPLER_2D_RECT = 35683;

const int GL_SAMPLER_2D_RECT_SHADOW = 35684;

const int GL_SAMPLER_BUFFER = 36290;

const int GL_INT_SAMPLER_2D_RECT = 36301;

const int GL_INT_SAMPLER_BUFFER = 36304;

const int GL_UNSIGNED_INT_SAMPLER_2D_RECT = 36309;

const int GL_UNSIGNED_INT_SAMPLER_BUFFER = 36312;

const int GL_TEXTURE_BUFFER = 35882;

const int GL_MAX_TEXTURE_BUFFER_SIZE = 35883;

const int GL_TEXTURE_BINDING_BUFFER = 35884;

const int GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 35885;

const int GL_TEXTURE_RECTANGLE = 34037;

const int GL_TEXTURE_BINDING_RECTANGLE = 34038;

const int GL_PROXY_TEXTURE_RECTANGLE = 34039;

const int GL_MAX_RECTANGLE_TEXTURE_SIZE = 34040;

const int GL_R8_SNORM = 36756;

const int GL_RG8_SNORM = 36757;

const int GL_RGB8_SNORM = 36758;

const int GL_RGBA8_SNORM = 36759;

const int GL_R16_SNORM = 36760;

const int GL_RG16_SNORM = 36761;

const int GL_RGB16_SNORM = 36762;

const int GL_RGBA16_SNORM = 36763;

const int GL_SIGNED_NORMALIZED = 36764;

const int GL_PRIMITIVE_RESTART = 36765;

const int GL_PRIMITIVE_RESTART_INDEX = 36766;

const int GL_COPY_READ_BUFFER = 36662;

const int GL_COPY_WRITE_BUFFER = 36663;

const int GL_UNIFORM_BUFFER = 35345;

const int GL_UNIFORM_BUFFER_BINDING = 35368;

const int GL_UNIFORM_BUFFER_START = 35369;

const int GL_UNIFORM_BUFFER_SIZE = 35370;

const int GL_MAX_VERTEX_UNIFORM_BLOCKS = 35371;

const int GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;

const int GL_MAX_COMBINED_UNIFORM_BLOCKS = 35374;

const int GL_MAX_UNIFORM_BUFFER_BINDINGS = 35375;

const int GL_MAX_UNIFORM_BLOCK_SIZE = 35376;

const int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;

const int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;

const int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;

const int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 35381;

const int GL_ACTIVE_UNIFORM_BLOCKS = 35382;

const int GL_UNIFORM_TYPE = 35383;

const int GL_UNIFORM_SIZE = 35384;

const int GL_UNIFORM_NAME_LENGTH = 35385;

const int GL_UNIFORM_BLOCK_INDEX = 35386;

const int GL_UNIFORM_OFFSET = 35387;

const int GL_UNIFORM_ARRAY_STRIDE = 35388;

const int GL_UNIFORM_MATRIX_STRIDE = 35389;

const int GL_UNIFORM_IS_ROW_MAJOR = 35390;

const int GL_UNIFORM_BLOCK_BINDING = 35391;

const int GL_UNIFORM_BLOCK_DATA_SIZE = 35392;

const int GL_UNIFORM_BLOCK_NAME_LENGTH = 35393;

const int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;

const int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;

const int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;

const int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;

const int GL_INVALID_INDEX = 4294967295;

const int GL_VERSION_3_2 = 1;

const int GL_CONTEXT_CORE_PROFILE_BIT = 1;

const int GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 2;

const int GL_LINES_ADJACENCY = 10;

const int GL_LINE_STRIP_ADJACENCY = 11;

const int GL_TRIANGLES_ADJACENCY = 12;

const int GL_TRIANGLE_STRIP_ADJACENCY = 13;

const int GL_PROGRAM_POINT_SIZE = 34370;

const int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 35881;

const int GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 36263;

const int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 36264;

const int GL_GEOMETRY_SHADER = 36313;

const int GL_GEOMETRY_VERTICES_OUT = 35094;

const int GL_GEOMETRY_INPUT_TYPE = 35095;

const int GL_GEOMETRY_OUTPUT_TYPE = 35096;

const int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 36319;

const int GL_MAX_GEOMETRY_OUTPUT_VERTICES = 36320;

const int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 36321;

const int GL_MAX_VERTEX_OUTPUT_COMPONENTS = 37154;

const int GL_MAX_GEOMETRY_INPUT_COMPONENTS = 37155;

const int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 37156;

const int GL_MAX_FRAGMENT_INPUT_COMPONENTS = 37157;

const int GL_CONTEXT_PROFILE_MASK = 37158;

const int GL_DEPTH_CLAMP = 34383;

const int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 36428;

const int GL_FIRST_VERTEX_CONVENTION = 36429;

const int GL_LAST_VERTEX_CONVENTION = 36430;

const int GL_PROVOKING_VERTEX = 36431;

const int GL_TEXTURE_CUBE_MAP_SEAMLESS = 34895;

const int GL_MAX_SERVER_WAIT_TIMEOUT = 37137;

const int GL_OBJECT_TYPE = 37138;

const int GL_SYNC_CONDITION = 37139;

const int GL_SYNC_STATUS = 37140;

const int GL_SYNC_FLAGS = 37141;

const int GL_SYNC_FENCE = 37142;

const int GL_SYNC_GPU_COMMANDS_COMPLETE = 37143;

const int GL_UNSIGNALED = 37144;

const int GL_SIGNALED = 37145;

const int GL_ALREADY_SIGNALED = 37146;

const int GL_TIMEOUT_EXPIRED = 37147;

const int GL_CONDITION_SATISFIED = 37148;

const int GL_WAIT_FAILED = 37149;

const int GL_TIMEOUT_IGNORED = -1;

const int GL_SYNC_FLUSH_COMMANDS_BIT = 1;

const int GL_SAMPLE_POSITION = 36432;

const int GL_SAMPLE_MASK = 36433;

const int GL_SAMPLE_MASK_VALUE = 36434;

const int GL_MAX_SAMPLE_MASK_WORDS = 36441;

const int GL_TEXTURE_2D_MULTISAMPLE = 37120;

const int GL_PROXY_TEXTURE_2D_MULTISAMPLE = 37121;

const int GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 37122;

const int GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 37123;

const int GL_TEXTURE_BINDING_2D_MULTISAMPLE = 37124;

const int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 37125;

const int GL_TEXTURE_SAMPLES = 37126;

const int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 37127;

const int GL_SAMPLER_2D_MULTISAMPLE = 37128;

const int GL_INT_SAMPLER_2D_MULTISAMPLE = 37129;

const int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 37130;

const int GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 37131;

const int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37132;

const int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37133;

const int GL_MAX_COLOR_TEXTURE_SAMPLES = 37134;

const int GL_MAX_DEPTH_TEXTURE_SAMPLES = 37135;

const int GL_MAX_INTEGER_SAMPLES = 37136;

const int GL_VERSION_3_3 = 1;

const int GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;

const int GL_SRC1_COLOR = 35065;

const int GL_ONE_MINUS_SRC1_COLOR = 35066;

const int GL_ONE_MINUS_SRC1_ALPHA = 35067;

const int GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 35068;

const int GL_ANY_SAMPLES_PASSED = 35887;

const int GL_SAMPLER_BINDING = 35097;

const int GL_RGB10_A2UI = 36975;

const int GL_TEXTURE_SWIZZLE_R = 36418;

const int GL_TEXTURE_SWIZZLE_G = 36419;

const int GL_TEXTURE_SWIZZLE_B = 36420;

const int GL_TEXTURE_SWIZZLE_A = 36421;

const int GL_TEXTURE_SWIZZLE_RGBA = 36422;

const int GL_TIME_ELAPSED = 35007;

const int GL_TIMESTAMP = 36392;

const int GL_INT_2_10_10_10_REV = 36255;

const int GL_VERSION_4_0 = 1;

const int GL_SAMPLE_SHADING = 35894;

const int GL_MIN_SAMPLE_SHADING_VALUE = 35895;

const int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 36446;

const int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 36447;

const int GL_TEXTURE_CUBE_MAP_ARRAY = 36873;

const int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 36874;

const int GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 36875;

const int GL_SAMPLER_CUBE_MAP_ARRAY = 36876;

const int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 36877;

const int GL_INT_SAMPLER_CUBE_MAP_ARRAY = 36878;

const int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 36879;

const int GL_DRAW_INDIRECT_BUFFER = 36671;

const int GL_DRAW_INDIRECT_BUFFER_BINDING = 36675;

const int GL_GEOMETRY_SHADER_INVOCATIONS = 34943;

const int GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 36442;

const int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 36443;

const int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 36444;

const int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 36445;

const int GL_MAX_VERTEX_STREAMS = 36465;

const int GL_DOUBLE_VEC2 = 36860;

const int GL_DOUBLE_VEC3 = 36861;

const int GL_DOUBLE_VEC4 = 36862;

const int GL_DOUBLE_MAT2 = 36678;

const int GL_DOUBLE_MAT3 = 36679;

const int GL_DOUBLE_MAT4 = 36680;

const int GL_DOUBLE_MAT2x3 = 36681;

const int GL_DOUBLE_MAT2x4 = 36682;

const int GL_DOUBLE_MAT3x2 = 36683;

const int GL_DOUBLE_MAT3x4 = 36684;

const int GL_DOUBLE_MAT4x2 = 36685;

const int GL_DOUBLE_MAT4x3 = 36686;

const int GL_ACTIVE_SUBROUTINES = 36325;

const int GL_ACTIVE_SUBROUTINE_UNIFORMS = 36326;

const int GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 36423;

const int GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 36424;

const int GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 36425;

const int GL_MAX_SUBROUTINES = 36327;

const int GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 36328;

const int GL_NUM_COMPATIBLE_SUBROUTINES = 36426;

const int GL_COMPATIBLE_SUBROUTINES = 36427;

const int GL_PATCHES = 14;

const int GL_PATCH_VERTICES = 36466;

const int GL_PATCH_DEFAULT_INNER_LEVEL = 36467;

const int GL_PATCH_DEFAULT_OUTER_LEVEL = 36468;

const int GL_TESS_CONTROL_OUTPUT_VERTICES = 36469;

const int GL_TESS_GEN_MODE = 36470;

const int GL_TESS_GEN_SPACING = 36471;

const int GL_TESS_GEN_VERTEX_ORDER = 36472;

const int GL_TESS_GEN_POINT_MODE = 36473;

const int GL_ISOLINES = 36474;

const int GL_FRACTIONAL_ODD = 36475;

const int GL_FRACTIONAL_EVEN = 36476;

const int GL_MAX_PATCH_VERTICES = 36477;

const int GL_MAX_TESS_GEN_LEVEL = 36478;

const int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 36479;

const int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 36480;

const int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 36481;

const int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 36482;

const int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 36483;

const int GL_MAX_TESS_PATCH_COMPONENTS = 36484;

const int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 36485;

const int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 36486;

const int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 36489;

const int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 36490;

const int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 34924;

const int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 34925;

const int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 36382;

const int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 36383;

const int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 34032;

const int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 34033;

const int GL_TESS_EVALUATION_SHADER = 36487;

const int GL_TESS_CONTROL_SHADER = 36488;

const int GL_TRANSFORM_FEEDBACK = 36386;

const int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 36387;

const int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 36388;

const int GL_TRANSFORM_FEEDBACK_BINDING = 36389;

const int GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 36464;

const int GL_VERSION_4_1 = 1;

const int GL_FIXED = 5132;

const int GL_IMPLEMENTATION_COLOR_READ_TYPE = 35738;

const int GL_IMPLEMENTATION_COLOR_READ_FORMAT = 35739;

const int GL_LOW_FLOAT = 36336;

const int GL_MEDIUM_FLOAT = 36337;

const int GL_HIGH_FLOAT = 36338;

const int GL_LOW_INT = 36339;

const int GL_MEDIUM_INT = 36340;

const int GL_HIGH_INT = 36341;

const int GL_SHADER_COMPILER = 36346;

const int GL_SHADER_BINARY_FORMATS = 36344;

const int GL_NUM_SHADER_BINARY_FORMATS = 36345;

const int GL_MAX_VERTEX_UNIFORM_VECTORS = 36347;

const int GL_MAX_VARYING_VECTORS = 36348;

const int GL_MAX_FRAGMENT_UNIFORM_VECTORS = 36349;

const int GL_RGB565 = 36194;

const int GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 33367;

const int GL_PROGRAM_BINARY_LENGTH = 34625;

const int GL_NUM_PROGRAM_BINARY_FORMATS = 34814;

const int GL_PROGRAM_BINARY_FORMATS = 34815;

const int GL_VERTEX_SHADER_BIT = 1;

const int GL_FRAGMENT_SHADER_BIT = 2;

const int GL_GEOMETRY_SHADER_BIT = 4;

const int GL_TESS_CONTROL_SHADER_BIT = 8;

const int GL_TESS_EVALUATION_SHADER_BIT = 16;

const int GL_ALL_SHADER_BITS = 4294967295;

const int GL_PROGRAM_SEPARABLE = 33368;

const int GL_ACTIVE_PROGRAM = 33369;

const int GL_PROGRAM_PIPELINE_BINDING = 33370;

const int GL_MAX_VIEWPORTS = 33371;

const int GL_VIEWPORT_SUBPIXEL_BITS = 33372;

const int GL_VIEWPORT_BOUNDS_RANGE = 33373;

const int GL_LAYER_PROVOKING_VERTEX = 33374;

const int GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 33375;

const int GL_UNDEFINED_VERTEX = 33376;

const int GL_VERSION_4_2 = 1;

const int GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 37159;

const int GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 37160;

const int GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 37161;

const int GL_UNPACK_COMPRESSED_BLOCK_SIZE = 37162;

const int GL_PACK_COMPRESSED_BLOCK_WIDTH = 37163;

const int GL_PACK_COMPRESSED_BLOCK_HEIGHT = 37164;

const int GL_PACK_COMPRESSED_BLOCK_DEPTH = 37165;

const int GL_PACK_COMPRESSED_BLOCK_SIZE = 37166;

const int GL_NUM_SAMPLE_COUNTS = 37760;

const int GL_MIN_MAP_BUFFER_ALIGNMENT = 37052;

const int GL_ATOMIC_COUNTER_BUFFER = 37568;

const int GL_ATOMIC_COUNTER_BUFFER_BINDING = 37569;

const int GL_ATOMIC_COUNTER_BUFFER_START = 37570;

const int GL_ATOMIC_COUNTER_BUFFER_SIZE = 37571;

const int GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 37572;

const int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 37573;

const int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 37574;

const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 37575;

const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 37576;

const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 37577;

const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 37578;

const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 37579;

const int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 37580;

const int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 37581;

const int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 37582;

const int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 37583;

const int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 37584;

const int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 37585;

const int GL_MAX_VERTEX_ATOMIC_COUNTERS = 37586;

const int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 37587;

const int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 37588;

const int GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 37589;

const int GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 37590;

const int GL_MAX_COMBINED_ATOMIC_COUNTERS = 37591;

const int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 37592;

const int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 37596;

const int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 37593;

const int GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 37594;

const int GL_UNSIGNED_INT_ATOMIC_COUNTER = 37595;

const int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 1;

const int GL_ELEMENT_ARRAY_BARRIER_BIT = 2;

const int GL_UNIFORM_BARRIER_BIT = 4;

const int GL_TEXTURE_FETCH_BARRIER_BIT = 8;

const int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 32;

const int GL_COMMAND_BARRIER_BIT = 64;

const int GL_PIXEL_BUFFER_BARRIER_BIT = 128;

const int GL_TEXTURE_UPDATE_BARRIER_BIT = 256;

const int GL_BUFFER_UPDATE_BARRIER_BIT = 512;

const int GL_FRAMEBUFFER_BARRIER_BIT = 1024;

const int GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 2048;

const int GL_ATOMIC_COUNTER_BARRIER_BIT = 4096;

const int GL_ALL_BARRIER_BITS = 4294967295;

const int GL_MAX_IMAGE_UNITS = 36664;

const int GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 36665;

const int GL_IMAGE_BINDING_NAME = 36666;

const int GL_IMAGE_BINDING_LEVEL = 36667;

const int GL_IMAGE_BINDING_LAYERED = 36668;

const int GL_IMAGE_BINDING_LAYER = 36669;

const int GL_IMAGE_BINDING_ACCESS = 36670;

const int GL_IMAGE_1D = 36940;

const int GL_IMAGE_2D = 36941;

const int GL_IMAGE_3D = 36942;

const int GL_IMAGE_2D_RECT = 36943;

const int GL_IMAGE_CUBE = 36944;

const int GL_IMAGE_BUFFER = 36945;

const int GL_IMAGE_1D_ARRAY = 36946;

const int GL_IMAGE_2D_ARRAY = 36947;

const int GL_IMAGE_CUBE_MAP_ARRAY = 36948;

const int GL_IMAGE_2D_MULTISAMPLE = 36949;

const int GL_IMAGE_2D_MULTISAMPLE_ARRAY = 36950;

const int GL_INT_IMAGE_1D = 36951;

const int GL_INT_IMAGE_2D = 36952;

const int GL_INT_IMAGE_3D = 36953;

const int GL_INT_IMAGE_2D_RECT = 36954;

const int GL_INT_IMAGE_CUBE = 36955;

const int GL_INT_IMAGE_BUFFER = 36956;

const int GL_INT_IMAGE_1D_ARRAY = 36957;

const int GL_INT_IMAGE_2D_ARRAY = 36958;

const int GL_INT_IMAGE_CUBE_MAP_ARRAY = 36959;

const int GL_INT_IMAGE_2D_MULTISAMPLE = 36960;

const int GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36961;

const int GL_UNSIGNED_INT_IMAGE_1D = 36962;

const int GL_UNSIGNED_INT_IMAGE_2D = 36963;

const int GL_UNSIGNED_INT_IMAGE_3D = 36964;

const int GL_UNSIGNED_INT_IMAGE_2D_RECT = 36965;

const int GL_UNSIGNED_INT_IMAGE_CUBE = 36966;

const int GL_UNSIGNED_INT_IMAGE_BUFFER = 36967;

const int GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 36968;

const int GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 36969;

const int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 36970;

const int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 36971;

const int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36972;

const int GL_MAX_IMAGE_SAMPLES = 36973;

const int GL_IMAGE_BINDING_FORMAT = 36974;

const int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 37063;

const int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 37064;

const int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 37065;

const int GL_MAX_VERTEX_IMAGE_UNIFORMS = 37066;

const int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 37067;

const int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 37068;

const int GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 37069;

const int GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 37070;

const int GL_MAX_COMBINED_IMAGE_UNIFORMS = 37071;

const int GL_COMPRESSED_RGBA_BPTC_UNORM = 36492;

const int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 36493;

const int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 36494;

const int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 36495;

const int GL_TEXTURE_IMMUTABLE_FORMAT = 37167;

const int GL_VERSION_4_3 = 1;

const int GL_NUM_SHADING_LANGUAGE_VERSIONS = 33513;

const int GL_VERTEX_ATTRIB_ARRAY_LONG = 34638;

const int GL_COMPRESSED_RGB8_ETC2 = 37492;

const int GL_COMPRESSED_SRGB8_ETC2 = 37493;

const int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494;

const int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495;

const int GL_COMPRESSED_RGBA8_ETC2_EAC = 37496;

const int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497;

const int GL_COMPRESSED_R11_EAC = 37488;

const int GL_COMPRESSED_SIGNED_R11_EAC = 37489;

const int GL_COMPRESSED_RG11_EAC = 37490;

const int GL_COMPRESSED_SIGNED_RG11_EAC = 37491;

const int GL_PRIMITIVE_RESTART_FIXED_INDEX = 36201;

const int GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;

const int GL_MAX_ELEMENT_INDEX = 36203;

const int GL_COMPUTE_SHADER = 37305;

const int GL_MAX_COMPUTE_UNIFORM_BLOCKS = 37307;

const int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 37308;

const int GL_MAX_COMPUTE_IMAGE_UNIFORMS = 37309;

const int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 33378;

const int GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 33379;

const int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 33380;

const int GL_MAX_COMPUTE_ATOMIC_COUNTERS = 33381;

const int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 33382;

const int GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 37099;

const int GL_MAX_COMPUTE_WORK_GROUP_COUNT = 37310;

const int GL_MAX_COMPUTE_WORK_GROUP_SIZE = 37311;

const int GL_COMPUTE_WORK_GROUP_SIZE = 33383;

const int GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 37100;

const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 37101;

const int GL_DISPATCH_INDIRECT_BUFFER = 37102;

const int GL_DISPATCH_INDIRECT_BUFFER_BINDING = 37103;

const int GL_DEBUG_OUTPUT_SYNCHRONOUS = 33346;

const int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;

const int GL_DEBUG_CALLBACK_FUNCTION = 33348;

const int GL_DEBUG_CALLBACK_USER_PARAM = 33349;

const int GL_DEBUG_SOURCE_API = 33350;

const int GL_DEBUG_SOURCE_WINDOW_SYSTEM = 33351;

const int GL_DEBUG_SOURCE_SHADER_COMPILER = 33352;

const int GL_DEBUG_SOURCE_THIRD_PARTY = 33353;

const int GL_DEBUG_SOURCE_APPLICATION = 33354;

const int GL_DEBUG_SOURCE_OTHER = 33355;

const int GL_DEBUG_TYPE_ERROR = 33356;

const int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;

const int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;

const int GL_DEBUG_TYPE_PORTABILITY = 33359;

const int GL_DEBUG_TYPE_PERFORMANCE = 33360;

const int GL_DEBUG_TYPE_OTHER = 33361;

const int GL_MAX_DEBUG_MESSAGE_LENGTH = 37187;

const int GL_MAX_DEBUG_LOGGED_MESSAGES = 37188;

const int GL_DEBUG_LOGGED_MESSAGES = 37189;

const int GL_DEBUG_SEVERITY_HIGH = 37190;

const int GL_DEBUG_SEVERITY_MEDIUM = 37191;

const int GL_DEBUG_SEVERITY_LOW = 37192;

const int GL_DEBUG_TYPE_MARKER = 33384;

const int GL_DEBUG_TYPE_PUSH_GROUP = 33385;

const int GL_DEBUG_TYPE_POP_GROUP = 33386;

const int GL_DEBUG_SEVERITY_NOTIFICATION = 33387;

const int GL_MAX_DEBUG_GROUP_STACK_DEPTH = 33388;

const int GL_DEBUG_GROUP_STACK_DEPTH = 33389;

const int GL_BUFFER = 33504;

const int GL_SHADER = 33505;

const int GL_PROGRAM = 33506;

const int GL_QUERY = 33507;

const int GL_PROGRAM_PIPELINE = 33508;

const int GL_SAMPLER = 33510;

const int GL_MAX_LABEL_LENGTH = 33512;

const int GL_DEBUG_OUTPUT = 37600;

const int GL_CONTEXT_FLAG_DEBUG_BIT = 2;

const int GL_MAX_UNIFORM_LOCATIONS = 33390;

const int GL_FRAMEBUFFER_DEFAULT_WIDTH = 37648;

const int GL_FRAMEBUFFER_DEFAULT_HEIGHT = 37649;

const int GL_FRAMEBUFFER_DEFAULT_LAYERS = 37650;

const int GL_FRAMEBUFFER_DEFAULT_SAMPLES = 37651;

const int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 37652;

const int GL_MAX_FRAMEBUFFER_WIDTH = 37653;

const int GL_MAX_FRAMEBUFFER_HEIGHT = 37654;

const int GL_MAX_FRAMEBUFFER_LAYERS = 37655;

const int GL_MAX_FRAMEBUFFER_SAMPLES = 37656;

const int GL_INTERNALFORMAT_SUPPORTED = 33391;

const int GL_INTERNALFORMAT_PREFERRED = 33392;

const int GL_INTERNALFORMAT_RED_SIZE = 33393;

const int GL_INTERNALFORMAT_GREEN_SIZE = 33394;

const int GL_INTERNALFORMAT_BLUE_SIZE = 33395;

const int GL_INTERNALFORMAT_ALPHA_SIZE = 33396;

const int GL_INTERNALFORMAT_DEPTH_SIZE = 33397;

const int GL_INTERNALFORMAT_STENCIL_SIZE = 33398;

const int GL_INTERNALFORMAT_SHARED_SIZE = 33399;

const int GL_INTERNALFORMAT_RED_TYPE = 33400;

const int GL_INTERNALFORMAT_GREEN_TYPE = 33401;

const int GL_INTERNALFORMAT_BLUE_TYPE = 33402;

const int GL_INTERNALFORMAT_ALPHA_TYPE = 33403;

const int GL_INTERNALFORMAT_DEPTH_TYPE = 33404;

const int GL_INTERNALFORMAT_STENCIL_TYPE = 33405;

const int GL_MAX_WIDTH = 33406;

const int GL_MAX_HEIGHT = 33407;

const int GL_MAX_DEPTH = 33408;

const int GL_MAX_LAYERS = 33409;

const int GL_MAX_COMBINED_DIMENSIONS = 33410;

const int GL_COLOR_COMPONENTS = 33411;

const int GL_DEPTH_COMPONENTS = 33412;

const int GL_STENCIL_COMPONENTS = 33413;

const int GL_COLOR_RENDERABLE = 33414;

const int GL_DEPTH_RENDERABLE = 33415;

const int GL_STENCIL_RENDERABLE = 33416;

const int GL_FRAMEBUFFER_RENDERABLE = 33417;

const int GL_FRAMEBUFFER_RENDERABLE_LAYERED = 33418;

const int GL_FRAMEBUFFER_BLEND = 33419;

const int GL_READ_PIXELS = 33420;

const int GL_READ_PIXELS_FORMAT = 33421;

const int GL_READ_PIXELS_TYPE = 33422;

const int GL_TEXTURE_IMAGE_FORMAT = 33423;

const int GL_TEXTURE_IMAGE_TYPE = 33424;

const int GL_GET_TEXTURE_IMAGE_FORMAT = 33425;

const int GL_GET_TEXTURE_IMAGE_TYPE = 33426;

const int GL_MIPMAP = 33427;

const int GL_MANUAL_GENERATE_MIPMAP = 33428;

const int GL_AUTO_GENERATE_MIPMAP = 33429;

const int GL_COLOR_ENCODING = 33430;

const int GL_SRGB_READ = 33431;

const int GL_SRGB_WRITE = 33432;

const int GL_FILTER = 33434;

const int GL_VERTEX_TEXTURE = 33435;

const int GL_TESS_CONTROL_TEXTURE = 33436;

const int GL_TESS_EVALUATION_TEXTURE = 33437;

const int GL_GEOMETRY_TEXTURE = 33438;

const int GL_FRAGMENT_TEXTURE = 33439;

const int GL_COMPUTE_TEXTURE = 33440;

const int GL_TEXTURE_SHADOW = 33441;

const int GL_TEXTURE_GATHER = 33442;

const int GL_TEXTURE_GATHER_SHADOW = 33443;

const int GL_SHADER_IMAGE_LOAD = 33444;

const int GL_SHADER_IMAGE_STORE = 33445;

const int GL_SHADER_IMAGE_ATOMIC = 33446;

const int GL_IMAGE_TEXEL_SIZE = 33447;

const int GL_IMAGE_COMPATIBILITY_CLASS = 33448;

const int GL_IMAGE_PIXEL_FORMAT = 33449;

const int GL_IMAGE_PIXEL_TYPE = 33450;

const int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 33452;

const int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 33453;

const int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 33454;

const int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 33455;

const int GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 33457;

const int GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 33458;

const int GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 33459;

const int GL_CLEAR_BUFFER = 33460;

const int GL_TEXTURE_VIEW = 33461;

const int GL_VIEW_COMPATIBILITY_CLASS = 33462;

const int GL_FULL_SUPPORT = 33463;

const int GL_CAVEAT_SUPPORT = 33464;

const int GL_IMAGE_CLASS_4_X_32 = 33465;

const int GL_IMAGE_CLASS_2_X_32 = 33466;

const int GL_IMAGE_CLASS_1_X_32 = 33467;

const int GL_IMAGE_CLASS_4_X_16 = 33468;

const int GL_IMAGE_CLASS_2_X_16 = 33469;

const int GL_IMAGE_CLASS_1_X_16 = 33470;

const int GL_IMAGE_CLASS_4_X_8 = 33471;

const int GL_IMAGE_CLASS_2_X_8 = 33472;

const int GL_IMAGE_CLASS_1_X_8 = 33473;

const int GL_IMAGE_CLASS_11_11_10 = 33474;

const int GL_IMAGE_CLASS_10_10_10_2 = 33475;

const int GL_VIEW_CLASS_128_BITS = 33476;

const int GL_VIEW_CLASS_96_BITS = 33477;

const int GL_VIEW_CLASS_64_BITS = 33478;

const int GL_VIEW_CLASS_48_BITS = 33479;

const int GL_VIEW_CLASS_32_BITS = 33480;

const int GL_VIEW_CLASS_24_BITS = 33481;

const int GL_VIEW_CLASS_16_BITS = 33482;

const int GL_VIEW_CLASS_8_BITS = 33483;

const int GL_VIEW_CLASS_S3TC_DXT1_RGB = 33484;

const int GL_VIEW_CLASS_S3TC_DXT1_RGBA = 33485;

const int GL_VIEW_CLASS_S3TC_DXT3_RGBA = 33486;

const int GL_VIEW_CLASS_S3TC_DXT5_RGBA = 33487;

const int GL_VIEW_CLASS_RGTC1_RED = 33488;

const int GL_VIEW_CLASS_RGTC2_RG = 33489;

const int GL_VIEW_CLASS_BPTC_UNORM = 33490;

const int GL_VIEW_CLASS_BPTC_FLOAT = 33491;

const int GL_UNIFORM = 37601;

const int GL_UNIFORM_BLOCK = 37602;

const int GL_PROGRAM_INPUT = 37603;

const int GL_PROGRAM_OUTPUT = 37604;

const int GL_BUFFER_VARIABLE = 37605;

const int GL_SHADER_STORAGE_BLOCK = 37606;

const int GL_VERTEX_SUBROUTINE = 37608;

const int GL_TESS_CONTROL_SUBROUTINE = 37609;

const int GL_TESS_EVALUATION_SUBROUTINE = 37610;

const int GL_GEOMETRY_SUBROUTINE = 37611;

const int GL_FRAGMENT_SUBROUTINE = 37612;

const int GL_COMPUTE_SUBROUTINE = 37613;

const int GL_VERTEX_SUBROUTINE_UNIFORM = 37614;

const int GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 37615;

const int GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 37616;

const int GL_GEOMETRY_SUBROUTINE_UNIFORM = 37617;

const int GL_FRAGMENT_SUBROUTINE_UNIFORM = 37618;

const int GL_COMPUTE_SUBROUTINE_UNIFORM = 37619;

const int GL_TRANSFORM_FEEDBACK_VARYING = 37620;

const int GL_ACTIVE_RESOURCES = 37621;

const int GL_MAX_NAME_LENGTH = 37622;

const int GL_MAX_NUM_ACTIVE_VARIABLES = 37623;

const int GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 37624;

const int GL_NAME_LENGTH = 37625;

const int GL_TYPE = 37626;

const int GL_ARRAY_SIZE = 37627;

const int GL_OFFSET = 37628;

const int GL_BLOCK_INDEX = 37629;

const int GL_ARRAY_STRIDE = 37630;

const int GL_MATRIX_STRIDE = 37631;

const int GL_IS_ROW_MAJOR = 37632;

const int GL_ATOMIC_COUNTER_BUFFER_INDEX = 37633;

const int GL_BUFFER_BINDING = 37634;

const int GL_BUFFER_DATA_SIZE = 37635;

const int GL_NUM_ACTIVE_VARIABLES = 37636;

const int GL_ACTIVE_VARIABLES = 37637;

const int GL_REFERENCED_BY_VERTEX_SHADER = 37638;

const int GL_REFERENCED_BY_TESS_CONTROL_SHADER = 37639;

const int GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 37640;

const int GL_REFERENCED_BY_GEOMETRY_SHADER = 37641;

const int GL_REFERENCED_BY_FRAGMENT_SHADER = 37642;

const int GL_REFERENCED_BY_COMPUTE_SHADER = 37643;

const int GL_TOP_LEVEL_ARRAY_SIZE = 37644;

const int GL_TOP_LEVEL_ARRAY_STRIDE = 37645;

const int GL_LOCATION = 37646;

const int GL_LOCATION_INDEX = 37647;

const int GL_IS_PER_PATCH = 37607;

const int GL_SHADER_STORAGE_BUFFER = 37074;

const int GL_SHADER_STORAGE_BUFFER_BINDING = 37075;

const int GL_SHADER_STORAGE_BUFFER_START = 37076;

const int GL_SHADER_STORAGE_BUFFER_SIZE = 37077;

const int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 37078;

const int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 37079;

const int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 37080;

const int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 37081;

const int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 37082;

const int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 37083;

const int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 37084;

const int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 37085;

const int GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 37086;

const int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 37087;

const int GL_SHADER_STORAGE_BARRIER_BIT = 8192;

const int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 36665;

const int GL_DEPTH_STENCIL_TEXTURE_MODE = 37098;

const int GL_TEXTURE_BUFFER_OFFSET = 37277;

const int GL_TEXTURE_BUFFER_SIZE = 37278;

const int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 37279;

const int GL_TEXTURE_VIEW_MIN_LEVEL = 33499;

const int GL_TEXTURE_VIEW_NUM_LEVELS = 33500;

const int GL_TEXTURE_VIEW_MIN_LAYER = 33501;

const int GL_TEXTURE_VIEW_NUM_LAYERS = 33502;

const int GL_TEXTURE_IMMUTABLE_LEVELS = 33503;

const int GL_VERTEX_ATTRIB_BINDING = 33492;

const int GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 33493;

const int GL_VERTEX_BINDING_DIVISOR = 33494;

const int GL_VERTEX_BINDING_OFFSET = 33495;

const int GL_VERTEX_BINDING_STRIDE = 33496;

const int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 33497;

const int GL_MAX_VERTEX_ATTRIB_BINDINGS = 33498;

const int GL_VERTEX_BINDING_BUFFER = 36687;

const int GL_DISPLAY_LIST = 33511;

const int GL_VERSION_4_4 = 1;

const int GL_MAX_VERTEX_ATTRIB_STRIDE = 33509;

const int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 33313;

const int GL_TEXTURE_BUFFER_BINDING = 35882;

const int GL_MAP_PERSISTENT_BIT = 64;

const int GL_MAP_COHERENT_BIT = 128;

const int GL_DYNAMIC_STORAGE_BIT = 256;

const int GL_CLIENT_STORAGE_BIT = 512;

const int GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 16384;

const int GL_BUFFER_IMMUTABLE_STORAGE = 33311;

const int GL_BUFFER_STORAGE_FLAGS = 33312;

const int GL_CLEAR_TEXTURE = 37733;

const int GL_LOCATION_COMPONENT = 37706;

const int GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 37707;

const int GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 37708;

const int GL_QUERY_BUFFER = 37266;

const int GL_QUERY_BUFFER_BARRIER_BIT = 32768;

const int GL_QUERY_BUFFER_BINDING = 37267;

const int GL_QUERY_RESULT_NO_WAIT = 37268;

const int GL_MIRROR_CLAMP_TO_EDGE = 34627;

const int GL_ARB_ES2_compatibility = 1;

const int GL_ARB_ES3_compatibility = 1;

const int GL_ARB_arrays_of_arrays = 1;

const int GL_ARB_base_instance = 1;

const int GL_ARB_bindless_texture = 1;

const int GL_UNSIGNED_INT64_ARB = 5135;

const int GL_ARB_blend_func_extended = 1;

const int GL_ARB_buffer_storage = 1;

const int GL_ARB_cl_event = 1;

const int GL_SYNC_CL_EVENT_ARB = 33344;

const int GL_SYNC_CL_EVENT_COMPLETE_ARB = 33345;

const int GL_ARB_clear_buffer_object = 1;

const int GL_ARB_clear_texture = 1;

const int GL_ARB_color_buffer_float = 1;

const int GL_RGBA_FLOAT_MODE_ARB = 34848;

const int GL_CLAMP_VERTEX_COLOR_ARB = 35098;

const int GL_CLAMP_FRAGMENT_COLOR_ARB = 35099;

const int GL_CLAMP_READ_COLOR_ARB = 35100;

const int GL_FIXED_ONLY_ARB = 35101;

const int GL_ARB_compatibility = 1;

const int GL_ARB_compressed_texture_pixel_storage = 1;

const int GL_ARB_compute_shader = 1;

const int GL_COMPUTE_SHADER_BIT = 32;

const int GL_ARB_compute_variable_group_size = 1;

const int GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 37700;

const int GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 37099;

const int GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 37701;

const int GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 37311;

const int GL_ARB_conservative_depth = 1;

const int GL_ARB_copy_buffer = 1;

const int GL_COPY_READ_BUFFER_BINDING = 36662;

const int GL_COPY_WRITE_BUFFER_BINDING = 36663;

const int GL_ARB_copy_image = 1;

const int GL_ARB_debug_output = 1;

const int GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 33346;

const int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 33347;

const int GL_DEBUG_CALLBACK_FUNCTION_ARB = 33348;

const int GL_DEBUG_CALLBACK_USER_PARAM_ARB = 33349;

const int GL_DEBUG_SOURCE_API_ARB = 33350;

const int GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 33351;

const int GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 33352;

const int GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 33353;

const int GL_DEBUG_SOURCE_APPLICATION_ARB = 33354;

const int GL_DEBUG_SOURCE_OTHER_ARB = 33355;

const int GL_DEBUG_TYPE_ERROR_ARB = 33356;

const int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 33357;

const int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 33358;

const int GL_DEBUG_TYPE_PORTABILITY_ARB = 33359;

const int GL_DEBUG_TYPE_PERFORMANCE_ARB = 33360;

const int GL_DEBUG_TYPE_OTHER_ARB = 33361;

const int GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 37187;

const int GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 37188;

const int GL_DEBUG_LOGGED_MESSAGES_ARB = 37189;

const int GL_DEBUG_SEVERITY_HIGH_ARB = 37190;

const int GL_DEBUG_SEVERITY_MEDIUM_ARB = 37191;

const int GL_DEBUG_SEVERITY_LOW_ARB = 37192;

const int GL_ARB_depth_buffer_float = 1;

const int GL_ARB_depth_clamp = 1;

const int GL_ARB_depth_texture = 1;

const int GL_DEPTH_COMPONENT16_ARB = 33189;

const int GL_DEPTH_COMPONENT24_ARB = 33190;

const int GL_DEPTH_COMPONENT32_ARB = 33191;

const int GL_TEXTURE_DEPTH_SIZE_ARB = 34890;

const int GL_DEPTH_TEXTURE_MODE_ARB = 34891;

const int GL_ARB_draw_buffers = 1;

const int GL_MAX_DRAW_BUFFERS_ARB = 34852;

const int GL_DRAW_BUFFER0_ARB = 34853;

const int GL_DRAW_BUFFER1_ARB = 34854;

const int GL_DRAW_BUFFER2_ARB = 34855;

const int GL_DRAW_BUFFER3_ARB = 34856;

const int GL_DRAW_BUFFER4_ARB = 34857;

const int GL_DRAW_BUFFER5_ARB = 34858;

const int GL_DRAW_BUFFER6_ARB = 34859;

const int GL_DRAW_BUFFER7_ARB = 34860;

const int GL_DRAW_BUFFER8_ARB = 34861;

const int GL_DRAW_BUFFER9_ARB = 34862;

const int GL_DRAW_BUFFER10_ARB = 34863;

const int GL_DRAW_BUFFER11_ARB = 34864;

const int GL_DRAW_BUFFER12_ARB = 34865;

const int GL_DRAW_BUFFER13_ARB = 34866;

const int GL_DRAW_BUFFER14_ARB = 34867;

const int GL_DRAW_BUFFER15_ARB = 34868;

const int GL_ARB_draw_buffers_blend = 1;

const int GL_ARB_draw_elements_base_vertex = 1;

const int GL_ARB_draw_indirect = 1;

const int GL_ARB_draw_instanced = 1;

const int GL_ARB_enhanced_layouts = 1;

const int GL_ARB_explicit_attrib_location = 1;

const int GL_ARB_explicit_uniform_location = 1;

const int GL_ARB_fragment_coord_conventions = 1;

const int GL_ARB_fragment_layer_viewport = 1;

const int GL_ARB_fragment_program = 1;

const int GL_FRAGMENT_PROGRAM_ARB = 34820;

const int GL_PROGRAM_FORMAT_ASCII_ARB = 34933;

const int GL_PROGRAM_LENGTH_ARB = 34343;

const int GL_PROGRAM_FORMAT_ARB = 34934;

const int GL_PROGRAM_BINDING_ARB = 34423;

const int GL_PROGRAM_INSTRUCTIONS_ARB = 34976;

const int GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 34977;

const int GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34978;

const int GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34979;

const int GL_PROGRAM_TEMPORARIES_ARB = 34980;

const int GL_MAX_PROGRAM_TEMPORARIES_ARB = 34981;

const int GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 34982;

const int GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 34983;

const int GL_PROGRAM_PARAMETERS_ARB = 34984;

const int GL_MAX_PROGRAM_PARAMETERS_ARB = 34985;

const int GL_PROGRAM_NATIVE_PARAMETERS_ARB = 34986;

const int GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 34987;

const int GL_PROGRAM_ATTRIBS_ARB = 34988;

const int GL_MAX_PROGRAM_ATTRIBS_ARB = 34989;

const int GL_PROGRAM_NATIVE_ATTRIBS_ARB = 34990;

const int GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 34991;

const int GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 34996;

const int GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 34997;

const int GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 34998;

const int GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 34821;

const int GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 34822;

const int GL_PROGRAM_TEX_INDIRECTIONS_ARB = 34823;

const int GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34824;

const int GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34825;

const int GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34826;

const int GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 34827;

const int GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 34828;

const int GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 34829;

const int GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34830;

const int GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34831;

const int GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34832;

const int GL_PROGRAM_STRING_ARB = 34344;

const int GL_PROGRAM_ERROR_POSITION_ARB = 34379;

const int GL_CURRENT_MATRIX_ARB = 34369;

const int GL_TRANSPOSE_CURRENT_MATRIX_ARB = 34999;

const int GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 34368;

const int GL_MAX_PROGRAM_MATRICES_ARB = 34351;

const int GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 34350;

const int GL_MAX_TEXTURE_COORDS_ARB = 34929;

const int GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 34930;

const int GL_PROGRAM_ERROR_STRING_ARB = 34932;

const int GL_MATRIX0_ARB = 35008;

const int GL_MATRIX1_ARB = 35009;

const int GL_MATRIX2_ARB = 35010;

const int GL_MATRIX3_ARB = 35011;

const int GL_MATRIX4_ARB = 35012;

const int GL_MATRIX5_ARB = 35013;

const int GL_MATRIX6_ARB = 35014;

const int GL_MATRIX7_ARB = 35015;

const int GL_MATRIX8_ARB = 35016;

const int GL_MATRIX9_ARB = 35017;

const int GL_MATRIX10_ARB = 35018;

const int GL_MATRIX11_ARB = 35019;

const int GL_MATRIX12_ARB = 35020;

const int GL_MATRIX13_ARB = 35021;

const int GL_MATRIX14_ARB = 35022;

const int GL_MATRIX15_ARB = 35023;

const int GL_MATRIX16_ARB = 35024;

const int GL_MATRIX17_ARB = 35025;

const int GL_MATRIX18_ARB = 35026;

const int GL_MATRIX19_ARB = 35027;

const int GL_MATRIX20_ARB = 35028;

const int GL_MATRIX21_ARB = 35029;

const int GL_MATRIX22_ARB = 35030;

const int GL_MATRIX23_ARB = 35031;

const int GL_MATRIX24_ARB = 35032;

const int GL_MATRIX25_ARB = 35033;

const int GL_MATRIX26_ARB = 35034;

const int GL_MATRIX27_ARB = 35035;

const int GL_MATRIX28_ARB = 35036;

const int GL_MATRIX29_ARB = 35037;

const int GL_MATRIX30_ARB = 35038;

const int GL_MATRIX31_ARB = 35039;

const int GL_ARB_fragment_program_shadow = 1;

const int GL_ARB_fragment_shader = 1;

const int GL_FRAGMENT_SHADER_ARB = 35632;

const int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 35657;

const int GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 35723;

const int GL_ARB_framebuffer_no_attachments = 1;

const int GL_ARB_framebuffer_object = 1;

const int GL_ARB_framebuffer_sRGB = 1;

const int GL_CONTEXT_RELEASE_BEHAVIOR = 33531;

const int GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 33532;

const int GL_ARB_geometry_shader4 = 1;

const int GL_LINES_ADJACENCY_ARB = 10;

const int GL_LINE_STRIP_ADJACENCY_ARB = 11;

const int GL_TRIANGLES_ADJACENCY_ARB = 12;

const int GL_TRIANGLE_STRIP_ADJACENCY_ARB = 13;

const int GL_PROGRAM_POINT_SIZE_ARB = 34370;

const int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 35881;

const int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 36263;

const int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 36264;

const int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 36265;

const int GL_GEOMETRY_SHADER_ARB = 36313;

const int GL_GEOMETRY_VERTICES_OUT_ARB = 36314;

const int GL_GEOMETRY_INPUT_TYPE_ARB = 36315;

const int GL_GEOMETRY_OUTPUT_TYPE_ARB = 36316;

const int GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 36317;

const int GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 36318;

const int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 36319;

const int GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 36320;

const int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 36321;

const int GL_ARB_get_program_binary = 1;

const int GL_ARB_gpu_shader5 = 1;

const int GL_ARB_gpu_shader_fp64 = 1;

const int GL_ARB_half_float_pixel = 1;

const int GL_HALF_FLOAT_ARB = 5131;

const int GL_ARB_half_float_vertex = 1;

const int GL_ARB_imaging = 1;

const int GL_BLEND_COLOR = 32773;

const int GL_BLEND_EQUATION = 32777;

const int GL_CONVOLUTION_1D = 32784;

const int GL_CONVOLUTION_2D = 32785;

const int GL_SEPARABLE_2D = 32786;

const int GL_CONVOLUTION_BORDER_MODE = 32787;

const int GL_CONVOLUTION_FILTER_SCALE = 32788;

const int GL_CONVOLUTION_FILTER_BIAS = 32789;

const int GL_REDUCE = 32790;

const int GL_CONVOLUTION_FORMAT = 32791;

const int GL_CONVOLUTION_WIDTH = 32792;

const int GL_CONVOLUTION_HEIGHT = 32793;

const int GL_MAX_CONVOLUTION_WIDTH = 32794;

const int GL_MAX_CONVOLUTION_HEIGHT = 32795;

const int GL_POST_CONVOLUTION_RED_SCALE = 32796;

const int GL_POST_CONVOLUTION_GREEN_SCALE = 32797;

const int GL_POST_CONVOLUTION_BLUE_SCALE = 32798;

const int GL_POST_CONVOLUTION_ALPHA_SCALE = 32799;

const int GL_POST_CONVOLUTION_RED_BIAS = 32800;

const int GL_POST_CONVOLUTION_GREEN_BIAS = 32801;

const int GL_POST_CONVOLUTION_BLUE_BIAS = 32802;

const int GL_POST_CONVOLUTION_ALPHA_BIAS = 32803;

const int GL_HISTOGRAM = 32804;

const int GL_PROXY_HISTOGRAM = 32805;

const int GL_HISTOGRAM_WIDTH = 32806;

const int GL_HISTOGRAM_FORMAT = 32807;

const int GL_HISTOGRAM_RED_SIZE = 32808;

const int GL_HISTOGRAM_GREEN_SIZE = 32809;

const int GL_HISTOGRAM_BLUE_SIZE = 32810;

const int GL_HISTOGRAM_ALPHA_SIZE = 32811;

const int GL_HISTOGRAM_LUMINANCE_SIZE = 32812;

const int GL_HISTOGRAM_SINK = 32813;

const int GL_MINMAX = 32814;

const int GL_MINMAX_FORMAT = 32815;

const int GL_MINMAX_SINK = 32816;

const int GL_TABLE_TOO_LARGE = 32817;

const int GL_COLOR_MATRIX = 32945;

const int GL_COLOR_MATRIX_STACK_DEPTH = 32946;

const int GL_MAX_COLOR_MATRIX_STACK_DEPTH = 32947;

const int GL_POST_COLOR_MATRIX_RED_SCALE = 32948;

const int GL_POST_COLOR_MATRIX_GREEN_SCALE = 32949;

const int GL_POST_COLOR_MATRIX_BLUE_SCALE = 32950;

const int GL_POST_COLOR_MATRIX_ALPHA_SCALE = 32951;

const int GL_POST_COLOR_MATRIX_RED_BIAS = 32952;

const int GL_POST_COLOR_MATRIX_GREEN_BIAS = 32953;

const int GL_POST_COLOR_MATRIX_BLUE_BIAS = 32954;

const int GL_POST_COLOR_MATRIX_ALPHA_BIAS = 32955;

const int GL_COLOR_TABLE = 32976;

const int GL_POST_CONVOLUTION_COLOR_TABLE = 32977;

const int GL_POST_COLOR_MATRIX_COLOR_TABLE = 32978;

const int GL_PROXY_COLOR_TABLE = 32979;

const int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 32980;

const int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 32981;

const int GL_COLOR_TABLE_SCALE = 32982;

const int GL_COLOR_TABLE_BIAS = 32983;

const int GL_COLOR_TABLE_FORMAT = 32984;

const int GL_COLOR_TABLE_WIDTH = 32985;

const int GL_COLOR_TABLE_RED_SIZE = 32986;

const int GL_COLOR_TABLE_GREEN_SIZE = 32987;

const int GL_COLOR_TABLE_BLUE_SIZE = 32988;

const int GL_COLOR_TABLE_ALPHA_SIZE = 32989;

const int GL_COLOR_TABLE_LUMINANCE_SIZE = 32990;

const int GL_COLOR_TABLE_INTENSITY_SIZE = 32991;

const int GL_CONSTANT_BORDER = 33105;

const int GL_REPLICATE_BORDER = 33107;

const int GL_CONVOLUTION_BORDER_COLOR = 33108;

const int GL_ARB_indirect_parameters = 1;

const int GL_PARAMETER_BUFFER_ARB = 33006;

const int GL_PARAMETER_BUFFER_BINDING_ARB = 33007;

const int GL_ARB_instanced_arrays = 1;

const int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 35070;

const int GL_ARB_internalformat_query = 1;

const int GL_ARB_internalformat_query2 = 1;

const int GL_SRGB_DECODE_ARB = 33433;

const int GL_ARB_invalidate_subdata = 1;

const int GL_ARB_map_buffer_alignment = 1;

const int GL_ARB_map_buffer_range = 1;

const int GL_ARB_matrix_palette = 1;

const int GL_MATRIX_PALETTE_ARB = 34880;

const int GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 34881;

const int GL_MAX_PALETTE_MATRICES_ARB = 34882;

const int GL_CURRENT_PALETTE_MATRIX_ARB = 34883;

const int GL_MATRIX_INDEX_ARRAY_ARB = 34884;

const int GL_CURRENT_MATRIX_INDEX_ARB = 34885;

const int GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 34886;

const int GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 34887;

const int GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 34888;

const int GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 34889;

const int GL_ARB_multi_bind = 1;

const int GL_ARB_multi_draw_indirect = 1;

const int GL_ARB_multisample = 1;

const int GL_MULTISAMPLE_ARB = 32925;

const int GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 32926;

const int GL_SAMPLE_ALPHA_TO_ONE_ARB = 32927;

const int GL_SAMPLE_COVERAGE_ARB = 32928;

const int GL_SAMPLE_BUFFERS_ARB = 32936;

const int GL_SAMPLES_ARB = 32937;

const int GL_SAMPLE_COVERAGE_VALUE_ARB = 32938;

const int GL_SAMPLE_COVERAGE_INVERT_ARB = 32939;

const int GL_MULTISAMPLE_BIT_ARB = 536870912;

const int GL_ARB_multitexture = 1;

const int GL_TEXTURE0_ARB = 33984;

const int GL_TEXTURE1_ARB = 33985;

const int GL_TEXTURE2_ARB = 33986;

const int GL_TEXTURE3_ARB = 33987;

const int GL_TEXTURE4_ARB = 33988;

const int GL_TEXTURE5_ARB = 33989;

const int GL_TEXTURE6_ARB = 33990;

const int GL_TEXTURE7_ARB = 33991;

const int GL_TEXTURE8_ARB = 33992;

const int GL_TEXTURE9_ARB = 33993;

const int GL_TEXTURE10_ARB = 33994;

const int GL_TEXTURE11_ARB = 33995;

const int GL_TEXTURE12_ARB = 33996;

const int GL_TEXTURE13_ARB = 33997;

const int GL_TEXTURE14_ARB = 33998;

const int GL_TEXTURE15_ARB = 33999;

const int GL_TEXTURE16_ARB = 34000;

const int GL_TEXTURE17_ARB = 34001;

const int GL_TEXTURE18_ARB = 34002;

const int GL_TEXTURE19_ARB = 34003;

const int GL_TEXTURE20_ARB = 34004;

const int GL_TEXTURE21_ARB = 34005;

const int GL_TEXTURE22_ARB = 34006;

const int GL_TEXTURE23_ARB = 34007;

const int GL_TEXTURE24_ARB = 34008;

const int GL_TEXTURE25_ARB = 34009;

const int GL_TEXTURE26_ARB = 34010;

const int GL_TEXTURE27_ARB = 34011;

const int GL_TEXTURE28_ARB = 34012;

const int GL_TEXTURE29_ARB = 34013;

const int GL_TEXTURE30_ARB = 34014;

const int GL_TEXTURE31_ARB = 34015;

const int GL_ACTIVE_TEXTURE_ARB = 34016;

const int GL_CLIENT_ACTIVE_TEXTURE_ARB = 34017;

const int GL_MAX_TEXTURE_UNITS_ARB = 34018;

const int GL_ARB_occlusion_query = 1;

const int GL_QUERY_COUNTER_BITS_ARB = 34916;

const int GL_CURRENT_QUERY_ARB = 34917;

const int GL_QUERY_RESULT_ARB = 34918;

const int GL_QUERY_RESULT_AVAILABLE_ARB = 34919;

const int GL_SAMPLES_PASSED_ARB = 35092;

const int GL_ARB_occlusion_query2 = 1;

const int GL_ARB_pixel_buffer_object = 1;

const int GL_PIXEL_PACK_BUFFER_ARB = 35051;

const int GL_PIXEL_UNPACK_BUFFER_ARB = 35052;

const int GL_PIXEL_PACK_BUFFER_BINDING_ARB = 35053;

const int GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 35055;

const int GL_ARB_point_parameters = 1;

const int GL_POINT_SIZE_MIN_ARB = 33062;

const int GL_POINT_SIZE_MAX_ARB = 33063;

const int GL_POINT_FADE_THRESHOLD_SIZE_ARB = 33064;

const int GL_POINT_DISTANCE_ATTENUATION_ARB = 33065;

const int GL_ARB_point_sprite = 1;

const int GL_POINT_SPRITE_ARB = 34913;

const int GL_COORD_REPLACE_ARB = 34914;

const int GL_ARB_program_interface_query = 1;

const int GL_ARB_provoking_vertex = 1;

const int GL_ARB_query_buffer_object = 1;

const int GL_ARB_robust_buffer_access_behavior = 1;

const int GL_ARB_robustness = 1;

const int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 4;

const int GL_LOSE_CONTEXT_ON_RESET_ARB = 33362;

const int GL_GUILTY_CONTEXT_RESET_ARB = 33363;

const int GL_INNOCENT_CONTEXT_RESET_ARB = 33364;

const int GL_UNKNOWN_CONTEXT_RESET_ARB = 33365;

const int GL_RESET_NOTIFICATION_STRATEGY_ARB = 33366;

const int GL_NO_RESET_NOTIFICATION_ARB = 33377;

const int GL_ARB_robustness_isolation = 1;

const int GL_ARB_sample_shading = 1;

const int GL_SAMPLE_SHADING_ARB = 35894;

const int GL_MIN_SAMPLE_SHADING_VALUE_ARB = 35895;

const int GL_ARB_sampler_objects = 1;

const int GL_ARB_seamless_cube_map = 1;

const int GL_ARB_seamless_cubemap_per_texture = 1;

const int GL_ARB_separate_shader_objects = 1;

const int GL_ARB_shader_atomic_counters = 1;

const int GL_ARB_shader_bit_encoding = 1;

const int GL_ARB_shader_draw_parameters = 1;

const int GL_ARB_shader_group_vote = 1;

const int GL_ARB_shader_image_load_store = 1;

const int GL_ARB_shader_image_size = 1;

const int GL_ARB_shader_objects = 1;

const int GL_PROGRAM_OBJECT_ARB = 35648;

const int GL_SHADER_OBJECT_ARB = 35656;

const int GL_OBJECT_TYPE_ARB = 35662;

const int GL_OBJECT_SUBTYPE_ARB = 35663;

const int GL_FLOAT_VEC2_ARB = 35664;

const int GL_FLOAT_VEC3_ARB = 35665;

const int GL_FLOAT_VEC4_ARB = 35666;

const int GL_INT_VEC2_ARB = 35667;

const int GL_INT_VEC3_ARB = 35668;

const int GL_INT_VEC4_ARB = 35669;

const int GL_BOOL_ARB = 35670;

const int GL_BOOL_VEC2_ARB = 35671;

const int GL_BOOL_VEC3_ARB = 35672;

const int GL_BOOL_VEC4_ARB = 35673;

const int GL_FLOAT_MAT2_ARB = 35674;

const int GL_FLOAT_MAT3_ARB = 35675;

const int GL_FLOAT_MAT4_ARB = 35676;

const int GL_SAMPLER_1D_ARB = 35677;

const int GL_SAMPLER_2D_ARB = 35678;

const int GL_SAMPLER_3D_ARB = 35679;

const int GL_SAMPLER_CUBE_ARB = 35680;

const int GL_SAMPLER_1D_SHADOW_ARB = 35681;

const int GL_SAMPLER_2D_SHADOW_ARB = 35682;

const int GL_SAMPLER_2D_RECT_ARB = 35683;

const int GL_SAMPLER_2D_RECT_SHADOW_ARB = 35684;

const int GL_OBJECT_DELETE_STATUS_ARB = 35712;

const int GL_OBJECT_COMPILE_STATUS_ARB = 35713;

const int GL_OBJECT_LINK_STATUS_ARB = 35714;

const int GL_OBJECT_VALIDATE_STATUS_ARB = 35715;

const int GL_OBJECT_INFO_LOG_LENGTH_ARB = 35716;

const int GL_OBJECT_ATTACHED_OBJECTS_ARB = 35717;

const int GL_OBJECT_ACTIVE_UNIFORMS_ARB = 35718;

const int GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 35719;

const int GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 35720;

const int GL_ARB_shader_precision = 1;

const int GL_ARB_shader_stencil_export = 1;

const int GL_ARB_shader_storage_buffer_object = 1;

const int GL_ARB_shader_subroutine = 1;

const int GL_ARB_shader_texture_lod = 1;

const int GL_ARB_shading_language_100 = 1;

const int GL_SHADING_LANGUAGE_VERSION_ARB = 35724;

const int GL_ARB_shading_language_420pack = 1;

const int GL_ARB_shading_language_include = 1;

const int GL_SHADER_INCLUDE_ARB = 36270;

const int GL_NAMED_STRING_LENGTH_ARB = 36329;

const int GL_NAMED_STRING_TYPE_ARB = 36330;

const int GL_ARB_shading_language_packing = 1;

const int GL_ARB_shadow = 1;

const int GL_TEXTURE_COMPARE_MODE_ARB = 34892;

const int GL_TEXTURE_COMPARE_FUNC_ARB = 34893;

const int GL_COMPARE_R_TO_TEXTURE_ARB = 34894;

const int GL_ARB_shadow_ambient = 1;

const int GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 32959;

const int GL_ARB_sparse_texture = 1;

const int GL_TEXTURE_SPARSE_ARB = 37286;

const int GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 37287;

const int GL_MIN_SPARSE_LEVEL_ARB = 37275;

const int GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 37288;

const int GL_VIRTUAL_PAGE_SIZE_X_ARB = 37269;

const int GL_VIRTUAL_PAGE_SIZE_Y_ARB = 37270;

const int GL_VIRTUAL_PAGE_SIZE_Z_ARB = 37271;

const int GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 37272;

const int GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 37273;

const int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 37274;

const int GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 37289;

const int GL_ARB_stencil_texturing = 1;

const int GL_ARB_sync = 1;

const int GL_ARB_tessellation_shader = 1;

const int GL_ARB_texture_border_clamp = 1;

const int GL_CLAMP_TO_BORDER_ARB = 33069;

const int GL_ARB_texture_buffer_object = 1;

const int GL_TEXTURE_BUFFER_ARB = 35882;

const int GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 35883;

const int GL_TEXTURE_BINDING_BUFFER_ARB = 35884;

const int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 35885;

const int GL_TEXTURE_BUFFER_FORMAT_ARB = 35886;

const int GL_ARB_texture_buffer_object_rgb32 = 1;

const int GL_ARB_texture_buffer_range = 1;

const int GL_ARB_texture_compression = 1;

const int GL_COMPRESSED_ALPHA_ARB = 34025;

const int GL_COMPRESSED_LUMINANCE_ARB = 34026;

const int GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 34027;

const int GL_COMPRESSED_INTENSITY_ARB = 34028;

const int GL_COMPRESSED_RGB_ARB = 34029;

const int GL_COMPRESSED_RGBA_ARB = 34030;

const int GL_TEXTURE_COMPRESSION_HINT_ARB = 34031;

const int GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 34464;

const int GL_TEXTURE_COMPRESSED_ARB = 34465;

const int GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 34466;

const int GL_COMPRESSED_TEXTURE_FORMATS_ARB = 34467;

const int GL_ARB_texture_compression_bptc = 1;

const int GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 36492;

const int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 36493;

const int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 36494;

const int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 36495;

const int GL_ARB_texture_compression_rgtc = 1;

const int GL_ARB_texture_cube_map = 1;

const int GL_NORMAL_MAP_ARB = 34065;

const int GL_REFLECTION_MAP_ARB = 34066;

const int GL_TEXTURE_CUBE_MAP_ARB = 34067;

const int GL_TEXTURE_BINDING_CUBE_MAP_ARB = 34068;

const int GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 34069;

const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 34070;

const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 34071;

const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 34072;

const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 34073;

const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 34074;

const int GL_PROXY_TEXTURE_CUBE_MAP_ARB = 34075;

const int GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 34076;

const int GL_ARB_texture_cube_map_array = 1;

const int GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 36873;

const int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 36874;

const int GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 36875;

const int GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 36876;

const int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 36877;

const int GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 36878;

const int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 36879;

const int GL_ARB_texture_env_add = 1;

const int GL_ARB_texture_env_combine = 1;

const int GL_COMBINE_ARB = 34160;

const int GL_COMBINE_RGB_ARB = 34161;

const int GL_COMBINE_ALPHA_ARB = 34162;

const int GL_SOURCE0_RGB_ARB = 34176;

const int GL_SOURCE1_RGB_ARB = 34177;

const int GL_SOURCE2_RGB_ARB = 34178;

const int GL_SOURCE0_ALPHA_ARB = 34184;

const int GL_SOURCE1_ALPHA_ARB = 34185;

const int GL_SOURCE2_ALPHA_ARB = 34186;

const int GL_OPERAND0_RGB_ARB = 34192;

const int GL_OPERAND1_RGB_ARB = 34193;

const int GL_OPERAND2_RGB_ARB = 34194;

const int GL_OPERAND0_ALPHA_ARB = 34200;

const int GL_OPERAND1_ALPHA_ARB = 34201;

const int GL_OPERAND2_ALPHA_ARB = 34202;

const int GL_RGB_SCALE_ARB = 34163;

const int GL_ADD_SIGNED_ARB = 34164;

const int GL_INTERPOLATE_ARB = 34165;

const int GL_SUBTRACT_ARB = 34023;

const int GL_CONSTANT_ARB = 34166;

const int GL_PRIMARY_COLOR_ARB = 34167;

const int GL_PREVIOUS_ARB = 34168;

const int GL_ARB_texture_env_crossbar = 1;

const int GL_ARB_texture_env_dot3 = 1;

const int GL_DOT3_RGB_ARB = 34478;

const int GL_DOT3_RGBA_ARB = 34479;

const int GL_ARB_texture_float = 1;

const int GL_TEXTURE_RED_TYPE_ARB = 35856;

const int GL_TEXTURE_GREEN_TYPE_ARB = 35857;

const int GL_TEXTURE_BLUE_TYPE_ARB = 35858;

const int GL_TEXTURE_ALPHA_TYPE_ARB = 35859;

const int GL_TEXTURE_LUMINANCE_TYPE_ARB = 35860;

const int GL_TEXTURE_INTENSITY_TYPE_ARB = 35861;

const int GL_TEXTURE_DEPTH_TYPE_ARB = 35862;

const int GL_UNSIGNED_NORMALIZED_ARB = 35863;

const int GL_RGBA32F_ARB = 34836;

const int GL_RGB32F_ARB = 34837;

const int GL_ALPHA32F_ARB = 34838;

const int GL_INTENSITY32F_ARB = 34839;

const int GL_LUMINANCE32F_ARB = 34840;

const int GL_LUMINANCE_ALPHA32F_ARB = 34841;

const int GL_RGBA16F_ARB = 34842;

const int GL_RGB16F_ARB = 34843;

const int GL_ALPHA16F_ARB = 34844;

const int GL_INTENSITY16F_ARB = 34845;

const int GL_LUMINANCE16F_ARB = 34846;

const int GL_LUMINANCE_ALPHA16F_ARB = 34847;

const int GL_ARB_texture_gather = 1;

const int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 36446;

const int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 36447;

const int GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 36767;

const int GL_ARB_texture_mirror_clamp_to_edge = 1;

const int GL_ARB_texture_mirrored_repeat = 1;

const int GL_MIRRORED_REPEAT_ARB = 33648;

const int GL_ARB_texture_multisample = 1;

const int GL_ARB_texture_non_power_of_two = 1;

const int GL_ARB_texture_query_levels = 1;

const int GL_ARB_texture_query_lod = 1;

const int GL_ARB_texture_rectangle = 1;

const int GL_TEXTURE_RECTANGLE_ARB = 34037;

const int GL_TEXTURE_BINDING_RECTANGLE_ARB = 34038;

const int GL_PROXY_TEXTURE_RECTANGLE_ARB = 34039;

const int GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 34040;

const int GL_ARB_texture_rg = 1;

const int GL_ARB_texture_rgb10_a2ui = 1;

const int GL_ARB_texture_stencil8 = 1;

const int GL_ARB_texture_storage = 1;

const int GL_ARB_texture_storage_multisample = 1;

const int GL_ARB_texture_swizzle = 1;

const int GL_ARB_texture_view = 1;

const int GL_ARB_timer_query = 1;

const int GL_ARB_transform_feedback2 = 1;

const int GL_TRANSFORM_FEEDBACK_PAUSED = 36387;

const int GL_TRANSFORM_FEEDBACK_ACTIVE = 36388;

const int GL_ARB_transform_feedback3 = 1;

const int GL_ARB_transform_feedback_instanced = 1;

const int GL_ARB_transpose_matrix = 1;

const int GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 34019;

const int GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 34020;

const int GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 34021;

const int GL_TRANSPOSE_COLOR_MATRIX_ARB = 34022;

const int GL_ARB_uniform_buffer_object = 1;

const int GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 35372;

const int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 35378;

const int GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 35397;

const int GL_ARB_vertex_array_bgra = 1;

const int GL_ARB_vertex_array_object = 1;

const int GL_ARB_vertex_attrib_64bit = 1;

const int GL_ARB_vertex_attrib_binding = 1;

const int GL_ARB_vertex_blend = 1;

const int GL_MAX_VERTEX_UNITS_ARB = 34468;

const int GL_ACTIVE_VERTEX_UNITS_ARB = 34469;

const int GL_WEIGHT_SUM_UNITY_ARB = 34470;

const int GL_VERTEX_BLEND_ARB = 34471;

const int GL_CURRENT_WEIGHT_ARB = 34472;

const int GL_WEIGHT_ARRAY_TYPE_ARB = 34473;

const int GL_WEIGHT_ARRAY_STRIDE_ARB = 34474;

const int GL_WEIGHT_ARRAY_SIZE_ARB = 34475;

const int GL_WEIGHT_ARRAY_POINTER_ARB = 34476;

const int GL_WEIGHT_ARRAY_ARB = 34477;

const int GL_MODELVIEW0_ARB = 5888;

const int GL_MODELVIEW1_ARB = 34058;

const int GL_MODELVIEW2_ARB = 34594;

const int GL_MODELVIEW3_ARB = 34595;

const int GL_MODELVIEW4_ARB = 34596;

const int GL_MODELVIEW5_ARB = 34597;

const int GL_MODELVIEW6_ARB = 34598;

const int GL_MODELVIEW7_ARB = 34599;

const int GL_MODELVIEW8_ARB = 34600;

const int GL_MODELVIEW9_ARB = 34601;

const int GL_MODELVIEW10_ARB = 34602;

const int GL_MODELVIEW11_ARB = 34603;

const int GL_MODELVIEW12_ARB = 34604;

const int GL_MODELVIEW13_ARB = 34605;

const int GL_MODELVIEW14_ARB = 34606;

const int GL_MODELVIEW15_ARB = 34607;

const int GL_MODELVIEW16_ARB = 34608;

const int GL_MODELVIEW17_ARB = 34609;

const int GL_MODELVIEW18_ARB = 34610;

const int GL_MODELVIEW19_ARB = 34611;

const int GL_MODELVIEW20_ARB = 34612;

const int GL_MODELVIEW21_ARB = 34613;

const int GL_MODELVIEW22_ARB = 34614;

const int GL_MODELVIEW23_ARB = 34615;

const int GL_MODELVIEW24_ARB = 34616;

const int GL_MODELVIEW25_ARB = 34617;

const int GL_MODELVIEW26_ARB = 34618;

const int GL_MODELVIEW27_ARB = 34619;

const int GL_MODELVIEW28_ARB = 34620;

const int GL_MODELVIEW29_ARB = 34621;

const int GL_MODELVIEW30_ARB = 34622;

const int GL_MODELVIEW31_ARB = 34623;

const int GL_ARB_vertex_buffer_object = 1;

const int GL_BUFFER_SIZE_ARB = 34660;

const int GL_BUFFER_USAGE_ARB = 34661;

const int GL_ARRAY_BUFFER_ARB = 34962;

const int GL_ELEMENT_ARRAY_BUFFER_ARB = 34963;

const int GL_ARRAY_BUFFER_BINDING_ARB = 34964;

const int GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 34965;

const int GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 34966;

const int GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 34967;

const int GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 34968;

const int GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 34969;

const int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 34970;

const int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 34971;

const int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 34972;

const int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 34973;

const int GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 34974;

const int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 34975;

const int GL_READ_ONLY_ARB = 35000;

const int GL_WRITE_ONLY_ARB = 35001;

const int GL_READ_WRITE_ARB = 35002;

const int GL_BUFFER_ACCESS_ARB = 35003;

const int GL_BUFFER_MAPPED_ARB = 35004;

const int GL_BUFFER_MAP_POINTER_ARB = 35005;

const int GL_STREAM_DRAW_ARB = 35040;

const int GL_STREAM_READ_ARB = 35041;

const int GL_STREAM_COPY_ARB = 35042;

const int GL_STATIC_DRAW_ARB = 35044;

const int GL_STATIC_READ_ARB = 35045;

const int GL_STATIC_COPY_ARB = 35046;

const int GL_DYNAMIC_DRAW_ARB = 35048;

const int GL_DYNAMIC_READ_ARB = 35049;

const int GL_DYNAMIC_COPY_ARB = 35050;

const int GL_ARB_vertex_program = 1;

const int GL_COLOR_SUM_ARB = 33880;

const int GL_VERTEX_PROGRAM_ARB = 34336;

const int GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 34338;

const int GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 34339;

const int GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 34340;

const int GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 34341;

const int GL_CURRENT_VERTEX_ATTRIB_ARB = 34342;

const int GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 34370;

const int GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 34371;

const int GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 34373;

const int GL_MAX_VERTEX_ATTRIBS_ARB = 34921;

const int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 34922;

const int GL_PROGRAM_ADDRESS_REGISTERS_ARB = 34992;

const int GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 34993;

const int GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34994;

const int GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34995;

const int GL_ARB_vertex_shader = 1;

const int GL_VERTEX_SHADER_ARB = 35633;

const int GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 35658;

const int GL_MAX_VARYING_FLOATS_ARB = 35659;

const int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 35660;

const int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 35661;

const int GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 35721;

const int GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 35722;

const int GL_ARB_vertex_type_10f_11f_11f_rev = 1;

const int GL_ARB_vertex_type_2_10_10_10_rev = 1;

const int GL_ARB_viewport_array = 1;

const int GL_ARB_window_pos = 1;

const int GL_KHR_texture_compression_astc_hdr = 1;

const int GL_OES_byte_coordinates = 1;

const int GL_OES_fixed_point = 1;

const int GL_FIXED_OES = 5132;

const int GL_OES_query_matrix = 1;

const int GL_OES_read_format = 1;

const int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 35738;

const int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 35739;

const int GL_OES_single_precision = 1;

const int GL_3DFX_multisample = 1;

const int GL_MULTISAMPLE_3DFX = 34482;

const int GL_SAMPLE_BUFFERS_3DFX = 34483;

const int GL_SAMPLES_3DFX = 34484;

const int GL_MULTISAMPLE_BIT_3DFX = 536870912;

const int GL_3DFX_tbuffer = 1;

const int GL_3DFX_texture_compression_FXT1 = 1;

const int GL_COMPRESSED_RGB_FXT1_3DFX = 34480;

const int GL_COMPRESSED_RGBA_FXT1_3DFX = 34481;

const int GL_AMD_blend_minmax_factor = 1;

const int GL_FACTOR_MIN_AMD = 36892;

const int GL_FACTOR_MAX_AMD = 36893;

const int GL_AMD_conservative_depth = 1;

const int GL_AMD_debug_output = 1;

const int GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 37187;

const int GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 37188;

const int GL_DEBUG_LOGGED_MESSAGES_AMD = 37189;

const int GL_DEBUG_SEVERITY_HIGH_AMD = 37190;

const int GL_DEBUG_SEVERITY_MEDIUM_AMD = 37191;

const int GL_DEBUG_SEVERITY_LOW_AMD = 37192;

const int GL_DEBUG_CATEGORY_API_ERROR_AMD = 37193;

const int GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 37194;

const int GL_DEBUG_CATEGORY_DEPRECATION_AMD = 37195;

const int GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 37196;

const int GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 37197;

const int GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 37198;

const int GL_DEBUG_CATEGORY_APPLICATION_AMD = 37199;

const int GL_DEBUG_CATEGORY_OTHER_AMD = 37200;

const int GL_AMD_depth_clamp_separate = 1;

const int GL_DEPTH_CLAMP_NEAR_AMD = 36894;

const int GL_DEPTH_CLAMP_FAR_AMD = 36895;

const int GL_AMD_draw_buffers_blend = 1;

const int GL_AMD_gcn_shader = 1;

const int GL_AMD_gpu_shader_int64 = 1;

const int GL_INT64_NV = 5134;

const int GL_UNSIGNED_INT64_NV = 5135;

const int GL_INT8_NV = 36832;

const int GL_INT8_VEC2_NV = 36833;

const int GL_INT8_VEC3_NV = 36834;

const int GL_INT8_VEC4_NV = 36835;

const int GL_INT16_NV = 36836;

const int GL_INT16_VEC2_NV = 36837;

const int GL_INT16_VEC3_NV = 36838;

const int GL_INT16_VEC4_NV = 36839;

const int GL_INT64_VEC2_NV = 36841;

const int GL_INT64_VEC3_NV = 36842;

const int GL_INT64_VEC4_NV = 36843;

const int GL_UNSIGNED_INT8_NV = 36844;

const int GL_UNSIGNED_INT8_VEC2_NV = 36845;

const int GL_UNSIGNED_INT8_VEC3_NV = 36846;

const int GL_UNSIGNED_INT8_VEC4_NV = 36847;

const int GL_UNSIGNED_INT16_NV = 36848;

const int GL_UNSIGNED_INT16_VEC2_NV = 36849;

const int GL_UNSIGNED_INT16_VEC3_NV = 36850;

const int GL_UNSIGNED_INT16_VEC4_NV = 36851;

const int GL_UNSIGNED_INT64_VEC2_NV = 36853;

const int GL_UNSIGNED_INT64_VEC3_NV = 36854;

const int GL_UNSIGNED_INT64_VEC4_NV = 36855;

const int GL_FLOAT16_NV = 36856;

const int GL_FLOAT16_VEC2_NV = 36857;

const int GL_FLOAT16_VEC3_NV = 36858;

const int GL_FLOAT16_VEC4_NV = 36859;

const int GL_AMD_interleaved_elements = 1;

const int GL_VERTEX_ELEMENT_SWIZZLE_AMD = 37284;

const int GL_VERTEX_ID_SWIZZLE_AMD = 37285;

const int GL_AMD_multi_draw_indirect = 1;

const int GL_AMD_name_gen_delete = 1;

const int GL_DATA_BUFFER_AMD = 37201;

const int GL_PERFORMANCE_MONITOR_AMD = 37202;

const int GL_QUERY_OBJECT_AMD = 37203;

const int GL_VERTEX_ARRAY_OBJECT_AMD = 37204;

const int GL_SAMPLER_OBJECT_AMD = 37205;

const int GL_AMD_occlusion_query_event = 1;

const int GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 34639;

const int GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 1;

const int GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 2;

const int GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 4;

const int GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 8;

const int GL_QUERY_ALL_EVENT_BITS_AMD = 4294967295;

const int GL_AMD_pinned_memory = 1;

const int GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 37216;

const int GL_AMD_query_buffer_object = 1;

const int GL_QUERY_BUFFER_AMD = 37266;

const int GL_QUERY_BUFFER_BINDING_AMD = 37267;

const int GL_QUERY_RESULT_NO_WAIT_AMD = 37268;

const int GL_AMD_sample_positions = 1;

const int GL_SUBSAMPLE_DISTANCE_AMD = 34879;

const int GL_AMD_seamless_cubemap_per_texture = 1;

const int GL_AMD_shader_atomic_counter_ops = 1;

const int GL_AMD_shader_stencil_export = 1;

const int GL_AMD_shader_trinary_minmax = 1;

const int GL_AMD_sparse_texture = 1;

const int GL_VIRTUAL_PAGE_SIZE_X_AMD = 37269;

const int GL_VIRTUAL_PAGE_SIZE_Y_AMD = 37270;

const int GL_VIRTUAL_PAGE_SIZE_Z_AMD = 37271;

const int GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 37272;

const int GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 37273;

const int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 37274;

const int GL_MIN_SPARSE_LEVEL_AMD = 37275;

const int GL_MIN_LOD_WARNING_AMD = 37276;

const int GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 1;

const int GL_AMD_stencil_operation_extended = 1;

const int GL_SET_AMD = 34634;

const int GL_REPLACE_VALUE_AMD = 34635;

const int GL_STENCIL_OP_VALUE_AMD = 34636;

const int GL_STENCIL_BACK_OP_VALUE_AMD = 34637;

const int GL_AMD_texture_texture4 = 1;

const int GL_AMD_transform_feedback3_lines_triangles = 1;

const int GL_AMD_transform_feedback4 = 1;

const int GL_STREAM_RASTERIZATION_AMD = 37280;

const int GL_AMD_vertex_shader_layer = 1;

const int GL_AMD_vertex_shader_tessellator = 1;

const int GL_SAMPLER_BUFFER_AMD = 36865;

const int GL_INT_SAMPLER_BUFFER_AMD = 36866;

const int GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 36867;

const int GL_TESSELLATION_MODE_AMD = 36868;

const int GL_TESSELLATION_FACTOR_AMD = 36869;

const int GL_DISCRETE_AMD = 36870;

const int GL_CONTINUOUS_AMD = 36871;

const int GL_AMD_vertex_shader_viewport_index = 1;

const int GL_APPLE_aux_depth_stencil = 1;

const int GL_AUX_DEPTH_STENCIL_APPLE = 35348;

const int GL_APPLE_client_storage = 1;

const int GL_UNPACK_CLIENT_STORAGE_APPLE = 34226;

const int GL_APPLE_element_array = 1;

const int GL_ELEMENT_ARRAY_APPLE = 35340;

const int GL_ELEMENT_ARRAY_TYPE_APPLE = 35341;

const int GL_ELEMENT_ARRAY_POINTER_APPLE = 35342;

const int GL_APPLE_fence = 1;

const int GL_DRAW_PIXELS_APPLE = 35338;

const int GL_FENCE_APPLE = 35339;

const int GL_APPLE_float_pixels = 1;

const int GL_HALF_APPLE = 5131;

const int GL_RGBA_FLOAT32_APPLE = 34836;

const int GL_RGB_FLOAT32_APPLE = 34837;

const int GL_ALPHA_FLOAT32_APPLE = 34838;

const int GL_INTENSITY_FLOAT32_APPLE = 34839;

const int GL_LUMINANCE_FLOAT32_APPLE = 34840;

const int GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 34841;

const int GL_RGBA_FLOAT16_APPLE = 34842;

const int GL_RGB_FLOAT16_APPLE = 34843;

const int GL_ALPHA_FLOAT16_APPLE = 34844;

const int GL_INTENSITY_FLOAT16_APPLE = 34845;

const int GL_LUMINANCE_FLOAT16_APPLE = 34846;

const int GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 34847;

const int GL_COLOR_FLOAT_APPLE = 35343;

const int GL_APPLE_flush_buffer_range = 1;

const int GL_BUFFER_SERIALIZED_MODIFY_APPLE = 35346;

const int GL_BUFFER_FLUSHING_UNMAP_APPLE = 35347;

const int GL_APPLE_object_purgeable = 1;

const int GL_BUFFER_OBJECT_APPLE = 34227;

const int GL_RELEASED_APPLE = 35353;

const int GL_VOLATILE_APPLE = 35354;

const int GL_RETAINED_APPLE = 35355;

const int GL_UNDEFINED_APPLE = 35356;

const int GL_PURGEABLE_APPLE = 35357;

const int GL_APPLE_row_bytes = 1;

const int GL_PACK_ROW_BYTES_APPLE = 35349;

const int GL_UNPACK_ROW_BYTES_APPLE = 35350;

const int GL_APPLE_specular_vector = 1;

const int GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 34224;

const int GL_APPLE_texture_range = 1;

const int GL_TEXTURE_RANGE_LENGTH_APPLE = 34231;

const int GL_TEXTURE_RANGE_POINTER_APPLE = 34232;

const int GL_TEXTURE_STORAGE_HINT_APPLE = 34236;

const int GL_STORAGE_PRIVATE_APPLE = 34237;

const int GL_STORAGE_CACHED_APPLE = 34238;

const int GL_STORAGE_SHARED_APPLE = 34239;

const int GL_APPLE_transform_hint = 1;

const int GL_TRANSFORM_HINT_APPLE = 34225;

const int GL_APPLE_vertex_array_object = 1;

const int GL_VERTEX_ARRAY_BINDING_APPLE = 34229;

const int GL_APPLE_vertex_array_range = 1;

const int GL_VERTEX_ARRAY_RANGE_APPLE = 34077;

const int GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 34078;

const int GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 34079;

const int GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 34081;

const int GL_STORAGE_CLIENT_APPLE = 34228;

const int GL_APPLE_vertex_program_evaluators = 1;

const int GL_VERTEX_ATTRIB_MAP1_APPLE = 35328;

const int GL_VERTEX_ATTRIB_MAP2_APPLE = 35329;

const int GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 35330;

const int GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 35331;

const int GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 35332;

const int GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 35333;

const int GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 35334;

const int GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 35335;

const int GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 35336;

const int GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 35337;

const int GL_APPLE_ycbcr_422 = 1;

const int GL_YCBCR_422_APPLE = 34233;

const int GL_ATI_draw_buffers = 1;

const int GL_MAX_DRAW_BUFFERS_ATI = 34852;

const int GL_DRAW_BUFFER0_ATI = 34853;

const int GL_DRAW_BUFFER1_ATI = 34854;

const int GL_DRAW_BUFFER2_ATI = 34855;

const int GL_DRAW_BUFFER3_ATI = 34856;

const int GL_DRAW_BUFFER4_ATI = 34857;

const int GL_DRAW_BUFFER5_ATI = 34858;

const int GL_DRAW_BUFFER6_ATI = 34859;

const int GL_DRAW_BUFFER7_ATI = 34860;

const int GL_DRAW_BUFFER8_ATI = 34861;

const int GL_DRAW_BUFFER9_ATI = 34862;

const int GL_DRAW_BUFFER10_ATI = 34863;

const int GL_DRAW_BUFFER11_ATI = 34864;

const int GL_DRAW_BUFFER12_ATI = 34865;

const int GL_DRAW_BUFFER13_ATI = 34866;

const int GL_DRAW_BUFFER14_ATI = 34867;

const int GL_DRAW_BUFFER15_ATI = 34868;

const int GL_ATI_element_array = 1;

const int GL_ELEMENT_ARRAY_ATI = 34664;

const int GL_ELEMENT_ARRAY_TYPE_ATI = 34665;

const int GL_ELEMENT_ARRAY_POINTER_ATI = 34666;

const int GL_ATI_envmap_bumpmap = 1;

const int GL_BUMP_ROT_MATRIX_ATI = 34677;

const int GL_BUMP_ROT_MATRIX_SIZE_ATI = 34678;

const int GL_BUMP_NUM_TEX_UNITS_ATI = 34679;

const int GL_BUMP_TEX_UNITS_ATI = 34680;

const int GL_DUDV_ATI = 34681;

const int GL_DU8DV8_ATI = 34682;

const int GL_BUMP_ENVMAP_ATI = 34683;

const int GL_BUMP_TARGET_ATI = 34684;

const int GL_ATI_fragment_shader = 1;

const int GL_FRAGMENT_SHADER_ATI = 35104;

const int GL_REG_0_ATI = 35105;

const int GL_REG_1_ATI = 35106;

const int GL_REG_2_ATI = 35107;

const int GL_REG_3_ATI = 35108;

const int GL_REG_4_ATI = 35109;

const int GL_REG_5_ATI = 35110;

const int GL_REG_6_ATI = 35111;

const int GL_REG_7_ATI = 35112;

const int GL_REG_8_ATI = 35113;

const int GL_REG_9_ATI = 35114;

const int GL_REG_10_ATI = 35115;

const int GL_REG_11_ATI = 35116;

const int GL_REG_12_ATI = 35117;

const int GL_REG_13_ATI = 35118;

const int GL_REG_14_ATI = 35119;

const int GL_REG_15_ATI = 35120;

const int GL_REG_16_ATI = 35121;

const int GL_REG_17_ATI = 35122;

const int GL_REG_18_ATI = 35123;

const int GL_REG_19_ATI = 35124;

const int GL_REG_20_ATI = 35125;

const int GL_REG_21_ATI = 35126;

const int GL_REG_22_ATI = 35127;

const int GL_REG_23_ATI = 35128;

const int GL_REG_24_ATI = 35129;

const int GL_REG_25_ATI = 35130;

const int GL_REG_26_ATI = 35131;

const int GL_REG_27_ATI = 35132;

const int GL_REG_28_ATI = 35133;

const int GL_REG_29_ATI = 35134;

const int GL_REG_30_ATI = 35135;

const int GL_REG_31_ATI = 35136;

const int GL_CON_0_ATI = 35137;

const int GL_CON_1_ATI = 35138;

const int GL_CON_2_ATI = 35139;

const int GL_CON_3_ATI = 35140;

const int GL_CON_4_ATI = 35141;

const int GL_CON_5_ATI = 35142;

const int GL_CON_6_ATI = 35143;

const int GL_CON_7_ATI = 35144;

const int GL_CON_8_ATI = 35145;

const int GL_CON_9_ATI = 35146;

const int GL_CON_10_ATI = 35147;

const int GL_CON_11_ATI = 35148;

const int GL_CON_12_ATI = 35149;

const int GL_CON_13_ATI = 35150;

const int GL_CON_14_ATI = 35151;

const int GL_CON_15_ATI = 35152;

const int GL_CON_16_ATI = 35153;

const int GL_CON_17_ATI = 35154;

const int GL_CON_18_ATI = 35155;

const int GL_CON_19_ATI = 35156;

const int GL_CON_20_ATI = 35157;

const int GL_CON_21_ATI = 35158;

const int GL_CON_22_ATI = 35159;

const int GL_CON_23_ATI = 35160;

const int GL_CON_24_ATI = 35161;

const int GL_CON_25_ATI = 35162;

const int GL_CON_26_ATI = 35163;

const int GL_CON_27_ATI = 35164;

const int GL_CON_28_ATI = 35165;

const int GL_CON_29_ATI = 35166;

const int GL_CON_30_ATI = 35167;

const int GL_CON_31_ATI = 35168;

const int GL_MOV_ATI = 35169;

const int GL_ADD_ATI = 35171;

const int GL_MUL_ATI = 35172;

const int GL_SUB_ATI = 35173;

const int GL_DOT3_ATI = 35174;

const int GL_DOT4_ATI = 35175;

const int GL_MAD_ATI = 35176;

const int GL_LERP_ATI = 35177;

const int GL_CND_ATI = 35178;

const int GL_CND0_ATI = 35179;

const int GL_DOT2_ADD_ATI = 35180;

const int GL_SECONDARY_INTERPOLATOR_ATI = 35181;

const int GL_NUM_FRAGMENT_REGISTERS_ATI = 35182;

const int GL_NUM_FRAGMENT_CONSTANTS_ATI = 35183;

const int GL_NUM_PASSES_ATI = 35184;

const int GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 35185;

const int GL_NUM_INSTRUCTIONS_TOTAL_ATI = 35186;

const int GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 35187;

const int GL_NUM_LOOPBACK_COMPONENTS_ATI = 35188;

const int GL_COLOR_ALPHA_PAIRING_ATI = 35189;

const int GL_SWIZZLE_STR_ATI = 35190;

const int GL_SWIZZLE_STQ_ATI = 35191;

const int GL_SWIZZLE_STR_DR_ATI = 35192;

const int GL_SWIZZLE_STQ_DQ_ATI = 35193;

const int GL_SWIZZLE_STRQ_ATI = 35194;

const int GL_SWIZZLE_STRQ_DQ_ATI = 35195;

const int GL_RED_BIT_ATI = 1;

const int GL_GREEN_BIT_ATI = 2;

const int GL_BLUE_BIT_ATI = 4;

const int GL_2X_BIT_ATI = 1;

const int GL_4X_BIT_ATI = 2;

const int GL_8X_BIT_ATI = 4;

const int GL_HALF_BIT_ATI = 8;

const int GL_QUARTER_BIT_ATI = 16;

const int GL_EIGHTH_BIT_ATI = 32;

const int GL_SATURATE_BIT_ATI = 64;

const int GL_COMP_BIT_ATI = 2;

const int GL_NEGATE_BIT_ATI = 4;

const int GL_BIAS_BIT_ATI = 8;

const int GL_ATI_map_object_buffer = 1;

const int GL_ATI_meminfo = 1;

const int GL_VBO_FREE_MEMORY_ATI = 34811;

const int GL_TEXTURE_FREE_MEMORY_ATI = 34812;

const int GL_RENDERBUFFER_FREE_MEMORY_ATI = 34813;

const int GL_ATI_pixel_format_float = 1;

const int GL_RGBA_FLOAT_MODE_ATI = 34848;

const int GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 34869;

const int GL_ATI_pn_triangles = 1;

const int GL_PN_TRIANGLES_ATI = 34800;

const int GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34801;

const int GL_PN_TRIANGLES_POINT_MODE_ATI = 34802;

const int GL_PN_TRIANGLES_NORMAL_MODE_ATI = 34803;

const int GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34804;

const int GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 34805;

const int GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 34806;

const int GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 34807;

const int GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 34808;

const int GL_ATI_separate_stencil = 1;

const int GL_STENCIL_BACK_FUNC_ATI = 34816;

const int GL_STENCIL_BACK_FAIL_ATI = 34817;

const int GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 34818;

const int GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 34819;

const int GL_ATI_text_fragment_shader = 1;

const int GL_TEXT_FRAGMENT_SHADER_ATI = 33280;

const int GL_ATI_texture_env_combine3 = 1;

const int GL_MODULATE_ADD_ATI = 34628;

const int GL_MODULATE_SIGNED_ADD_ATI = 34629;

const int GL_MODULATE_SUBTRACT_ATI = 34630;

const int GL_ATI_texture_float = 1;

const int GL_RGBA_FLOAT32_ATI = 34836;

const int GL_RGB_FLOAT32_ATI = 34837;

const int GL_ALPHA_FLOAT32_ATI = 34838;

const int GL_INTENSITY_FLOAT32_ATI = 34839;

const int GL_LUMINANCE_FLOAT32_ATI = 34840;

const int GL_LUMINANCE_ALPHA_FLOAT32_ATI = 34841;

const int GL_RGBA_FLOAT16_ATI = 34842;

const int GL_RGB_FLOAT16_ATI = 34843;

const int GL_ALPHA_FLOAT16_ATI = 34844;

const int GL_INTENSITY_FLOAT16_ATI = 34845;

const int GL_LUMINANCE_FLOAT16_ATI = 34846;

const int GL_LUMINANCE_ALPHA_FLOAT16_ATI = 34847;

const int GL_ATI_texture_mirror_once = 1;

const int GL_MIRROR_CLAMP_ATI = 34626;

const int GL_MIRROR_CLAMP_TO_EDGE_ATI = 34627;

const int GL_ATI_vertex_array_object = 1;

const int GL_STATIC_ATI = 34656;

const int GL_DYNAMIC_ATI = 34657;

const int GL_PRESERVE_ATI = 34658;

const int GL_DISCARD_ATI = 34659;

const int GL_OBJECT_BUFFER_SIZE_ATI = 34660;

const int GL_OBJECT_BUFFER_USAGE_ATI = 34661;

const int GL_ARRAY_OBJECT_BUFFER_ATI = 34662;

const int GL_ARRAY_OBJECT_OFFSET_ATI = 34663;

const int GL_ATI_vertex_attrib_array_object = 1;

const int GL_ATI_vertex_streams = 1;

const int GL_MAX_VERTEX_STREAMS_ATI = 34667;

const int GL_VERTEX_STREAM0_ATI = 34668;

const int GL_VERTEX_STREAM1_ATI = 34669;

const int GL_VERTEX_STREAM2_ATI = 34670;

const int GL_VERTEX_STREAM3_ATI = 34671;

const int GL_VERTEX_STREAM4_ATI = 34672;

const int GL_VERTEX_STREAM5_ATI = 34673;

const int GL_VERTEX_STREAM6_ATI = 34674;

const int GL_VERTEX_STREAM7_ATI = 34675;

const int GL_VERTEX_SOURCE_ATI = 34676;

const int GL_EXT_422_pixels = 1;

const int GL_422_EXT = 32972;

const int GL_422_REV_EXT = 32973;

const int GL_422_AVERAGE_EXT = 32974;

const int GL_422_REV_AVERAGE_EXT = 32975;

const int GL_EXT_abgr = 1;

const int GL_ABGR_EXT = 32768;

const int GL_EXT_bgra = 1;

const int GL_BGR_EXT = 32992;

const int GL_EXT_bindable_uniform = 1;

const int GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 36322;

const int GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 36323;

const int GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 36324;

const int GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 36333;

const int GL_UNIFORM_BUFFER_EXT = 36334;

const int GL_UNIFORM_BUFFER_BINDING_EXT = 36335;

const int GL_EXT_blend_color = 1;

const int GL_CONSTANT_COLOR_EXT = 32769;

const int GL_ONE_MINUS_CONSTANT_COLOR_EXT = 32770;

const int GL_CONSTANT_ALPHA_EXT = 32771;

const int GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 32772;

const int GL_BLEND_COLOR_EXT = 32773;

const int GL_EXT_blend_equation_separate = 1;

const int GL_BLEND_EQUATION_RGB_EXT = 32777;

const int GL_BLEND_EQUATION_ALPHA_EXT = 34877;

const int GL_EXT_blend_func_separate = 1;

const int GL_BLEND_DST_RGB_EXT = 32968;

const int GL_BLEND_SRC_RGB_EXT = 32969;

const int GL_BLEND_DST_ALPHA_EXT = 32970;

const int GL_BLEND_SRC_ALPHA_EXT = 32971;

const int GL_EXT_blend_logic_op = 1;

const int GL_EXT_blend_subtract = 1;

const int GL_FUNC_SUBTRACT_EXT = 32778;

const int GL_FUNC_REVERSE_SUBTRACT_EXT = 32779;

const int GL_EXT_clip_volume_hint = 1;

const int GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 33008;

const int GL_EXT_cmyka = 1;

const int GL_CMYK_EXT = 32780;

const int GL_CMYKA_EXT = 32781;

const int GL_PACK_CMYK_HINT_EXT = 32782;

const int GL_UNPACK_CMYK_HINT_EXT = 32783;

const int GL_EXT_color_subtable = 1;

const int GL_EXT_compiled_vertex_array = 1;

const int GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 33192;

const int GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 33193;

const int GL_EXT_convolution = 1;

const int GL_CONVOLUTION_1D_EXT = 32784;

const int GL_CONVOLUTION_2D_EXT = 32785;

const int GL_SEPARABLE_2D_EXT = 32786;

const int GL_CONVOLUTION_BORDER_MODE_EXT = 32787;

const int GL_CONVOLUTION_FILTER_SCALE_EXT = 32788;

const int GL_CONVOLUTION_FILTER_BIAS_EXT = 32789;

const int GL_REDUCE_EXT = 32790;

const int GL_CONVOLUTION_FORMAT_EXT = 32791;

const int GL_CONVOLUTION_WIDTH_EXT = 32792;

const int GL_CONVOLUTION_HEIGHT_EXT = 32793;

const int GL_MAX_CONVOLUTION_WIDTH_EXT = 32794;

const int GL_MAX_CONVOLUTION_HEIGHT_EXT = 32795;

const int GL_POST_CONVOLUTION_RED_SCALE_EXT = 32796;

const int GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 32797;

const int GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 32798;

const int GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 32799;

const int GL_POST_CONVOLUTION_RED_BIAS_EXT = 32800;

const int GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 32801;

const int GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 32802;

const int GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 32803;

const int GL_EXT_coordinate_frame = 1;

const int GL_TANGENT_ARRAY_EXT = 33849;

const int GL_BINORMAL_ARRAY_EXT = 33850;

const int GL_CURRENT_TANGENT_EXT = 33851;

const int GL_CURRENT_BINORMAL_EXT = 33852;

const int GL_TANGENT_ARRAY_TYPE_EXT = 33854;

const int GL_TANGENT_ARRAY_STRIDE_EXT = 33855;

const int GL_BINORMAL_ARRAY_TYPE_EXT = 33856;

const int GL_BINORMAL_ARRAY_STRIDE_EXT = 33857;

const int GL_TANGENT_ARRAY_POINTER_EXT = 33858;

const int GL_BINORMAL_ARRAY_POINTER_EXT = 33859;

const int GL_MAP1_TANGENT_EXT = 33860;

const int GL_MAP2_TANGENT_EXT = 33861;

const int GL_MAP1_BINORMAL_EXT = 33862;

const int GL_MAP2_BINORMAL_EXT = 33863;

const int GL_EXT_copy_texture = 1;

const int GL_EXT_cull_vertex = 1;

const int GL_CULL_VERTEX_EXT = 33194;

const int GL_CULL_VERTEX_EYE_POSITION_EXT = 33195;

const int GL_CULL_VERTEX_OBJECT_POSITION_EXT = 33196;

const int GL_EXT_depth_bounds_test = 1;

const int GL_DEPTH_BOUNDS_TEST_EXT = 34960;

const int GL_DEPTH_BOUNDS_EXT = 34961;

const int GL_EXT_direct_state_access = 1;

const int GL_PROGRAM_MATRIX_EXT = 36397;

const int GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 36398;

const int GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 36399;

const int GL_EXT_draw_buffers2 = 1;

const int GL_EXT_draw_instanced = 1;

const int GL_EXT_draw_range_elements = 1;

const int GL_MAX_ELEMENTS_VERTICES_EXT = 33000;

const int GL_MAX_ELEMENTS_INDICES_EXT = 33001;

const int GL_EXT_fog_coord = 1;

const int GL_FOG_COORDINATE_SOURCE_EXT = 33872;

const int GL_FOG_COORDINATE_EXT = 33873;

const int GL_FRAGMENT_DEPTH_EXT = 33874;

const int GL_CURRENT_FOG_COORDINATE_EXT = 33875;

const int GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 33876;

const int GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 33877;

const int GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 33878;

const int GL_FOG_COORDINATE_ARRAY_EXT = 33879;

const int GL_EXT_framebuffer_blit = 1;

const int GL_READ_FRAMEBUFFER_EXT = 36008;

const int GL_DRAW_FRAMEBUFFER_EXT = 36009;

const int GL_DRAW_FRAMEBUFFER_BINDING_EXT = 36006;

const int GL_READ_FRAMEBUFFER_BINDING_EXT = 36010;

const int GL_EXT_framebuffer_multisample = 1;

const int GL_EXT_framebuffer_multisample_blit_scaled = 1;

const int GL_SCALED_RESOLVE_FASTEST_EXT = 37050;

const int GL_SCALED_RESOLVE_NICEST_EXT = 37051;

const int GL_EXT_framebuffer_object = 1;

const int GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 1286;

const int GL_MAX_RENDERBUFFER_SIZE_EXT = 34024;

const int GL_FRAMEBUFFER_BINDING_EXT = 36006;

const int GL_RENDERBUFFER_BINDING_EXT = 36007;

const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 36048;

const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 36049;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 36050;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 36051;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 36052;

const int GL_FRAMEBUFFER_COMPLETE_EXT = 36053;

const int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 36054;

const int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 36055;

const int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 36057;

const int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 36058;

const int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 36059;

const int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 36060;

const int GL_FRAMEBUFFER_UNSUPPORTED_EXT = 36061;

const int GL_DEPTH_ATTACHMENT_EXT = 36096;

const int GL_STENCIL_ATTACHMENT_EXT = 36128;

const int GL_FRAMEBUFFER_EXT = 36160;

const int GL_RENDERBUFFER_EXT = 36161;

const int GL_RENDERBUFFER_WIDTH_EXT = 36162;

const int GL_RENDERBUFFER_HEIGHT_EXT = 36163;

const int GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 36164;

const int GL_STENCIL_INDEX1_EXT = 36166;

const int GL_STENCIL_INDEX4_EXT = 36167;

const int GL_STENCIL_INDEX8_EXT = 36168;

const int GL_STENCIL_INDEX16_EXT = 36169;

const int GL_RENDERBUFFER_RED_SIZE_EXT = 36176;

const int GL_RENDERBUFFER_GREEN_SIZE_EXT = 36177;

const int GL_RENDERBUFFER_BLUE_SIZE_EXT = 36178;

const int GL_RENDERBUFFER_ALPHA_SIZE_EXT = 36179;

const int GL_RENDERBUFFER_DEPTH_SIZE_EXT = 36180;

const int GL_RENDERBUFFER_STENCIL_SIZE_EXT = 36181;

const int GL_EXT_framebuffer_sRGB = 1;

const int GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 36282;

const int GL_EXT_geometry_shader4 = 1;

const int GL_GEOMETRY_SHADER_EXT = 36313;

const int GL_GEOMETRY_VERTICES_OUT_EXT = 36314;

const int GL_GEOMETRY_INPUT_TYPE_EXT = 36315;

const int GL_GEOMETRY_OUTPUT_TYPE_EXT = 36316;

const int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 35881;

const int GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 36317;

const int GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 36318;

const int GL_MAX_VARYING_COMPONENTS_EXT = 35659;

const int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 36319;

const int GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 36320;

const int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 36321;

const int GL_LINES_ADJACENCY_EXT = 10;

const int GL_LINE_STRIP_ADJACENCY_EXT = 11;

const int GL_TRIANGLES_ADJACENCY_EXT = 12;

const int GL_TRIANGLE_STRIP_ADJACENCY_EXT = 13;

const int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 36264;

const int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 36265;

const int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 36263;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 36052;

const int GL_PROGRAM_POINT_SIZE_EXT = 34370;

const int GL_EXT_gpu_program_parameters = 1;

const int GL_EXT_gpu_shader4 = 1;

const int GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 35069;

const int GL_SAMPLER_1D_ARRAY_EXT = 36288;

const int GL_SAMPLER_2D_ARRAY_EXT = 36289;

const int GL_SAMPLER_BUFFER_EXT = 36290;

const int GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 36291;

const int GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 36292;

const int GL_SAMPLER_CUBE_SHADOW_EXT = 36293;

const int GL_UNSIGNED_INT_VEC2_EXT = 36294;

const int GL_UNSIGNED_INT_VEC3_EXT = 36295;

const int GL_UNSIGNED_INT_VEC4_EXT = 36296;

const int GL_INT_SAMPLER_1D_EXT = 36297;

const int GL_INT_SAMPLER_2D_EXT = 36298;

const int GL_INT_SAMPLER_3D_EXT = 36299;

const int GL_INT_SAMPLER_CUBE_EXT = 36300;

const int GL_INT_SAMPLER_2D_RECT_EXT = 36301;

const int GL_INT_SAMPLER_1D_ARRAY_EXT = 36302;

const int GL_INT_SAMPLER_2D_ARRAY_EXT = 36303;

const int GL_INT_SAMPLER_BUFFER_EXT = 36304;

const int GL_UNSIGNED_INT_SAMPLER_1D_EXT = 36305;

const int GL_UNSIGNED_INT_SAMPLER_2D_EXT = 36306;

const int GL_UNSIGNED_INT_SAMPLER_3D_EXT = 36307;

const int GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 36308;

const int GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 36309;

const int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 36310;

const int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 36311;

const int GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 36312;

const int GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 35076;

const int GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 35077;

const int GL_EXT_histogram = 1;

const int GL_HISTOGRAM_EXT = 32804;

const int GL_PROXY_HISTOGRAM_EXT = 32805;

const int GL_HISTOGRAM_WIDTH_EXT = 32806;

const int GL_HISTOGRAM_FORMAT_EXT = 32807;

const int GL_HISTOGRAM_RED_SIZE_EXT = 32808;

const int GL_HISTOGRAM_GREEN_SIZE_EXT = 32809;

const int GL_HISTOGRAM_BLUE_SIZE_EXT = 32810;

const int GL_HISTOGRAM_ALPHA_SIZE_EXT = 32811;

const int GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 32812;

const int GL_HISTOGRAM_SINK_EXT = 32813;

const int GL_MINMAX_EXT = 32814;

const int GL_MINMAX_FORMAT_EXT = 32815;

const int GL_MINMAX_SINK_EXT = 32816;

const int GL_TABLE_TOO_LARGE_EXT = 32817;

const int GL_EXT_index_array_formats = 1;

const int GL_IUI_V2F_EXT = 33197;

const int GL_IUI_V3F_EXT = 33198;

const int GL_IUI_N3F_V2F_EXT = 33199;

const int GL_IUI_N3F_V3F_EXT = 33200;

const int GL_T2F_IUI_V2F_EXT = 33201;

const int GL_T2F_IUI_V3F_EXT = 33202;

const int GL_T2F_IUI_N3F_V2F_EXT = 33203;

const int GL_T2F_IUI_N3F_V3F_EXT = 33204;

const int GL_EXT_index_func = 1;

const int GL_INDEX_TEST_EXT = 33205;

const int GL_INDEX_TEST_FUNC_EXT = 33206;

const int GL_INDEX_TEST_REF_EXT = 33207;

const int GL_EXT_index_material = 1;

const int GL_INDEX_MATERIAL_EXT = 33208;

const int GL_INDEX_MATERIAL_PARAMETER_EXT = 33209;

const int GL_INDEX_MATERIAL_FACE_EXT = 33210;

const int GL_EXT_index_texture = 1;

const int GL_EXT_light_texture = 1;

const int GL_FRAGMENT_MATERIAL_EXT = 33609;

const int GL_FRAGMENT_NORMAL_EXT = 33610;

const int GL_FRAGMENT_COLOR_EXT = 33612;

const int GL_ATTENUATION_EXT = 33613;

const int GL_SHADOW_ATTENUATION_EXT = 33614;

const int GL_TEXTURE_APPLICATION_MODE_EXT = 33615;

const int GL_TEXTURE_LIGHT_EXT = 33616;

const int GL_TEXTURE_MATERIAL_FACE_EXT = 33617;

const int GL_TEXTURE_MATERIAL_PARAMETER_EXT = 33618;

const int GL_EXT_misc_attribute = 1;

const int GL_EXT_multisample = 1;

const int GL_MULTISAMPLE_EXT = 32925;

const int GL_SAMPLE_ALPHA_TO_MASK_EXT = 32926;

const int GL_SAMPLE_ALPHA_TO_ONE_EXT = 32927;

const int GL_SAMPLE_MASK_EXT = 32928;

const int GL_1PASS_EXT = 32929;

const int GL_2PASS_0_EXT = 32930;

const int GL_2PASS_1_EXT = 32931;

const int GL_4PASS_0_EXT = 32932;

const int GL_4PASS_1_EXT = 32933;

const int GL_4PASS_2_EXT = 32934;

const int GL_4PASS_3_EXT = 32935;

const int GL_SAMPLE_BUFFERS_EXT = 32936;

const int GL_SAMPLES_EXT = 32937;

const int GL_SAMPLE_MASK_VALUE_EXT = 32938;

const int GL_SAMPLE_MASK_INVERT_EXT = 32939;

const int GL_SAMPLE_PATTERN_EXT = 32940;

const int GL_MULTISAMPLE_BIT_EXT = 536870912;

const int GL_EXT_packed_depth_stencil = 1;

const int GL_DEPTH_STENCIL_EXT = 34041;

const int GL_UNSIGNED_INT_24_8_EXT = 34042;

const int GL_DEPTH24_STENCIL8_EXT = 35056;

const int GL_TEXTURE_STENCIL_SIZE_EXT = 35057;

const int GL_EXT_packed_float = 1;

const int GL_R11F_G11F_B10F_EXT = 35898;

const int GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 35899;

const int GL_RGBA_SIGNED_COMPONENTS_EXT = 35900;

const int GL_EXT_packed_pixels = 1;

const int GL_UNSIGNED_BYTE_3_3_2_EXT = 32818;

const int GL_UNSIGNED_SHORT_4_4_4_4_EXT = 32819;

const int GL_UNSIGNED_SHORT_5_5_5_1_EXT = 32820;

const int GL_UNSIGNED_INT_8_8_8_8_EXT = 32821;

const int GL_UNSIGNED_INT_10_10_10_2_EXT = 32822;

const int GL_EXT_paletted_texture = 1;

const int GL_COLOR_INDEX1_EXT = 32994;

const int GL_COLOR_INDEX2_EXT = 32995;

const int GL_COLOR_INDEX4_EXT = 32996;

const int GL_COLOR_INDEX8_EXT = 32997;

const int GL_COLOR_INDEX12_EXT = 32998;

const int GL_COLOR_INDEX16_EXT = 32999;

const int GL_TEXTURE_INDEX_SIZE_EXT = 33005;

const int GL_EXT_pixel_buffer_object = 1;

const int GL_PIXEL_PACK_BUFFER_EXT = 35051;

const int GL_PIXEL_UNPACK_BUFFER_EXT = 35052;

const int GL_PIXEL_PACK_BUFFER_BINDING_EXT = 35053;

const int GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 35055;

const int GL_EXT_pixel_transform = 1;

const int GL_PIXEL_TRANSFORM_2D_EXT = 33584;

const int GL_PIXEL_MAG_FILTER_EXT = 33585;

const int GL_PIXEL_MIN_FILTER_EXT = 33586;

const int GL_PIXEL_CUBIC_WEIGHT_EXT = 33587;

const int GL_CUBIC_EXT = 33588;

const int GL_AVERAGE_EXT = 33589;

const int GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33590;

const int GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33591;

const int GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 33592;

const int GL_EXT_pixel_transform_color_table = 1;

const int GL_EXT_point_parameters = 1;

const int GL_POINT_SIZE_MIN_EXT = 33062;

const int GL_POINT_SIZE_MAX_EXT = 33063;

const int GL_POINT_FADE_THRESHOLD_SIZE_EXT = 33064;

const int GL_DISTANCE_ATTENUATION_EXT = 33065;

const int GL_EXT_polygon_offset = 1;

const int GL_POLYGON_OFFSET_EXT = 32823;

const int GL_POLYGON_OFFSET_FACTOR_EXT = 32824;

const int GL_POLYGON_OFFSET_BIAS_EXT = 32825;

const int GL_EXT_provoking_vertex = 1;

const int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 36428;

const int GL_FIRST_VERTEX_CONVENTION_EXT = 36429;

const int GL_LAST_VERTEX_CONVENTION_EXT = 36430;

const int GL_PROVOKING_VERTEX_EXT = 36431;

const int GL_EXT_rescale_normal = 1;

const int GL_RESCALE_NORMAL_EXT = 32826;

const int GL_EXT_secondary_color = 1;

const int GL_COLOR_SUM_EXT = 33880;

const int GL_CURRENT_SECONDARY_COLOR_EXT = 33881;

const int GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 33882;

const int GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 33883;

const int GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 33884;

const int GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 33885;

const int GL_SECONDARY_COLOR_ARRAY_EXT = 33886;

const int GL_EXT_separate_specular_color = 1;

const int GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 33272;

const int GL_SINGLE_COLOR_EXT = 33273;

const int GL_SEPARATE_SPECULAR_COLOR_EXT = 33274;

const int GL_EXT_shader_image_load_formatted = 1;

const int GL_EXT_shader_image_load_store = 1;

const int GL_MAX_IMAGE_UNITS_EXT = 36664;

const int GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 36665;

const int GL_IMAGE_BINDING_NAME_EXT = 36666;

const int GL_IMAGE_BINDING_LEVEL_EXT = 36667;

const int GL_IMAGE_BINDING_LAYERED_EXT = 36668;

const int GL_IMAGE_BINDING_LAYER_EXT = 36669;

const int GL_IMAGE_BINDING_ACCESS_EXT = 36670;

const int GL_IMAGE_1D_EXT = 36940;

const int GL_IMAGE_2D_EXT = 36941;

const int GL_IMAGE_3D_EXT = 36942;

const int GL_IMAGE_2D_RECT_EXT = 36943;

const int GL_IMAGE_CUBE_EXT = 36944;

const int GL_IMAGE_BUFFER_EXT = 36945;

const int GL_IMAGE_1D_ARRAY_EXT = 36946;

const int GL_IMAGE_2D_ARRAY_EXT = 36947;

const int GL_IMAGE_CUBE_MAP_ARRAY_EXT = 36948;

const int GL_IMAGE_2D_MULTISAMPLE_EXT = 36949;

const int GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36950;

const int GL_INT_IMAGE_1D_EXT = 36951;

const int GL_INT_IMAGE_2D_EXT = 36952;

const int GL_INT_IMAGE_3D_EXT = 36953;

const int GL_INT_IMAGE_2D_RECT_EXT = 36954;

const int GL_INT_IMAGE_CUBE_EXT = 36955;

const int GL_INT_IMAGE_BUFFER_EXT = 36956;

const int GL_INT_IMAGE_1D_ARRAY_EXT = 36957;

const int GL_INT_IMAGE_2D_ARRAY_EXT = 36958;

const int GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36959;

const int GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 36960;

const int GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36961;

const int GL_UNSIGNED_INT_IMAGE_1D_EXT = 36962;

const int GL_UNSIGNED_INT_IMAGE_2D_EXT = 36963;

const int GL_UNSIGNED_INT_IMAGE_3D_EXT = 36964;

const int GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 36965;

const int GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 36966;

const int GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 36967;

const int GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 36968;

const int GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 36969;

const int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36970;

const int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 36971;

const int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36972;

const int GL_MAX_IMAGE_SAMPLES_EXT = 36973;

const int GL_IMAGE_BINDING_FORMAT_EXT = 36974;

const int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 1;

const int GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 2;

const int GL_UNIFORM_BARRIER_BIT_EXT = 4;

const int GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 8;

const int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 32;

const int GL_COMMAND_BARRIER_BIT_EXT = 64;

const int GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 128;

const int GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 256;

const int GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 512;

const int GL_FRAMEBUFFER_BARRIER_BIT_EXT = 1024;

const int GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 2048;

const int GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 4096;

const int GL_ALL_BARRIER_BITS_EXT = 4294967295;

const int GL_EXT_shader_integer_mix = 1;

const int GL_EXT_shadow_funcs = 1;

const int GL_EXT_shared_texture_palette = 1;

const int GL_SHARED_TEXTURE_PALETTE_EXT = 33275;

const int GL_EXT_stencil_clear_tag = 1;

const int GL_STENCIL_TAG_BITS_EXT = 35058;

const int GL_STENCIL_CLEAR_TAG_VALUE_EXT = 35059;

const int GL_EXT_stencil_two_side = 1;

const int GL_STENCIL_TEST_TWO_SIDE_EXT = 35088;

const int GL_ACTIVE_STENCIL_FACE_EXT = 35089;

const int GL_EXT_stencil_wrap = 1;

const int GL_INCR_WRAP_EXT = 34055;

const int GL_DECR_WRAP_EXT = 34056;

const int GL_EXT_subtexture = 1;

const int GL_EXT_texture = 1;

const int GL_ALPHA4_EXT = 32827;

const int GL_ALPHA12_EXT = 32829;

const int GL_ALPHA16_EXT = 32830;

const int GL_LUMINANCE4_EXT = 32831;

const int GL_LUMINANCE12_EXT = 32833;

const int GL_LUMINANCE16_EXT = 32834;

const int GL_LUMINANCE4_ALPHA4_EXT = 32835;

const int GL_LUMINANCE6_ALPHA2_EXT = 32836;

const int GL_LUMINANCE12_ALPHA4_EXT = 32838;

const int GL_LUMINANCE12_ALPHA12_EXT = 32839;

const int GL_LUMINANCE16_ALPHA16_EXT = 32840;

const int GL_INTENSITY_EXT = 32841;

const int GL_INTENSITY4_EXT = 32842;

const int GL_INTENSITY8_EXT = 32843;

const int GL_INTENSITY12_EXT = 32844;

const int GL_INTENSITY16_EXT = 32845;

const int GL_RGB2_EXT = 32846;

const int GL_RGB4_EXT = 32847;

const int GL_RGB5_EXT = 32848;

const int GL_RGB8_EXT = 32849;

const int GL_RGB12_EXT = 32851;

const int GL_RGB16_EXT = 32852;

const int GL_RGBA2_EXT = 32853;

const int GL_RGBA4_EXT = 32854;

const int GL_RGB5_A1_EXT = 32855;

const int GL_RGBA8_EXT = 32856;

const int GL_RGBA12_EXT = 32858;

const int GL_RGBA16_EXT = 32859;

const int GL_TEXTURE_RED_SIZE_EXT = 32860;

const int GL_TEXTURE_GREEN_SIZE_EXT = 32861;

const int GL_TEXTURE_BLUE_SIZE_EXT = 32862;

const int GL_TEXTURE_ALPHA_SIZE_EXT = 32863;

const int GL_TEXTURE_LUMINANCE_SIZE_EXT = 32864;

const int GL_TEXTURE_INTENSITY_SIZE_EXT = 32865;

const int GL_REPLACE_EXT = 32866;

const int GL_PROXY_TEXTURE_1D_EXT = 32867;

const int GL_PROXY_TEXTURE_2D_EXT = 32868;

const int GL_TEXTURE_TOO_LARGE_EXT = 32869;

const int GL_EXT_texture3D = 1;

const int GL_PACK_SKIP_IMAGES_EXT = 32875;

const int GL_PACK_IMAGE_HEIGHT_EXT = 32876;

const int GL_UNPACK_SKIP_IMAGES_EXT = 32877;

const int GL_UNPACK_IMAGE_HEIGHT_EXT = 32878;

const int GL_TEXTURE_3D_EXT = 32879;

const int GL_PROXY_TEXTURE_3D_EXT = 32880;

const int GL_TEXTURE_DEPTH_EXT = 32881;

const int GL_TEXTURE_WRAP_R_EXT = 32882;

const int GL_MAX_3D_TEXTURE_SIZE_EXT = 32883;

const int GL_EXT_texture_array = 1;

const int GL_TEXTURE_1D_ARRAY_EXT = 35864;

const int GL_PROXY_TEXTURE_1D_ARRAY_EXT = 35865;

const int GL_TEXTURE_2D_ARRAY_EXT = 35866;

const int GL_PROXY_TEXTURE_2D_ARRAY_EXT = 35867;

const int GL_TEXTURE_BINDING_1D_ARRAY_EXT = 35868;

const int GL_TEXTURE_BINDING_2D_ARRAY_EXT = 35869;

const int GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 35071;

const int GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 34894;

const int GL_EXT_texture_buffer_object = 1;

const int GL_TEXTURE_BUFFER_EXT = 35882;

const int GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 35883;

const int GL_TEXTURE_BINDING_BUFFER_EXT = 35884;

const int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 35885;

const int GL_TEXTURE_BUFFER_FORMAT_EXT = 35886;

const int GL_EXT_texture_compression_latc = 1;

const int GL_COMPRESSED_LUMINANCE_LATC1_EXT = 35952;

const int GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 35953;

const int GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 35954;

const int GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 35955;

const int GL_EXT_texture_compression_rgtc = 1;

const int GL_COMPRESSED_RED_RGTC1_EXT = 36283;

const int GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 36284;

const int GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 36285;

const int GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 36286;

const int GL_EXT_texture_compression_s3tc = 1;

const int GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778;

const int GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779;

const int GL_EXT_texture_cube_map = 1;

const int GL_NORMAL_MAP_EXT = 34065;

const int GL_REFLECTION_MAP_EXT = 34066;

const int GL_TEXTURE_CUBE_MAP_EXT = 34067;

const int GL_TEXTURE_BINDING_CUBE_MAP_EXT = 34068;

const int GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 34069;

const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 34070;

const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 34071;

const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 34072;

const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 34073;

const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 34074;

const int GL_PROXY_TEXTURE_CUBE_MAP_EXT = 34075;

const int GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 34076;

const int GL_EXT_texture_env_add = 1;

const int GL_EXT_texture_env_combine = 1;

const int GL_COMBINE_EXT = 34160;

const int GL_COMBINE_RGB_EXT = 34161;

const int GL_COMBINE_ALPHA_EXT = 34162;

const int GL_RGB_SCALE_EXT = 34163;

const int GL_ADD_SIGNED_EXT = 34164;

const int GL_INTERPOLATE_EXT = 34165;

const int GL_CONSTANT_EXT = 34166;

const int GL_PRIMARY_COLOR_EXT = 34167;

const int GL_PREVIOUS_EXT = 34168;

const int GL_SOURCE0_RGB_EXT = 34176;

const int GL_SOURCE1_RGB_EXT = 34177;

const int GL_SOURCE2_RGB_EXT = 34178;

const int GL_SOURCE0_ALPHA_EXT = 34184;

const int GL_SOURCE1_ALPHA_EXT = 34185;

const int GL_SOURCE2_ALPHA_EXT = 34186;

const int GL_OPERAND0_RGB_EXT = 34192;

const int GL_OPERAND1_RGB_EXT = 34193;

const int GL_OPERAND2_RGB_EXT = 34194;

const int GL_OPERAND0_ALPHA_EXT = 34200;

const int GL_OPERAND1_ALPHA_EXT = 34201;

const int GL_OPERAND2_ALPHA_EXT = 34202;

const int GL_EXT_texture_env_dot3 = 1;

const int GL_DOT3_RGB_EXT = 34624;

const int GL_DOT3_RGBA_EXT = 34625;

const int GL_EXT_texture_integer = 1;

const int GL_RGBA32UI_EXT = 36208;

const int GL_RGB32UI_EXT = 36209;

const int GL_ALPHA32UI_EXT = 36210;

const int GL_INTENSITY32UI_EXT = 36211;

const int GL_LUMINANCE32UI_EXT = 36212;

const int GL_LUMINANCE_ALPHA32UI_EXT = 36213;

const int GL_RGBA16UI_EXT = 36214;

const int GL_RGB16UI_EXT = 36215;

const int GL_ALPHA16UI_EXT = 36216;

const int GL_INTENSITY16UI_EXT = 36217;

const int GL_LUMINANCE16UI_EXT = 36218;

const int GL_LUMINANCE_ALPHA16UI_EXT = 36219;

const int GL_RGBA8UI_EXT = 36220;

const int GL_RGB8UI_EXT = 36221;

const int GL_ALPHA8UI_EXT = 36222;

const int GL_INTENSITY8UI_EXT = 36223;

const int GL_LUMINANCE8UI_EXT = 36224;

const int GL_LUMINANCE_ALPHA8UI_EXT = 36225;

const int GL_RGBA32I_EXT = 36226;

const int GL_RGB32I_EXT = 36227;

const int GL_ALPHA32I_EXT = 36228;

const int GL_INTENSITY32I_EXT = 36229;

const int GL_LUMINANCE32I_EXT = 36230;

const int GL_LUMINANCE_ALPHA32I_EXT = 36231;

const int GL_RGBA16I_EXT = 36232;

const int GL_RGB16I_EXT = 36233;

const int GL_ALPHA16I_EXT = 36234;

const int GL_INTENSITY16I_EXT = 36235;

const int GL_LUMINANCE16I_EXT = 36236;

const int GL_LUMINANCE_ALPHA16I_EXT = 36237;

const int GL_RGBA8I_EXT = 36238;

const int GL_RGB8I_EXT = 36239;

const int GL_ALPHA8I_EXT = 36240;

const int GL_INTENSITY8I_EXT = 36241;

const int GL_LUMINANCE8I_EXT = 36242;

const int GL_LUMINANCE_ALPHA8I_EXT = 36243;

const int GL_RED_INTEGER_EXT = 36244;

const int GL_GREEN_INTEGER_EXT = 36245;

const int GL_BLUE_INTEGER_EXT = 36246;

const int GL_ALPHA_INTEGER_EXT = 36247;

const int GL_RGB_INTEGER_EXT = 36248;

const int GL_RGBA_INTEGER_EXT = 36249;

const int GL_BGR_INTEGER_EXT = 36250;

const int GL_BGRA_INTEGER_EXT = 36251;

const int GL_LUMINANCE_INTEGER_EXT = 36252;

const int GL_LUMINANCE_ALPHA_INTEGER_EXT = 36253;

const int GL_RGBA_INTEGER_MODE_EXT = 36254;

const int GL_EXT_texture_lod_bias = 1;

const int GL_MAX_TEXTURE_LOD_BIAS_EXT = 34045;

const int GL_TEXTURE_FILTER_CONTROL_EXT = 34048;

const int GL_TEXTURE_LOD_BIAS_EXT = 34049;

const int GL_EXT_texture_mirror_clamp = 1;

const int GL_MIRROR_CLAMP_EXT = 34626;

const int GL_MIRROR_CLAMP_TO_EDGE_EXT = 34627;

const int GL_MIRROR_CLAMP_TO_BORDER_EXT = 35090;

const int GL_EXT_texture_object = 1;

const int GL_TEXTURE_PRIORITY_EXT = 32870;

const int GL_TEXTURE_RESIDENT_EXT = 32871;

const int GL_TEXTURE_1D_BINDING_EXT = 32872;

const int GL_TEXTURE_2D_BINDING_EXT = 32873;

const int GL_TEXTURE_3D_BINDING_EXT = 32874;

const int GL_EXT_texture_perturb_normal = 1;

const int GL_PERTURB_EXT = 34222;

const int GL_TEXTURE_NORMAL_EXT = 34223;

const int GL_EXT_texture_sRGB = 1;

const int GL_SRGB8_EXT = 35905;

const int GL_SLUMINANCE_ALPHA_EXT = 35908;

const int GL_SLUMINANCE8_ALPHA8_EXT = 35909;

const int GL_SLUMINANCE_EXT = 35910;

const int GL_SLUMINANCE8_EXT = 35911;

const int GL_COMPRESSED_SRGB_EXT = 35912;

const int GL_COMPRESSED_SRGB_ALPHA_EXT = 35913;

const int GL_COMPRESSED_SLUMINANCE_EXT = 35914;

const int GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 35915;

const int GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916;

const int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917;

const int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918;

const int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919;

const int GL_EXT_texture_shared_exponent = 1;

const int GL_RGB9_E5_EXT = 35901;

const int GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 35902;

const int GL_TEXTURE_SHARED_SIZE_EXT = 35903;

const int GL_EXT_texture_snorm = 1;

const int GL_ALPHA_SNORM = 36880;

const int GL_LUMINANCE_SNORM = 36881;

const int GL_LUMINANCE_ALPHA_SNORM = 36882;

const int GL_INTENSITY_SNORM = 36883;

const int GL_ALPHA8_SNORM = 36884;

const int GL_LUMINANCE8_SNORM = 36885;

const int GL_LUMINANCE8_ALPHA8_SNORM = 36886;

const int GL_INTENSITY8_SNORM = 36887;

const int GL_ALPHA16_SNORM = 36888;

const int GL_LUMINANCE16_SNORM = 36889;

const int GL_LUMINANCE16_ALPHA16_SNORM = 36890;

const int GL_INTENSITY16_SNORM = 36891;

const int GL_RED_SNORM = 36752;

const int GL_RG_SNORM = 36753;

const int GL_RGB_SNORM = 36754;

const int GL_RGBA_SNORM = 36755;

const int GL_EXT_texture_swizzle = 1;

const int GL_TEXTURE_SWIZZLE_R_EXT = 36418;

const int GL_TEXTURE_SWIZZLE_G_EXT = 36419;

const int GL_TEXTURE_SWIZZLE_B_EXT = 36420;

const int GL_TEXTURE_SWIZZLE_A_EXT = 36421;

const int GL_TEXTURE_SWIZZLE_RGBA_EXT = 36422;

const int GL_EXT_timer_query = 1;

const int GL_EXT_transform_feedback = 1;

const int GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 35982;

const int GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 35972;

const int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 35973;

const int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 35983;

const int GL_INTERLEAVED_ATTRIBS_EXT = 35980;

const int GL_SEPARATE_ATTRIBS_EXT = 35981;

const int GL_PRIMITIVES_GENERATED_EXT = 35975;

const int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 35976;

const int GL_RASTERIZER_DISCARD_EXT = 35977;

const int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 35978;

const int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 35979;

const int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 35968;

const int GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 35971;

const int GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 35967;

const int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 35958;

const int GL_EXT_vertex_array = 1;

const int GL_VERTEX_ARRAY_EXT = 32884;

const int GL_NORMAL_ARRAY_EXT = 32885;

const int GL_COLOR_ARRAY_EXT = 32886;

const int GL_INDEX_ARRAY_EXT = 32887;

const int GL_TEXTURE_COORD_ARRAY_EXT = 32888;

const int GL_EDGE_FLAG_ARRAY_EXT = 32889;

const int GL_VERTEX_ARRAY_SIZE_EXT = 32890;

const int GL_VERTEX_ARRAY_TYPE_EXT = 32891;

const int GL_VERTEX_ARRAY_STRIDE_EXT = 32892;

const int GL_VERTEX_ARRAY_COUNT_EXT = 32893;

const int GL_NORMAL_ARRAY_TYPE_EXT = 32894;

const int GL_NORMAL_ARRAY_STRIDE_EXT = 32895;

const int GL_NORMAL_ARRAY_COUNT_EXT = 32896;

const int GL_COLOR_ARRAY_SIZE_EXT = 32897;

const int GL_COLOR_ARRAY_TYPE_EXT = 32898;

const int GL_COLOR_ARRAY_STRIDE_EXT = 32899;

const int GL_COLOR_ARRAY_COUNT_EXT = 32900;

const int GL_INDEX_ARRAY_TYPE_EXT = 32901;

const int GL_INDEX_ARRAY_STRIDE_EXT = 32902;

const int GL_INDEX_ARRAY_COUNT_EXT = 32903;

const int GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 32904;

const int GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 32905;

const int GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 32906;

const int GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 32907;

const int GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 32908;

const int GL_EDGE_FLAG_ARRAY_COUNT_EXT = 32909;

const int GL_VERTEX_ARRAY_POINTER_EXT = 32910;

const int GL_NORMAL_ARRAY_POINTER_EXT = 32911;

const int GL_COLOR_ARRAY_POINTER_EXT = 32912;

const int GL_INDEX_ARRAY_POINTER_EXT = 32913;

const int GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 32914;

const int GL_EDGE_FLAG_ARRAY_POINTER_EXT = 32915;

const int GL_EXT_vertex_array_bgra = 1;

const int GL_EXT_vertex_attrib_64bit = 1;

const int GL_DOUBLE_VEC2_EXT = 36860;

const int GL_DOUBLE_VEC3_EXT = 36861;

const int GL_DOUBLE_VEC4_EXT = 36862;

const int GL_DOUBLE_MAT2_EXT = 36678;

const int GL_DOUBLE_MAT3_EXT = 36679;

const int GL_DOUBLE_MAT4_EXT = 36680;

const int GL_DOUBLE_MAT2x3_EXT = 36681;

const int GL_DOUBLE_MAT2x4_EXT = 36682;

const int GL_DOUBLE_MAT3x2_EXT = 36683;

const int GL_DOUBLE_MAT3x4_EXT = 36684;

const int GL_DOUBLE_MAT4x2_EXT = 36685;

const int GL_DOUBLE_MAT4x3_EXT = 36686;

const int GL_EXT_vertex_shader = 1;

const int GL_VERTEX_SHADER_EXT = 34688;

const int GL_VERTEX_SHADER_BINDING_EXT = 34689;

const int GL_OP_INDEX_EXT = 34690;

const int GL_OP_NEGATE_EXT = 34691;

const int GL_OP_DOT3_EXT = 34692;

const int GL_OP_DOT4_EXT = 34693;

const int GL_OP_MUL_EXT = 34694;

const int GL_OP_ADD_EXT = 34695;

const int GL_OP_MADD_EXT = 34696;

const int GL_OP_FRAC_EXT = 34697;

const int GL_OP_MAX_EXT = 34698;

const int GL_OP_MIN_EXT = 34699;

const int GL_OP_SET_GE_EXT = 34700;

const int GL_OP_SET_LT_EXT = 34701;

const int GL_OP_CLAMP_EXT = 34702;

const int GL_OP_FLOOR_EXT = 34703;

const int GL_OP_ROUND_EXT = 34704;

const int GL_OP_EXP_BASE_2_EXT = 34705;

const int GL_OP_LOG_BASE_2_EXT = 34706;

const int GL_OP_POWER_EXT = 34707;

const int GL_OP_RECIP_EXT = 34708;

const int GL_OP_RECIP_SQRT_EXT = 34709;

const int GL_OP_SUB_EXT = 34710;

const int GL_OP_CROSS_PRODUCT_EXT = 34711;

const int GL_OP_MULTIPLY_MATRIX_EXT = 34712;

const int GL_OP_MOV_EXT = 34713;

const int GL_OUTPUT_VERTEX_EXT = 34714;

const int GL_OUTPUT_COLOR0_EXT = 34715;

const int GL_OUTPUT_COLOR1_EXT = 34716;

const int GL_OUTPUT_TEXTURE_COORD0_EXT = 34717;

const int GL_OUTPUT_TEXTURE_COORD1_EXT = 34718;

const int GL_OUTPUT_TEXTURE_COORD2_EXT = 34719;

const int GL_OUTPUT_TEXTURE_COORD3_EXT = 34720;

const int GL_OUTPUT_TEXTURE_COORD4_EXT = 34721;

const int GL_OUTPUT_TEXTURE_COORD5_EXT = 34722;

const int GL_OUTPUT_TEXTURE_COORD6_EXT = 34723;

const int GL_OUTPUT_TEXTURE_COORD7_EXT = 34724;

const int GL_OUTPUT_TEXTURE_COORD8_EXT = 34725;

const int GL_OUTPUT_TEXTURE_COORD9_EXT = 34726;

const int GL_OUTPUT_TEXTURE_COORD10_EXT = 34727;

const int GL_OUTPUT_TEXTURE_COORD11_EXT = 34728;

const int GL_OUTPUT_TEXTURE_COORD12_EXT = 34729;

const int GL_OUTPUT_TEXTURE_COORD13_EXT = 34730;

const int GL_OUTPUT_TEXTURE_COORD14_EXT = 34731;

const int GL_OUTPUT_TEXTURE_COORD15_EXT = 34732;

const int GL_OUTPUT_TEXTURE_COORD16_EXT = 34733;

const int GL_OUTPUT_TEXTURE_COORD17_EXT = 34734;

const int GL_OUTPUT_TEXTURE_COORD18_EXT = 34735;

const int GL_OUTPUT_TEXTURE_COORD19_EXT = 34736;

const int GL_OUTPUT_TEXTURE_COORD20_EXT = 34737;

const int GL_OUTPUT_TEXTURE_COORD21_EXT = 34738;

const int GL_OUTPUT_TEXTURE_COORD22_EXT = 34739;

const int GL_OUTPUT_TEXTURE_COORD23_EXT = 34740;

const int GL_OUTPUT_TEXTURE_COORD24_EXT = 34741;

const int GL_OUTPUT_TEXTURE_COORD25_EXT = 34742;

const int GL_OUTPUT_TEXTURE_COORD26_EXT = 34743;

const int GL_OUTPUT_TEXTURE_COORD27_EXT = 34744;

const int GL_OUTPUT_TEXTURE_COORD28_EXT = 34745;

const int GL_OUTPUT_TEXTURE_COORD29_EXT = 34746;

const int GL_OUTPUT_TEXTURE_COORD30_EXT = 34747;

const int GL_OUTPUT_TEXTURE_COORD31_EXT = 34748;

const int GL_OUTPUT_FOG_EXT = 34749;

const int GL_SCALAR_EXT = 34750;

const int GL_VECTOR_EXT = 34751;

const int GL_MATRIX_EXT = 34752;

const int GL_VARIANT_EXT = 34753;

const int GL_INVARIANT_EXT = 34754;

const int GL_LOCAL_CONSTANT_EXT = 34755;

const int GL_LOCAL_EXT = 34756;

const int GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 34757;

const int GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 34758;

const int GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 34759;

const int GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34760;

const int GL_MAX_VERTEX_SHADER_LOCALS_EXT = 34761;

const int GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 34762;

const int GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 34763;

const int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34764;

const int GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 34765;

const int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 34766;

const int GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 34767;

const int GL_VERTEX_SHADER_VARIANTS_EXT = 34768;

const int GL_VERTEX_SHADER_INVARIANTS_EXT = 34769;

const int GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34770;

const int GL_VERTEX_SHADER_LOCALS_EXT = 34771;

const int GL_VERTEX_SHADER_OPTIMIZED_EXT = 34772;

const int GL_X_EXT = 34773;

const int GL_Y_EXT = 34774;

const int GL_Z_EXT = 34775;

const int GL_W_EXT = 34776;

const int GL_NEGATIVE_X_EXT = 34777;

const int GL_NEGATIVE_Y_EXT = 34778;

const int GL_NEGATIVE_Z_EXT = 34779;

const int GL_NEGATIVE_W_EXT = 34780;

const int GL_ZERO_EXT = 34781;

const int GL_ONE_EXT = 34782;

const int GL_NEGATIVE_ONE_EXT = 34783;

const int GL_NORMALIZED_RANGE_EXT = 34784;

const int GL_FULL_RANGE_EXT = 34785;

const int GL_CURRENT_VERTEX_EXT = 34786;

const int GL_MVP_MATRIX_EXT = 34787;

const int GL_VARIANT_VALUE_EXT = 34788;

const int GL_VARIANT_DATATYPE_EXT = 34789;

const int GL_VARIANT_ARRAY_STRIDE_EXT = 34790;

const int GL_VARIANT_ARRAY_TYPE_EXT = 34791;

const int GL_VARIANT_ARRAY_EXT = 34792;

const int GL_VARIANT_ARRAY_POINTER_EXT = 34793;

const int GL_INVARIANT_VALUE_EXT = 34794;

const int GL_INVARIANT_DATATYPE_EXT = 34795;

const int GL_LOCAL_CONSTANT_VALUE_EXT = 34796;

const int GL_LOCAL_CONSTANT_DATATYPE_EXT = 34797;

const int GL_EXT_vertex_weighting = 1;

const int GL_MODELVIEW0_STACK_DEPTH_EXT = 2979;

const int GL_MODELVIEW1_STACK_DEPTH_EXT = 34050;

const int GL_MODELVIEW0_MATRIX_EXT = 2982;

const int GL_MODELVIEW1_MATRIX_EXT = 34054;

const int GL_VERTEX_WEIGHTING_EXT = 34057;

const int GL_MODELVIEW0_EXT = 5888;

const int GL_MODELVIEW1_EXT = 34058;

const int GL_CURRENT_VERTEX_WEIGHT_EXT = 34059;

const int GL_VERTEX_WEIGHT_ARRAY_EXT = 34060;

const int GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 34061;

const int GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 34062;

const int GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 34063;

const int GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 34064;

const int GL_EXT_x11_sync_object = 1;

const int GL_SYNC_X11_FENCE_EXT = 37089;

const int GL_GREMEDY_frame_terminator = 1;

const int GL_GREMEDY_string_marker = 1;

const int GL_HP_convolution_border_modes = 1;

const int GL_IGNORE_BORDER_HP = 33104;

const int GL_CONSTANT_BORDER_HP = 33105;

const int GL_REPLICATE_BORDER_HP = 33107;

const int GL_CONVOLUTION_BORDER_COLOR_HP = 33108;

const int GL_HP_image_transform = 1;

const int GL_IMAGE_SCALE_X_HP = 33109;

const int GL_IMAGE_SCALE_Y_HP = 33110;

const int GL_IMAGE_TRANSLATE_X_HP = 33111;

const int GL_IMAGE_TRANSLATE_Y_HP = 33112;

const int GL_IMAGE_ROTATE_ANGLE_HP = 33113;

const int GL_IMAGE_ROTATE_ORIGIN_X_HP = 33114;

const int GL_IMAGE_ROTATE_ORIGIN_Y_HP = 33115;

const int GL_IMAGE_MAG_FILTER_HP = 33116;

const int GL_IMAGE_MIN_FILTER_HP = 33117;

const int GL_IMAGE_CUBIC_WEIGHT_HP = 33118;

const int GL_CUBIC_HP = 33119;

const int GL_AVERAGE_HP = 33120;

const int GL_IMAGE_TRANSFORM_2D_HP = 33121;

const int GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33122;

const int GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33123;

const int GL_HP_occlusion_test = 1;

const int GL_OCCLUSION_TEST_HP = 33125;

const int GL_OCCLUSION_TEST_RESULT_HP = 33126;

const int GL_HP_texture_lighting = 1;

const int GL_TEXTURE_LIGHTING_MODE_HP = 33127;

const int GL_TEXTURE_POST_SPECULAR_HP = 33128;

const int GL_TEXTURE_PRE_SPECULAR_HP = 33129;

const int GL_IBM_cull_vertex = 1;

const int GL_CULL_VERTEX_IBM = 103050;

const int GL_IBM_multimode_draw_arrays = 1;

const int GL_IBM_rasterpos_clip = 1;

const int GL_RASTER_POSITION_UNCLIPPED_IBM = 103010;

const int GL_IBM_static_data = 1;

const int GL_ALL_STATIC_DATA_IBM = 103060;

const int GL_STATIC_VERTEX_ARRAY_IBM = 103061;

const int GL_IBM_texture_mirrored_repeat = 1;

const int GL_MIRRORED_REPEAT_IBM = 33648;

const int GL_IBM_vertex_array_lists = 1;

const int GL_VERTEX_ARRAY_LIST_IBM = 103070;

const int GL_NORMAL_ARRAY_LIST_IBM = 103071;

const int GL_COLOR_ARRAY_LIST_IBM = 103072;

const int GL_INDEX_ARRAY_LIST_IBM = 103073;

const int GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;

const int GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;

const int GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;

const int GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;

const int GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;

const int GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;

const int GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;

const int GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;

const int GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;

const int GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;

const int GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;

const int GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;

const int GL_INGR_blend_func_separate = 1;

const int GL_INGR_color_clamp = 1;

const int GL_RED_MIN_CLAMP_INGR = 34144;

const int GL_GREEN_MIN_CLAMP_INGR = 34145;

const int GL_BLUE_MIN_CLAMP_INGR = 34146;

const int GL_ALPHA_MIN_CLAMP_INGR = 34147;

const int GL_RED_MAX_CLAMP_INGR = 34148;

const int GL_GREEN_MAX_CLAMP_INGR = 34149;

const int GL_BLUE_MAX_CLAMP_INGR = 34150;

const int GL_ALPHA_MAX_CLAMP_INGR = 34151;

const int GL_INGR_interlace_read = 1;

const int GL_INTERLACE_READ_INGR = 34152;

const int GL_INTEL_fragment_shader_ordering = 1;

const int GL_INTEL_map_texture = 1;

const int GL_TEXTURE_MEMORY_LAYOUT_INTEL = 33791;

const int GL_LAYOUT_DEFAULT_INTEL = 0;

const int GL_LAYOUT_LINEAR_INTEL = 1;

const int GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;

const int GL_INTEL_parallel_arrays = 1;

const int GL_PARALLEL_ARRAYS_INTEL = 33780;

const int GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 33781;

const int GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 33782;

const int GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 33783;

const int GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 33784;

const int GL_INTEL_performance_query = 1;

const int GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0;

const int GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 1;

const int GL_PERFQUERY_WAIT_INTEL = 33787;

const int GL_PERFQUERY_FLUSH_INTEL = 33786;

const int GL_PERFQUERY_DONOT_FLUSH_INTEL = 33785;

const int GL_PERFQUERY_COUNTER_EVENT_INTEL = 38128;

const int GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 38129;

const int GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 38130;

const int GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 38131;

const int GL_PERFQUERY_COUNTER_RAW_INTEL = 38132;

const int GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 38133;

const int GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 38136;

const int GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 38137;

const int GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 38138;

const int GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 38139;

const int GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 38140;

const int GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 38141;

const int GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 38142;

const int GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 38143;

const int GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 38144;

const int GL_MESAX_texture_stack = 1;

const int GL_TEXTURE_1D_STACK_MESAX = 34649;

const int GL_TEXTURE_2D_STACK_MESAX = 34650;

const int GL_PROXY_TEXTURE_1D_STACK_MESAX = 34651;

const int GL_PROXY_TEXTURE_2D_STACK_MESAX = 34652;

const int GL_TEXTURE_1D_STACK_BINDING_MESAX = 34653;

const int GL_TEXTURE_2D_STACK_BINDING_MESAX = 34654;

const int GL_MESA_pack_invert = 1;

const int GL_PACK_INVERT_MESA = 34648;

const int GL_MESA_resize_buffers = 1;

const int GL_MESA_window_pos = 1;

const int GL_MESA_ycbcr_texture = 1;

const int GL_UNSIGNED_SHORT_8_8_MESA = 34234;

const int GL_UNSIGNED_SHORT_8_8_REV_MESA = 34235;

const int GL_YCBCR_MESA = 34647;

const int GL_NVX_conditional_render = 1;

const int GL_NVX_gpu_memory_info = 1;

const int GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 36935;

const int GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 36936;

const int GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 36937;

const int GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 36938;

const int GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 36939;

const int GL_NV_bindless_multi_draw_indirect = 1;

const int GL_NV_bindless_texture = 1;

const int GL_NV_blend_equation_advanced = 1;

const int GL_BLEND_OVERLAP_NV = 37505;

const int GL_BLEND_PREMULTIPLIED_SRC_NV = 37504;

const int GL_BLUE_NV = 6405;

const int GL_COLORBURN_NV = 37530;

const int GL_COLORDODGE_NV = 37529;

const int GL_CONJOINT_NV = 37508;

const int GL_CONTRAST_NV = 37537;

const int GL_DARKEN_NV = 37527;

const int GL_DIFFERENCE_NV = 37534;

const int GL_DISJOINT_NV = 37507;

const int GL_DST_ATOP_NV = 37519;

const int GL_DST_IN_NV = 37515;

const int GL_DST_NV = 37511;

const int GL_DST_OUT_NV = 37517;

const int GL_DST_OVER_NV = 37513;

const int GL_EXCLUSION_NV = 37536;

const int GL_GREEN_NV = 6404;

const int GL_HARDLIGHT_NV = 37531;

const int GL_HARDMIX_NV = 37545;

const int GL_HSL_COLOR_NV = 37551;

const int GL_HSL_HUE_NV = 37549;

const int GL_HSL_LUMINOSITY_NV = 37552;

const int GL_HSL_SATURATION_NV = 37550;

const int GL_INVERT_OVG_NV = 37556;

const int GL_INVERT_RGB_NV = 37539;

const int GL_LIGHTEN_NV = 37528;

const int GL_LINEARBURN_NV = 37541;

const int GL_LINEARDODGE_NV = 37540;

const int GL_LINEARLIGHT_NV = 37543;

const int GL_MINUS_CLAMPED_NV = 37555;

const int GL_MINUS_NV = 37535;

const int GL_MULTIPLY_NV = 37524;

const int GL_OVERLAY_NV = 37526;

const int GL_PINLIGHT_NV = 37544;

const int GL_PLUS_CLAMPED_ALPHA_NV = 37554;

const int GL_PLUS_CLAMPED_NV = 37553;

const int GL_PLUS_DARKER_NV = 37522;

const int GL_PLUS_NV = 37521;

const int GL_RED_NV = 6403;

const int GL_SCREEN_NV = 37525;

const int GL_SOFTLIGHT_NV = 37532;

const int GL_SRC_ATOP_NV = 37518;

const int GL_SRC_IN_NV = 37514;

const int GL_SRC_NV = 37510;

const int GL_SRC_OUT_NV = 37516;

const int GL_SRC_OVER_NV = 37512;

const int GL_UNCORRELATED_NV = 37506;

const int GL_VIVIDLIGHT_NV = 37542;

const int GL_XOR_NV = 5382;

const int GL_NV_blend_equation_advanced_coherent = 1;

const int GL_BLEND_ADVANCED_COHERENT_NV = 37509;

const int GL_NV_blend_square = 1;

const int GL_NV_compute_program5 = 1;

const int GL_COMPUTE_PROGRAM_NV = 37115;

const int GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 37116;

const int GL_NV_conditional_render = 1;

const int GL_QUERY_WAIT_NV = 36371;

const int GL_QUERY_NO_WAIT_NV = 36372;

const int GL_QUERY_BY_REGION_WAIT_NV = 36373;

const int GL_QUERY_BY_REGION_NO_WAIT_NV = 36374;

const int GL_NV_copy_depth_to_color = 1;

const int GL_DEPTH_STENCIL_TO_RGBA_NV = 34926;

const int GL_DEPTH_STENCIL_TO_BGRA_NV = 34927;

const int GL_NV_copy_image = 1;

const int GL_NV_deep_texture3D = 1;

const int GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 37072;

const int GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 37073;

const int GL_NV_depth_buffer_float = 1;

const int GL_DEPTH_COMPONENT32F_NV = 36267;

const int GL_DEPTH32F_STENCIL8_NV = 36268;

const int GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 36269;

const int GL_DEPTH_BUFFER_FLOAT_MODE_NV = 36271;

const int GL_NV_depth_clamp = 1;

const int GL_DEPTH_CLAMP_NV = 34383;

const int GL_NV_draw_texture = 1;

const int GL_NV_evaluators = 1;

const int GL_EVAL_2D_NV = 34496;

const int GL_EVAL_TRIANGULAR_2D_NV = 34497;

const int GL_MAP_TESSELLATION_NV = 34498;

const int GL_MAP_ATTRIB_U_ORDER_NV = 34499;

const int GL_MAP_ATTRIB_V_ORDER_NV = 34500;

const int GL_EVAL_FRACTIONAL_TESSELLATION_NV = 34501;

const int GL_EVAL_VERTEX_ATTRIB0_NV = 34502;

const int GL_EVAL_VERTEX_ATTRIB1_NV = 34503;

const int GL_EVAL_VERTEX_ATTRIB2_NV = 34504;

const int GL_EVAL_VERTEX_ATTRIB3_NV = 34505;

const int GL_EVAL_VERTEX_ATTRIB4_NV = 34506;

const int GL_EVAL_VERTEX_ATTRIB5_NV = 34507;

const int GL_EVAL_VERTEX_ATTRIB6_NV = 34508;

const int GL_EVAL_VERTEX_ATTRIB7_NV = 34509;

const int GL_EVAL_VERTEX_ATTRIB8_NV = 34510;

const int GL_EVAL_VERTEX_ATTRIB9_NV = 34511;

const int GL_EVAL_VERTEX_ATTRIB10_NV = 34512;

const int GL_EVAL_VERTEX_ATTRIB11_NV = 34513;

const int GL_EVAL_VERTEX_ATTRIB12_NV = 34514;

const int GL_EVAL_VERTEX_ATTRIB13_NV = 34515;

const int GL_EVAL_VERTEX_ATTRIB14_NV = 34516;

const int GL_EVAL_VERTEX_ATTRIB15_NV = 34517;

const int GL_MAX_MAP_TESSELLATION_NV = 34518;

const int GL_MAX_RATIONAL_EVAL_ORDER_NV = 34519;

const int GL_NV_explicit_multisample = 1;

const int GL_SAMPLE_POSITION_NV = 36432;

const int GL_SAMPLE_MASK_NV = 36433;

const int GL_SAMPLE_MASK_VALUE_NV = 36434;

const int GL_TEXTURE_BINDING_RENDERBUFFER_NV = 36435;

const int GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 36436;

const int GL_TEXTURE_RENDERBUFFER_NV = 36437;

const int GL_SAMPLER_RENDERBUFFER_NV = 36438;

const int GL_INT_SAMPLER_RENDERBUFFER_NV = 36439;

const int GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 36440;

const int GL_MAX_SAMPLE_MASK_WORDS_NV = 36441;

const int GL_NV_float_buffer = 1;

const int GL_FLOAT_R_NV = 34944;

const int GL_FLOAT_RG_NV = 34945;

const int GL_FLOAT_RGB_NV = 34946;

const int GL_FLOAT_RGBA_NV = 34947;

const int GL_FLOAT_R16_NV = 34948;

const int GL_FLOAT_R32_NV = 34949;

const int GL_FLOAT_RG16_NV = 34950;

const int GL_FLOAT_RG32_NV = 34951;

const int GL_FLOAT_RGB16_NV = 34952;

const int GL_FLOAT_RGB32_NV = 34953;

const int GL_FLOAT_RGBA16_NV = 34954;

const int GL_FLOAT_RGBA32_NV = 34955;

const int GL_TEXTURE_FLOAT_COMPONENTS_NV = 34956;

const int GL_FLOAT_CLEAR_COLOR_VALUE_NV = 34957;

const int GL_FLOAT_RGBA_MODE_NV = 34958;

const int GL_NV_fog_distance = 1;

const int GL_FOG_DISTANCE_MODE_NV = 34138;

const int GL_EYE_RADIAL_NV = 34139;

const int GL_EYE_PLANE_ABSOLUTE_NV = 34140;

const int GL_NV_fragment_program = 1;

const int GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 34920;

const int GL_FRAGMENT_PROGRAM_NV = 34928;

const int GL_MAX_TEXTURE_COORDS_NV = 34929;

const int GL_MAX_TEXTURE_IMAGE_UNITS_NV = 34930;

const int GL_FRAGMENT_PROGRAM_BINDING_NV = 34931;

const int GL_PROGRAM_ERROR_STRING_NV = 34932;

const int GL_NV_fragment_program2 = 1;

const int GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 35060;

const int GL_MAX_PROGRAM_CALL_DEPTH_NV = 35061;

const int GL_MAX_PROGRAM_IF_DEPTH_NV = 35062;

const int GL_MAX_PROGRAM_LOOP_DEPTH_NV = 35063;

const int GL_MAX_PROGRAM_LOOP_COUNT_NV = 35064;

const int GL_NV_fragment_program4 = 1;

const int GL_NV_fragment_program_option = 1;

const int GL_NV_framebuffer_multisample_coverage = 1;

const int GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 36011;

const int GL_RENDERBUFFER_COLOR_SAMPLES_NV = 36368;

const int GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 36369;

const int GL_MULTISAMPLE_COVERAGE_MODES_NV = 36370;

const int GL_NV_geometry_program4 = 1;

const int GL_GEOMETRY_PROGRAM_NV = 35878;

const int GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 35879;

const int GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 35880;

const int GL_NV_geometry_shader4 = 1;

const int GL_NV_gpu_program4 = 1;

const int GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 35076;

const int GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 35077;

const int GL_PROGRAM_ATTRIB_COMPONENTS_NV = 35078;

const int GL_PROGRAM_RESULT_COMPONENTS_NV = 35079;

const int GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 35080;

const int GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 35081;

const int GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 36261;

const int GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 36262;

const int GL_NV_gpu_program5 = 1;

const int GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 36442;

const int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 36443;

const int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 36444;

const int GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 36445;

const int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 36446;

const int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 36447;

const int GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 36676;

const int GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 36677;

const int GL_NV_gpu_program5_mem_extended = 1;

const int GL_NV_gpu_shader5 = 1;

const int GL_NV_half_float = 1;

const int GL_HALF_FLOAT_NV = 5131;

const int GL_NV_light_max_exponent = 1;

const int GL_MAX_SHININESS_NV = 34052;

const int GL_MAX_SPOT_EXPONENT_NV = 34053;

const int GL_NV_multisample_coverage = 1;

const int GL_COLOR_SAMPLES_NV = 36384;

const int GL_NV_multisample_filter_hint = 1;

const int GL_MULTISAMPLE_FILTER_HINT_NV = 34100;

const int GL_NV_occlusion_query = 1;

const int GL_PIXEL_COUNTER_BITS_NV = 34916;

const int GL_CURRENT_OCCLUSION_QUERY_ID_NV = 34917;

const int GL_PIXEL_COUNT_NV = 34918;

const int GL_PIXEL_COUNT_AVAILABLE_NV = 34919;

const int GL_NV_packed_depth_stencil = 1;

const int GL_DEPTH_STENCIL_NV = 34041;

const int GL_UNSIGNED_INT_24_8_NV = 34042;

const int GL_NV_parameter_buffer_object = 1;

const int GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 36256;

const int GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 36257;

const int GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 36258;

const int GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 36259;

const int GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 36260;

const int GL_NV_parameter_buffer_object2 = 1;

const int GL_NV_path_rendering = 1;

const int GL_PATH_FORMAT_SVG_NV = 36976;

const int GL_PATH_FORMAT_PS_NV = 36977;

const int GL_STANDARD_FONT_NAME_NV = 36978;

const int GL_SYSTEM_FONT_NAME_NV = 36979;

const int GL_FILE_NAME_NV = 36980;

const int GL_PATH_STROKE_WIDTH_NV = 36981;

const int GL_PATH_END_CAPS_NV = 36982;

const int GL_PATH_INITIAL_END_CAP_NV = 36983;

const int GL_PATH_TERMINAL_END_CAP_NV = 36984;

const int GL_PATH_JOIN_STYLE_NV = 36985;

const int GL_PATH_MITER_LIMIT_NV = 36986;

const int GL_PATH_DASH_CAPS_NV = 36987;

const int GL_PATH_INITIAL_DASH_CAP_NV = 36988;

const int GL_PATH_TERMINAL_DASH_CAP_NV = 36989;

const int GL_PATH_DASH_OFFSET_NV = 36990;

const int GL_PATH_CLIENT_LENGTH_NV = 36991;

const int GL_PATH_FILL_MODE_NV = 36992;

const int GL_PATH_FILL_MASK_NV = 36993;

const int GL_PATH_FILL_COVER_MODE_NV = 36994;

const int GL_PATH_STROKE_COVER_MODE_NV = 36995;

const int GL_PATH_STROKE_MASK_NV = 36996;

const int GL_COUNT_UP_NV = 37000;

const int GL_COUNT_DOWN_NV = 37001;

const int GL_PATH_OBJECT_BOUNDING_BOX_NV = 37002;

const int GL_CONVEX_HULL_NV = 37003;

const int GL_BOUNDING_BOX_NV = 37005;

const int GL_TRANSLATE_X_NV = 37006;

const int GL_TRANSLATE_Y_NV = 37007;

const int GL_TRANSLATE_2D_NV = 37008;

const int GL_TRANSLATE_3D_NV = 37009;

const int GL_AFFINE_2D_NV = 37010;

const int GL_AFFINE_3D_NV = 37012;

const int GL_TRANSPOSE_AFFINE_2D_NV = 37014;

const int GL_TRANSPOSE_AFFINE_3D_NV = 37016;

const int GL_UTF8_NV = 37018;

const int GL_UTF16_NV = 37019;

const int GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 37020;

const int GL_PATH_COMMAND_COUNT_NV = 37021;

const int GL_PATH_COORD_COUNT_NV = 37022;

const int GL_PATH_DASH_ARRAY_COUNT_NV = 37023;

const int GL_PATH_COMPUTED_LENGTH_NV = 37024;

const int GL_PATH_FILL_BOUNDING_BOX_NV = 37025;

const int GL_PATH_STROKE_BOUNDING_BOX_NV = 37026;

const int GL_SQUARE_NV = 37027;

const int GL_ROUND_NV = 37028;

const int GL_TRIANGULAR_NV = 37029;

const int GL_BEVEL_NV = 37030;

const int GL_MITER_REVERT_NV = 37031;

const int GL_MITER_TRUNCATE_NV = 37032;

const int GL_SKIP_MISSING_GLYPH_NV = 37033;

const int GL_USE_MISSING_GLYPH_NV = 37034;

const int GL_PATH_ERROR_POSITION_NV = 37035;

const int GL_PATH_FOG_GEN_MODE_NV = 37036;

const int GL_ACCUM_ADJACENT_PAIRS_NV = 37037;

const int GL_ADJACENT_PAIRS_NV = 37038;

const int GL_FIRST_TO_REST_NV = 37039;

const int GL_PATH_GEN_MODE_NV = 37040;

const int GL_PATH_GEN_COEFF_NV = 37041;

const int GL_PATH_GEN_COLOR_FORMAT_NV = 37042;

const int GL_PATH_GEN_COMPONENTS_NV = 37043;

const int GL_PATH_STENCIL_FUNC_NV = 37047;

const int GL_PATH_STENCIL_REF_NV = 37048;

const int GL_PATH_STENCIL_VALUE_MASK_NV = 37049;

const int GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 37053;

const int GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 37054;

const int GL_PATH_COVER_DEPTH_FUNC_NV = 37055;

const int GL_PATH_DASH_OFFSET_RESET_NV = 37044;

const int GL_MOVE_TO_RESETS_NV = 37045;

const int GL_MOVE_TO_CONTINUES_NV = 37046;

const int GL_CLOSE_PATH_NV = 0;

const int GL_MOVE_TO_NV = 2;

const int GL_RELATIVE_MOVE_TO_NV = 3;

const int GL_LINE_TO_NV = 4;

const int GL_RELATIVE_LINE_TO_NV = 5;

const int GL_HORIZONTAL_LINE_TO_NV = 6;

const int GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 7;

const int GL_VERTICAL_LINE_TO_NV = 8;

const int GL_RELATIVE_VERTICAL_LINE_TO_NV = 9;

const int GL_QUADRATIC_CURVE_TO_NV = 10;

const int GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 11;

const int GL_CUBIC_CURVE_TO_NV = 12;

const int GL_RELATIVE_CUBIC_CURVE_TO_NV = 13;

const int GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 14;

const int GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 15;

const int GL_SMOOTH_CUBIC_CURVE_TO_NV = 16;

const int GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 17;

const int GL_SMALL_CCW_ARC_TO_NV = 18;

const int GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 19;

const int GL_SMALL_CW_ARC_TO_NV = 20;

const int GL_RELATIVE_SMALL_CW_ARC_TO_NV = 21;

const int GL_LARGE_CCW_ARC_TO_NV = 22;

const int GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 23;

const int GL_LARGE_CW_ARC_TO_NV = 24;

const int GL_RELATIVE_LARGE_CW_ARC_TO_NV = 25;

const int GL_RESTART_PATH_NV = 240;

const int GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 242;

const int GL_DUP_LAST_CUBIC_CURVE_TO_NV = 244;

const int GL_RECT_NV = 246;

const int GL_CIRCULAR_CCW_ARC_TO_NV = 248;

const int GL_CIRCULAR_CW_ARC_TO_NV = 250;

const int GL_CIRCULAR_TANGENT_ARC_TO_NV = 252;

const int GL_ARC_TO_NV = 254;

const int GL_RELATIVE_ARC_TO_NV = 255;

const int GL_BOLD_BIT_NV = 1;

const int GL_ITALIC_BIT_NV = 2;

const int GL_GLYPH_WIDTH_BIT_NV = 1;

const int GL_GLYPH_HEIGHT_BIT_NV = 2;

const int GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 4;

const int GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 8;

const int GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 16;

const int GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 32;

const int GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 64;

const int GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 128;

const int GL_GLYPH_HAS_KERNING_BIT_NV = 256;

const int GL_FONT_X_MIN_BOUNDS_BIT_NV = 65536;

const int GL_FONT_Y_MIN_BOUNDS_BIT_NV = 131072;

const int GL_FONT_X_MAX_BOUNDS_BIT_NV = 262144;

const int GL_FONT_Y_MAX_BOUNDS_BIT_NV = 524288;

const int GL_FONT_UNITS_PER_EM_BIT_NV = 1048576;

const int GL_FONT_ASCENDER_BIT_NV = 2097152;

const int GL_FONT_DESCENDER_BIT_NV = 4194304;

const int GL_FONT_HEIGHT_BIT_NV = 8388608;

const int GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 16777216;

const int GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 33554432;

const int GL_FONT_UNDERLINE_POSITION_BIT_NV = 67108864;

const int GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 134217728;

const int GL_FONT_HAS_KERNING_BIT_NV = 268435456;

const int GL_PRIMARY_COLOR_NV = 34092;

const int GL_SECONDARY_COLOR_NV = 34093;

const int GL_NV_pixel_data_range = 1;

const int GL_WRITE_PIXEL_DATA_RANGE_NV = 34936;

const int GL_READ_PIXEL_DATA_RANGE_NV = 34937;

const int GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 34938;

const int GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 34939;

const int GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 34940;

const int GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 34941;

const int GL_NV_point_sprite = 1;

const int GL_POINT_SPRITE_NV = 34913;

const int GL_COORD_REPLACE_NV = 34914;

const int GL_POINT_SPRITE_R_MODE_NV = 34915;

const int GL_NV_present_video = 1;

const int GL_FRAME_NV = 36390;

const int GL_FIELDS_NV = 36391;

const int GL_CURRENT_TIME_NV = 36392;

const int GL_NUM_FILL_STREAMS_NV = 36393;

const int GL_PRESENT_TIME_NV = 36394;

const int GL_PRESENT_DURATION_NV = 36395;

const int GL_NV_primitive_restart = 1;

const int GL_PRIMITIVE_RESTART_NV = 34136;

const int GL_PRIMITIVE_RESTART_INDEX_NV = 34137;

const int GL_NV_register_combiners = 1;

const int GL_REGISTER_COMBINERS_NV = 34082;

const int GL_VARIABLE_A_NV = 34083;

const int GL_VARIABLE_B_NV = 34084;

const int GL_VARIABLE_C_NV = 34085;

const int GL_VARIABLE_D_NV = 34086;

const int GL_VARIABLE_E_NV = 34087;

const int GL_VARIABLE_F_NV = 34088;

const int GL_VARIABLE_G_NV = 34089;

const int GL_CONSTANT_COLOR0_NV = 34090;

const int GL_CONSTANT_COLOR1_NV = 34091;

const int GL_SPARE0_NV = 34094;

const int GL_SPARE1_NV = 34095;

const int GL_DISCARD_NV = 34096;

const int GL_E_TIMES_F_NV = 34097;

const int GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 34098;

const int GL_UNSIGNED_IDENTITY_NV = 34102;

const int GL_UNSIGNED_INVERT_NV = 34103;

const int GL_EXPAND_NORMAL_NV = 34104;

const int GL_EXPAND_NEGATE_NV = 34105;

const int GL_HALF_BIAS_NORMAL_NV = 34106;

const int GL_HALF_BIAS_NEGATE_NV = 34107;

const int GL_SIGNED_IDENTITY_NV = 34108;

const int GL_SIGNED_NEGATE_NV = 34109;

const int GL_SCALE_BY_TWO_NV = 34110;

const int GL_SCALE_BY_FOUR_NV = 34111;

const int GL_SCALE_BY_ONE_HALF_NV = 34112;

const int GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 34113;

const int GL_COMBINER_INPUT_NV = 34114;

const int GL_COMBINER_MAPPING_NV = 34115;

const int GL_COMBINER_COMPONENT_USAGE_NV = 34116;

const int GL_COMBINER_AB_DOT_PRODUCT_NV = 34117;

const int GL_COMBINER_CD_DOT_PRODUCT_NV = 34118;

const int GL_COMBINER_MUX_SUM_NV = 34119;

const int GL_COMBINER_SCALE_NV = 34120;

const int GL_COMBINER_BIAS_NV = 34121;

const int GL_COMBINER_AB_OUTPUT_NV = 34122;

const int GL_COMBINER_CD_OUTPUT_NV = 34123;

const int GL_COMBINER_SUM_OUTPUT_NV = 34124;

const int GL_MAX_GENERAL_COMBINERS_NV = 34125;

const int GL_NUM_GENERAL_COMBINERS_NV = 34126;

const int GL_COLOR_SUM_CLAMP_NV = 34127;

const int GL_COMBINER0_NV = 34128;

const int GL_COMBINER1_NV = 34129;

const int GL_COMBINER2_NV = 34130;

const int GL_COMBINER3_NV = 34131;

const int GL_COMBINER4_NV = 34132;

const int GL_COMBINER5_NV = 34133;

const int GL_COMBINER6_NV = 34134;

const int GL_COMBINER7_NV = 34135;

const int GL_NV_register_combiners2 = 1;

const int GL_PER_STAGE_CONSTANTS_NV = 34101;

const int GL_NV_shader_atomic_counters = 1;

const int GL_NV_shader_atomic_float = 1;

const int GL_NV_shader_buffer_load = 1;

const int GL_BUFFER_GPU_ADDRESS_NV = 36637;

const int GL_GPU_ADDRESS_NV = 36660;

const int GL_MAX_SHADER_BUFFER_ADDRESS_NV = 36661;

const int GL_NV_shader_buffer_store = 1;

const int GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 16;

const int GL_NV_shader_storage_buffer_object = 1;

const int GL_NV_shader_thread_group = 1;

const int GL_WARP_SIZE_NV = 37689;

const int GL_WARPS_PER_SM_NV = 37690;

const int GL_SM_COUNT_NV = 37691;

const int GL_NV_shader_thread_shuffle = 1;

const int GL_NV_tessellation_program5 = 1;

const int GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 34520;

const int GL_TESS_CONTROL_PROGRAM_NV = 35102;

const int GL_TESS_EVALUATION_PROGRAM_NV = 35103;

const int GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 35956;

const int GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 35957;

const int GL_NV_texgen_emboss = 1;

const int GL_EMBOSS_LIGHT_NV = 34141;

const int GL_EMBOSS_CONSTANT_NV = 34142;

const int GL_EMBOSS_MAP_NV = 34143;

const int GL_NV_texgen_reflection = 1;

const int GL_NORMAL_MAP_NV = 34065;

const int GL_REFLECTION_MAP_NV = 34066;

const int GL_NV_texture_barrier = 1;

const int GL_NV_texture_compression_vtc = 1;

const int GL_NV_texture_env_combine4 = 1;

const int GL_COMBINE4_NV = 34051;

const int GL_SOURCE3_RGB_NV = 34179;

const int GL_SOURCE3_ALPHA_NV = 34187;

const int GL_OPERAND3_RGB_NV = 34195;

const int GL_OPERAND3_ALPHA_NV = 34203;

const int GL_NV_texture_expand_normal = 1;

const int GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 34959;

const int GL_NV_texture_multisample = 1;

const int GL_TEXTURE_COVERAGE_SAMPLES_NV = 36933;

const int GL_TEXTURE_COLOR_SAMPLES_NV = 36934;

const int GL_NV_texture_rectangle = 1;

const int GL_TEXTURE_RECTANGLE_NV = 34037;

const int GL_TEXTURE_BINDING_RECTANGLE_NV = 34038;

const int GL_PROXY_TEXTURE_RECTANGLE_NV = 34039;

const int GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 34040;

const int GL_NV_texture_shader = 1;

const int GL_OFFSET_TEXTURE_RECTANGLE_NV = 34380;

const int GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 34381;

const int GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 34382;

const int GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 34521;

const int GL_UNSIGNED_INT_S8_S8_8_8_NV = 34522;

const int GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 34523;

const int GL_DSDT_MAG_INTENSITY_NV = 34524;

const int GL_SHADER_CONSISTENT_NV = 34525;

const int GL_TEXTURE_SHADER_NV = 34526;

const int GL_SHADER_OPERATION_NV = 34527;

const int GL_CULL_MODES_NV = 34528;

const int GL_OFFSET_TEXTURE_MATRIX_NV = 34529;

const int GL_OFFSET_TEXTURE_SCALE_NV = 34530;

const int GL_OFFSET_TEXTURE_BIAS_NV = 34531;

const int GL_OFFSET_TEXTURE_2D_MATRIX_NV = 34529;

const int GL_OFFSET_TEXTURE_2D_SCALE_NV = 34530;

const int GL_OFFSET_TEXTURE_2D_BIAS_NV = 34531;

const int GL_PREVIOUS_TEXTURE_INPUT_NV = 34532;

const int GL_CONST_EYE_NV = 34533;

const int GL_PASS_THROUGH_NV = 34534;

const int GL_CULL_FRAGMENT_NV = 34535;

const int GL_OFFSET_TEXTURE_2D_NV = 34536;

const int GL_DEPENDENT_AR_TEXTURE_2D_NV = 34537;

const int GL_DEPENDENT_GB_TEXTURE_2D_NV = 34538;

const int GL_DOT_PRODUCT_NV = 34540;

const int GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 34541;

const int GL_DOT_PRODUCT_TEXTURE_2D_NV = 34542;

const int GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 34544;

const int GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 34545;

const int GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 34546;

const int GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 34547;

const int GL_HILO_NV = 34548;

const int GL_DSDT_NV = 34549;

const int GL_DSDT_MAG_NV = 34550;

const int GL_DSDT_MAG_VIB_NV = 34551;

const int GL_HILO16_NV = 34552;

const int GL_SIGNED_HILO_NV = 34553;

const int GL_SIGNED_HILO16_NV = 34554;

const int GL_SIGNED_RGBA_NV = 34555;

const int GL_SIGNED_RGBA8_NV = 34556;

const int GL_SIGNED_RGB_NV = 34558;

const int GL_SIGNED_RGB8_NV = 34559;

const int GL_SIGNED_LUMINANCE_NV = 34561;

const int GL_SIGNED_LUMINANCE8_NV = 34562;

const int GL_SIGNED_LUMINANCE_ALPHA_NV = 34563;

const int GL_SIGNED_LUMINANCE8_ALPHA8_NV = 34564;

const int GL_SIGNED_ALPHA_NV = 34565;

const int GL_SIGNED_ALPHA8_NV = 34566;

const int GL_SIGNED_INTENSITY_NV = 34567;

const int GL_SIGNED_INTENSITY8_NV = 34568;

const int GL_DSDT8_NV = 34569;

const int GL_DSDT8_MAG8_NV = 34570;

const int GL_DSDT8_MAG8_INTENSITY8_NV = 34571;

const int GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 34572;

const int GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 34573;

const int GL_HI_SCALE_NV = 34574;

const int GL_LO_SCALE_NV = 34575;

const int GL_DS_SCALE_NV = 34576;

const int GL_DT_SCALE_NV = 34577;

const int GL_MAGNITUDE_SCALE_NV = 34578;

const int GL_VIBRANCE_SCALE_NV = 34579;

const int GL_HI_BIAS_NV = 34580;

const int GL_LO_BIAS_NV = 34581;

const int GL_DS_BIAS_NV = 34582;

const int GL_DT_BIAS_NV = 34583;

const int GL_MAGNITUDE_BIAS_NV = 34584;

const int GL_VIBRANCE_BIAS_NV = 34585;

const int GL_TEXTURE_BORDER_VALUES_NV = 34586;

const int GL_TEXTURE_HI_SIZE_NV = 34587;

const int GL_TEXTURE_LO_SIZE_NV = 34588;

const int GL_TEXTURE_DS_SIZE_NV = 34589;

const int GL_TEXTURE_DT_SIZE_NV = 34590;

const int GL_TEXTURE_MAG_SIZE_NV = 34591;

const int GL_NV_texture_shader2 = 1;

const int GL_DOT_PRODUCT_TEXTURE_3D_NV = 34543;

const int GL_NV_texture_shader3 = 1;

const int GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 34896;

const int GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 34897;

const int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 34898;

const int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 34899;

const int GL_OFFSET_HILO_TEXTURE_2D_NV = 34900;

const int GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 34901;

const int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 34902;

const int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 34903;

const int GL_DEPENDENT_HILO_TEXTURE_2D_NV = 34904;

const int GL_DEPENDENT_RGB_TEXTURE_3D_NV = 34905;

const int GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 34906;

const int GL_DOT_PRODUCT_PASS_THROUGH_NV = 34907;

const int GL_DOT_PRODUCT_TEXTURE_1D_NV = 34908;

const int GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 34909;

const int GL_HILO8_NV = 34910;

const int GL_SIGNED_HILO8_NV = 34911;

const int GL_FORCE_BLUE_TO_ONE_NV = 34912;

const int GL_NV_transform_feedback = 1;

const int GL_BACK_PRIMARY_COLOR_NV = 35959;

const int GL_BACK_SECONDARY_COLOR_NV = 35960;

const int GL_TEXTURE_COORD_NV = 35961;

const int GL_CLIP_DISTANCE_NV = 35962;

const int GL_VERTEX_ID_NV = 35963;

const int GL_PRIMITIVE_ID_NV = 35964;

const int GL_GENERIC_ATTRIB_NV = 35965;

const int GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 35966;

const int GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 35967;

const int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 35968;

const int GL_ACTIVE_VARYINGS_NV = 35969;

const int GL_ACTIVE_VARYING_MAX_LENGTH_NV = 35970;

const int GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 35971;

const int GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 35972;

const int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 35973;

const int GL_TRANSFORM_FEEDBACK_RECORD_NV = 35974;

const int GL_PRIMITIVES_GENERATED_NV = 35975;

const int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 35976;

const int GL_RASTERIZER_DISCARD_NV = 35977;

const int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 35978;

const int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 35979;

const int GL_INTERLEAVED_ATTRIBS_NV = 35980;

const int GL_SEPARATE_ATTRIBS_NV = 35981;

const int GL_TRANSFORM_FEEDBACK_BUFFER_NV = 35982;

const int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 35983;

const int GL_LAYER_NV = 36266;

const int GL_NEXT_BUFFER_NV = -2;

const int GL_SKIP_COMPONENTS4_NV = -3;

const int GL_SKIP_COMPONENTS3_NV = -4;

const int GL_SKIP_COMPONENTS2_NV = -5;

const int GL_SKIP_COMPONENTS1_NV = -6;

const int GL_NV_transform_feedback2 = 1;

const int GL_TRANSFORM_FEEDBACK_NV = 36386;

const int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 36387;

const int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 36388;

const int GL_TRANSFORM_FEEDBACK_BINDING_NV = 36389;

const int GL_NV_vdpau_interop = 1;

const int GL_SURFACE_STATE_NV = 34539;

const int GL_SURFACE_REGISTERED_NV = 34557;

const int GL_SURFACE_MAPPED_NV = 34560;

const int GL_WRITE_DISCARD_NV = 35006;

const int GL_NV_vertex_array_range = 1;

const int GL_VERTEX_ARRAY_RANGE_NV = 34077;

const int GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 34078;

const int GL_VERTEX_ARRAY_RANGE_VALID_NV = 34079;

const int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 34080;

const int GL_VERTEX_ARRAY_RANGE_POINTER_NV = 34081;

const int GL_NV_vertex_array_range2 = 1;

const int GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 34099;

const int GL_NV_vertex_attrib_integer_64bit = 1;

const int GL_NV_vertex_buffer_unified_memory = 1;

const int GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 36638;

const int GL_ELEMENT_ARRAY_UNIFIED_NV = 36639;

const int GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 36640;

const int GL_VERTEX_ARRAY_ADDRESS_NV = 36641;

const int GL_NORMAL_ARRAY_ADDRESS_NV = 36642;

const int GL_COLOR_ARRAY_ADDRESS_NV = 36643;

const int GL_INDEX_ARRAY_ADDRESS_NV = 36644;

const int GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 36645;

const int GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 36646;

const int GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 36647;

const int GL_FOG_COORD_ARRAY_ADDRESS_NV = 36648;

const int GL_ELEMENT_ARRAY_ADDRESS_NV = 36649;

const int GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 36650;

const int GL_VERTEX_ARRAY_LENGTH_NV = 36651;

const int GL_NORMAL_ARRAY_LENGTH_NV = 36652;

const int GL_COLOR_ARRAY_LENGTH_NV = 36653;

const int GL_INDEX_ARRAY_LENGTH_NV = 36654;

const int GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 36655;

const int GL_EDGE_FLAG_ARRAY_LENGTH_NV = 36656;

const int GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 36657;

const int GL_FOG_COORD_ARRAY_LENGTH_NV = 36658;

const int GL_ELEMENT_ARRAY_LENGTH_NV = 36659;

const int GL_DRAW_INDIRECT_UNIFIED_NV = 36672;

const int GL_DRAW_INDIRECT_ADDRESS_NV = 36673;

const int GL_DRAW_INDIRECT_LENGTH_NV = 36674;

const int GL_NV_vertex_program = 1;

const int GL_VERTEX_PROGRAM_NV = 34336;

const int GL_VERTEX_STATE_PROGRAM_NV = 34337;

const int GL_ATTRIB_ARRAY_SIZE_NV = 34339;

const int GL_ATTRIB_ARRAY_STRIDE_NV = 34340;

const int GL_ATTRIB_ARRAY_TYPE_NV = 34341;

const int GL_CURRENT_ATTRIB_NV = 34342;

const int GL_PROGRAM_LENGTH_NV = 34343;

const int GL_PROGRAM_STRING_NV = 34344;

const int GL_MODELVIEW_PROJECTION_NV = 34345;

const int GL_IDENTITY_NV = 34346;

const int GL_INVERSE_NV = 34347;

const int GL_TRANSPOSE_NV = 34348;

const int GL_INVERSE_TRANSPOSE_NV = 34349;

const int GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 34350;

const int GL_MAX_TRACK_MATRICES_NV = 34351;

const int GL_MATRIX0_NV = 34352;

const int GL_MATRIX1_NV = 34353;

const int GL_MATRIX2_NV = 34354;

const int GL_MATRIX3_NV = 34355;

const int GL_MATRIX4_NV = 34356;

const int GL_MATRIX5_NV = 34357;

const int GL_MATRIX6_NV = 34358;

const int GL_MATRIX7_NV = 34359;

const int GL_CURRENT_MATRIX_STACK_DEPTH_NV = 34368;

const int GL_CURRENT_MATRIX_NV = 34369;

const int GL_VERTEX_PROGRAM_POINT_SIZE_NV = 34370;

const int GL_VERTEX_PROGRAM_TWO_SIDE_NV = 34371;

const int GL_PROGRAM_PARAMETER_NV = 34372;

const int GL_ATTRIB_ARRAY_POINTER_NV = 34373;

const int GL_PROGRAM_TARGET_NV = 34374;

const int GL_PROGRAM_RESIDENT_NV = 34375;

const int GL_TRACK_MATRIX_NV = 34376;

const int GL_TRACK_MATRIX_TRANSFORM_NV = 34377;

const int GL_VERTEX_PROGRAM_BINDING_NV = 34378;

const int GL_PROGRAM_ERROR_POSITION_NV = 34379;

const int GL_VERTEX_ATTRIB_ARRAY0_NV = 34384;

const int GL_VERTEX_ATTRIB_ARRAY1_NV = 34385;

const int GL_VERTEX_ATTRIB_ARRAY2_NV = 34386;

const int GL_VERTEX_ATTRIB_ARRAY3_NV = 34387;

const int GL_VERTEX_ATTRIB_ARRAY4_NV = 34388;

const int GL_VERTEX_ATTRIB_ARRAY5_NV = 34389;

const int GL_VERTEX_ATTRIB_ARRAY6_NV = 34390;

const int GL_VERTEX_ATTRIB_ARRAY7_NV = 34391;

const int GL_VERTEX_ATTRIB_ARRAY8_NV = 34392;

const int GL_VERTEX_ATTRIB_ARRAY9_NV = 34393;

const int GL_VERTEX_ATTRIB_ARRAY10_NV = 34394;

const int GL_VERTEX_ATTRIB_ARRAY11_NV = 34395;

const int GL_VERTEX_ATTRIB_ARRAY12_NV = 34396;

const int GL_VERTEX_ATTRIB_ARRAY13_NV = 34397;

const int GL_VERTEX_ATTRIB_ARRAY14_NV = 34398;

const int GL_VERTEX_ATTRIB_ARRAY15_NV = 34399;

const int GL_MAP1_VERTEX_ATTRIB0_4_NV = 34400;

const int GL_MAP1_VERTEX_ATTRIB1_4_NV = 34401;

const int GL_MAP1_VERTEX_ATTRIB2_4_NV = 34402;

const int GL_MAP1_VERTEX_ATTRIB3_4_NV = 34403;

const int GL_MAP1_VERTEX_ATTRIB4_4_NV = 34404;

const int GL_MAP1_VERTEX_ATTRIB5_4_NV = 34405;

const int GL_MAP1_VERTEX_ATTRIB6_4_NV = 34406;

const int GL_MAP1_VERTEX_ATTRIB7_4_NV = 34407;

const int GL_MAP1_VERTEX_ATTRIB8_4_NV = 34408;

const int GL_MAP1_VERTEX_ATTRIB9_4_NV = 34409;

const int GL_MAP1_VERTEX_ATTRIB10_4_NV = 34410;

const int GL_MAP1_VERTEX_ATTRIB11_4_NV = 34411;

const int GL_MAP1_VERTEX_ATTRIB12_4_NV = 34412;

const int GL_MAP1_VERTEX_ATTRIB13_4_NV = 34413;

const int GL_MAP1_VERTEX_ATTRIB14_4_NV = 34414;

const int GL_MAP1_VERTEX_ATTRIB15_4_NV = 34415;

const int GL_MAP2_VERTEX_ATTRIB0_4_NV = 34416;

const int GL_MAP2_VERTEX_ATTRIB1_4_NV = 34417;

const int GL_MAP2_VERTEX_ATTRIB2_4_NV = 34418;

const int GL_MAP2_VERTEX_ATTRIB3_4_NV = 34419;

const int GL_MAP2_VERTEX_ATTRIB4_4_NV = 34420;

const int GL_MAP2_VERTEX_ATTRIB5_4_NV = 34421;

const int GL_MAP2_VERTEX_ATTRIB6_4_NV = 34422;

const int GL_MAP2_VERTEX_ATTRIB7_4_NV = 34423;

const int GL_MAP2_VERTEX_ATTRIB8_4_NV = 34424;

const int GL_MAP2_VERTEX_ATTRIB9_4_NV = 34425;

const int GL_MAP2_VERTEX_ATTRIB10_4_NV = 34426;

const int GL_MAP2_VERTEX_ATTRIB11_4_NV = 34427;

const int GL_MAP2_VERTEX_ATTRIB12_4_NV = 34428;

const int GL_MAP2_VERTEX_ATTRIB13_4_NV = 34429;

const int GL_MAP2_VERTEX_ATTRIB14_4_NV = 34430;

const int GL_MAP2_VERTEX_ATTRIB15_4_NV = 34431;

const int GL_NV_vertex_program1_1 = 1;

const int GL_NV_vertex_program2 = 1;

const int GL_NV_vertex_program2_option = 1;

const int GL_NV_vertex_program3 = 1;

const int GL_NV_vertex_program4 = 1;

const int GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 35069;

const int GL_NV_video_capture = 1;

const int GL_VIDEO_BUFFER_NV = 36896;

const int GL_VIDEO_BUFFER_BINDING_NV = 36897;

const int GL_FIELD_UPPER_NV = 36898;

const int GL_FIELD_LOWER_NV = 36899;

const int GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 36900;

const int GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 36901;

const int GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 36902;

const int GL_LAST_VIDEO_CAPTURE_STATUS_NV = 36903;

const int GL_VIDEO_BUFFER_PITCH_NV = 36904;

const int GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 36905;

const int GL_VIDEO_COLOR_CONVERSION_MAX_NV = 36906;

const int GL_VIDEO_COLOR_CONVERSION_MIN_NV = 36907;

const int GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 36908;

const int GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 36909;

const int GL_PARTIAL_SUCCESS_NV = 36910;

const int GL_SUCCESS_NV = 36911;

const int GL_FAILURE_NV = 36912;

const int GL_YCBYCR8_422_NV = 36913;

const int GL_YCBAYCR8A_4224_NV = 36914;

const int GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 36915;

const int GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 36916;

const int GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 36917;

const int GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 36918;

const int GL_Z4Y12Z4CB12Z4CR12_444_NV = 36919;

const int GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 36920;

const int GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 36921;

const int GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 36922;

const int GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 36923;

const int GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 36924;

const int GL_OML_interlace = 1;

const int GL_INTERLACE_OML = 35200;

const int GL_INTERLACE_READ_OML = 35201;

const int GL_OML_resample = 1;

const int GL_PACK_RESAMPLE_OML = 35204;

const int GL_UNPACK_RESAMPLE_OML = 35205;

const int GL_RESAMPLE_REPLICATE_OML = 35206;

const int GL_RESAMPLE_ZERO_FILL_OML = 35207;

const int GL_RESAMPLE_AVERAGE_OML = 35208;

const int GL_RESAMPLE_DECIMATE_OML = 35209;

const int GL_OML_subsample = 1;

const int GL_FORMAT_SUBSAMPLE_24_24_OML = 35202;

const int GL_FORMAT_SUBSAMPLE_244_244_OML = 35203;

const int GL_PGI_misc_hints = 1;

const int GL_PREFER_DOUBLEBUFFER_HINT_PGI = 107000;

const int GL_CONSERVE_MEMORY_HINT_PGI = 107005;

const int GL_RECLAIM_MEMORY_HINT_PGI = 107006;

const int GL_NATIVE_GRAPHICS_HANDLE_PGI = 107010;

const int GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 107011;

const int GL_NATIVE_GRAPHICS_END_HINT_PGI = 107012;

const int GL_ALWAYS_FAST_HINT_PGI = 107020;

const int GL_ALWAYS_SOFT_HINT_PGI = 107021;

const int GL_ALLOW_DRAW_OBJ_HINT_PGI = 107022;

const int GL_ALLOW_DRAW_WIN_HINT_PGI = 107023;

const int GL_ALLOW_DRAW_FRG_HINT_PGI = 107024;

const int GL_ALLOW_DRAW_MEM_HINT_PGI = 107025;

const int GL_STRICT_DEPTHFUNC_HINT_PGI = 107030;

const int GL_STRICT_LIGHTING_HINT_PGI = 107031;

const int GL_STRICT_SCISSOR_HINT_PGI = 107032;

const int GL_FULL_STIPPLE_HINT_PGI = 107033;

const int GL_CLIP_NEAR_HINT_PGI = 107040;

const int GL_CLIP_FAR_HINT_PGI = 107041;

const int GL_WIDE_LINE_HINT_PGI = 107042;

const int GL_BACK_NORMALS_HINT_PGI = 107043;

const int GL_PGI_vertex_hints = 1;

const int GL_VERTEX_DATA_HINT_PGI = 107050;

const int GL_VERTEX_CONSISTENT_HINT_PGI = 107051;

const int GL_MATERIAL_SIDE_HINT_PGI = 107052;

const int GL_MAX_VERTEX_HINT_PGI = 107053;

const int GL_COLOR3_BIT_PGI = 65536;

const int GL_COLOR4_BIT_PGI = 131072;

const int GL_EDGEFLAG_BIT_PGI = 262144;

const int GL_INDEX_BIT_PGI = 524288;

const int GL_MAT_AMBIENT_BIT_PGI = 1048576;

const int GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 2097152;

const int GL_MAT_DIFFUSE_BIT_PGI = 4194304;

const int GL_MAT_EMISSION_BIT_PGI = 8388608;

const int GL_MAT_COLOR_INDEXES_BIT_PGI = 16777216;

const int GL_MAT_SHININESS_BIT_PGI = 33554432;

const int GL_MAT_SPECULAR_BIT_PGI = 67108864;

const int GL_NORMAL_BIT_PGI = 134217728;

const int GL_TEXCOORD1_BIT_PGI = 268435456;

const int GL_TEXCOORD2_BIT_PGI = 536870912;

const int GL_TEXCOORD3_BIT_PGI = 1073741824;

const int GL_TEXCOORD4_BIT_PGI = 2147483648;

const int GL_VERTEX23_BIT_PGI = 4;

const int GL_VERTEX4_BIT_PGI = 8;

const int GL_REND_screen_coordinates = 1;

const int GL_SCREEN_COORDINATES_REND = 33936;

const int GL_INVERTED_SCREEN_W_REND = 33937;

const int GL_S3_s3tc = 1;

const int GL_RGB_S3TC = 33696;

const int GL_RGB4_S3TC = 33697;

const int GL_RGBA_S3TC = 33698;

const int GL_RGBA4_S3TC = 33699;

const int GL_RGBA_DXT5_S3TC = 33700;

const int GL_RGBA4_DXT5_S3TC = 33701;

const int GL_SGIS_detail_texture = 1;

const int GL_DETAIL_TEXTURE_2D_SGIS = 32917;

const int GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 32918;

const int GL_LINEAR_DETAIL_SGIS = 32919;

const int GL_LINEAR_DETAIL_ALPHA_SGIS = 32920;

const int GL_LINEAR_DETAIL_COLOR_SGIS = 32921;

const int GL_DETAIL_TEXTURE_LEVEL_SGIS = 32922;

const int GL_DETAIL_TEXTURE_MODE_SGIS = 32923;

const int GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 32924;

const int GL_SGIS_fog_function = 1;

const int GL_FOG_FUNC_SGIS = 33066;

const int GL_FOG_FUNC_POINTS_SGIS = 33067;

const int GL_MAX_FOG_FUNC_POINTS_SGIS = 33068;

const int GL_SGIS_generate_mipmap = 1;

const int GL_GENERATE_MIPMAP_SGIS = 33169;

const int GL_GENERATE_MIPMAP_HINT_SGIS = 33170;

const int GL_SGIS_multisample = 1;

const int GL_MULTISAMPLE_SGIS = 32925;

const int GL_SAMPLE_ALPHA_TO_MASK_SGIS = 32926;

const int GL_SAMPLE_ALPHA_TO_ONE_SGIS = 32927;

const int GL_SAMPLE_MASK_SGIS = 32928;

const int GL_1PASS_SGIS = 32929;

const int GL_2PASS_0_SGIS = 32930;

const int GL_2PASS_1_SGIS = 32931;

const int GL_4PASS_0_SGIS = 32932;

const int GL_4PASS_1_SGIS = 32933;

const int GL_4PASS_2_SGIS = 32934;

const int GL_4PASS_3_SGIS = 32935;

const int GL_SAMPLE_BUFFERS_SGIS = 32936;

const int GL_SAMPLES_SGIS = 32937;

const int GL_SAMPLE_MASK_VALUE_SGIS = 32938;

const int GL_SAMPLE_MASK_INVERT_SGIS = 32939;

const int GL_SAMPLE_PATTERN_SGIS = 32940;

const int GL_SGIS_pixel_texture = 1;

const int GL_PIXEL_TEXTURE_SGIS = 33619;

const int GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 33620;

const int GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 33621;

const int GL_PIXEL_GROUP_COLOR_SGIS = 33622;

const int GL_SGIS_point_line_texgen = 1;

const int GL_EYE_DISTANCE_TO_POINT_SGIS = 33264;

const int GL_OBJECT_DISTANCE_TO_POINT_SGIS = 33265;

const int GL_EYE_DISTANCE_TO_LINE_SGIS = 33266;

const int GL_OBJECT_DISTANCE_TO_LINE_SGIS = 33267;

const int GL_EYE_POINT_SGIS = 33268;

const int GL_OBJECT_POINT_SGIS = 33269;

const int GL_EYE_LINE_SGIS = 33270;

const int GL_OBJECT_LINE_SGIS = 33271;

const int GL_SGIS_point_parameters = 1;

const int GL_POINT_SIZE_MIN_SGIS = 33062;

const int GL_POINT_SIZE_MAX_SGIS = 33063;

const int GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 33064;

const int GL_DISTANCE_ATTENUATION_SGIS = 33065;

const int GL_SGIS_sharpen_texture = 1;

const int GL_LINEAR_SHARPEN_SGIS = 32941;

const int GL_LINEAR_SHARPEN_ALPHA_SGIS = 32942;

const int GL_LINEAR_SHARPEN_COLOR_SGIS = 32943;

const int GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 32944;

const int GL_SGIS_texture4D = 1;

const int GL_PACK_SKIP_VOLUMES_SGIS = 33072;

const int GL_PACK_IMAGE_DEPTH_SGIS = 33073;

const int GL_UNPACK_SKIP_VOLUMES_SGIS = 33074;

const int GL_UNPACK_IMAGE_DEPTH_SGIS = 33075;

const int GL_TEXTURE_4D_SGIS = 33076;

const int GL_PROXY_TEXTURE_4D_SGIS = 33077;

const int GL_TEXTURE_4DSIZE_SGIS = 33078;

const int GL_TEXTURE_WRAP_Q_SGIS = 33079;

const int GL_MAX_4D_TEXTURE_SIZE_SGIS = 33080;

const int GL_TEXTURE_4D_BINDING_SGIS = 33103;

const int GL_SGIS_texture_border_clamp = 1;

const int GL_CLAMP_TO_BORDER_SGIS = 33069;

const int GL_SGIS_texture_color_mask = 1;

const int GL_TEXTURE_COLOR_WRITEMASK_SGIS = 33263;

const int GL_SGIS_texture_edge_clamp = 1;

const int GL_CLAMP_TO_EDGE_SGIS = 33071;

const int GL_SGIS_texture_filter4 = 1;

const int GL_FILTER4_SGIS = 33094;

const int GL_TEXTURE_FILTER4_SIZE_SGIS = 33095;

const int GL_SGIS_texture_lod = 1;

const int GL_TEXTURE_MIN_LOD_SGIS = 33082;

const int GL_TEXTURE_MAX_LOD_SGIS = 33083;

const int GL_TEXTURE_BASE_LEVEL_SGIS = 33084;

const int GL_TEXTURE_MAX_LEVEL_SGIS = 33085;

const int GL_SGIS_texture_select = 1;

const int GL_DUAL_ALPHA4_SGIS = 33040;

const int GL_DUAL_ALPHA8_SGIS = 33041;

const int GL_DUAL_ALPHA12_SGIS = 33042;

const int GL_DUAL_ALPHA16_SGIS = 33043;

const int GL_DUAL_LUMINANCE4_SGIS = 33044;

const int GL_DUAL_LUMINANCE8_SGIS = 33045;

const int GL_DUAL_LUMINANCE12_SGIS = 33046;

const int GL_DUAL_LUMINANCE16_SGIS = 33047;

const int GL_DUAL_INTENSITY4_SGIS = 33048;

const int GL_DUAL_INTENSITY8_SGIS = 33049;

const int GL_DUAL_INTENSITY12_SGIS = 33050;

const int GL_DUAL_INTENSITY16_SGIS = 33051;

const int GL_DUAL_LUMINANCE_ALPHA4_SGIS = 33052;

const int GL_DUAL_LUMINANCE_ALPHA8_SGIS = 33053;

const int GL_QUAD_ALPHA4_SGIS = 33054;

const int GL_QUAD_ALPHA8_SGIS = 33055;

const int GL_QUAD_LUMINANCE4_SGIS = 33056;

const int GL_QUAD_LUMINANCE8_SGIS = 33057;

const int GL_QUAD_INTENSITY4_SGIS = 33058;

const int GL_QUAD_INTENSITY8_SGIS = 33059;

const int GL_DUAL_TEXTURE_SELECT_SGIS = 33060;

const int GL_QUAD_TEXTURE_SELECT_SGIS = 33061;

const int GL_SGIX_async = 1;

const int GL_ASYNC_MARKER_SGIX = 33577;

const int GL_SGIX_async_histogram = 1;

const int GL_ASYNC_HISTOGRAM_SGIX = 33580;

const int GL_MAX_ASYNC_HISTOGRAM_SGIX = 33581;

const int GL_SGIX_async_pixel = 1;

const int GL_ASYNC_TEX_IMAGE_SGIX = 33628;

const int GL_ASYNC_DRAW_PIXELS_SGIX = 33629;

const int GL_ASYNC_READ_PIXELS_SGIX = 33630;

const int GL_MAX_ASYNC_TEX_IMAGE_SGIX = 33631;

const int GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 33632;

const int GL_MAX_ASYNC_READ_PIXELS_SGIX = 33633;

const int GL_SGIX_blend_alpha_minmax = 1;

const int GL_ALPHA_MIN_SGIX = 33568;

const int GL_ALPHA_MAX_SGIX = 33569;

const int GL_SGIX_calligraphic_fragment = 1;

const int GL_CALLIGRAPHIC_FRAGMENT_SGIX = 33155;

const int GL_SGIX_clipmap = 1;

const int GL_LINEAR_CLIPMAP_LINEAR_SGIX = 33136;

const int GL_TEXTURE_CLIPMAP_CENTER_SGIX = 33137;

const int GL_TEXTURE_CLIPMAP_FRAME_SGIX = 33138;

const int GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 33139;

const int GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33140;

const int GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 33141;

const int GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 33142;

const int GL_MAX_CLIPMAP_DEPTH_SGIX = 33143;

const int GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33144;

const int GL_NEAREST_CLIPMAP_NEAREST_SGIX = 33869;

const int GL_NEAREST_CLIPMAP_LINEAR_SGIX = 33870;

const int GL_LINEAR_CLIPMAP_NEAREST_SGIX = 33871;

const int GL_SGIX_convolution_accuracy = 1;

const int GL_CONVOLUTION_HINT_SGIX = 33558;

const int GL_SGIX_depth_pass_instrument = 1;

const int GL_SGIX_depth_texture = 1;

const int GL_DEPTH_COMPONENT16_SGIX = 33189;

const int GL_DEPTH_COMPONENT24_SGIX = 33190;

const int GL_DEPTH_COMPONENT32_SGIX = 33191;

const int GL_SGIX_flush_raster = 1;

const int GL_SGIX_fog_offset = 1;

const int GL_FOG_OFFSET_SGIX = 33176;

const int GL_FOG_OFFSET_VALUE_SGIX = 33177;

const int GL_SGIX_fragment_lighting = 1;

const int GL_FRAGMENT_LIGHTING_SGIX = 33792;

const int GL_FRAGMENT_COLOR_MATERIAL_SGIX = 33793;

const int GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 33794;

const int GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 33795;

const int GL_MAX_FRAGMENT_LIGHTS_SGIX = 33796;

const int GL_MAX_ACTIVE_LIGHTS_SGIX = 33797;

const int GL_CURRENT_RASTER_NORMAL_SGIX = 33798;

const int GL_LIGHT_ENV_MODE_SGIX = 33799;

const int GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 33800;

const int GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 33801;

const int GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 33802;

const int GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 33803;

const int GL_FRAGMENT_LIGHT0_SGIX = 33804;

const int GL_FRAGMENT_LIGHT1_SGIX = 33805;

const int GL_FRAGMENT_LIGHT2_SGIX = 33806;

const int GL_FRAGMENT_LIGHT3_SGIX = 33807;

const int GL_FRAGMENT_LIGHT4_SGIX = 33808;

const int GL_FRAGMENT_LIGHT5_SGIX = 33809;

const int GL_FRAGMENT_LIGHT6_SGIX = 33810;

const int GL_FRAGMENT_LIGHT7_SGIX = 33811;

const int GL_SGIX_framezoom = 1;

const int GL_FRAMEZOOM_SGIX = 33163;

const int GL_FRAMEZOOM_FACTOR_SGIX = 33164;

const int GL_MAX_FRAMEZOOM_FACTOR_SGIX = 33165;

const int GL_SGIX_igloo_interface = 1;

const int GL_SGIX_instruments = 1;

const int GL_INSTRUMENT_BUFFER_POINTER_SGIX = 33152;

const int GL_INSTRUMENT_MEASUREMENTS_SGIX = 33153;

const int GL_SGIX_interlace = 1;

const int GL_INTERLACE_SGIX = 32916;

const int GL_SGIX_ir_instrument1 = 1;

const int GL_IR_INSTRUMENT1_SGIX = 33151;

const int GL_SGIX_list_priority = 1;

const int GL_LIST_PRIORITY_SGIX = 33154;

const int GL_SGIX_pixel_texture = 1;

const int GL_PIXEL_TEX_GEN_SGIX = 33081;

const int GL_PIXEL_TEX_GEN_MODE_SGIX = 33579;

const int GL_SGIX_pixel_tiles = 1;

const int GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 33086;

const int GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 33087;

const int GL_PIXEL_TILE_WIDTH_SGIX = 33088;

const int GL_PIXEL_TILE_HEIGHT_SGIX = 33089;

const int GL_PIXEL_TILE_GRID_WIDTH_SGIX = 33090;

const int GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 33091;

const int GL_PIXEL_TILE_GRID_DEPTH_SGIX = 33092;

const int GL_PIXEL_TILE_CACHE_SIZE_SGIX = 33093;

const int GL_SGIX_polynomial_ffd = 1;

const int GL_TEXTURE_DEFORMATION_BIT_SGIX = 1;

const int GL_GEOMETRY_DEFORMATION_BIT_SGIX = 2;

const int GL_GEOMETRY_DEFORMATION_SGIX = 33172;

const int GL_TEXTURE_DEFORMATION_SGIX = 33173;

const int GL_DEFORMATIONS_MASK_SGIX = 33174;

const int GL_MAX_DEFORMATION_ORDER_SGIX = 33175;

const int GL_SGIX_reference_plane = 1;

const int GL_REFERENCE_PLANE_SGIX = 33149;

const int GL_REFERENCE_PLANE_EQUATION_SGIX = 33150;

const int GL_SGIX_resample = 1;

const int GL_PACK_RESAMPLE_SGIX = 33836;

const int GL_UNPACK_RESAMPLE_SGIX = 33837;

const int GL_RESAMPLE_REPLICATE_SGIX = 33838;

const int GL_RESAMPLE_ZERO_FILL_SGIX = 33839;

const int GL_RESAMPLE_DECIMATE_SGIX = 33840;

const int GL_SGIX_scalebias_hint = 1;

const int GL_SCALEBIAS_HINT_SGIX = 33570;

const int GL_SGIX_shadow = 1;

const int GL_TEXTURE_COMPARE_SGIX = 33178;

const int GL_TEXTURE_COMPARE_OPERATOR_SGIX = 33179;

const int GL_TEXTURE_LEQUAL_R_SGIX = 33180;

const int GL_TEXTURE_GEQUAL_R_SGIX = 33181;

const int GL_SGIX_shadow_ambient = 1;

const int GL_SHADOW_AMBIENT_SGIX = 32959;

const int GL_SGIX_sprite = 1;

const int GL_SPRITE_SGIX = 33096;

const int GL_SPRITE_MODE_SGIX = 33097;

const int GL_SPRITE_AXIS_SGIX = 33098;

const int GL_SPRITE_TRANSLATION_SGIX = 33099;

const int GL_SPRITE_AXIAL_SGIX = 33100;

const int GL_SPRITE_OBJECT_ALIGNED_SGIX = 33101;

const int GL_SPRITE_EYE_ALIGNED_SGIX = 33102;

const int GL_SGIX_subsample = 1;

const int GL_PACK_SUBSAMPLE_RATE_SGIX = 34208;

const int GL_UNPACK_SUBSAMPLE_RATE_SGIX = 34209;

const int GL_PIXEL_SUBSAMPLE_4444_SGIX = 34210;

const int GL_PIXEL_SUBSAMPLE_2424_SGIX = 34211;

const int GL_PIXEL_SUBSAMPLE_4242_SGIX = 34212;

const int GL_SGIX_tag_sample_buffer = 1;

const int GL_SGIX_texture_add_env = 1;

const int GL_TEXTURE_ENV_BIAS_SGIX = 32958;

const int GL_SGIX_texture_coordinate_clamp = 1;

const int GL_TEXTURE_MAX_CLAMP_S_SGIX = 33641;

const int GL_TEXTURE_MAX_CLAMP_T_SGIX = 33642;

const int GL_TEXTURE_MAX_CLAMP_R_SGIX = 33643;

const int GL_SGIX_texture_lod_bias = 1;

const int GL_TEXTURE_LOD_BIAS_S_SGIX = 33166;

const int GL_TEXTURE_LOD_BIAS_T_SGIX = 33167;

const int GL_TEXTURE_LOD_BIAS_R_SGIX = 33168;

const int GL_SGIX_texture_multi_buffer = 1;

const int GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 33070;

const int GL_SGIX_texture_scale_bias = 1;

const int GL_POST_TEXTURE_FILTER_BIAS_SGIX = 33145;

const int GL_POST_TEXTURE_FILTER_SCALE_SGIX = 33146;

const int GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 33147;

const int GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 33148;

const int GL_SGIX_vertex_preclip = 1;

const int GL_VERTEX_PRECLIP_SGIX = 33774;

const int GL_VERTEX_PRECLIP_HINT_SGIX = 33775;

const int GL_SGIX_ycrcb = 1;

const int GL_YCRCB_422_SGIX = 33211;

const int GL_YCRCB_444_SGIX = 33212;

const int GL_SGIX_ycrcb_subsample = 1;

const int GL_SGIX_ycrcba = 1;

const int GL_YCRCB_SGIX = 33560;

const int GL_YCRCBA_SGIX = 33561;

const int GL_SGI_color_matrix = 1;

const int GL_COLOR_MATRIX_SGI = 32945;

const int GL_COLOR_MATRIX_STACK_DEPTH_SGI = 32946;

const int GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 32947;

const int GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 32948;

const int GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 32949;

const int GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 32950;

const int GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 32951;

const int GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 32952;

const int GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 32953;

const int GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 32954;

const int GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 32955;

const int GL_SGI_color_table = 1;

const int GL_COLOR_TABLE_SGI = 32976;

const int GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 32977;

const int GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 32978;

const int GL_PROXY_COLOR_TABLE_SGI = 32979;

const int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 32980;

const int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 32981;

const int GL_COLOR_TABLE_SCALE_SGI = 32982;

const int GL_COLOR_TABLE_BIAS_SGI = 32983;

const int GL_COLOR_TABLE_FORMAT_SGI = 32984;

const int GL_COLOR_TABLE_WIDTH_SGI = 32985;

const int GL_COLOR_TABLE_RED_SIZE_SGI = 32986;

const int GL_COLOR_TABLE_GREEN_SIZE_SGI = 32987;

const int GL_COLOR_TABLE_BLUE_SIZE_SGI = 32988;

const int GL_COLOR_TABLE_ALPHA_SIZE_SGI = 32989;

const int GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 32990;

const int GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 32991;

const int GL_SGI_texture_color_table = 1;

const int GL_TEXTURE_COLOR_TABLE_SGI = 32956;

const int GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 32957;

const int GL_SUNX_constant_data = 1;

const int GL_UNPACK_CONSTANT_DATA_SUNX = 33237;

const int GL_TEXTURE_CONSTANT_DATA_SUNX = 33238;

const int GL_SUN_convolution_border_modes = 1;

const int GL_WRAP_BORDER_SUN = 33236;

const int GL_SUN_global_alpha = 1;

const int GL_GLOBAL_ALPHA_SUN = 33241;

const int GL_GLOBAL_ALPHA_FACTOR_SUN = 33242;

const int GL_SUN_mesh_array = 1;

const int GL_QUAD_MESH_SUN = 34324;

const int GL_TRIANGLE_MESH_SUN = 34325;

const int GL_SUN_slice_accum = 1;

const int GL_SLICE_ACCUM_SUN = 34252;

const int GL_SUN_triangle_list = 1;

const int GL_RESTART_SUN = 1;

const int GL_REPLACE_MIDDLE_SUN = 2;

const int GL_REPLACE_OLDEST_SUN = 3;

const int GL_TRIANGLE_LIST_SUN = 33239;

const int GL_REPLACEMENT_CODE_SUN = 33240;

const int GL_REPLACEMENT_CODE_ARRAY_SUN = 34240;

const int GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 34241;

const int GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 34242;

const int GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 34243;

const int GL_R1UI_V3F_SUN = 34244;

const int GL_R1UI_C4UB_V3F_SUN = 34245;

const int GL_R1UI_C3F_V3F_SUN = 34246;

const int GL_R1UI_N3F_V3F_SUN = 34247;

const int GL_R1UI_C4F_N3F_V3F_SUN = 34248;

const int GL_R1UI_T2F_V3F_SUN = 34249;

const int GL_R1UI_T2F_N3F_V3F_SUN = 34250;

const int GL_R1UI_T2F_C4F_N3F_V3F_SUN = 34251;

const int GL_SUN_vertex = 1;

const int GL_WIN_phong_shading = 1;

const int GL_PHONG_WIN = 33002;

const int GL_PHONG_HINT_WIN = 33003;

const int GL_WIN_specular_fog = 1;

const int GL_FOG_SPECULAR_TEXTURE_WIN = 33004;

const int HAVE_GCC_SYNC_LOCK_TEST_AND_SET = 1;

const int LACKS_SYS_MMAN_H = 1;

const int SDL_THREAD_PSP = 1;

const int SDL_TIMERS_PSP = 1;

const int SDL_JOYSTICK_PSP = 1;

const int SDL_AUDIO_DRIVER_PSP = 1;

const int SDL_VIDEO_DRIVER_PSP = 1;

const int SDL_VIDEO_RENDER_PSP = 1;

const int SDL_POWER_PSP = 1;

const int HAVE_LIBUNWIND_H = 1;

const int HAVE_SYSCTLBYNAME = 1;

const int SDL_AUDIO_DRIVER_COREAUDIO = 1;

const int SDL_JOYSTICK_IOKIT = 1;

const int SDL_JOYSTICK_HIDAPI = 1;

const int SDL_HAPTIC_IOKIT = 1;

const int SDL_VIDEO_DRIVER_COCOA = 1;

const int SDL_PLATFORM_SUPPORTS_METAL = 0;

const int SDL_VIDEO_RENDER_METAL = 0;

const int SDL_VIDEO_OPENGL_CGL = 1;

const int SDL_VIDEO_METAL = 0;

const int SDL_POWER_MACOSX = 1;

const int SDL_FILESYSTEM_COCOA = 1;

const int SDL_AUDIO_DRIVER_ANDROID = 1;

const int SDL_AUDIO_DRIVER_OPENSLES = 1;

const int SDL_JOYSTICK_ANDROID = 1;

const int SDL_HAPTIC_ANDROID = 1;

const int SDL_SENSOR_ANDROID = 1;

const int SDL_VIDEO_DRIVER_ANDROID = 1;

const int SDL_VIDEO_OPENGL_ES = 1;

const int SDL_VIDEO_RENDER_OGL_ES = 1;

const int SDL_POWER_ANDROID = 1;

const int SDL_FILESYSTEM_ANDROID = 1;

const int XlibSpecificationRelease = 6;

const int X_PROTOCOL = 11;

const int X_PROTOCOL_REVISION = 0;

const int None = 0;

const int ParentRelative = 1;

const int CopyFromParent = 0;

const int PointerWindow = 0;

const int InputFocus = 1;

const int PointerRoot = 1;

const int AnyPropertyType = 0;

const int AnyKey = 0;

const int AnyButton = 0;

const int AllTemporary = 0;

const int CurrentTime = 0;

const int NoSymbol = 0;

const int NoEventMask = 0;

const int KeyPressMask = 1;

const int KeyReleaseMask = 2;

const int ButtonPressMask = 4;

const int ButtonReleaseMask = 8;

const int EnterWindowMask = 16;

const int LeaveWindowMask = 32;

const int PointerMotionMask = 64;

const int PointerMotionHintMask = 128;

const int Button1MotionMask = 256;

const int Button2MotionMask = 512;

const int Button3MotionMask = 1024;

const int Button4MotionMask = 2048;

const int Button5MotionMask = 4096;

const int ButtonMotionMask = 8192;

const int KeymapStateMask = 16384;

const int ExposureMask = 32768;

const int VisibilityChangeMask = 65536;

const int StructureNotifyMask = 131072;

const int ResizeRedirectMask = 262144;

const int SubstructureNotifyMask = 524288;

const int SubstructureRedirectMask = 1048576;

const int FocusChangeMask = 2097152;

const int PropertyChangeMask = 4194304;

const int ColormapChangeMask = 8388608;

const int OwnerGrabButtonMask = 16777216;

const int KeyPress = 2;

const int KeyRelease = 3;

const int ButtonPress = 4;

const int ButtonRelease = 5;

const int MotionNotify = 6;

const int EnterNotify = 7;

const int LeaveNotify = 8;

const int FocusIn = 9;

const int FocusOut = 10;

const int KeymapNotify = 11;

const int Expose = 12;

const int GraphicsExpose = 13;

const int NoExpose = 14;

const int VisibilityNotify = 15;

const int CreateNotify = 16;

const int DestroyNotify = 17;

const int UnmapNotify = 18;

const int MapNotify = 19;

const int MapRequest = 20;

const int ReparentNotify = 21;

const int ConfigureNotify = 22;

const int ConfigureRequest = 23;

const int GravityNotify = 24;

const int ResizeRequest = 25;

const int CirculateNotify = 26;

const int CirculateRequest = 27;

const int PropertyNotify = 28;

const int SelectionClear = 29;

const int SelectionRequest = 30;

const int SelectionNotify = 31;

const int ColormapNotify = 32;

const int ClientMessage = 33;

const int MappingNotify = 34;

const int GenericEvent = 35;

const int LASTEvent = 36;

const int ShiftMask = 1;

const int LockMask = 2;

const int ControlMask = 4;

const int Mod1Mask = 8;

const int Mod2Mask = 16;

const int Mod3Mask = 32;

const int Mod4Mask = 64;

const int Mod5Mask = 128;

const int ShiftMapIndex = 0;

const int LockMapIndex = 1;

const int ControlMapIndex = 2;

const int Mod1MapIndex = 3;

const int Mod2MapIndex = 4;

const int Mod3MapIndex = 5;

const int Mod4MapIndex = 6;

const int Mod5MapIndex = 7;

const int Button1Mask = 256;

const int Button2Mask = 512;

const int Button3Mask = 1024;

const int Button4Mask = 2048;

const int Button5Mask = 4096;

const int AnyModifier = 32768;

const int Button1 = 1;

const int Button2 = 2;

const int Button3 = 3;

const int Button4 = 4;

const int Button5 = 5;

const int NotifyNormal = 0;

const int NotifyGrab = 1;

const int NotifyUngrab = 2;

const int NotifyWhileGrabbed = 3;

const int NotifyHint = 1;

const int NotifyAncestor = 0;

const int NotifyVirtual = 1;

const int NotifyInferior = 2;

const int NotifyNonlinear = 3;

const int NotifyNonlinearVirtual = 4;

const int NotifyPointer = 5;

const int NotifyPointerRoot = 6;

const int NotifyDetailNone = 7;

const int VisibilityUnobscured = 0;

const int VisibilityPartiallyObscured = 1;

const int VisibilityFullyObscured = 2;

const int PlaceOnTop = 0;

const int PlaceOnBottom = 1;

const int FamilyInternet = 0;

const int FamilyDECnet = 1;

const int FamilyChaos = 2;

const int FamilyInternet6 = 6;

const int FamilyServerInterpreted = 5;

const int PropertyNewValue = 0;

const int PropertyDelete = 1;

const int ColormapUninstalled = 0;

const int ColormapInstalled = 1;

const int GrabModeSync = 0;

const int GrabModeAsync = 1;

const int GrabSuccess = 0;

const int AlreadyGrabbed = 1;

const int GrabInvalidTime = 2;

const int GrabNotViewable = 3;

const int GrabFrozen = 4;

const int AsyncPointer = 0;

const int SyncPointer = 1;

const int ReplayPointer = 2;

const int AsyncKeyboard = 3;

const int SyncKeyboard = 4;

const int ReplayKeyboard = 5;

const int AsyncBoth = 6;

const int SyncBoth = 7;

const int RevertToNone = 0;

const int RevertToPointerRoot = 1;

const int RevertToParent = 2;

const int Success = 0;

const int BadRequest = 1;

const int BadValue = 2;

const int BadWindow = 3;

const int BadPixmap = 4;

const int BadAtom = 5;

const int BadCursor = 6;

const int BadFont = 7;

const int BadMatch = 8;

const int BadDrawable = 9;

const int BadAccess = 10;

const int BadAlloc = 11;

const int BadColor = 12;

const int BadGC = 13;

const int BadIDChoice = 14;

const int BadName = 15;

const int BadLength = 16;

const int BadImplementation = 17;

const int FirstExtensionError = 128;

const int LastExtensionError = 255;

const int InputOutput = 1;

const int InputOnly = 2;

const int CWBackPixmap = 1;

const int CWBackPixel = 2;

const int CWBorderPixmap = 4;

const int CWBorderPixel = 8;

const int CWBitGravity = 16;

const int CWWinGravity = 32;

const int CWBackingStore = 64;

const int CWBackingPlanes = 128;

const int CWBackingPixel = 256;

const int CWOverrideRedirect = 512;

const int CWSaveUnder = 1024;

const int CWEventMask = 2048;

const int CWDontPropagate = 4096;

const int CWColormap = 8192;

const int CWCursor = 16384;

const int CWX = 1;

const int CWY = 2;

const int CWWidth = 4;

const int CWHeight = 8;

const int CWBorderWidth = 16;

const int CWSibling = 32;

const int CWStackMode = 64;

const int ForgetGravity = 0;

const int NorthWestGravity = 1;

const int NorthGravity = 2;

const int NorthEastGravity = 3;

const int WestGravity = 4;

const int CenterGravity = 5;

const int EastGravity = 6;

const int SouthWestGravity = 7;

const int SouthGravity = 8;

const int SouthEastGravity = 9;

const int StaticGravity = 10;

const int UnmapGravity = 0;

const int NotUseful = 0;

const int WhenMapped = 1;

const int Always = 2;

const int IsUnmapped = 0;

const int IsUnviewable = 1;

const int IsViewable = 2;

const int SetModeInsert = 0;

const int SetModeDelete = 1;

const int DestroyAll = 0;

const int RetainPermanent = 1;

const int RetainTemporary = 2;

const int Above = 0;

const int Below = 1;

const int TopIf = 2;

const int BottomIf = 3;

const int Opposite = 4;

const int RaiseLowest = 0;

const int LowerHighest = 1;

const int PropModeReplace = 0;

const int PropModePrepend = 1;

const int PropModeAppend = 2;

const int GXclear = 0;

const int GXand = 1;

const int GXandReverse = 2;

const int GXcopy = 3;

const int GXandInverted = 4;

const int GXnoop = 5;

const int GXxor = 6;

const int GXor = 7;

const int GXnor = 8;

const int GXequiv = 9;

const int GXinvert = 10;

const int GXorReverse = 11;

const int GXcopyInverted = 12;

const int GXorInverted = 13;

const int GXnand = 14;

const int GXset = 15;

const int LineSolid = 0;

const int LineOnOffDash = 1;

const int LineDoubleDash = 2;

const int CapNotLast = 0;

const int CapButt = 1;

const int CapRound = 2;

const int CapProjecting = 3;

const int JoinMiter = 0;

const int JoinRound = 1;

const int JoinBevel = 2;

const int FillSolid = 0;

const int FillTiled = 1;

const int FillStippled = 2;

const int FillOpaqueStippled = 3;

const int EvenOddRule = 0;

const int WindingRule = 1;

const int ClipByChildren = 0;

const int IncludeInferiors = 1;

const int Unsorted = 0;

const int YSorted = 1;

const int YXSorted = 2;

const int YXBanded = 3;

const int CoordModeOrigin = 0;

const int CoordModePrevious = 1;

const int Complex = 0;

const int Nonconvex = 1;

const int Convex = 2;

const int ArcChord = 0;

const int ArcPieSlice = 1;

const int GCFunction = 1;

const int GCPlaneMask = 2;

const int GCForeground = 4;

const int GCBackground = 8;

const int GCLineWidth = 16;

const int GCLineStyle = 32;

const int GCCapStyle = 64;

const int GCJoinStyle = 128;

const int GCFillStyle = 256;

const int GCFillRule = 512;

const int GCTile = 1024;

const int GCStipple = 2048;

const int GCTileStipXOrigin = 4096;

const int GCTileStipYOrigin = 8192;

const int GCFont = 16384;

const int GCSubwindowMode = 32768;

const int GCGraphicsExposures = 65536;

const int GCClipXOrigin = 131072;

const int GCClipYOrigin = 262144;

const int GCClipMask = 524288;

const int GCDashOffset = 1048576;

const int GCDashList = 2097152;

const int GCArcMode = 4194304;

const int GCLastBit = 22;

const int FontLeftToRight = 0;

const int FontRightToLeft = 1;

const int FontChange = 255;

const int XYBitmap = 0;

const int XYPixmap = 1;

const int ZPixmap = 2;

const int AllocNone = 0;

const int AllocAll = 1;

const int DoRed = 1;

const int DoGreen = 2;

const int DoBlue = 4;

const int CursorShape = 0;

const int TileShape = 1;

const int StippleShape = 2;

const int AutoRepeatModeOff = 0;

const int AutoRepeatModeOn = 1;

const int AutoRepeatModeDefault = 2;

const int LedModeOff = 0;

const int LedModeOn = 1;

const int KBKeyClickPercent = 1;

const int KBBellPercent = 2;

const int KBBellPitch = 4;

const int KBBellDuration = 8;

const int KBLed = 16;

const int KBLedMode = 32;

const int KBKey = 64;

const int KBAutoRepeatMode = 128;

const int MappingSuccess = 0;

const int MappingBusy = 1;

const int MappingFailed = 2;

const int MappingModifier = 0;

const int MappingKeyboard = 1;

const int MappingPointer = 2;

const int DontPreferBlanking = 0;

const int PreferBlanking = 1;

const int DefaultBlanking = 2;

const int DisableScreenSaver = 0;

const int DisableScreenInterval = 0;

const int DontAllowExposures = 0;

const int AllowExposures = 1;

const int DefaultExposures = 2;

const int ScreenSaverReset = 0;

const int ScreenSaverActive = 1;

const int HostInsert = 0;

const int HostDelete = 1;

const int EnableAccess = 1;

const int DisableAccess = 0;

const int StaticGray = 0;

const int GrayScale = 1;

const int StaticColor = 2;

const int PseudoColor = 3;

const int TrueColor = 4;

const int DirectColor = 5;

const int LSBFirst = 0;

const int MSBFirst = 1;

const int NeedVarargsPrototypes = 1;

const int NeedNestedPrototypes = 1;

const int FUNCPROTO = 15;

const int NeedWidePrototypes = 0;

const int X_HAVE_UTF8_STRING = 1;

const int True = 1;

const int False = 0;

const int QueuedAlready = 0;

const int QueuedAfterReading = 1;

const int QueuedAfterFlush = 2;

const int AllPlanes = -1;

const String XNRequiredCharSet = 'requiredCharSet';

const String XNQueryOrientation = 'queryOrientation';

const String XNBaseFontName = 'baseFontName';

const String XNOMAutomatic = 'omAutomatic';

const String XNMissingCharSet = 'missingCharSet';

const String XNDefaultString = 'defaultString';

const String XNOrientation = 'orientation';

const String XNDirectionalDependentDrawing = 'directionalDependentDrawing';

const String XNContextualDrawing = 'contextualDrawing';

const String XNFontInfo = 'fontInfo';

const int XIMPreeditArea = 1;

const int XIMPreeditCallbacks = 2;

const int XIMPreeditPosition = 4;

const int XIMPreeditNothing = 8;

const int XIMPreeditNone = 16;

const int XIMStatusArea = 256;

const int XIMStatusCallbacks = 512;

const int XIMStatusNothing = 1024;

const int XIMStatusNone = 2048;

const String XNVaNestedList = 'XNVaNestedList';

const String XNQueryInputStyle = 'queryInputStyle';

const String XNClientWindow = 'clientWindow';

const String XNInputStyle = 'inputStyle';

const String XNFocusWindow = 'focusWindow';

const String XNResourceName = 'resourceName';

const String XNResourceClass = 'resourceClass';

const String XNGeometryCallback = 'geometryCallback';

const String XNDestroyCallback = 'destroyCallback';

const String XNFilterEvents = 'filterEvents';

const String XNPreeditStartCallback = 'preeditStartCallback';

const String XNPreeditDoneCallback = 'preeditDoneCallback';

const String XNPreeditDrawCallback = 'preeditDrawCallback';

const String XNPreeditCaretCallback = 'preeditCaretCallback';

const String XNPreeditStateNotifyCallback = 'preeditStateNotifyCallback';

const String XNPreeditAttributes = 'preeditAttributes';

const String XNStatusStartCallback = 'statusStartCallback';

const String XNStatusDoneCallback = 'statusDoneCallback';

const String XNStatusDrawCallback = 'statusDrawCallback';

const String XNStatusAttributes = 'statusAttributes';

const String XNArea = 'area';

const String XNAreaNeeded = 'areaNeeded';

const String XNSpotLocation = 'spotLocation';

const String XNColormap = 'colorMap';

const String XNStdColormap = 'stdColorMap';

const String XNForeground = 'foreground';

const String XNBackground = 'background';

const String XNBackgroundPixmap = 'backgroundPixmap';

const String XNFontSet = 'fontSet';

const String XNLineSpace = 'lineSpace';

const String XNCursor = 'cursor';

const String XNQueryIMValuesList = 'queryIMValuesList';

const String XNQueryICValuesList = 'queryICValuesList';

const String XNVisiblePosition = 'visiblePosition';

const String XNR6PreeditCallback = 'r6PreeditCallback';

const String XNStringConversionCallback = 'stringConversionCallback';

const String XNStringConversion = 'stringConversion';

const String XNResetState = 'resetState';

const String XNHotKey = 'hotKey';

const String XNHotKeyState = 'hotKeyState';

const String XNPreeditState = 'preeditState';

const String XNSeparatorofNestedList = 'separatorofNestedList';

const int XBufferOverflow = -1;

const int XLookupNone = 1;

const int XLookupChars = 2;

const int XLookupKeySym = 3;

const int XLookupBoth = 4;

const int XIMReverse = 1;

const int XIMUnderline = 2;

const int XIMHighlight = 4;

const int XIMPrimary = 32;

const int XIMSecondary = 64;

const int XIMTertiary = 128;

const int XIMVisibleToForward = 256;

const int XIMVisibleToBackword = 512;

const int XIMVisibleToCenter = 1024;

const int XIMPreeditUnKnown = 0;

const int XIMPreeditEnable = 1;

const int XIMPreeditDisable = 2;

const int XIMInitialState = 1;

const int XIMPreserveState = 2;

const int XIMStringConversionLeftEdge = 1;

const int XIMStringConversionRightEdge = 2;

const int XIMStringConversionTopEdge = 4;

const int XIMStringConversionBottomEdge = 8;

const int XIMStringConversionConcealed = 16;

const int XIMStringConversionWrapped = 32;

const int XIMStringConversionBuffer = 1;

const int XIMStringConversionLine = 2;

const int XIMStringConversionWord = 3;

const int XIMStringConversionChar = 4;

const int XIMStringConversionSubstitution = 1;

const int XIMStringConversionRetrieval = 2;

const int XIMHotKeyStateON = 1;

const int XIMHotKeyStateOFF = 2;

const int FONT_CHARACTER_SIZE = 8;

const int GL_VERSION_1_1 = 1;

const int GL_FALSE = 0;

const int GL_TRUE = 1;

const int GL_BYTE = 5120;

const int GL_UNSIGNED_BYTE = 5121;

const int GL_SHORT = 5122;

const int GL_INT = 5124;

const int GL_FLOAT = 5126;

const int GL_2_BYTES = 5127;

const int GL_3_BYTES = 5128;

const int GL_4_BYTES = 5129;

const int GL_DOUBLE = 5130;

const int GL_POINTS = 0;

const int GL_LINES = 1;

const int GL_LINE_LOOP = 2;

const int GL_LINE_STRIP = 3;

const int GL_TRIANGLES = 4;

const int GL_TRIANGLE_STRIP = 5;

const int GL_TRIANGLE_FAN = 6;

const int GL_QUADS = 7;

const int GL_QUAD_STRIP = 8;

const int GL_POLYGON = 9;

const int GL_VERTEX_ARRAY = 32884;

const int GL_NORMAL_ARRAY = 32885;

const int GL_COLOR_ARRAY = 32886;

const int GL_INDEX_ARRAY = 32887;

const int GL_TEXTURE_COORD_ARRAY = 32888;

const int GL_EDGE_FLAG_ARRAY = 32889;

const int GL_VERTEX_ARRAY_SIZE = 32890;

const int GL_VERTEX_ARRAY_TYPE = 32891;

const int GL_VERTEX_ARRAY_STRIDE = 32892;

const int GL_NORMAL_ARRAY_TYPE = 32894;

const int GL_NORMAL_ARRAY_STRIDE = 32895;

const int GL_COLOR_ARRAY_SIZE = 32897;

const int GL_COLOR_ARRAY_TYPE = 32898;

const int GL_COLOR_ARRAY_STRIDE = 32899;

const int GL_INDEX_ARRAY_TYPE = 32901;

const int GL_INDEX_ARRAY_STRIDE = 32902;

const int GL_TEXTURE_COORD_ARRAY_SIZE = 32904;

const int GL_TEXTURE_COORD_ARRAY_TYPE = 32905;

const int GL_TEXTURE_COORD_ARRAY_STRIDE = 32906;

const int GL_EDGE_FLAG_ARRAY_STRIDE = 32908;

const int GL_VERTEX_ARRAY_POINTER = 32910;

const int GL_NORMAL_ARRAY_POINTER = 32911;

const int GL_COLOR_ARRAY_POINTER = 32912;

const int GL_INDEX_ARRAY_POINTER = 32913;

const int GL_TEXTURE_COORD_ARRAY_POINTER = 32914;

const int GL_EDGE_FLAG_ARRAY_POINTER = 32915;

const int GL_V2F = 10784;

const int GL_V3F = 10785;

const int GL_C4UB_V2F = 10786;

const int GL_C4UB_V3F = 10787;

const int GL_C3F_V3F = 10788;

const int GL_N3F_V3F = 10789;

const int GL_C4F_N3F_V3F = 10790;

const int GL_T2F_V3F = 10791;

const int GL_T4F_V4F = 10792;

const int GL_T2F_C4UB_V3F = 10793;

const int GL_T2F_C3F_V3F = 10794;

const int GL_T2F_N3F_V3F = 10795;

const int GL_T2F_C4F_N3F_V3F = 10796;

const int GL_T4F_C4F_N3F_V4F = 10797;

const int GL_MATRIX_MODE = 2976;

const int GL_MODELVIEW = 5888;

const int GL_PROJECTION = 5889;

const int GL_TEXTURE = 5890;

const int GL_POINT_SMOOTH = 2832;

const int GL_POINT_SIZE = 2833;

const int GL_POINT_SIZE_GRANULARITY = 2835;

const int GL_POINT_SIZE_RANGE = 2834;

const int GL_LINE_SMOOTH = 2848;

const int GL_LINE_STIPPLE = 2852;

const int GL_LINE_STIPPLE_PATTERN = 2853;

const int GL_LINE_STIPPLE_REPEAT = 2854;

const int GL_LINE_WIDTH = 2849;

const int GL_LINE_WIDTH_GRANULARITY = 2851;

const int GL_LINE_WIDTH_RANGE = 2850;

const int GL_POINT = 6912;

const int GL_LINE = 6913;

const int GL_FILL = 6914;

const int GL_CW = 2304;

const int GL_CCW = 2305;

const int GL_FRONT = 1028;

const int GL_BACK = 1029;

const int GL_POLYGON_MODE = 2880;

const int GL_POLYGON_SMOOTH = 2881;

const int GL_POLYGON_STIPPLE = 2882;

const int GL_EDGE_FLAG = 2883;

const int GL_CULL_FACE = 2884;

const int GL_CULL_FACE_MODE = 2885;

const int GL_FRONT_FACE = 2886;

const int GL_POLYGON_OFFSET_FACTOR = 32824;

const int GL_POLYGON_OFFSET_UNITS = 10752;

const int GL_POLYGON_OFFSET_POINT = 10753;

const int GL_POLYGON_OFFSET_LINE = 10754;

const int GL_POLYGON_OFFSET_FILL = 32823;

const int GL_COMPILE = 4864;

const int GL_COMPILE_AND_EXECUTE = 4865;

const int GL_LIST_BASE = 2866;

const int GL_LIST_INDEX = 2867;

const int GL_LIST_MODE = 2864;

const int GL_NEVER = 512;

const int GL_LESS = 513;

const int GL_EQUAL = 514;

const int GL_LEQUAL = 515;

const int GL_GREATER = 516;

const int GL_NOTEQUAL = 517;

const int GL_GEQUAL = 518;

const int GL_ALWAYS = 519;

const int GL_DEPTH_TEST = 2929;

const int GL_DEPTH_BITS = 3414;

const int GL_DEPTH_CLEAR_VALUE = 2931;

const int GL_DEPTH_FUNC = 2932;

const int GL_DEPTH_RANGE = 2928;

const int GL_DEPTH_WRITEMASK = 2930;

const int GL_LIGHTING = 2896;

const int GL_LIGHT0 = 16384;

const int GL_LIGHT1 = 16385;

const int GL_LIGHT2 = 16386;

const int GL_LIGHT3 = 16387;

const int GL_LIGHT4 = 16388;

const int GL_LIGHT5 = 16389;

const int GL_LIGHT6 = 16390;

const int GL_LIGHT7 = 16391;

const int GL_SPOT_EXPONENT = 4613;

const int GL_SPOT_CUTOFF = 4614;

const int GL_CONSTANT_ATTENUATION = 4615;

const int GL_LINEAR_ATTENUATION = 4616;

const int GL_QUADRATIC_ATTENUATION = 4617;

const int GL_AMBIENT = 4608;

const int GL_DIFFUSE = 4609;

const int GL_SPECULAR = 4610;

const int GL_SHININESS = 5633;

const int GL_EMISSION = 5632;

const int GL_POSITION = 4611;

const int GL_SPOT_DIRECTION = 4612;

const int GL_AMBIENT_AND_DIFFUSE = 5634;

const int GL_COLOR_INDEXES = 5635;

const int GL_LIGHT_MODEL_TWO_SIDE = 2898;

const int GL_LIGHT_MODEL_LOCAL_VIEWER = 2897;

const int GL_LIGHT_MODEL_AMBIENT = 2899;

const int GL_FRONT_AND_BACK = 1032;

const int GL_SHADE_MODEL = 2900;

const int GL_FLAT = 7424;

const int GL_SMOOTH = 7425;

const int GL_COLOR_MATERIAL = 2903;

const int GL_COLOR_MATERIAL_FACE = 2901;

const int GL_COLOR_MATERIAL_PARAMETER = 2902;

const int GL_NORMALIZE = 2977;

const int GL_CLIP_PLANE0 = 12288;

const int GL_CLIP_PLANE1 = 12289;

const int GL_CLIP_PLANE2 = 12290;

const int GL_CLIP_PLANE3 = 12291;

const int GL_CLIP_PLANE4 = 12292;

const int GL_CLIP_PLANE5 = 12293;

const int GL_ACCUM_RED_BITS = 3416;

const int GL_ACCUM_GREEN_BITS = 3417;

const int GL_ACCUM_BLUE_BITS = 3418;

const int GL_ACCUM_ALPHA_BITS = 3419;

const int GL_ACCUM_CLEAR_VALUE = 2944;

const int GL_ACCUM = 256;

const int GL_ADD = 260;

const int GL_LOAD = 257;

const int GL_MULT = 259;

const int GL_RETURN = 258;

const int GL_ALPHA_TEST = 3008;

const int GL_ALPHA_TEST_REF = 3010;

const int GL_ALPHA_TEST_FUNC = 3009;

const int GL_BLEND = 3042;

const int GL_BLEND_SRC = 3041;

const int GL_BLEND_DST = 3040;

const int GL_ZERO = 0;

const int GL_ONE = 1;

const int GL_SRC_COLOR = 768;

const int GL_ONE_MINUS_SRC_COLOR = 769;

const int GL_SRC_ALPHA = 770;

const int GL_ONE_MINUS_SRC_ALPHA = 771;

const int GL_DST_ALPHA = 772;

const int GL_ONE_MINUS_DST_ALPHA = 773;

const int GL_DST_COLOR = 774;

const int GL_ONE_MINUS_DST_COLOR = 775;

const int GL_SRC_ALPHA_SATURATE = 776;

const int GL_FEEDBACK = 7169;

const int GL_RENDER = 7168;

const int GL_SELECT = 7170;

const int GL_2D = 1536;

const int GL_3D = 1537;

const int GL_3D_COLOR = 1538;

const int GL_3D_COLOR_TEXTURE = 1539;

const int GL_4D_COLOR_TEXTURE = 1540;

const int GL_POINT_TOKEN = 1793;

const int GL_LINE_TOKEN = 1794;

const int GL_LINE_RESET_TOKEN = 1799;

const int GL_POLYGON_TOKEN = 1795;

const int GL_BITMAP_TOKEN = 1796;

const int GL_DRAW_PIXEL_TOKEN = 1797;

const int GL_COPY_PIXEL_TOKEN = 1798;

const int GL_PASS_THROUGH_TOKEN = 1792;

const int GL_FEEDBACK_BUFFER_POINTER = 3568;

const int GL_FEEDBACK_BUFFER_SIZE = 3569;

const int GL_FEEDBACK_BUFFER_TYPE = 3570;

const int GL_SELECTION_BUFFER_POINTER = 3571;

const int GL_SELECTION_BUFFER_SIZE = 3572;

const int GL_FOG = 2912;

const int GL_FOG_MODE = 2917;

const int GL_FOG_DENSITY = 2914;

const int GL_FOG_COLOR = 2918;

const int GL_FOG_INDEX = 2913;

const int GL_FOG_START = 2915;

const int GL_FOG_END = 2916;

const int GL_LINEAR = 9729;

const int GL_EXP = 2048;

const int GL_EXP2 = 2049;

const int GL_LOGIC_OP = 3057;

const int GL_INDEX_LOGIC_OP = 3057;

const int GL_COLOR_LOGIC_OP = 3058;

const int GL_LOGIC_OP_MODE = 3056;

const int GL_CLEAR = 5376;

const int GL_SET = 5391;

const int GL_COPY = 5379;

const int GL_COPY_INVERTED = 5388;

const int GL_NOOP = 5381;

const int GL_INVERT = 5386;

const int GL_AND = 5377;

const int GL_NAND = 5390;

const int GL_OR = 5383;

const int GL_NOR = 5384;

const int GL_XOR = 5382;

const int GL_EQUIV = 5385;

const int GL_AND_REVERSE = 5378;

const int GL_AND_INVERTED = 5380;

const int GL_OR_REVERSE = 5387;

const int GL_OR_INVERTED = 5389;

const int GL_STENCIL_BITS = 3415;

const int GL_STENCIL_TEST = 2960;

const int GL_STENCIL_CLEAR_VALUE = 2961;

const int GL_STENCIL_FUNC = 2962;

const int GL_STENCIL_VALUE_MASK = 2963;

const int GL_STENCIL_FAIL = 2964;

const int GL_STENCIL_PASS_DEPTH_FAIL = 2965;

const int GL_STENCIL_PASS_DEPTH_PASS = 2966;

const int GL_STENCIL_REF = 2967;

const int GL_STENCIL_WRITEMASK = 2968;

const int GL_STENCIL_INDEX = 6401;

const int GL_KEEP = 7680;

const int GL_REPLACE = 7681;

const int GL_INCR = 7682;

const int GL_DECR = 7683;

const int GL_NONE = 0;

const int GL_LEFT = 1030;

const int GL_RIGHT = 1031;

const int GL_FRONT_LEFT = 1024;

const int GL_FRONT_RIGHT = 1025;

const int GL_BACK_LEFT = 1026;

const int GL_BACK_RIGHT = 1027;

const int GL_AUX0 = 1033;

const int GL_AUX1 = 1034;

const int GL_AUX2 = 1035;

const int GL_AUX3 = 1036;

const int GL_COLOR_INDEX = 6400;

const int GL_RED = 6403;

const int GL_GREEN = 6404;

const int GL_BLUE = 6405;

const int GL_ALPHA = 6406;

const int GL_LUMINANCE = 6409;

const int GL_LUMINANCE_ALPHA = 6410;

const int GL_ALPHA_BITS = 3413;

const int GL_RED_BITS = 3410;

const int GL_GREEN_BITS = 3411;

const int GL_BLUE_BITS = 3412;

const int GL_INDEX_BITS = 3409;

const int GL_SUBPIXEL_BITS = 3408;

const int GL_AUX_BUFFERS = 3072;

const int GL_READ_BUFFER = 3074;

const int GL_DRAW_BUFFER = 3073;

const int GL_DOUBLEBUFFER = 3122;

const int GL_STEREO = 3123;

const int GL_BITMAP = 6656;

const int GL_COLOR = 6144;

const int GL_DEPTH = 6145;

const int GL_STENCIL = 6146;

const int GL_DITHER = 3024;

const int GL_RGB = 6407;

const int GL_RGBA = 6408;

const int GL_MAX_LIST_NESTING = 2865;

const int GL_MAX_EVAL_ORDER = 3376;

const int GL_MAX_LIGHTS = 3377;

const int GL_MAX_CLIP_PLANES = 3378;

const int GL_MAX_TEXTURE_SIZE = 3379;

const int GL_MAX_PIXEL_MAP_TABLE = 3380;

const int GL_MAX_ATTRIB_STACK_DEPTH = 3381;

const int GL_MAX_MODELVIEW_STACK_DEPTH = 3382;

const int GL_MAX_NAME_STACK_DEPTH = 3383;

const int GL_MAX_PROJECTION_STACK_DEPTH = 3384;

const int GL_MAX_TEXTURE_STACK_DEPTH = 3385;

const int GL_MAX_VIEWPORT_DIMS = 3386;

const int GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 3387;

const int GL_ATTRIB_STACK_DEPTH = 2992;

const int GL_CLIENT_ATTRIB_STACK_DEPTH = 2993;

const int GL_COLOR_CLEAR_VALUE = 3106;

const int GL_COLOR_WRITEMASK = 3107;

const int GL_CURRENT_INDEX = 2817;

const int GL_CURRENT_COLOR = 2816;

const int GL_CURRENT_NORMAL = 2818;

const int GL_CURRENT_RASTER_COLOR = 2820;

const int GL_CURRENT_RASTER_DISTANCE = 2825;

const int GL_CURRENT_RASTER_INDEX = 2821;

const int GL_CURRENT_RASTER_POSITION = 2823;

const int GL_CURRENT_RASTER_TEXTURE_COORDS = 2822;

const int GL_CURRENT_RASTER_POSITION_VALID = 2824;

const int GL_CURRENT_TEXTURE_COORDS = 2819;

const int GL_INDEX_CLEAR_VALUE = 3104;

const int GL_INDEX_MODE = 3120;

const int GL_INDEX_WRITEMASK = 3105;

const int GL_MODELVIEW_MATRIX = 2982;

const int GL_MODELVIEW_STACK_DEPTH = 2979;

const int GL_NAME_STACK_DEPTH = 3440;

const int GL_PROJECTION_MATRIX = 2983;

const int GL_PROJECTION_STACK_DEPTH = 2980;

const int GL_RENDER_MODE = 3136;

const int GL_RGBA_MODE = 3121;

const int GL_TEXTURE_MATRIX = 2984;

const int GL_TEXTURE_STACK_DEPTH = 2981;

const int GL_VIEWPORT = 2978;

const int GL_AUTO_NORMAL = 3456;

const int GL_MAP1_COLOR_4 = 3472;

const int GL_MAP1_INDEX = 3473;

const int GL_MAP1_NORMAL = 3474;

const int GL_MAP1_TEXTURE_COORD_1 = 3475;

const int GL_MAP1_TEXTURE_COORD_2 = 3476;

const int GL_MAP1_TEXTURE_COORD_3 = 3477;

const int GL_MAP1_TEXTURE_COORD_4 = 3478;

const int GL_MAP1_VERTEX_3 = 3479;

const int GL_MAP1_VERTEX_4 = 3480;

const int GL_MAP2_COLOR_4 = 3504;

const int GL_MAP2_INDEX = 3505;

const int GL_MAP2_NORMAL = 3506;

const int GL_MAP2_TEXTURE_COORD_1 = 3507;

const int GL_MAP2_TEXTURE_COORD_2 = 3508;

const int GL_MAP2_TEXTURE_COORD_3 = 3509;

const int GL_MAP2_TEXTURE_COORD_4 = 3510;

const int GL_MAP2_VERTEX_3 = 3511;

const int GL_MAP2_VERTEX_4 = 3512;

const int GL_MAP1_GRID_DOMAIN = 3536;

const int GL_MAP1_GRID_SEGMENTS = 3537;

const int GL_MAP2_GRID_DOMAIN = 3538;

const int GL_MAP2_GRID_SEGMENTS = 3539;

const int GL_COEFF = 2560;

const int GL_ORDER = 2561;

const int GL_DOMAIN = 2562;

const int GL_PERSPECTIVE_CORRECTION_HINT = 3152;

const int GL_POINT_SMOOTH_HINT = 3153;

const int GL_LINE_SMOOTH_HINT = 3154;

const int GL_POLYGON_SMOOTH_HINT = 3155;

const int GL_FOG_HINT = 3156;

const int GL_DONT_CARE = 4352;

const int GL_FASTEST = 4353;

const int GL_NICEST = 4354;

const int GL_SCISSOR_BOX = 3088;

const int GL_SCISSOR_TEST = 3089;

const int GL_MAP_COLOR = 3344;

const int GL_MAP_STENCIL = 3345;

const int GL_INDEX_SHIFT = 3346;

const int GL_INDEX_OFFSET = 3347;

const int GL_RED_SCALE = 3348;

const int GL_RED_BIAS = 3349;

const int GL_GREEN_SCALE = 3352;

const int GL_GREEN_BIAS = 3353;

const int GL_BLUE_SCALE = 3354;

const int GL_BLUE_BIAS = 3355;

const int GL_ALPHA_SCALE = 3356;

const int GL_ALPHA_BIAS = 3357;

const int GL_DEPTH_SCALE = 3358;

const int GL_DEPTH_BIAS = 3359;

const int GL_PIXEL_MAP_S_TO_S_SIZE = 3249;

const int GL_PIXEL_MAP_I_TO_I_SIZE = 3248;

const int GL_PIXEL_MAP_I_TO_R_SIZE = 3250;

const int GL_PIXEL_MAP_I_TO_G_SIZE = 3251;

const int GL_PIXEL_MAP_I_TO_B_SIZE = 3252;

const int GL_PIXEL_MAP_I_TO_A_SIZE = 3253;

const int GL_PIXEL_MAP_R_TO_R_SIZE = 3254;

const int GL_PIXEL_MAP_G_TO_G_SIZE = 3255;

const int GL_PIXEL_MAP_B_TO_B_SIZE = 3256;

const int GL_PIXEL_MAP_A_TO_A_SIZE = 3257;

const int GL_PIXEL_MAP_S_TO_S = 3185;

const int GL_PIXEL_MAP_I_TO_I = 3184;

const int GL_PIXEL_MAP_I_TO_R = 3186;

const int GL_PIXEL_MAP_I_TO_G = 3187;

const int GL_PIXEL_MAP_I_TO_B = 3188;

const int GL_PIXEL_MAP_I_TO_A = 3189;

const int GL_PIXEL_MAP_R_TO_R = 3190;

const int GL_PIXEL_MAP_G_TO_G = 3191;

const int GL_PIXEL_MAP_B_TO_B = 3192;

const int GL_PIXEL_MAP_A_TO_A = 3193;

const int GL_PACK_ALIGNMENT = 3333;

const int GL_PACK_LSB_FIRST = 3329;

const int GL_PACK_ROW_LENGTH = 3330;

const int GL_PACK_SKIP_PIXELS = 3332;

const int GL_PACK_SKIP_ROWS = 3331;

const int GL_PACK_SWAP_BYTES = 3328;

const int GL_UNPACK_ALIGNMENT = 3317;

const int GL_UNPACK_LSB_FIRST = 3313;

const int GL_UNPACK_ROW_LENGTH = 3314;

const int GL_UNPACK_SKIP_PIXELS = 3316;

const int GL_UNPACK_SKIP_ROWS = 3315;

const int GL_UNPACK_SWAP_BYTES = 3312;

const int GL_ZOOM_X = 3350;

const int GL_ZOOM_Y = 3351;

const int GL_TEXTURE_ENV = 8960;

const int GL_TEXTURE_ENV_MODE = 8704;

const int GL_TEXTURE_1D = 3552;

const int GL_TEXTURE_2D = 3553;

const int GL_TEXTURE_WRAP_S = 10242;

const int GL_TEXTURE_WRAP_T = 10243;

const int GL_TEXTURE_MAG_FILTER = 10240;

const int GL_TEXTURE_MIN_FILTER = 10241;

const int GL_TEXTURE_ENV_COLOR = 8705;

const int GL_TEXTURE_GEN_S = 3168;

const int GL_TEXTURE_GEN_T = 3169;

const int GL_TEXTURE_GEN_R = 3170;

const int GL_TEXTURE_GEN_Q = 3171;

const int GL_TEXTURE_GEN_MODE = 9472;

const int GL_TEXTURE_BORDER_COLOR = 4100;

const int GL_TEXTURE_WIDTH = 4096;

const int GL_TEXTURE_HEIGHT = 4097;

const int GL_TEXTURE_BORDER = 4101;

const int GL_TEXTURE_COMPONENTS = 4099;

const int GL_TEXTURE_RED_SIZE = 32860;

const int GL_TEXTURE_GREEN_SIZE = 32861;

const int GL_TEXTURE_BLUE_SIZE = 32862;

const int GL_TEXTURE_ALPHA_SIZE = 32863;

const int GL_TEXTURE_LUMINANCE_SIZE = 32864;

const int GL_TEXTURE_INTENSITY_SIZE = 32865;

const int GL_NEAREST_MIPMAP_NEAREST = 9984;

const int GL_NEAREST_MIPMAP_LINEAR = 9986;

const int GL_LINEAR_MIPMAP_NEAREST = 9985;

const int GL_LINEAR_MIPMAP_LINEAR = 9987;

const int GL_OBJECT_LINEAR = 9217;

const int GL_OBJECT_PLANE = 9473;

const int GL_EYE_LINEAR = 9216;

const int GL_EYE_PLANE = 9474;

const int GL_SPHERE_MAP = 9218;

const int GL_DECAL = 8449;

const int GL_MODULATE = 8448;

const int GL_NEAREST = 9728;

const int GL_REPEAT = 10497;

const int GL_CLAMP = 10496;

const int GL_S = 8192;

const int GL_T = 8193;

const int GL_R = 8194;

const int GL_Q = 8195;

const int GL_VENDOR = 7936;

const int GL_RENDERER = 7937;

const int GL_VERSION = 7938;

const int GL_EXTENSIONS = 7939;

const int GL_NO_ERROR = 0;

const int GL_INVALID_ENUM = 1280;

const int GL_INVALID_VALUE = 1281;

const int GL_INVALID_OPERATION = 1282;

const int GL_STACK_OVERFLOW = 1283;

const int GL_STACK_UNDERFLOW = 1284;

const int GL_OUT_OF_MEMORY = 1285;

const int GL_CURRENT_BIT = 1;

const int GL_POINT_BIT = 2;

const int GL_LINE_BIT = 4;

const int GL_POLYGON_BIT = 8;

const int GL_POLYGON_STIPPLE_BIT = 16;

const int GL_PIXEL_MODE_BIT = 32;

const int GL_LIGHTING_BIT = 64;

const int GL_FOG_BIT = 128;

const int GL_DEPTH_BUFFER_BIT = 256;

const int GL_ACCUM_BUFFER_BIT = 512;

const int GL_STENCIL_BUFFER_BIT = 1024;

const int GL_VIEWPORT_BIT = 2048;

const int GL_TRANSFORM_BIT = 4096;

const int GL_ENABLE_BIT = 8192;

const int GL_COLOR_BUFFER_BIT = 16384;

const int GL_HINT_BIT = 32768;

const int GL_EVAL_BIT = 65536;

const int GL_LIST_BIT = 131072;

const int GL_TEXTURE_BIT = 262144;

const int GL_SCISSOR_BIT = 524288;

const int GL_ALL_ATTRIB_BITS = 1048575;

const int GL_PROXY_TEXTURE_1D = 32867;

const int GL_PROXY_TEXTURE_2D = 32868;

const int GL_TEXTURE_PRIORITY = 32870;

const int GL_TEXTURE_RESIDENT = 32871;

const int GL_TEXTURE_BINDING_1D = 32872;

const int GL_TEXTURE_BINDING_2D = 32873;

const int GL_TEXTURE_INTERNAL_FORMAT = 4099;

const int GL_ALPHA4 = 32827;

const int GL_ALPHA8 = 32828;

const int GL_ALPHA12 = 32829;

const int GL_ALPHA16 = 32830;

const int GL_LUMINANCE4 = 32831;

const int GL_LUMINANCE8 = 32832;

const int GL_LUMINANCE12 = 32833;

const int GL_LUMINANCE16 = 32834;

const int GL_LUMINANCE4_ALPHA4 = 32835;

const int GL_LUMINANCE6_ALPHA2 = 32836;

const int GL_LUMINANCE8_ALPHA8 = 32837;

const int GL_LUMINANCE12_ALPHA4 = 32838;

const int GL_LUMINANCE12_ALPHA12 = 32839;

const int GL_LUMINANCE16_ALPHA16 = 32840;

const int GL_INTENSITY = 32841;

const int GL_INTENSITY4 = 32842;

const int GL_INTENSITY8 = 32843;

const int GL_INTENSITY12 = 32844;

const int GL_INTENSITY16 = 32845;

const int GL_R3_G3_B2 = 10768;

const int GL_RGB4 = 32847;

const int GL_RGB5 = 32848;

const int GL_RGB8 = 32849;

const int GL_RGB10 = 32850;

const int GL_RGB12 = 32851;

const int GL_RGB16 = 32852;

const int GL_RGBA2 = 32853;

const int GL_RGBA4 = 32854;

const int GL_RGB5_A1 = 32855;

const int GL_RGBA8 = 32856;

const int GL_RGB10_A2 = 32857;

const int GL_RGBA12 = 32858;

const int GL_RGBA16 = 32859;

const int GL_CLIENT_PIXEL_STORE_BIT = 1;

const int GL_CLIENT_VERTEX_ARRAY_BIT = 2;

const int GL_ALL_CLIENT_ATTRIB_BITS = 4294967295;

const int GL_CLIENT_ALL_ATTRIB_BITS = 4294967295;

const int GL_MESA_packed_depth_stencil = 1;

const int GL_DEPTH_STENCIL_MESA = 34640;

const int GL_UNSIGNED_INT_24_8_MESA = 34641;

const int GL_UNSIGNED_INT_8_24_REV_MESA = 34642;

const int GL_UNSIGNED_SHORT_15_1_MESA = 34643;

const int GL_UNSIGNED_SHORT_1_15_REV_MESA = 34644;

const int GL_ATI_blend_equation_separate = 1;

const int GL_ALPHA_BLEND_EQUATION_ATI = 34877;

const int __gles1_gl_h_ = 1;

const int KHRONOS_SUPPORT_INT64 = 1;

const int KHRONOS_SUPPORT_FLOAT = 1;

const int KHRONOS_MAX_ENUM = 2147483647;

const int GL_VERSION_ES_CM_1_0 = 1;

const int GL_VERSION_ES_CL_1_0 = 1;

const int GL_VERSION_ES_CM_1_1 = 1;

const int GL_VERSION_ES_CL_1_1 = 1;

const int GL_OES_point_size_array = 1;

const int GL_POINT_SIZE_ARRAY_OES = 35740;

const int GL_POINT_SIZE_ARRAY_TYPE_OES = 35210;

const int GL_POINT_SIZE_ARRAY_STRIDE_OES = 35211;

const int GL_POINT_SIZE_ARRAY_POINTER_OES = 35212;

const int GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 35743;

const int GL_OES_point_sprite = 1;

const int GL_POINT_SPRITE_OES = 34913;

const int GL_COORD_REPLACE_OES = 34914;

const int __gles1_glext_h_ = 1;

const int GL_OES_blend_equation_separate = 1;

const int GL_BLEND_EQUATION_RGB_OES = 32777;

const int GL_BLEND_EQUATION_ALPHA_OES = 34877;

const int GL_OES_blend_func_separate = 1;

const int GL_BLEND_DST_RGB_OES = 32968;

const int GL_BLEND_SRC_RGB_OES = 32969;

const int GL_BLEND_DST_ALPHA_OES = 32970;

const int GL_BLEND_SRC_ALPHA_OES = 32971;

const int GL_OES_blend_subtract = 1;

const int GL_BLEND_EQUATION_OES = 32777;

const int GL_FUNC_ADD_OES = 32774;

const int GL_FUNC_SUBTRACT_OES = 32778;

const int GL_FUNC_REVERSE_SUBTRACT_OES = 32779;

const int GL_OES_compressed_ETC1_RGB8_sub_texture = 1;

const int GL_OES_draw_texture = 1;

const int GL_TEXTURE_CROP_RECT_OES = 35741;

const int GL_OES_extended_matrix_palette = 1;

const int GL_OES_framebuffer_object = 1;

const int GL_NONE_OES = 0;

const int GL_FRAMEBUFFER_OES = 36160;

const int GL_RENDERBUFFER_OES = 36161;

const int GL_RENDERBUFFER_WIDTH_OES = 36162;

const int GL_RENDERBUFFER_HEIGHT_OES = 36163;

const int GL_RENDERBUFFER_INTERNAL_FORMAT_OES = 36164;

const int GL_RENDERBUFFER_RED_SIZE_OES = 36176;

const int GL_RENDERBUFFER_GREEN_SIZE_OES = 36177;

const int GL_RENDERBUFFER_BLUE_SIZE_OES = 36178;

const int GL_RENDERBUFFER_ALPHA_SIZE_OES = 36179;

const int GL_RENDERBUFFER_DEPTH_SIZE_OES = 36180;

const int GL_RENDERBUFFER_STENCIL_SIZE_OES = 36181;

const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 36048;

const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 36049;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 36050;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 36051;

const int GL_COLOR_ATTACHMENT0_OES = 36064;

const int GL_DEPTH_ATTACHMENT_OES = 36096;

const int GL_STENCIL_ATTACHMENT_OES = 36128;

const int GL_FRAMEBUFFER_COMPLETE_OES = 36053;

const int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 36054;

const int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 36055;

const int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 36057;

const int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 36058;

const int GL_FRAMEBUFFER_UNSUPPORTED_OES = 36061;

const int GL_FRAMEBUFFER_BINDING_OES = 36006;

const int GL_RENDERBUFFER_BINDING_OES = 36007;

const int GL_MAX_RENDERBUFFER_SIZE_OES = 34024;

const int GL_INVALID_FRAMEBUFFER_OPERATION_OES = 1286;

const int GL_OES_matrix_get = 1;

const int GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 35213;

const int GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 35214;

const int GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 35215;

const int GL_OES_matrix_palette = 1;

const int GL_MAX_VERTEX_UNITS_OES = 34468;

const int GL_MAX_PALETTE_MATRICES_OES = 34882;

const int GL_MATRIX_PALETTE_OES = 34880;

const int GL_MATRIX_INDEX_ARRAY_OES = 34884;

const int GL_WEIGHT_ARRAY_OES = 34477;

const int GL_CURRENT_PALETTE_MATRIX_OES = 34883;

const int GL_MATRIX_INDEX_ARRAY_SIZE_OES = 34886;

const int GL_MATRIX_INDEX_ARRAY_TYPE_OES = 34887;

const int GL_MATRIX_INDEX_ARRAY_STRIDE_OES = 34888;

const int GL_MATRIX_INDEX_ARRAY_POINTER_OES = 34889;

const int GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 35742;

const int GL_WEIGHT_ARRAY_SIZE_OES = 34475;

const int GL_WEIGHT_ARRAY_TYPE_OES = 34473;

const int GL_WEIGHT_ARRAY_STRIDE_OES = 34474;

const int GL_WEIGHT_ARRAY_POINTER_OES = 34476;

const int GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = 34974;

const int GL_OES_stencil8 = 1;

const int GL_STENCIL_INDEX8_OES = 36168;

const int GL_OES_stencil_wrap = 1;

const int GL_INCR_WRAP_OES = 34055;

const int GL_DECR_WRAP_OES = 34056;

const int GL_OES_texture_cube_map = 1;

const int GL_NORMAL_MAP_OES = 34065;

const int GL_REFLECTION_MAP_OES = 34066;

const int GL_TEXTURE_CUBE_MAP_OES = 34067;

const int GL_TEXTURE_BINDING_CUBE_MAP_OES = 34068;

const int GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = 34069;

const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = 34070;

const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = 34071;

const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 34072;

const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = 34073;

const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 34074;

const int GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = 34076;

const int GL_TEXTURE_GEN_MODE_OES = 9472;

const int GL_TEXTURE_GEN_STR_OES = 36192;

const int GL_OES_texture_env_crossbar = 1;

const int GL_OES_texture_mirrored_repeat = 1;

const int GL_MIRRORED_REPEAT_OES = 33648;

const int GL_APPLE_texture_2D_limited_npot = 1;

const int GL_IMG_texture_env_enhanced_fixed_function = 1;

const int GL_MODULATE_COLOR_IMG = 35844;

const int GL_RECIP_ADD_SIGNED_ALPHA_IMG = 35845;

const int GL_TEXTURE_ALPHA_MODULATE_IMG = 35846;

const int GL_FACTOR_ALPHA_MODULATE_IMG = 35847;

const int GL_FRAGMENT_ALPHA_MODULATE_IMG = 35848;

const int GL_ADD_BLEND_IMG = 35849;

const int GL_DOT3_RGBA_IMG = 34479;

const int GL_IMG_user_clip_plane = 1;

const int GL_CLIP_PLANE0_IMG = 12288;

const int GL_CLIP_PLANE1_IMG = 12289;

const int GL_CLIP_PLANE2_IMG = 12290;

const int GL_CLIP_PLANE3_IMG = 12291;

const int GL_CLIP_PLANE4_IMG = 12292;

const int GL_CLIP_PLANE5_IMG = 12293;

const int GL_MAX_CLIP_PLANES_IMG = 3378;

const int SDL_INPUT_TSLIB = 1;

const int SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP = 1;

const int SDL_VIDEO_DRIVER_PANDORA = 1;

const int NTDDI_WINBLUE = 100859904;

const int NTDDI_WIN10 = 167772160;

const int HAVE_DXGI_H = 1;

const int HAVE_MMDEVICEAPI_H = 1;

const int HAVE_AUDIOCLIENT_H = 1;

const int HAVE_STRTOK_S = 1;

const int HAVE__STRICMP = 1;

const int HAVE__STRNICMP = 1;

const int HAVE__COPYSIGN = 1;

const int HAVE__SCALB = 1;

const int HAVE__FSEEKI64 = 1;

const int SDL_AUDIO_DRIVER_WASAPI = 1;

const int SDL_LOADSO_WINDOWS = 1;

const int SDL_THREAD_STDCPP = 1;

const int SDL_TIMER_WINDOWS = 1;

const int SDL_VIDEO_DRIVER_WINRT = 1;

const int SDL_VIDEO_RENDER_D3D11 = 1;

const int SDL_POWER_WINRT = 1;

const int GL_ES_VERSION_2_0 = 1;

const int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;

const int ASSERT_FAIL = 0;

const int ASSERT_PASS = 1;

const int SDL_HAPTIC_DUMMY = 1;

const int SDL_JOYSTICK_MFI = 1;

const int SDL_SENSOR_COREMOTION = 1;

const int SDL_VIDEO_DRIVER_UIKIT = 1;

const int SDL_POWER_UIKIT = 1;

const int SDL_IPHONE_KEYBOARD = 1;

const int SDL_IPHONE_LAUNCHSCREEN = 1;

const double SDL_IPHONE_MAX_GFORCE = 5.0;

const String SDL_REVISION = 'hg-13609:34cc7d3b69d3';

const int SDL_REVISION_NUMBER = 13609;

const int HAVE_DDRAW_H = 1;

const int HAVE_DINPUT_H = 1;

const int HAVE_DSOUND_H = 1;

const int HAVE_XINPUT_H = 1;

const int SDL_AUDIO_DRIVER_DSOUND = 1;

const int SDL_AUDIO_DRIVER_WINMM = 1;

const int SDL_JOYSTICK_DINPUT = 1;

const int SDL_JOYSTICK_XINPUT = 1;

const int SDL_HAPTIC_DINPUT = 1;

const int SDL_HAPTIC_XINPUT = 1;

const int SDL_THREAD_WINDOWS = 1;

const int SDL_VIDEO_DRIVER_WINDOWS = 1;

const int SDL_VIDEO_RENDER_D3D = 1;

const int SDL_VIDEO_OPENGL_WGL = 1;

const int SDL_POWER_WINDOWS = 1;

const int SDL_FILESYSTEM_WINDOWS = 1;

const int __egl_h_ = 1;

const int XK_VoidSymbol = 16777215;

const int XK_BackSpace = 65288;

const int XK_Tab = 65289;

const int XK_Linefeed = 65290;

const int XK_Clear = 65291;

const int XK_Return = 65293;

const int XK_Pause = 65299;

const int XK_Scroll_Lock = 65300;

const int XK_Sys_Req = 65301;

const int XK_Escape = 65307;

const int XK_Delete = 65535;

const int XK_Multi_key = 65312;

const int XK_Codeinput = 65335;

const int XK_SingleCandidate = 65340;

const int XK_MultipleCandidate = 65341;

const int XK_PreviousCandidate = 65342;

const int XK_Kanji = 65313;

const int XK_Muhenkan = 65314;

const int XK_Henkan_Mode = 65315;

const int XK_Henkan = 65315;

const int XK_Romaji = 65316;

const int XK_Hiragana = 65317;

const int XK_Katakana = 65318;

const int XK_Hiragana_Katakana = 65319;

const int XK_Zenkaku = 65320;

const int XK_Hankaku = 65321;

const int XK_Zenkaku_Hankaku = 65322;

const int XK_Touroku = 65323;

const int XK_Massyo = 65324;

const int XK_Kana_Lock = 65325;

const int XK_Kana_Shift = 65326;

const int XK_Eisu_Shift = 65327;

const int XK_Eisu_toggle = 65328;

const int XK_Kanji_Bangou = 65335;

const int XK_Zen_Koho = 65341;

const int XK_Mae_Koho = 65342;

const int XK_Home = 65360;

const int XK_Left = 65361;

const int XK_Up = 65362;

const int XK_Right = 65363;

const int XK_Down = 65364;

const int XK_Prior = 65365;

const int XK_Page_Up = 65365;

const int XK_Next = 65366;

const int XK_Page_Down = 65366;

const int XK_End = 65367;

const int XK_Begin = 65368;

const int XK_Select = 65376;

const int XK_Print = 65377;

const int XK_Execute = 65378;

const int XK_Insert = 65379;

const int XK_Undo = 65381;

const int XK_Redo = 65382;

const int XK_Menu = 65383;

const int XK_Find = 65384;

const int XK_Cancel = 65385;

const int XK_Help = 65386;

const int XK_Break = 65387;

const int XK_Mode_switch = 65406;

const int XK_script_switch = 65406;

const int XK_Num_Lock = 65407;

const int XK_KP_Space = 65408;

const int XK_KP_Tab = 65417;

const int XK_KP_Enter = 65421;

const int XK_KP_F1 = 65425;

const int XK_KP_F2 = 65426;

const int XK_KP_F3 = 65427;

const int XK_KP_F4 = 65428;

const int XK_KP_Home = 65429;

const int XK_KP_Left = 65430;

const int XK_KP_Up = 65431;

const int XK_KP_Right = 65432;

const int XK_KP_Down = 65433;

const int XK_KP_Prior = 65434;

const int XK_KP_Page_Up = 65434;

const int XK_KP_Next = 65435;

const int XK_KP_Page_Down = 65435;

const int XK_KP_End = 65436;

const int XK_KP_Begin = 65437;

const int XK_KP_Insert = 65438;

const int XK_KP_Delete = 65439;

const int XK_KP_Equal = 65469;

const int XK_KP_Multiply = 65450;

const int XK_KP_Add = 65451;

const int XK_KP_Separator = 65452;

const int XK_KP_Subtract = 65453;

const int XK_KP_Decimal = 65454;

const int XK_KP_Divide = 65455;

const int XK_KP_0 = 65456;

const int XK_KP_1 = 65457;

const int XK_KP_2 = 65458;

const int XK_KP_3 = 65459;

const int XK_KP_4 = 65460;

const int XK_KP_5 = 65461;

const int XK_KP_6 = 65462;

const int XK_KP_7 = 65463;

const int XK_KP_8 = 65464;

const int XK_KP_9 = 65465;

const int XK_F1 = 65470;

const int XK_F2 = 65471;

const int XK_F3 = 65472;

const int XK_F4 = 65473;

const int XK_F5 = 65474;

const int XK_F6 = 65475;

const int XK_F7 = 65476;

const int XK_F8 = 65477;

const int XK_F9 = 65478;

const int XK_F10 = 65479;

const int XK_F11 = 65480;

const int XK_L1 = 65480;

const int XK_F12 = 65481;

const int XK_L2 = 65481;

const int XK_F13 = 65482;

const int XK_L3 = 65482;

const int XK_F14 = 65483;

const int XK_L4 = 65483;

const int XK_F15 = 65484;

const int XK_L5 = 65484;

const int XK_F16 = 65485;

const int XK_L6 = 65485;

const int XK_F17 = 65486;

const int XK_L7 = 65486;

const int XK_F18 = 65487;

const int XK_L8 = 65487;

const int XK_F19 = 65488;

const int XK_L9 = 65488;

const int XK_F20 = 65489;

const int XK_L10 = 65489;

const int XK_F21 = 65490;

const int XK_R1 = 65490;

const int XK_F22 = 65491;

const int XK_R2 = 65491;

const int XK_F23 = 65492;

const int XK_R3 = 65492;

const int XK_F24 = 65493;

const int XK_R4 = 65493;

const int XK_F25 = 65494;

const int XK_R5 = 65494;

const int XK_F26 = 65495;

const int XK_R6 = 65495;

const int XK_F27 = 65496;

const int XK_R7 = 65496;

const int XK_F28 = 65497;

const int XK_R8 = 65497;

const int XK_F29 = 65498;

const int XK_R9 = 65498;

const int XK_F30 = 65499;

const int XK_R10 = 65499;

const int XK_F31 = 65500;

const int XK_R11 = 65500;

const int XK_F32 = 65501;

const int XK_R12 = 65501;

const int XK_F33 = 65502;

const int XK_R13 = 65502;

const int XK_F34 = 65503;

const int XK_R14 = 65503;

const int XK_F35 = 65504;

const int XK_R15 = 65504;

const int XK_Shift_L = 65505;

const int XK_Shift_R = 65506;

const int XK_Control_L = 65507;

const int XK_Control_R = 65508;

const int XK_Caps_Lock = 65509;

const int XK_Shift_Lock = 65510;

const int XK_Meta_L = 65511;

const int XK_Meta_R = 65512;

const int XK_Alt_L = 65513;

const int XK_Alt_R = 65514;

const int XK_Super_L = 65515;

const int XK_Super_R = 65516;

const int XK_Hyper_L = 65517;

const int XK_Hyper_R = 65518;

const int XK_ISO_Lock = 65025;

const int XK_ISO_Level2_Latch = 65026;

const int XK_ISO_Level3_Shift = 65027;

const int XK_ISO_Level3_Latch = 65028;

const int XK_ISO_Level3_Lock = 65029;

const int XK_ISO_Level5_Shift = 65041;

const int XK_ISO_Level5_Latch = 65042;

const int XK_ISO_Level5_Lock = 65043;

const int XK_ISO_Group_Shift = 65406;

const int XK_ISO_Group_Latch = 65030;

const int XK_ISO_Group_Lock = 65031;

const int XK_ISO_Next_Group = 65032;

const int XK_ISO_Next_Group_Lock = 65033;

const int XK_ISO_Prev_Group = 65034;

const int XK_ISO_Prev_Group_Lock = 65035;

const int XK_ISO_First_Group = 65036;

const int XK_ISO_First_Group_Lock = 65037;

const int XK_ISO_Last_Group = 65038;

const int XK_ISO_Last_Group_Lock = 65039;

const int XK_ISO_Left_Tab = 65056;

const int XK_ISO_Move_Line_Up = 65057;

const int XK_ISO_Move_Line_Down = 65058;

const int XK_ISO_Partial_Line_Up = 65059;

const int XK_ISO_Partial_Line_Down = 65060;

const int XK_ISO_Partial_Space_Left = 65061;

const int XK_ISO_Partial_Space_Right = 65062;

const int XK_ISO_Set_Margin_Left = 65063;

const int XK_ISO_Set_Margin_Right = 65064;

const int XK_ISO_Release_Margin_Left = 65065;

const int XK_ISO_Release_Margin_Right = 65066;

const int XK_ISO_Release_Both_Margins = 65067;

const int XK_ISO_Fast_Cursor_Left = 65068;

const int XK_ISO_Fast_Cursor_Right = 65069;

const int XK_ISO_Fast_Cursor_Up = 65070;

const int XK_ISO_Fast_Cursor_Down = 65071;

const int XK_ISO_Continuous_Underline = 65072;

const int XK_ISO_Discontinuous_Underline = 65073;

const int XK_ISO_Emphasize = 65074;

const int XK_ISO_Center_Object = 65075;

const int XK_ISO_Enter = 65076;

const int XK_dead_grave = 65104;

const int XK_dead_acute = 65105;

const int XK_dead_circumflex = 65106;

const int XK_dead_tilde = 65107;

const int XK_dead_perispomeni = 65107;

const int XK_dead_macron = 65108;

const int XK_dead_breve = 65109;

const int XK_dead_abovedot = 65110;

const int XK_dead_diaeresis = 65111;

const int XK_dead_abovering = 65112;

const int XK_dead_doubleacute = 65113;

const int XK_dead_caron = 65114;

const int XK_dead_cedilla = 65115;

const int XK_dead_ogonek = 65116;

const int XK_dead_iota = 65117;

const int XK_dead_voiced_sound = 65118;

const int XK_dead_semivoiced_sound = 65119;

const int XK_dead_belowdot = 65120;

const int XK_dead_hook = 65121;

const int XK_dead_horn = 65122;

const int XK_dead_stroke = 65123;

const int XK_dead_abovecomma = 65124;

const int XK_dead_psili = 65124;

const int XK_dead_abovereversedcomma = 65125;

const int XK_dead_dasia = 65125;

const int XK_dead_doublegrave = 65126;

const int XK_dead_belowring = 65127;

const int XK_dead_belowmacron = 65128;

const int XK_dead_belowcircumflex = 65129;

const int XK_dead_belowtilde = 65130;

const int XK_dead_belowbreve = 65131;

const int XK_dead_belowdiaeresis = 65132;

const int XK_dead_invertedbreve = 65133;

const int XK_dead_belowcomma = 65134;

const int XK_dead_currency = 65135;

const int XK_dead_lowline = 65168;

const int XK_dead_aboveverticalline = 65169;

const int XK_dead_belowverticalline = 65170;

const int XK_dead_longsolidusoverlay = 65171;

const int XK_dead_a = 65152;

const int XK_dead_A = 65153;

const int XK_dead_e = 65154;

const int XK_dead_E = 65155;

const int XK_dead_i = 65156;

const int XK_dead_I = 65157;

const int XK_dead_o = 65158;

const int XK_dead_O = 65159;

const int XK_dead_u = 65160;

const int XK_dead_U = 65161;

const int XK_dead_small_schwa = 65162;

const int XK_dead_capital_schwa = 65163;

const int XK_dead_greek = 65164;

const int XK_First_Virtual_Screen = 65232;

const int XK_Prev_Virtual_Screen = 65233;

const int XK_Next_Virtual_Screen = 65234;

const int XK_Last_Virtual_Screen = 65236;

const int XK_Terminate_Server = 65237;

const int XK_AccessX_Enable = 65136;

const int XK_AccessX_Feedback_Enable = 65137;

const int XK_RepeatKeys_Enable = 65138;

const int XK_SlowKeys_Enable = 65139;

const int XK_BounceKeys_Enable = 65140;

const int XK_StickyKeys_Enable = 65141;

const int XK_MouseKeys_Enable = 65142;

const int XK_MouseKeys_Accel_Enable = 65143;

const int XK_Overlay1_Enable = 65144;

const int XK_Overlay2_Enable = 65145;

const int XK_AudibleBell_Enable = 65146;

const int XK_Pointer_Left = 65248;

const int XK_Pointer_Right = 65249;

const int XK_Pointer_Up = 65250;

const int XK_Pointer_Down = 65251;

const int XK_Pointer_UpLeft = 65252;

const int XK_Pointer_UpRight = 65253;

const int XK_Pointer_DownLeft = 65254;

const int XK_Pointer_DownRight = 65255;

const int XK_Pointer_Button_Dflt = 65256;

const int XK_Pointer_Button1 = 65257;

const int XK_Pointer_Button2 = 65258;

const int XK_Pointer_Button3 = 65259;

const int XK_Pointer_Button4 = 65260;

const int XK_Pointer_Button5 = 65261;

const int XK_Pointer_DblClick_Dflt = 65262;

const int XK_Pointer_DblClick1 = 65263;

const int XK_Pointer_DblClick2 = 65264;

const int XK_Pointer_DblClick3 = 65265;

const int XK_Pointer_DblClick4 = 65266;

const int XK_Pointer_DblClick5 = 65267;

const int XK_Pointer_Drag_Dflt = 65268;

const int XK_Pointer_Drag1 = 65269;

const int XK_Pointer_Drag2 = 65270;

const int XK_Pointer_Drag3 = 65271;

const int XK_Pointer_Drag4 = 65272;

const int XK_Pointer_Drag5 = 65277;

const int XK_Pointer_EnableKeys = 65273;

const int XK_Pointer_Accelerate = 65274;

const int XK_Pointer_DfltBtnNext = 65275;

const int XK_Pointer_DfltBtnPrev = 65276;

const int XK_ch = 65184;

const int XK_Ch = 65185;

const int XK_CH = 65186;

const int XK_c_h = 65187;

const int XK_C_h = 65188;

const int XK_C_H = 65189;

const int XK_space = 32;

const int XK_exclam = 33;

const int XK_quotedbl = 34;

const int XK_numbersign = 35;

const int XK_dollar = 36;

const int XK_percent = 37;

const int XK_ampersand = 38;

const int XK_apostrophe = 39;

const int XK_quoteright = 39;

const int XK_parenleft = 40;

const int XK_parenright = 41;

const int XK_asterisk = 42;

const int XK_plus = 43;

const int XK_comma = 44;

const int XK_minus = 45;

const int XK_period = 46;

const int XK_slash = 47;

const int XK_0 = 48;

const int XK_1 = 49;

const int XK_2 = 50;

const int XK_3 = 51;

const int XK_4 = 52;

const int XK_5 = 53;

const int XK_6 = 54;

const int XK_7 = 55;

const int XK_8 = 56;

const int XK_9 = 57;

const int XK_colon = 58;

const int XK_semicolon = 59;

const int XK_less = 60;

const int XK_equal = 61;

const int XK_greater = 62;

const int XK_question = 63;

const int XK_at = 64;

const int XK_A = 65;

const int XK_B = 66;

const int XK_C = 67;

const int XK_D = 68;

const int XK_E = 69;

const int XK_F = 70;

const int XK_G = 71;

const int XK_H = 72;

const int XK_I = 73;

const int XK_J = 74;

const int XK_K = 75;

const int XK_L = 76;

const int XK_M = 77;

const int XK_N = 78;

const int XK_O = 79;

const int XK_P = 80;

const int XK_Q = 81;

const int XK_R = 82;

const int XK_S = 83;

const int XK_T = 84;

const int XK_U = 85;

const int XK_V = 86;

const int XK_W = 87;

const int XK_X = 88;

const int XK_Y = 89;

const int XK_Z = 90;

const int XK_bracketleft = 91;

const int XK_backslash = 92;

const int XK_bracketright = 93;

const int XK_asciicircum = 94;

const int XK_underscore = 95;

const int XK_grave = 96;

const int XK_quoteleft = 96;

const int XK_a = 97;

const int XK_b = 98;

const int XK_c = 99;

const int XK_d = 100;

const int XK_e = 101;

const int XK_f = 102;

const int XK_g = 103;

const int XK_h = 104;

const int XK_i = 105;

const int XK_j = 106;

const int XK_k = 107;

const int XK_l = 108;

const int XK_m = 109;

const int XK_n = 110;

const int XK_o = 111;

const int XK_p = 112;

const int XK_q = 113;

const int XK_r = 114;

const int XK_s = 115;

const int XK_t = 116;

const int XK_u = 117;

const int XK_v = 118;

const int XK_w = 119;

const int XK_x = 120;

const int XK_y = 121;

const int XK_z = 122;

const int XK_braceleft = 123;

const int XK_bar = 124;

const int XK_braceright = 125;

const int XK_asciitilde = 126;

const int XK_nobreakspace = 160;

const int XK_exclamdown = 161;

const int XK_cent = 162;

const int XK_sterling = 163;

const int XK_currency = 164;

const int XK_yen = 165;

const int XK_brokenbar = 166;

const int XK_section = 167;

const int XK_diaeresis = 168;

const int XK_copyright = 169;

const int XK_ordfeminine = 170;

const int XK_guillemotleft = 171;

const int XK_notsign = 172;

const int XK_hyphen = 173;

const int XK_registered = 174;

const int XK_macron = 175;

const int XK_degree = 176;

const int XK_plusminus = 177;

const int XK_twosuperior = 178;

const int XK_threesuperior = 179;

const int XK_acute = 180;

const int XK_mu = 181;

const int XK_paragraph = 182;

const int XK_periodcentered = 183;

const int XK_cedilla = 184;

const int XK_onesuperior = 185;

const int XK_masculine = 186;

const int XK_guillemotright = 187;

const int XK_onequarter = 188;

const int XK_onehalf = 189;

const int XK_threequarters = 190;

const int XK_questiondown = 191;

const int XK_Agrave = 192;

const int XK_Aacute = 193;

const int XK_Acircumflex = 194;

const int XK_Atilde = 195;

const int XK_Adiaeresis = 196;

const int XK_Aring = 197;

const int XK_AE = 198;

const int XK_Ccedilla = 199;

const int XK_Egrave = 200;

const int XK_Eacute = 201;

const int XK_Ecircumflex = 202;

const int XK_Ediaeresis = 203;

const int XK_Igrave = 204;

const int XK_Iacute = 205;

const int XK_Icircumflex = 206;

const int XK_Idiaeresis = 207;

const int XK_ETH = 208;

const int XK_Eth = 208;

const int XK_Ntilde = 209;

const int XK_Ograve = 210;

const int XK_Oacute = 211;

const int XK_Ocircumflex = 212;

const int XK_Otilde = 213;

const int XK_Odiaeresis = 214;

const int XK_multiply = 215;

const int XK_Oslash = 216;

const int XK_Ooblique = 216;

const int XK_Ugrave = 217;

const int XK_Uacute = 218;

const int XK_Ucircumflex = 219;

const int XK_Udiaeresis = 220;

const int XK_Yacute = 221;

const int XK_THORN = 222;

const int XK_Thorn = 222;

const int XK_ssharp = 223;

const int XK_agrave = 224;

const int XK_aacute = 225;

const int XK_acircumflex = 226;

const int XK_atilde = 227;

const int XK_adiaeresis = 228;

const int XK_aring = 229;

const int XK_ae = 230;

const int XK_ccedilla = 231;

const int XK_egrave = 232;

const int XK_eacute = 233;

const int XK_ecircumflex = 234;

const int XK_ediaeresis = 235;

const int XK_igrave = 236;

const int XK_iacute = 237;

const int XK_icircumflex = 238;

const int XK_idiaeresis = 239;

const int XK_eth = 240;

const int XK_ntilde = 241;

const int XK_ograve = 242;

const int XK_oacute = 243;

const int XK_ocircumflex = 244;

const int XK_otilde = 245;

const int XK_odiaeresis = 246;

const int XK_division = 247;

const int XK_oslash = 248;

const int XK_ooblique = 248;

const int XK_ugrave = 249;

const int XK_uacute = 250;

const int XK_ucircumflex = 251;

const int XK_udiaeresis = 252;

const int XK_yacute = 253;

const int XK_thorn = 254;

const int XK_ydiaeresis = 255;

const int XK_Aogonek = 417;

const int XK_breve = 418;

const int XK_Lstroke = 419;

const int XK_Lcaron = 421;

const int XK_Sacute = 422;

const int XK_Scaron = 425;

const int XK_Scedilla = 426;

const int XK_Tcaron = 427;

const int XK_Zacute = 428;

const int XK_Zcaron = 430;

const int XK_Zabovedot = 431;

const int XK_aogonek = 433;

const int XK_ogonek = 434;

const int XK_lstroke = 435;

const int XK_lcaron = 437;

const int XK_sacute = 438;

const int XK_caron = 439;

const int XK_scaron = 441;

const int XK_scedilla = 442;

const int XK_tcaron = 443;

const int XK_zacute = 444;

const int XK_doubleacute = 445;

const int XK_zcaron = 446;

const int XK_zabovedot = 447;

const int XK_Racute = 448;

const int XK_Abreve = 451;

const int XK_Lacute = 453;

const int XK_Cacute = 454;

const int XK_Ccaron = 456;

const int XK_Eogonek = 458;

const int XK_Ecaron = 460;

const int XK_Dcaron = 463;

const int XK_Dstroke = 464;

const int XK_Nacute = 465;

const int XK_Ncaron = 466;

const int XK_Odoubleacute = 469;

const int XK_Rcaron = 472;

const int XK_Uring = 473;

const int XK_Udoubleacute = 475;

const int XK_Tcedilla = 478;

const int XK_racute = 480;

const int XK_abreve = 483;

const int XK_lacute = 485;

const int XK_cacute = 486;

const int XK_ccaron = 488;

const int XK_eogonek = 490;

const int XK_ecaron = 492;

const int XK_dcaron = 495;

const int XK_dstroke = 496;

const int XK_nacute = 497;

const int XK_ncaron = 498;

const int XK_odoubleacute = 501;

const int XK_rcaron = 504;

const int XK_uring = 505;

const int XK_udoubleacute = 507;

const int XK_tcedilla = 510;

const int XK_abovedot = 511;

const int XK_Hstroke = 673;

const int XK_Hcircumflex = 678;

const int XK_Iabovedot = 681;

const int XK_Gbreve = 683;

const int XK_Jcircumflex = 684;

const int XK_hstroke = 689;

const int XK_hcircumflex = 694;

const int XK_idotless = 697;

const int XK_gbreve = 699;

const int XK_jcircumflex = 700;

const int XK_Cabovedot = 709;

const int XK_Ccircumflex = 710;

const int XK_Gabovedot = 725;

const int XK_Gcircumflex = 728;

const int XK_Ubreve = 733;

const int XK_Scircumflex = 734;

const int XK_cabovedot = 741;

const int XK_ccircumflex = 742;

const int XK_gabovedot = 757;

const int XK_gcircumflex = 760;

const int XK_ubreve = 765;

const int XK_scircumflex = 766;

const int XK_kra = 930;

const int XK_kappa = 930;

const int XK_Rcedilla = 931;

const int XK_Itilde = 933;

const int XK_Lcedilla = 934;

const int XK_Emacron = 938;

const int XK_Gcedilla = 939;

const int XK_Tslash = 940;

const int XK_rcedilla = 947;

const int XK_itilde = 949;

const int XK_lcedilla = 950;

const int XK_emacron = 954;

const int XK_gcedilla = 955;

const int XK_tslash = 956;

const int XK_ENG = 957;

const int XK_eng = 959;

const int XK_Amacron = 960;

const int XK_Iogonek = 967;

const int XK_Eabovedot = 972;

const int XK_Imacron = 975;

const int XK_Ncedilla = 977;

const int XK_Omacron = 978;

const int XK_Kcedilla = 979;

const int XK_Uogonek = 985;

const int XK_Utilde = 989;

const int XK_Umacron = 990;

const int XK_amacron = 992;

const int XK_iogonek = 999;

const int XK_eabovedot = 1004;

const int XK_imacron = 1007;

const int XK_ncedilla = 1009;

const int XK_omacron = 1010;

const int XK_kcedilla = 1011;

const int XK_uogonek = 1017;

const int XK_utilde = 1021;

const int XK_umacron = 1022;

const int XK_Wcircumflex = 16777588;

const int XK_wcircumflex = 16777589;

const int XK_Ycircumflex = 16777590;

const int XK_ycircumflex = 16777591;

const int XK_Babovedot = 16784898;

const int XK_babovedot = 16784899;

const int XK_Dabovedot = 16784906;

const int XK_dabovedot = 16784907;

const int XK_Fabovedot = 16784926;

const int XK_fabovedot = 16784927;

const int XK_Mabovedot = 16784960;

const int XK_mabovedot = 16784961;

const int XK_Pabovedot = 16784982;

const int XK_pabovedot = 16784983;

const int XK_Sabovedot = 16784992;

const int XK_sabovedot = 16784993;

const int XK_Tabovedot = 16785002;

const int XK_tabovedot = 16785003;

const int XK_Wgrave = 16785024;

const int XK_wgrave = 16785025;

const int XK_Wacute = 16785026;

const int XK_wacute = 16785027;

const int XK_Wdiaeresis = 16785028;

const int XK_wdiaeresis = 16785029;

const int XK_Ygrave = 16785138;

const int XK_ygrave = 16785139;

const int XK_OE = 5052;

const int XK_oe = 5053;

const int XK_Ydiaeresis = 5054;

const int XK_overline = 1150;

const int XK_kana_fullstop = 1185;

const int XK_kana_openingbracket = 1186;

const int XK_kana_closingbracket = 1187;

const int XK_kana_comma = 1188;

const int XK_kana_conjunctive = 1189;

const int XK_kana_middledot = 1189;

const int XK_kana_WO = 1190;

const int XK_kana_a = 1191;

const int XK_kana_i = 1192;

const int XK_kana_u = 1193;

const int XK_kana_e = 1194;

const int XK_kana_o = 1195;

const int XK_kana_ya = 1196;

const int XK_kana_yu = 1197;

const int XK_kana_yo = 1198;

const int XK_kana_tsu = 1199;

const int XK_kana_tu = 1199;

const int XK_prolongedsound = 1200;

const int XK_kana_A = 1201;

const int XK_kana_I = 1202;

const int XK_kana_U = 1203;

const int XK_kana_E = 1204;

const int XK_kana_O = 1205;

const int XK_kana_KA = 1206;

const int XK_kana_KI = 1207;

const int XK_kana_KU = 1208;

const int XK_kana_KE = 1209;

const int XK_kana_KO = 1210;

const int XK_kana_SA = 1211;

const int XK_kana_SHI = 1212;

const int XK_kana_SU = 1213;

const int XK_kana_SE = 1214;

const int XK_kana_SO = 1215;

const int XK_kana_TA = 1216;

const int XK_kana_CHI = 1217;

const int XK_kana_TI = 1217;

const int XK_kana_TSU = 1218;

const int XK_kana_TU = 1218;

const int XK_kana_TE = 1219;

const int XK_kana_TO = 1220;

const int XK_kana_NA = 1221;

const int XK_kana_NI = 1222;

const int XK_kana_NU = 1223;

const int XK_kana_NE = 1224;

const int XK_kana_NO = 1225;

const int XK_kana_HA = 1226;

const int XK_kana_HI = 1227;

const int XK_kana_FU = 1228;

const int XK_kana_HU = 1228;

const int XK_kana_HE = 1229;

const int XK_kana_HO = 1230;

const int XK_kana_MA = 1231;

const int XK_kana_MI = 1232;

const int XK_kana_MU = 1233;

const int XK_kana_ME = 1234;

const int XK_kana_MO = 1235;

const int XK_kana_YA = 1236;

const int XK_kana_YU = 1237;

const int XK_kana_YO = 1238;

const int XK_kana_RA = 1239;

const int XK_kana_RI = 1240;

const int XK_kana_RU = 1241;

const int XK_kana_RE = 1242;

const int XK_kana_RO = 1243;

const int XK_kana_WA = 1244;

const int XK_kana_N = 1245;

const int XK_voicedsound = 1246;

const int XK_semivoicedsound = 1247;

const int XK_kana_switch = 65406;

const int XK_Farsi_0 = 16778992;

const int XK_Farsi_1 = 16778993;

const int XK_Farsi_2 = 16778994;

const int XK_Farsi_3 = 16778995;

const int XK_Farsi_4 = 16778996;

const int XK_Farsi_5 = 16778997;

const int XK_Farsi_6 = 16778998;

const int XK_Farsi_7 = 16778999;

const int XK_Farsi_8 = 16779000;

const int XK_Farsi_9 = 16779001;

const int XK_Arabic_percent = 16778858;

const int XK_Arabic_superscript_alef = 16778864;

const int XK_Arabic_tteh = 16778873;

const int XK_Arabic_peh = 16778878;

const int XK_Arabic_tcheh = 16778886;

const int XK_Arabic_ddal = 16778888;

const int XK_Arabic_rreh = 16778897;

const int XK_Arabic_comma = 1452;

const int XK_Arabic_fullstop = 16778964;

const int XK_Arabic_0 = 16778848;

const int XK_Arabic_1 = 16778849;

const int XK_Arabic_2 = 16778850;

const int XK_Arabic_3 = 16778851;

const int XK_Arabic_4 = 16778852;

const int XK_Arabic_5 = 16778853;

const int XK_Arabic_6 = 16778854;

const int XK_Arabic_7 = 16778855;

const int XK_Arabic_8 = 16778856;

const int XK_Arabic_9 = 16778857;

const int XK_Arabic_semicolon = 1467;

const int XK_Arabic_question_mark = 1471;

const int XK_Arabic_hamza = 1473;

const int XK_Arabic_maddaonalef = 1474;

const int XK_Arabic_hamzaonalef = 1475;

const int XK_Arabic_hamzaonwaw = 1476;

const int XK_Arabic_hamzaunderalef = 1477;

const int XK_Arabic_hamzaonyeh = 1478;

const int XK_Arabic_alef = 1479;

const int XK_Arabic_beh = 1480;

const int XK_Arabic_tehmarbuta = 1481;

const int XK_Arabic_teh = 1482;

const int XK_Arabic_theh = 1483;

const int XK_Arabic_jeem = 1484;

const int XK_Arabic_hah = 1485;

const int XK_Arabic_khah = 1486;

const int XK_Arabic_dal = 1487;

const int XK_Arabic_thal = 1488;

const int XK_Arabic_ra = 1489;

const int XK_Arabic_zain = 1490;

const int XK_Arabic_seen = 1491;

const int XK_Arabic_sheen = 1492;

const int XK_Arabic_sad = 1493;

const int XK_Arabic_dad = 1494;

const int XK_Arabic_tah = 1495;

const int XK_Arabic_zah = 1496;

const int XK_Arabic_ain = 1497;

const int XK_Arabic_ghain = 1498;

const int XK_Arabic_tatweel = 1504;

const int XK_Arabic_feh = 1505;

const int XK_Arabic_qaf = 1506;

const int XK_Arabic_kaf = 1507;

const int XK_Arabic_lam = 1508;

const int XK_Arabic_meem = 1509;

const int XK_Arabic_noon = 1510;

const int XK_Arabic_ha = 1511;

const int XK_Arabic_heh = 1511;

const int XK_Arabic_waw = 1512;

const int XK_Arabic_alefmaksura = 1513;

const int XK_Arabic_yeh = 1514;

const int XK_Arabic_fathatan = 1515;

const int XK_Arabic_dammatan = 1516;

const int XK_Arabic_kasratan = 1517;

const int XK_Arabic_fatha = 1518;

const int XK_Arabic_damma = 1519;

const int XK_Arabic_kasra = 1520;

const int XK_Arabic_shadda = 1521;

const int XK_Arabic_sukun = 1522;

const int XK_Arabic_madda_above = 16778835;

const int XK_Arabic_hamza_above = 16778836;

const int XK_Arabic_hamza_below = 16778837;

const int XK_Arabic_jeh = 16778904;

const int XK_Arabic_veh = 16778916;

const int XK_Arabic_keheh = 16778921;

const int XK_Arabic_gaf = 16778927;

const int XK_Arabic_noon_ghunna = 16778938;

const int XK_Arabic_heh_doachashmee = 16778942;

const int XK_Farsi_yeh = 16778956;

const int XK_Arabic_farsi_yeh = 16778956;

const int XK_Arabic_yeh_baree = 16778962;

const int XK_Arabic_heh_goal = 16778945;

const int XK_Arabic_switch = 65406;

const int XK_Cyrillic_GHE_bar = 16778386;

const int XK_Cyrillic_ghe_bar = 16778387;

const int XK_Cyrillic_ZHE_descender = 16778390;

const int XK_Cyrillic_zhe_descender = 16778391;

const int XK_Cyrillic_KA_descender = 16778394;

const int XK_Cyrillic_ka_descender = 16778395;

const int XK_Cyrillic_KA_vertstroke = 16778396;

const int XK_Cyrillic_ka_vertstroke = 16778397;

const int XK_Cyrillic_EN_descender = 16778402;

const int XK_Cyrillic_en_descender = 16778403;

const int XK_Cyrillic_U_straight = 16778414;

const int XK_Cyrillic_u_straight = 16778415;

const int XK_Cyrillic_U_straight_bar = 16778416;

const int XK_Cyrillic_u_straight_bar = 16778417;

const int XK_Cyrillic_HA_descender = 16778418;

const int XK_Cyrillic_ha_descender = 16778419;

const int XK_Cyrillic_CHE_descender = 16778422;

const int XK_Cyrillic_che_descender = 16778423;

const int XK_Cyrillic_CHE_vertstroke = 16778424;

const int XK_Cyrillic_che_vertstroke = 16778425;

const int XK_Cyrillic_SHHA = 16778426;

const int XK_Cyrillic_shha = 16778427;

const int XK_Cyrillic_SCHWA = 16778456;

const int XK_Cyrillic_schwa = 16778457;

const int XK_Cyrillic_I_macron = 16778466;

const int XK_Cyrillic_i_macron = 16778467;

const int XK_Cyrillic_O_bar = 16778472;

const int XK_Cyrillic_o_bar = 16778473;

const int XK_Cyrillic_U_macron = 16778478;

const int XK_Cyrillic_u_macron = 16778479;

const int XK_Serbian_dje = 1697;

const int XK_Macedonia_gje = 1698;

const int XK_Cyrillic_io = 1699;

const int XK_Ukrainian_ie = 1700;

const int XK_Ukranian_je = 1700;

const int XK_Macedonia_dse = 1701;

const int XK_Ukrainian_i = 1702;

const int XK_Ukranian_i = 1702;

const int XK_Ukrainian_yi = 1703;

const int XK_Ukranian_yi = 1703;

const int XK_Cyrillic_je = 1704;

const int XK_Serbian_je = 1704;

const int XK_Cyrillic_lje = 1705;

const int XK_Serbian_lje = 1705;

const int XK_Cyrillic_nje = 1706;

const int XK_Serbian_nje = 1706;

const int XK_Serbian_tshe = 1707;

const int XK_Macedonia_kje = 1708;

const int XK_Ukrainian_ghe_with_upturn = 1709;

const int XK_Byelorussian_shortu = 1710;

const int XK_Cyrillic_dzhe = 1711;

const int XK_Serbian_dze = 1711;

const int XK_numerosign = 1712;

const int XK_Serbian_DJE = 1713;

const int XK_Macedonia_GJE = 1714;

const int XK_Cyrillic_IO = 1715;

const int XK_Ukrainian_IE = 1716;

const int XK_Ukranian_JE = 1716;

const int XK_Macedonia_DSE = 1717;

const int XK_Ukrainian_I = 1718;

const int XK_Ukranian_I = 1718;

const int XK_Ukrainian_YI = 1719;

const int XK_Ukranian_YI = 1719;

const int XK_Cyrillic_JE = 1720;

const int XK_Serbian_JE = 1720;

const int XK_Cyrillic_LJE = 1721;

const int XK_Serbian_LJE = 1721;

const int XK_Cyrillic_NJE = 1722;

const int XK_Serbian_NJE = 1722;

const int XK_Serbian_TSHE = 1723;

const int XK_Macedonia_KJE = 1724;

const int XK_Ukrainian_GHE_WITH_UPTURN = 1725;

const int XK_Byelorussian_SHORTU = 1726;

const int XK_Cyrillic_DZHE = 1727;

const int XK_Serbian_DZE = 1727;

const int XK_Cyrillic_yu = 1728;

const int XK_Cyrillic_a = 1729;

const int XK_Cyrillic_be = 1730;

const int XK_Cyrillic_tse = 1731;

const int XK_Cyrillic_de = 1732;

const int XK_Cyrillic_ie = 1733;

const int XK_Cyrillic_ef = 1734;

const int XK_Cyrillic_ghe = 1735;

const int XK_Cyrillic_ha = 1736;

const int XK_Cyrillic_i = 1737;

const int XK_Cyrillic_shorti = 1738;

const int XK_Cyrillic_ka = 1739;

const int XK_Cyrillic_el = 1740;

const int XK_Cyrillic_em = 1741;

const int XK_Cyrillic_en = 1742;

const int XK_Cyrillic_o = 1743;

const int XK_Cyrillic_pe = 1744;

const int XK_Cyrillic_ya = 1745;

const int XK_Cyrillic_er = 1746;

const int XK_Cyrillic_es = 1747;

const int XK_Cyrillic_te = 1748;

const int XK_Cyrillic_u = 1749;

const int XK_Cyrillic_zhe = 1750;

const int XK_Cyrillic_ve = 1751;

const int XK_Cyrillic_softsign = 1752;

const int XK_Cyrillic_yeru = 1753;

const int XK_Cyrillic_ze = 1754;

const int XK_Cyrillic_sha = 1755;

const int XK_Cyrillic_e = 1756;

const int XK_Cyrillic_shcha = 1757;

const int XK_Cyrillic_che = 1758;

const int XK_Cyrillic_hardsign = 1759;

const int XK_Cyrillic_YU = 1760;

const int XK_Cyrillic_A = 1761;

const int XK_Cyrillic_BE = 1762;

const int XK_Cyrillic_TSE = 1763;

const int XK_Cyrillic_DE = 1764;

const int XK_Cyrillic_IE = 1765;

const int XK_Cyrillic_EF = 1766;

const int XK_Cyrillic_GHE = 1767;

const int XK_Cyrillic_HA = 1768;

const int XK_Cyrillic_I = 1769;

const int XK_Cyrillic_SHORTI = 1770;

const int XK_Cyrillic_KA = 1771;

const int XK_Cyrillic_EL = 1772;

const int XK_Cyrillic_EM = 1773;

const int XK_Cyrillic_EN = 1774;

const int XK_Cyrillic_O = 1775;

const int XK_Cyrillic_PE = 1776;

const int XK_Cyrillic_YA = 1777;

const int XK_Cyrillic_ER = 1778;

const int XK_Cyrillic_ES = 1779;

const int XK_Cyrillic_TE = 1780;

const int XK_Cyrillic_U = 1781;

const int XK_Cyrillic_ZHE = 1782;

const int XK_Cyrillic_VE = 1783;

const int XK_Cyrillic_SOFTSIGN = 1784;

const int XK_Cyrillic_YERU = 1785;

const int XK_Cyrillic_ZE = 1786;

const int XK_Cyrillic_SHA = 1787;

const int XK_Cyrillic_E = 1788;

const int XK_Cyrillic_SHCHA = 1789;

const int XK_Cyrillic_CHE = 1790;

const int XK_Cyrillic_HARDSIGN = 1791;

const int XK_Greek_ALPHAaccent = 1953;

const int XK_Greek_EPSILONaccent = 1954;

const int XK_Greek_ETAaccent = 1955;

const int XK_Greek_IOTAaccent = 1956;

const int XK_Greek_IOTAdieresis = 1957;

const int XK_Greek_IOTAdiaeresis = 1957;

const int XK_Greek_OMICRONaccent = 1959;

const int XK_Greek_UPSILONaccent = 1960;

const int XK_Greek_UPSILONdieresis = 1961;

const int XK_Greek_OMEGAaccent = 1963;

const int XK_Greek_accentdieresis = 1966;

const int XK_Greek_horizbar = 1967;

const int XK_Greek_alphaaccent = 1969;

const int XK_Greek_epsilonaccent = 1970;

const int XK_Greek_etaaccent = 1971;

const int XK_Greek_iotaaccent = 1972;

const int XK_Greek_iotadieresis = 1973;

const int XK_Greek_iotaaccentdieresis = 1974;

const int XK_Greek_omicronaccent = 1975;

const int XK_Greek_upsilonaccent = 1976;

const int XK_Greek_upsilondieresis = 1977;

const int XK_Greek_upsilonaccentdieresis = 1978;

const int XK_Greek_omegaaccent = 1979;

const int XK_Greek_ALPHA = 1985;

const int XK_Greek_BETA = 1986;

const int XK_Greek_GAMMA = 1987;

const int XK_Greek_DELTA = 1988;

const int XK_Greek_EPSILON = 1989;

const int XK_Greek_ZETA = 1990;

const int XK_Greek_ETA = 1991;

const int XK_Greek_THETA = 1992;

const int XK_Greek_IOTA = 1993;

const int XK_Greek_KAPPA = 1994;

const int XK_Greek_LAMDA = 1995;

const int XK_Greek_LAMBDA = 1995;

const int XK_Greek_MU = 1996;

const int XK_Greek_NU = 1997;

const int XK_Greek_XI = 1998;

const int XK_Greek_OMICRON = 1999;

const int XK_Greek_PI = 2000;

const int XK_Greek_RHO = 2001;

const int XK_Greek_SIGMA = 2002;

const int XK_Greek_TAU = 2004;

const int XK_Greek_UPSILON = 2005;

const int XK_Greek_PHI = 2006;

const int XK_Greek_CHI = 2007;

const int XK_Greek_PSI = 2008;

const int XK_Greek_OMEGA = 2009;

const int XK_Greek_alpha = 2017;

const int XK_Greek_beta = 2018;

const int XK_Greek_gamma = 2019;

const int XK_Greek_delta = 2020;

const int XK_Greek_epsilon = 2021;

const int XK_Greek_zeta = 2022;

const int XK_Greek_eta = 2023;

const int XK_Greek_theta = 2024;

const int XK_Greek_iota = 2025;

const int XK_Greek_kappa = 2026;

const int XK_Greek_lamda = 2027;

const int XK_Greek_lambda = 2027;

const int XK_Greek_mu = 2028;

const int XK_Greek_nu = 2029;

const int XK_Greek_xi = 2030;

const int XK_Greek_omicron = 2031;

const int XK_Greek_pi = 2032;

const int XK_Greek_rho = 2033;

const int XK_Greek_sigma = 2034;

const int XK_Greek_finalsmallsigma = 2035;

const int XK_Greek_tau = 2036;

const int XK_Greek_upsilon = 2037;

const int XK_Greek_phi = 2038;

const int XK_Greek_chi = 2039;

const int XK_Greek_psi = 2040;

const int XK_Greek_omega = 2041;

const int XK_Greek_switch = 65406;

const int XK_hebrew_doublelowline = 3295;

const int XK_hebrew_aleph = 3296;

const int XK_hebrew_bet = 3297;

const int XK_hebrew_beth = 3297;

const int XK_hebrew_gimel = 3298;

const int XK_hebrew_gimmel = 3298;

const int XK_hebrew_dalet = 3299;

const int XK_hebrew_daleth = 3299;

const int XK_hebrew_he = 3300;

const int XK_hebrew_waw = 3301;

const int XK_hebrew_zain = 3302;

const int XK_hebrew_zayin = 3302;

const int XK_hebrew_chet = 3303;

const int XK_hebrew_het = 3303;

const int XK_hebrew_tet = 3304;

const int XK_hebrew_teth = 3304;

const int XK_hebrew_yod = 3305;

const int XK_hebrew_finalkaph = 3306;

const int XK_hebrew_kaph = 3307;

const int XK_hebrew_lamed = 3308;

const int XK_hebrew_finalmem = 3309;

const int XK_hebrew_mem = 3310;

const int XK_hebrew_finalnun = 3311;

const int XK_hebrew_nun = 3312;

const int XK_hebrew_samech = 3313;

const int XK_hebrew_samekh = 3313;

const int XK_hebrew_ayin = 3314;

const int XK_hebrew_finalpe = 3315;

const int XK_hebrew_pe = 3316;

const int XK_hebrew_finalzade = 3317;

const int XK_hebrew_finalzadi = 3317;

const int XK_hebrew_zade = 3318;

const int XK_hebrew_zadi = 3318;

const int XK_hebrew_qoph = 3319;

const int XK_hebrew_kuf = 3319;

const int XK_hebrew_resh = 3320;

const int XK_hebrew_shin = 3321;

const int XK_hebrew_taw = 3322;

const int XK_hebrew_taf = 3322;

const int XK_Hebrew_switch = 65406;

const int XK_Thai_kokai = 3489;

const int XK_Thai_khokhai = 3490;

const int XK_Thai_khokhuat = 3491;

const int XK_Thai_khokhwai = 3492;

const int XK_Thai_khokhon = 3493;

const int XK_Thai_khorakhang = 3494;

const int XK_Thai_ngongu = 3495;

const int XK_Thai_chochan = 3496;

const int XK_Thai_choching = 3497;

const int XK_Thai_chochang = 3498;

const int XK_Thai_soso = 3499;

const int XK_Thai_chochoe = 3500;

const int XK_Thai_yoying = 3501;

const int XK_Thai_dochada = 3502;

const int XK_Thai_topatak = 3503;

const int XK_Thai_thothan = 3504;

const int XK_Thai_thonangmontho = 3505;

const int XK_Thai_thophuthao = 3506;

const int XK_Thai_nonen = 3507;

const int XK_Thai_dodek = 3508;

const int XK_Thai_totao = 3509;

const int XK_Thai_thothung = 3510;

const int XK_Thai_thothahan = 3511;

const int XK_Thai_thothong = 3512;

const int XK_Thai_nonu = 3513;

const int XK_Thai_bobaimai = 3514;

const int XK_Thai_popla = 3515;

const int XK_Thai_phophung = 3516;

const int XK_Thai_fofa = 3517;

const int XK_Thai_phophan = 3518;

const int XK_Thai_fofan = 3519;

const int XK_Thai_phosamphao = 3520;

const int XK_Thai_moma = 3521;

const int XK_Thai_yoyak = 3522;

const int XK_Thai_rorua = 3523;

const int XK_Thai_ru = 3524;

const int XK_Thai_loling = 3525;

const int XK_Thai_lu = 3526;

const int XK_Thai_wowaen = 3527;

const int XK_Thai_sosala = 3528;

const int XK_Thai_sorusi = 3529;

const int XK_Thai_sosua = 3530;

const int XK_Thai_hohip = 3531;

const int XK_Thai_lochula = 3532;

const int XK_Thai_oang = 3533;

const int XK_Thai_honokhuk = 3534;

const int XK_Thai_paiyannoi = 3535;

const int XK_Thai_saraa = 3536;

const int XK_Thai_maihanakat = 3537;

const int XK_Thai_saraaa = 3538;

const int XK_Thai_saraam = 3539;

const int XK_Thai_sarai = 3540;

const int XK_Thai_saraii = 3541;

const int XK_Thai_saraue = 3542;

const int XK_Thai_sarauee = 3543;

const int XK_Thai_sarau = 3544;

const int XK_Thai_sarauu = 3545;

const int XK_Thai_phinthu = 3546;

const int XK_Thai_maihanakat_maitho = 3550;

const int XK_Thai_baht = 3551;

const int XK_Thai_sarae = 3552;

const int XK_Thai_saraae = 3553;

const int XK_Thai_sarao = 3554;

const int XK_Thai_saraaimaimuan = 3555;

const int XK_Thai_saraaimaimalai = 3556;

const int XK_Thai_lakkhangyao = 3557;

const int XK_Thai_maiyamok = 3558;

const int XK_Thai_maitaikhu = 3559;

const int XK_Thai_maiek = 3560;

const int XK_Thai_maitho = 3561;

const int XK_Thai_maitri = 3562;

const int XK_Thai_maichattawa = 3563;

const int XK_Thai_thanthakhat = 3564;

const int XK_Thai_nikhahit = 3565;

const int XK_Thai_leksun = 3568;

const int XK_Thai_leknung = 3569;

const int XK_Thai_leksong = 3570;

const int XK_Thai_leksam = 3571;

const int XK_Thai_leksi = 3572;

const int XK_Thai_lekha = 3573;

const int XK_Thai_lekhok = 3574;

const int XK_Thai_lekchet = 3575;

const int XK_Thai_lekpaet = 3576;

const int XK_Thai_lekkao = 3577;

const int XK_Hangul = 65329;

const int XK_Hangul_Start = 65330;

const int XK_Hangul_End = 65331;

const int XK_Hangul_Hanja = 65332;

const int XK_Hangul_Jamo = 65333;

const int XK_Hangul_Romaja = 65334;

const int XK_Hangul_Codeinput = 65335;

const int XK_Hangul_Jeonja = 65336;

const int XK_Hangul_Banja = 65337;

const int XK_Hangul_PreHanja = 65338;

const int XK_Hangul_PostHanja = 65339;

const int XK_Hangul_SingleCandidate = 65340;

const int XK_Hangul_MultipleCandidate = 65341;

const int XK_Hangul_PreviousCandidate = 65342;

const int XK_Hangul_Special = 65343;

const int XK_Hangul_switch = 65406;

const int XK_Hangul_Kiyeog = 3745;

const int XK_Hangul_SsangKiyeog = 3746;

const int XK_Hangul_KiyeogSios = 3747;

const int XK_Hangul_Nieun = 3748;

const int XK_Hangul_NieunJieuj = 3749;

const int XK_Hangul_NieunHieuh = 3750;

const int XK_Hangul_Dikeud = 3751;

const int XK_Hangul_SsangDikeud = 3752;

const int XK_Hangul_Rieul = 3753;

const int XK_Hangul_RieulKiyeog = 3754;

const int XK_Hangul_RieulMieum = 3755;

const int XK_Hangul_RieulPieub = 3756;

const int XK_Hangul_RieulSios = 3757;

const int XK_Hangul_RieulTieut = 3758;

const int XK_Hangul_RieulPhieuf = 3759;

const int XK_Hangul_RieulHieuh = 3760;

const int XK_Hangul_Mieum = 3761;

const int XK_Hangul_Pieub = 3762;

const int XK_Hangul_SsangPieub = 3763;

const int XK_Hangul_PieubSios = 3764;

const int XK_Hangul_Sios = 3765;

const int XK_Hangul_SsangSios = 3766;

const int XK_Hangul_Ieung = 3767;

const int XK_Hangul_Jieuj = 3768;

const int XK_Hangul_SsangJieuj = 3769;

const int XK_Hangul_Cieuc = 3770;

const int XK_Hangul_Khieuq = 3771;

const int XK_Hangul_Tieut = 3772;

const int XK_Hangul_Phieuf = 3773;

const int XK_Hangul_Hieuh = 3774;

const int XK_Hangul_A = 3775;

const int XK_Hangul_AE = 3776;

const int XK_Hangul_YA = 3777;

const int XK_Hangul_YAE = 3778;

const int XK_Hangul_EO = 3779;

const int XK_Hangul_E = 3780;

const int XK_Hangul_YEO = 3781;

const int XK_Hangul_YE = 3782;

const int XK_Hangul_O = 3783;

const int XK_Hangul_WA = 3784;

const int XK_Hangul_WAE = 3785;

const int XK_Hangul_OE = 3786;

const int XK_Hangul_YO = 3787;

const int XK_Hangul_U = 3788;

const int XK_Hangul_WEO = 3789;

const int XK_Hangul_WE = 3790;

const int XK_Hangul_WI = 3791;

const int XK_Hangul_YU = 3792;

const int XK_Hangul_EU = 3793;

const int XK_Hangul_YI = 3794;

const int XK_Hangul_I = 3795;

const int XK_Hangul_J_Kiyeog = 3796;

const int XK_Hangul_J_SsangKiyeog = 3797;

const int XK_Hangul_J_KiyeogSios = 3798;

const int XK_Hangul_J_Nieun = 3799;

const int XK_Hangul_J_NieunJieuj = 3800;

const int XK_Hangul_J_NieunHieuh = 3801;

const int XK_Hangul_J_Dikeud = 3802;

const int XK_Hangul_J_Rieul = 3803;

const int XK_Hangul_J_RieulKiyeog = 3804;

const int XK_Hangul_J_RieulMieum = 3805;

const int XK_Hangul_J_RieulPieub = 3806;

const int XK_Hangul_J_RieulSios = 3807;

const int XK_Hangul_J_RieulTieut = 3808;

const int XK_Hangul_J_RieulPhieuf = 3809;

const int XK_Hangul_J_RieulHieuh = 3810;

const int XK_Hangul_J_Mieum = 3811;

const int XK_Hangul_J_Pieub = 3812;

const int XK_Hangul_J_PieubSios = 3813;

const int XK_Hangul_J_Sios = 3814;

const int XK_Hangul_J_SsangSios = 3815;

const int XK_Hangul_J_Ieung = 3816;

const int XK_Hangul_J_Jieuj = 3817;

const int XK_Hangul_J_Cieuc = 3818;

const int XK_Hangul_J_Khieuq = 3819;

const int XK_Hangul_J_Tieut = 3820;

const int XK_Hangul_J_Phieuf = 3821;

const int XK_Hangul_J_Hieuh = 3822;

const int XK_Hangul_RieulYeorinHieuh = 3823;

const int XK_Hangul_SunkyeongeumMieum = 3824;

const int XK_Hangul_SunkyeongeumPieub = 3825;

const int XK_Hangul_PanSios = 3826;

const int XK_Hangul_KkogjiDalrinIeung = 3827;

const int XK_Hangul_SunkyeongeumPhieuf = 3828;

const int XK_Hangul_YeorinHieuh = 3829;

const int XK_Hangul_AraeA = 3830;

const int XK_Hangul_AraeAE = 3831;

const int XK_Hangul_J_PanSios = 3832;

const int XK_Hangul_J_KkogjiDalrinIeung = 3833;

const int XK_Hangul_J_YeorinHieuh = 3834;

const int XK_Korean_Won = 3839;

const int XK_Armenian_ligature_ew = 16778631;

const int XK_Armenian_full_stop = 16778633;

const int XK_Armenian_verjaket = 16778633;

const int XK_Armenian_separation_mark = 16778589;

const int XK_Armenian_but = 16778589;

const int XK_Armenian_hyphen = 16778634;

const int XK_Armenian_yentamna = 16778634;

const int XK_Armenian_exclam = 16778588;

const int XK_Armenian_amanak = 16778588;

const int XK_Armenian_accent = 16778587;

const int XK_Armenian_shesht = 16778587;

const int XK_Armenian_question = 16778590;

const int XK_Armenian_paruyk = 16778590;

const int XK_Armenian_AYB = 16778545;

const int XK_Armenian_ayb = 16778593;

const int XK_Armenian_BEN = 16778546;

const int XK_Armenian_ben = 16778594;

const int XK_Armenian_GIM = 16778547;

const int XK_Armenian_gim = 16778595;

const int XK_Armenian_DA = 16778548;

const int XK_Armenian_da = 16778596;

const int XK_Armenian_YECH = 16778549;

const int XK_Armenian_yech = 16778597;

const int XK_Armenian_ZA = 16778550;

const int XK_Armenian_za = 16778598;

const int XK_Armenian_E = 16778551;

const int XK_Armenian_e = 16778599;

const int XK_Armenian_AT = 16778552;

const int XK_Armenian_at = 16778600;

const int XK_Armenian_TO = 16778553;

const int XK_Armenian_to = 16778601;

const int XK_Armenian_ZHE = 16778554;

const int XK_Armenian_zhe = 16778602;

const int XK_Armenian_INI = 16778555;

const int XK_Armenian_ini = 16778603;

const int XK_Armenian_LYUN = 16778556;

const int XK_Armenian_lyun = 16778604;

const int XK_Armenian_KHE = 16778557;

const int XK_Armenian_khe = 16778605;

const int XK_Armenian_TSA = 16778558;

const int XK_Armenian_tsa = 16778606;

const int XK_Armenian_KEN = 16778559;

const int XK_Armenian_ken = 16778607;

const int XK_Armenian_HO = 16778560;

const int XK_Armenian_ho = 16778608;

const int XK_Armenian_DZA = 16778561;

const int XK_Armenian_dza = 16778609;

const int XK_Armenian_GHAT = 16778562;

const int XK_Armenian_ghat = 16778610;

const int XK_Armenian_TCHE = 16778563;

const int XK_Armenian_tche = 16778611;

const int XK_Armenian_MEN = 16778564;

const int XK_Armenian_men = 16778612;

const int XK_Armenian_HI = 16778565;

const int XK_Armenian_hi = 16778613;

const int XK_Armenian_NU = 16778566;

const int XK_Armenian_nu = 16778614;

const int XK_Armenian_SHA = 16778567;

const int XK_Armenian_sha = 16778615;

const int XK_Armenian_VO = 16778568;

const int XK_Armenian_vo = 16778616;

const int XK_Armenian_CHA = 16778569;

const int XK_Armenian_cha = 16778617;

const int XK_Armenian_PE = 16778570;

const int XK_Armenian_pe = 16778618;

const int XK_Armenian_JE = 16778571;

const int XK_Armenian_je = 16778619;

const int XK_Armenian_RA = 16778572;

const int XK_Armenian_ra = 16778620;

const int XK_Armenian_SE = 16778573;

const int XK_Armenian_se = 16778621;

const int XK_Armenian_VEV = 16778574;

const int XK_Armenian_vev = 16778622;

const int XK_Armenian_TYUN = 16778575;

const int XK_Armenian_tyun = 16778623;

const int XK_Armenian_RE = 16778576;

const int XK_Armenian_re = 16778624;

const int XK_Armenian_TSO = 16778577;

const int XK_Armenian_tso = 16778625;

const int XK_Armenian_VYUN = 16778578;

const int XK_Armenian_vyun = 16778626;

const int XK_Armenian_PYUR = 16778579;

const int XK_Armenian_pyur = 16778627;

const int XK_Armenian_KE = 16778580;

const int XK_Armenian_ke = 16778628;

const int XK_Armenian_O = 16778581;

const int XK_Armenian_o = 16778629;

const int XK_Armenian_FE = 16778582;

const int XK_Armenian_fe = 16778630;

const int XK_Armenian_apostrophe = 16778586;

const int XK_Georgian_an = 16781520;

const int XK_Georgian_ban = 16781521;

const int XK_Georgian_gan = 16781522;

const int XK_Georgian_don = 16781523;

const int XK_Georgian_en = 16781524;

const int XK_Georgian_vin = 16781525;

const int XK_Georgian_zen = 16781526;

const int XK_Georgian_tan = 16781527;

const int XK_Georgian_in = 16781528;

const int XK_Georgian_kan = 16781529;

const int XK_Georgian_las = 16781530;

const int XK_Georgian_man = 16781531;

const int XK_Georgian_nar = 16781532;

const int XK_Georgian_on = 16781533;

const int XK_Georgian_par = 16781534;

const int XK_Georgian_zhar = 16781535;

const int XK_Georgian_rae = 16781536;

const int XK_Georgian_san = 16781537;

const int XK_Georgian_tar = 16781538;

const int XK_Georgian_un = 16781539;

const int XK_Georgian_phar = 16781540;

const int XK_Georgian_khar = 16781541;

const int XK_Georgian_ghan = 16781542;

const int XK_Georgian_qar = 16781543;

const int XK_Georgian_shin = 16781544;

const int XK_Georgian_chin = 16781545;

const int XK_Georgian_can = 16781546;

const int XK_Georgian_jil = 16781547;

const int XK_Georgian_cil = 16781548;

const int XK_Georgian_char = 16781549;

const int XK_Georgian_xan = 16781550;

const int XK_Georgian_jhan = 16781551;

const int XK_Georgian_hae = 16781552;

const int XK_Georgian_he = 16781553;

const int XK_Georgian_hie = 16781554;

const int XK_Georgian_we = 16781555;

const int XK_Georgian_har = 16781556;

const int XK_Georgian_hoe = 16781557;

const int XK_Georgian_fi = 16781558;

const int XK_Xabovedot = 16785034;

const int XK_Ibreve = 16777516;

const int XK_Zstroke = 16777653;

const int XK_Gcaron = 16777702;

const int XK_Ocaron = 16777681;

const int XK_Obarred = 16777631;

const int XK_xabovedot = 16785035;

const int XK_ibreve = 16777517;

const int XK_zstroke = 16777654;

const int XK_gcaron = 16777703;

const int XK_ocaron = 16777682;

const int XK_obarred = 16777845;

const int XK_SCHWA = 16777615;

const int XK_schwa = 16777817;

const int XK_EZH = 16777655;

const int XK_ezh = 16777874;

const int XK_Lbelowdot = 16784950;

const int XK_lbelowdot = 16784951;

const int XK_Abelowdot = 16785056;

const int XK_abelowdot = 16785057;

const int XK_Ahook = 16785058;

const int XK_ahook = 16785059;

const int XK_Acircumflexacute = 16785060;

const int XK_acircumflexacute = 16785061;

const int XK_Acircumflexgrave = 16785062;

const int XK_acircumflexgrave = 16785063;

const int XK_Acircumflexhook = 16785064;

const int XK_acircumflexhook = 16785065;

const int XK_Acircumflextilde = 16785066;

const int XK_acircumflextilde = 16785067;

const int XK_Acircumflexbelowdot = 16785068;

const int XK_acircumflexbelowdot = 16785069;

const int XK_Abreveacute = 16785070;

const int XK_abreveacute = 16785071;

const int XK_Abrevegrave = 16785072;

const int XK_abrevegrave = 16785073;

const int XK_Abrevehook = 16785074;

const int XK_abrevehook = 16785075;

const int XK_Abrevetilde = 16785076;

const int XK_abrevetilde = 16785077;

const int XK_Abrevebelowdot = 16785078;

const int XK_abrevebelowdot = 16785079;

const int XK_Ebelowdot = 16785080;

const int XK_ebelowdot = 16785081;

const int XK_Ehook = 16785082;

const int XK_ehook = 16785083;

const int XK_Etilde = 16785084;

const int XK_etilde = 16785085;

const int XK_Ecircumflexacute = 16785086;

const int XK_ecircumflexacute = 16785087;

const int XK_Ecircumflexgrave = 16785088;

const int XK_ecircumflexgrave = 16785089;

const int XK_Ecircumflexhook = 16785090;

const int XK_ecircumflexhook = 16785091;

const int XK_Ecircumflextilde = 16785092;

const int XK_ecircumflextilde = 16785093;

const int XK_Ecircumflexbelowdot = 16785094;

const int XK_ecircumflexbelowdot = 16785095;

const int XK_Ihook = 16785096;

const int XK_ihook = 16785097;

const int XK_Ibelowdot = 16785098;

const int XK_ibelowdot = 16785099;

const int XK_Obelowdot = 16785100;

const int XK_obelowdot = 16785101;

const int XK_Ohook = 16785102;

const int XK_ohook = 16785103;

const int XK_Ocircumflexacute = 16785104;

const int XK_ocircumflexacute = 16785105;

const int XK_Ocircumflexgrave = 16785106;

const int XK_ocircumflexgrave = 16785107;

const int XK_Ocircumflexhook = 16785108;

const int XK_ocircumflexhook = 16785109;

const int XK_Ocircumflextilde = 16785110;

const int XK_ocircumflextilde = 16785111;

const int XK_Ocircumflexbelowdot = 16785112;

const int XK_ocircumflexbelowdot = 16785113;

const int XK_Ohornacute = 16785114;

const int XK_ohornacute = 16785115;

const int XK_Ohorngrave = 16785116;

const int XK_ohorngrave = 16785117;

const int XK_Ohornhook = 16785118;

const int XK_ohornhook = 16785119;

const int XK_Ohorntilde = 16785120;

const int XK_ohorntilde = 16785121;

const int XK_Ohornbelowdot = 16785122;

const int XK_ohornbelowdot = 16785123;

const int XK_Ubelowdot = 16785124;

const int XK_ubelowdot = 16785125;

const int XK_Uhook = 16785126;

const int XK_uhook = 16785127;

const int XK_Uhornacute = 16785128;

const int XK_uhornacute = 16785129;

const int XK_Uhorngrave = 16785130;

const int XK_uhorngrave = 16785131;

const int XK_Uhornhook = 16785132;

const int XK_uhornhook = 16785133;

const int XK_Uhorntilde = 16785134;

const int XK_uhorntilde = 16785135;

const int XK_Uhornbelowdot = 16785136;

const int XK_uhornbelowdot = 16785137;

const int XK_Ybelowdot = 16785140;

const int XK_ybelowdot = 16785141;

const int XK_Yhook = 16785142;

const int XK_yhook = 16785143;

const int XK_Ytilde = 16785144;

const int XK_ytilde = 16785145;

const int XK_Ohorn = 16777632;

const int XK_ohorn = 16777633;

const int XK_Uhorn = 16777647;

const int XK_uhorn = 16777648;

const int XK_EcuSign = 16785568;

const int XK_ColonSign = 16785569;

const int XK_CruzeiroSign = 16785570;

const int XK_FFrancSign = 16785571;

const int XK_LiraSign = 16785572;

const int XK_MillSign = 16785573;

const int XK_NairaSign = 16785574;

const int XK_PesetaSign = 16785575;

const int XK_RupeeSign = 16785576;

const int XK_WonSign = 16785577;

const int XK_NewSheqelSign = 16785578;

const int XK_DongSign = 16785579;

const int XK_EuroSign = 8364;

const int XK_zerosuperior = 16785520;

const int XK_foursuperior = 16785524;

const int XK_fivesuperior = 16785525;

const int XK_sixsuperior = 16785526;

const int XK_sevensuperior = 16785527;

const int XK_eightsuperior = 16785528;

const int XK_ninesuperior = 16785529;

const int XK_zerosubscript = 16785536;

const int XK_onesubscript = 16785537;

const int XK_twosubscript = 16785538;

const int XK_threesubscript = 16785539;

const int XK_foursubscript = 16785540;

const int XK_fivesubscript = 16785541;

const int XK_sixsubscript = 16785542;

const int XK_sevensubscript = 16785543;

const int XK_eightsubscript = 16785544;

const int XK_ninesubscript = 16785545;

const int XK_partdifferential = 16785922;

const int XK_emptyset = 16785925;

const int XK_elementof = 16785928;

const int XK_notelementof = 16785929;

const int XK_containsas = 16785931;

const int XK_squareroot = 16785946;

const int XK_cuberoot = 16785947;

const int XK_fourthroot = 16785948;

const int XK_dintegral = 16785964;

const int XK_tintegral = 16785965;

const int XK_because = 16785973;

const int XK_approxeq = 16785992;

const int XK_notapproxeq = 16785991;

const int XK_notidentical = 16786018;

const int XK_stricteq = 16786019;

const int XK_braille_dot_1 = 65521;

const int XK_braille_dot_2 = 65522;

const int XK_braille_dot_3 = 65523;

const int XK_braille_dot_4 = 65524;

const int XK_braille_dot_5 = 65525;

const int XK_braille_dot_6 = 65526;

const int XK_braille_dot_7 = 65527;

const int XK_braille_dot_8 = 65528;

const int XK_braille_dot_9 = 65529;

const int XK_braille_dot_10 = 65530;

const int XK_braille_blank = 16787456;

const int XK_braille_dots_1 = 16787457;

const int XK_braille_dots_2 = 16787458;

const int XK_braille_dots_12 = 16787459;

const int XK_braille_dots_3 = 16787460;

const int XK_braille_dots_13 = 16787461;

const int XK_braille_dots_23 = 16787462;

const int XK_braille_dots_123 = 16787463;

const int XK_braille_dots_4 = 16787464;

const int XK_braille_dots_14 = 16787465;

const int XK_braille_dots_24 = 16787466;

const int XK_braille_dots_124 = 16787467;

const int XK_braille_dots_34 = 16787468;

const int XK_braille_dots_134 = 16787469;

const int XK_braille_dots_234 = 16787470;

const int XK_braille_dots_1234 = 16787471;

const int XK_braille_dots_5 = 16787472;

const int XK_braille_dots_15 = 16787473;

const int XK_braille_dots_25 = 16787474;

const int XK_braille_dots_125 = 16787475;

const int XK_braille_dots_35 = 16787476;

const int XK_braille_dots_135 = 16787477;

const int XK_braille_dots_235 = 16787478;

const int XK_braille_dots_1235 = 16787479;

const int XK_braille_dots_45 = 16787480;

const int XK_braille_dots_145 = 16787481;

const int XK_braille_dots_245 = 16787482;

const int XK_braille_dots_1245 = 16787483;

const int XK_braille_dots_345 = 16787484;

const int XK_braille_dots_1345 = 16787485;

const int XK_braille_dots_2345 = 16787486;

const int XK_braille_dots_12345 = 16787487;

const int XK_braille_dots_6 = 16787488;

const int XK_braille_dots_16 = 16787489;

const int XK_braille_dots_26 = 16787490;

const int XK_braille_dots_126 = 16787491;

const int XK_braille_dots_36 = 16787492;

const int XK_braille_dots_136 = 16787493;

const int XK_braille_dots_236 = 16787494;

const int XK_braille_dots_1236 = 16787495;

const int XK_braille_dots_46 = 16787496;

const int XK_braille_dots_146 = 16787497;

const int XK_braille_dots_246 = 16787498;

const int XK_braille_dots_1246 = 16787499;

const int XK_braille_dots_346 = 16787500;

const int XK_braille_dots_1346 = 16787501;

const int XK_braille_dots_2346 = 16787502;

const int XK_braille_dots_12346 = 16787503;

const int XK_braille_dots_56 = 16787504;

const int XK_braille_dots_156 = 16787505;

const int XK_braille_dots_256 = 16787506;

const int XK_braille_dots_1256 = 16787507;

const int XK_braille_dots_356 = 16787508;

const int XK_braille_dots_1356 = 16787509;

const int XK_braille_dots_2356 = 16787510;

const int XK_braille_dots_12356 = 16787511;

const int XK_braille_dots_456 = 16787512;

const int XK_braille_dots_1456 = 16787513;

const int XK_braille_dots_2456 = 16787514;

const int XK_braille_dots_12456 = 16787515;

const int XK_braille_dots_3456 = 16787516;

const int XK_braille_dots_13456 = 16787517;

const int XK_braille_dots_23456 = 16787518;

const int XK_braille_dots_123456 = 16787519;

const int XK_braille_dots_7 = 16787520;

const int XK_braille_dots_17 = 16787521;

const int XK_braille_dots_27 = 16787522;

const int XK_braille_dots_127 = 16787523;

const int XK_braille_dots_37 = 16787524;

const int XK_braille_dots_137 = 16787525;

const int XK_braille_dots_237 = 16787526;

const int XK_braille_dots_1237 = 16787527;

const int XK_braille_dots_47 = 16787528;

const int XK_braille_dots_147 = 16787529;

const int XK_braille_dots_247 = 16787530;

const int XK_braille_dots_1247 = 16787531;

const int XK_braille_dots_347 = 16787532;

const int XK_braille_dots_1347 = 16787533;

const int XK_braille_dots_2347 = 16787534;

const int XK_braille_dots_12347 = 16787535;

const int XK_braille_dots_57 = 16787536;

const int XK_braille_dots_157 = 16787537;

const int XK_braille_dots_257 = 16787538;

const int XK_braille_dots_1257 = 16787539;

const int XK_braille_dots_357 = 16787540;

const int XK_braille_dots_1357 = 16787541;

const int XK_braille_dots_2357 = 16787542;

const int XK_braille_dots_12357 = 16787543;

const int XK_braille_dots_457 = 16787544;

const int XK_braille_dots_1457 = 16787545;

const int XK_braille_dots_2457 = 16787546;

const int XK_braille_dots_12457 = 16787547;

const int XK_braille_dots_3457 = 16787548;

const int XK_braille_dots_13457 = 16787549;

const int XK_braille_dots_23457 = 16787550;

const int XK_braille_dots_123457 = 16787551;

const int XK_braille_dots_67 = 16787552;

const int XK_braille_dots_167 = 16787553;

const int XK_braille_dots_267 = 16787554;

const int XK_braille_dots_1267 = 16787555;

const int XK_braille_dots_367 = 16787556;

const int XK_braille_dots_1367 = 16787557;

const int XK_braille_dots_2367 = 16787558;

const int XK_braille_dots_12367 = 16787559;

const int XK_braille_dots_467 = 16787560;

const int XK_braille_dots_1467 = 16787561;

const int XK_braille_dots_2467 = 16787562;

const int XK_braille_dots_12467 = 16787563;

const int XK_braille_dots_3467 = 16787564;

const int XK_braille_dots_13467 = 16787565;

const int XK_braille_dots_23467 = 16787566;

const int XK_braille_dots_123467 = 16787567;

const int XK_braille_dots_567 = 16787568;

const int XK_braille_dots_1567 = 16787569;

const int XK_braille_dots_2567 = 16787570;

const int XK_braille_dots_12567 = 16787571;

const int XK_braille_dots_3567 = 16787572;

const int XK_braille_dots_13567 = 16787573;

const int XK_braille_dots_23567 = 16787574;

const int XK_braille_dots_123567 = 16787575;

const int XK_braille_dots_4567 = 16787576;

const int XK_braille_dots_14567 = 16787577;

const int XK_braille_dots_24567 = 16787578;

const int XK_braille_dots_124567 = 16787579;

const int XK_braille_dots_34567 = 16787580;

const int XK_braille_dots_134567 = 16787581;

const int XK_braille_dots_234567 = 16787582;

const int XK_braille_dots_1234567 = 16787583;

const int XK_braille_dots_8 = 16787584;

const int XK_braille_dots_18 = 16787585;

const int XK_braille_dots_28 = 16787586;

const int XK_braille_dots_128 = 16787587;

const int XK_braille_dots_38 = 16787588;

const int XK_braille_dots_138 = 16787589;

const int XK_braille_dots_238 = 16787590;

const int XK_braille_dots_1238 = 16787591;

const int XK_braille_dots_48 = 16787592;

const int XK_braille_dots_148 = 16787593;

const int XK_braille_dots_248 = 16787594;

const int XK_braille_dots_1248 = 16787595;

const int XK_braille_dots_348 = 16787596;

const int XK_braille_dots_1348 = 16787597;

const int XK_braille_dots_2348 = 16787598;

const int XK_braille_dots_12348 = 16787599;

const int XK_braille_dots_58 = 16787600;

const int XK_braille_dots_158 = 16787601;

const int XK_braille_dots_258 = 16787602;

const int XK_braille_dots_1258 = 16787603;

const int XK_braille_dots_358 = 16787604;

const int XK_braille_dots_1358 = 16787605;

const int XK_braille_dots_2358 = 16787606;

const int XK_braille_dots_12358 = 16787607;

const int XK_braille_dots_458 = 16787608;

const int XK_braille_dots_1458 = 16787609;

const int XK_braille_dots_2458 = 16787610;

const int XK_braille_dots_12458 = 16787611;

const int XK_braille_dots_3458 = 16787612;

const int XK_braille_dots_13458 = 16787613;

const int XK_braille_dots_23458 = 16787614;

const int XK_braille_dots_123458 = 16787615;

const int XK_braille_dots_68 = 16787616;

const int XK_braille_dots_168 = 16787617;

const int XK_braille_dots_268 = 16787618;

const int XK_braille_dots_1268 = 16787619;

const int XK_braille_dots_368 = 16787620;

const int XK_braille_dots_1368 = 16787621;

const int XK_braille_dots_2368 = 16787622;

const int XK_braille_dots_12368 = 16787623;

const int XK_braille_dots_468 = 16787624;

const int XK_braille_dots_1468 = 16787625;

const int XK_braille_dots_2468 = 16787626;

const int XK_braille_dots_12468 = 16787627;

const int XK_braille_dots_3468 = 16787628;

const int XK_braille_dots_13468 = 16787629;

const int XK_braille_dots_23468 = 16787630;

const int XK_braille_dots_123468 = 16787631;

const int XK_braille_dots_568 = 16787632;

const int XK_braille_dots_1568 = 16787633;

const int XK_braille_dots_2568 = 16787634;

const int XK_braille_dots_12568 = 16787635;

const int XK_braille_dots_3568 = 16787636;

const int XK_braille_dots_13568 = 16787637;

const int XK_braille_dots_23568 = 16787638;

const int XK_braille_dots_123568 = 16787639;

const int XK_braille_dots_4568 = 16787640;

const int XK_braille_dots_14568 = 16787641;

const int XK_braille_dots_24568 = 16787642;

const int XK_braille_dots_124568 = 16787643;

const int XK_braille_dots_34568 = 16787644;

const int XK_braille_dots_134568 = 16787645;

const int XK_braille_dots_234568 = 16787646;

const int XK_braille_dots_1234568 = 16787647;

const int XK_braille_dots_78 = 16787648;

const int XK_braille_dots_178 = 16787649;

const int XK_braille_dots_278 = 16787650;

const int XK_braille_dots_1278 = 16787651;

const int XK_braille_dots_378 = 16787652;

const int XK_braille_dots_1378 = 16787653;

const int XK_braille_dots_2378 = 16787654;

const int XK_braille_dots_12378 = 16787655;

const int XK_braille_dots_478 = 16787656;

const int XK_braille_dots_1478 = 16787657;

const int XK_braille_dots_2478 = 16787658;

const int XK_braille_dots_12478 = 16787659;

const int XK_braille_dots_3478 = 16787660;

const int XK_braille_dots_13478 = 16787661;

const int XK_braille_dots_23478 = 16787662;

const int XK_braille_dots_123478 = 16787663;

const int XK_braille_dots_578 = 16787664;

const int XK_braille_dots_1578 = 16787665;

const int XK_braille_dots_2578 = 16787666;

const int XK_braille_dots_12578 = 16787667;

const int XK_braille_dots_3578 = 16787668;

const int XK_braille_dots_13578 = 16787669;

const int XK_braille_dots_23578 = 16787670;

const int XK_braille_dots_123578 = 16787671;

const int XK_braille_dots_4578 = 16787672;

const int XK_braille_dots_14578 = 16787673;

const int XK_braille_dots_24578 = 16787674;

const int XK_braille_dots_124578 = 16787675;

const int XK_braille_dots_34578 = 16787676;

const int XK_braille_dots_134578 = 16787677;

const int XK_braille_dots_234578 = 16787678;

const int XK_braille_dots_1234578 = 16787679;

const int XK_braille_dots_678 = 16787680;

const int XK_braille_dots_1678 = 16787681;

const int XK_braille_dots_2678 = 16787682;

const int XK_braille_dots_12678 = 16787683;

const int XK_braille_dots_3678 = 16787684;

const int XK_braille_dots_13678 = 16787685;

const int XK_braille_dots_23678 = 16787686;

const int XK_braille_dots_123678 = 16787687;

const int XK_braille_dots_4678 = 16787688;

const int XK_braille_dots_14678 = 16787689;

const int XK_braille_dots_24678 = 16787690;

const int XK_braille_dots_124678 = 16787691;

const int XK_braille_dots_34678 = 16787692;

const int XK_braille_dots_134678 = 16787693;

const int XK_braille_dots_234678 = 16787694;

const int XK_braille_dots_1234678 = 16787695;

const int XK_braille_dots_5678 = 16787696;

const int XK_braille_dots_15678 = 16787697;

const int XK_braille_dots_25678 = 16787698;

const int XK_braille_dots_125678 = 16787699;

const int XK_braille_dots_35678 = 16787700;

const int XK_braille_dots_135678 = 16787701;

const int XK_braille_dots_235678 = 16787702;

const int XK_braille_dots_1235678 = 16787703;

const int XK_braille_dots_45678 = 16787704;

const int XK_braille_dots_145678 = 16787705;

const int XK_braille_dots_245678 = 16787706;

const int XK_braille_dots_1245678 = 16787707;

const int XK_braille_dots_345678 = 16787708;

const int XK_braille_dots_1345678 = 16787709;

const int XK_braille_dots_2345678 = 16787710;

const int XK_braille_dots_12345678 = 16787711;

const int XK_Sinh_ng = 16780674;

const int XK_Sinh_h2 = 16780675;

const int XK_Sinh_a = 16780677;

const int XK_Sinh_aa = 16780678;

const int XK_Sinh_ae = 16780679;

const int XK_Sinh_aee = 16780680;

const int XK_Sinh_i = 16780681;

const int XK_Sinh_ii = 16780682;

const int XK_Sinh_u = 16780683;

const int XK_Sinh_uu = 16780684;

const int XK_Sinh_ri = 16780685;

const int XK_Sinh_rii = 16780686;

const int XK_Sinh_lu = 16780687;

const int XK_Sinh_luu = 16780688;

const int XK_Sinh_e = 16780689;

const int XK_Sinh_ee = 16780690;

const int XK_Sinh_ai = 16780691;

const int XK_Sinh_o = 16780692;

const int XK_Sinh_oo = 16780693;

const int XK_Sinh_au = 16780694;

const int XK_Sinh_ka = 16780698;

const int XK_Sinh_kha = 16780699;

const int XK_Sinh_ga = 16780700;

const int XK_Sinh_gha = 16780701;

const int XK_Sinh_ng2 = 16780702;

const int XK_Sinh_nga = 16780703;

const int XK_Sinh_ca = 16780704;

const int XK_Sinh_cha = 16780705;

const int XK_Sinh_ja = 16780706;

const int XK_Sinh_jha = 16780707;

const int XK_Sinh_nya = 16780708;

const int XK_Sinh_jnya = 16780709;

const int XK_Sinh_nja = 16780710;

const int XK_Sinh_tta = 16780711;

const int XK_Sinh_ttha = 16780712;

const int XK_Sinh_dda = 16780713;

const int XK_Sinh_ddha = 16780714;

const int XK_Sinh_nna = 16780715;

const int XK_Sinh_ndda = 16780716;

const int XK_Sinh_tha = 16780717;

const int XK_Sinh_thha = 16780718;

const int XK_Sinh_dha = 16780719;

const int XK_Sinh_dhha = 16780720;

const int XK_Sinh_na = 16780721;

const int XK_Sinh_ndha = 16780723;

const int XK_Sinh_pa = 16780724;

const int XK_Sinh_pha = 16780725;

const int XK_Sinh_ba = 16780726;

const int XK_Sinh_bha = 16780727;

const int XK_Sinh_ma = 16780728;

const int XK_Sinh_mba = 16780729;

const int XK_Sinh_ya = 16780730;

const int XK_Sinh_ra = 16780731;

const int XK_Sinh_la = 16780733;

const int XK_Sinh_va = 16780736;

const int XK_Sinh_sha = 16780737;

const int XK_Sinh_ssha = 16780738;

const int XK_Sinh_sa = 16780739;

const int XK_Sinh_ha = 16780740;

const int XK_Sinh_lla = 16780741;

const int XK_Sinh_fa = 16780742;

const int XK_Sinh_al = 16780746;

const int XK_Sinh_aa2 = 16780751;

const int XK_Sinh_ae2 = 16780752;

const int XK_Sinh_aee2 = 16780753;

const int XK_Sinh_i2 = 16780754;

const int XK_Sinh_ii2 = 16780755;

const int XK_Sinh_u2 = 16780756;

const int XK_Sinh_uu2 = 16780758;

const int XK_Sinh_ru2 = 16780760;

const int XK_Sinh_e2 = 16780761;

const int XK_Sinh_ee2 = 16780762;

const int XK_Sinh_ai2 = 16780763;

const int XK_Sinh_o2 = 16780764;

const int XK_Sinh_oo2 = 16780765;

const int XK_Sinh_au2 = 16780766;

const int XK_Sinh_lu2 = 16780767;

const int XK_Sinh_ruu2 = 16780786;

const int XK_Sinh_luu2 = 16780787;

const int XK_Sinh_kunddaliya = 16780788;

const int NoValue = 0;

const int XValue = 1;

const int YValue = 2;

const int WidthValue = 4;

const int HeightValue = 8;

const int AllValues = 15;

const int XNegative = 16;

const int YNegative = 32;

const int USPosition = 1;

const int USSize = 2;

const int PPosition = 4;

const int PSize = 8;

const int PMinSize = 16;

const int PMaxSize = 32;

const int PResizeInc = 64;

const int PAspect = 128;

const int PBaseSize = 256;

const int PWinGravity = 512;

const int PAllHints = 252;

const int InputHint = 1;

const int StateHint = 2;

const int IconPixmapHint = 4;

const int IconWindowHint = 8;

const int IconPositionHint = 16;

const int IconMaskHint = 32;

const int WindowGroupHint = 64;

const int AllHints = 127;

const int XUrgencyHint = 256;

const int WithdrawnState = 0;

const int NormalState = 1;

const int IconicState = 3;

const int DontCareState = 0;

const int ZoomState = 2;

const int InactiveState = 4;

const int XNoMemory = -1;

const int XLocaleNotSupported = -2;

const int XConverterNotFound = -3;

const int RectangleOut = 0;

const int RectangleIn = 1;

const int RectanglePart = 2;

const int VisualNoMask = 0;

const int VisualIDMask = 1;

const int VisualScreenMask = 2;

const int VisualDepthMask = 4;

const int VisualClassMask = 8;

const int VisualRedMaskMask = 16;

const int VisualGreenMaskMask = 32;

const int VisualBlueMaskMask = 64;

const int VisualColormapSizeMask = 128;

const int VisualBitsPerRGBMask = 256;

const int VisualAllMask = 511;

const int ReleaseByFreeingColormap = 1;

const int BitmapSuccess = 0;

const int BitmapOpenFailed = 1;

const int BitmapFileInvalid = 2;

const int BitmapNoMemory = 3;

const int XCSUCCESS = 0;

const int XCNOMEM = 1;

const int XCNOENT = 2;

const int EGL_EGL_PROTOTYPES = 1;

const int EGL_VERSION_1_0 = 1;

const int EGL_ALPHA_SIZE = 12321;

const int EGL_BAD_ACCESS = 12290;

const int EGL_BAD_ALLOC = 12291;

const int EGL_BAD_ATTRIBUTE = 12292;

const int EGL_BAD_CONFIG = 12293;

const int EGL_BAD_CONTEXT = 12294;

const int EGL_BAD_CURRENT_SURFACE = 12295;

const int EGL_BAD_DISPLAY = 12296;

const int EGL_BAD_MATCH = 12297;

const int EGL_BAD_NATIVE_PIXMAP = 12298;

const int EGL_BAD_NATIVE_WINDOW = 12299;

const int EGL_BAD_PARAMETER = 12300;

const int EGL_BAD_SURFACE = 12301;

const int EGL_BLUE_SIZE = 12322;

const int EGL_BUFFER_SIZE = 12320;

const int EGL_CONFIG_CAVEAT = 12327;

const int EGL_CONFIG_ID = 12328;

const int EGL_CORE_NATIVE_ENGINE = 12379;

const int EGL_DEPTH_SIZE = 12325;

const int EGL_DONT_CARE = -1;

const int EGL_DRAW = 12377;

const int EGL_EXTENSIONS = 12373;

const int EGL_FALSE = 0;

const int EGL_GREEN_SIZE = 12323;

const int EGL_HEIGHT = 12374;

const int EGL_LARGEST_PBUFFER = 12376;

const int EGL_LEVEL = 12329;

const int EGL_MAX_PBUFFER_HEIGHT = 12330;

const int EGL_MAX_PBUFFER_PIXELS = 12331;

const int EGL_MAX_PBUFFER_WIDTH = 12332;

const int EGL_NATIVE_RENDERABLE = 12333;

const int EGL_NATIVE_VISUAL_ID = 12334;

const int EGL_NATIVE_VISUAL_TYPE = 12335;

const int EGL_NONE = 12344;

const int EGL_NON_CONFORMANT_CONFIG = 12369;

const int EGL_NOT_INITIALIZED = 12289;

const int EGL_PBUFFER_BIT = 1;

const int EGL_PIXMAP_BIT = 2;

const int EGL_READ = 12378;

const int EGL_RED_SIZE = 12324;

const int EGL_SAMPLES = 12337;

const int EGL_SAMPLE_BUFFERS = 12338;

const int EGL_SLOW_CONFIG = 12368;

const int EGL_STENCIL_SIZE = 12326;

const int EGL_SUCCESS = 12288;

const int EGL_SURFACE_TYPE = 12339;

const int EGL_TRANSPARENT_BLUE_VALUE = 12341;

const int EGL_TRANSPARENT_GREEN_VALUE = 12342;

const int EGL_TRANSPARENT_RED_VALUE = 12343;

const int EGL_TRANSPARENT_RGB = 12370;

const int EGL_TRANSPARENT_TYPE = 12340;

const int EGL_TRUE = 1;

const int EGL_VENDOR = 12371;

const int EGL_VERSION = 12372;

const int EGL_WIDTH = 12375;

const int EGL_WINDOW_BIT = 4;

const int EGL_VERSION_1_1 = 1;

const int EGL_BACK_BUFFER = 12420;

const int EGL_BIND_TO_TEXTURE_RGB = 12345;

const int EGL_BIND_TO_TEXTURE_RGBA = 12346;

const int EGL_CONTEXT_LOST = 12302;

const int EGL_MIN_SWAP_INTERVAL = 12347;

const int EGL_MAX_SWAP_INTERVAL = 12348;

const int EGL_MIPMAP_TEXTURE = 12418;

const int EGL_MIPMAP_LEVEL = 12419;

const int EGL_NO_TEXTURE = 12380;

const int EGL_TEXTURE_2D = 12383;

const int EGL_TEXTURE_FORMAT = 12416;

const int EGL_TEXTURE_RGB = 12381;

const int EGL_TEXTURE_RGBA = 12382;

const int EGL_TEXTURE_TARGET = 12417;

const int EGL_VERSION_1_2 = 1;

const int EGL_ALPHA_FORMAT = 12424;

const int EGL_ALPHA_FORMAT_NONPRE = 12427;

const int EGL_ALPHA_FORMAT_PRE = 12428;

const int EGL_ALPHA_MASK_SIZE = 12350;

const int EGL_BUFFER_PRESERVED = 12436;

const int EGL_BUFFER_DESTROYED = 12437;

const int EGL_CLIENT_APIS = 12429;

const int EGL_COLORSPACE = 12423;

const int EGL_COLORSPACE_sRGB = 12425;

const int EGL_COLORSPACE_LINEAR = 12426;

const int EGL_COLOR_BUFFER_TYPE = 12351;

const int EGL_CONTEXT_CLIENT_TYPE = 12439;

const int EGL_DISPLAY_SCALING = 10000;

const int EGL_HORIZONTAL_RESOLUTION = 12432;

const int EGL_LUMINANCE_BUFFER = 12431;

const int EGL_LUMINANCE_SIZE = 12349;

const int EGL_OPENGL_ES_BIT = 1;

const int EGL_OPENVG_BIT = 2;

const int EGL_OPENGL_ES_API = 12448;

const int EGL_OPENVG_API = 12449;

const int EGL_OPENVG_IMAGE = 12438;

const int EGL_PIXEL_ASPECT_RATIO = 12434;

const int EGL_RENDERABLE_TYPE = 12352;

const int EGL_RENDER_BUFFER = 12422;

const int EGL_RGB_BUFFER = 12430;

const int EGL_SINGLE_BUFFER = 12421;

const int EGL_SWAP_BEHAVIOR = 12435;

const int EGL_UNKNOWN = -1;

const int EGL_VERTICAL_RESOLUTION = 12433;

const int EGL_VERSION_1_3 = 1;

const int EGL_CONFORMANT = 12354;

const int EGL_CONTEXT_CLIENT_VERSION = 12440;

const int EGL_MATCH_NATIVE_PIXMAP = 12353;

const int EGL_OPENGL_ES2_BIT = 4;

const int EGL_VG_ALPHA_FORMAT = 12424;

const int EGL_VG_ALPHA_FORMAT_NONPRE = 12427;

const int EGL_VG_ALPHA_FORMAT_PRE = 12428;

const int EGL_VG_ALPHA_FORMAT_PRE_BIT = 64;

const int EGL_VG_COLORSPACE = 12423;

const int EGL_VG_COLORSPACE_sRGB = 12425;

const int EGL_VG_COLORSPACE_LINEAR = 12426;

const int EGL_VG_COLORSPACE_LINEAR_BIT = 32;

const int EGL_VERSION_1_4 = 1;

const int EGL_MULTISAMPLE_RESOLVE_BOX_BIT = 512;

const int EGL_MULTISAMPLE_RESOLVE = 12441;

const int EGL_MULTISAMPLE_RESOLVE_DEFAULT = 12442;

const int EGL_MULTISAMPLE_RESOLVE_BOX = 12443;

const int EGL_OPENGL_API = 12450;

const int EGL_OPENGL_BIT = 8;

const int EGL_SWAP_BEHAVIOR_PRESERVED_BIT = 1024;

const int EGL_VERSION_1_5 = 1;

const int EGL_CONTEXT_MAJOR_VERSION = 12440;

const int EGL_CONTEXT_MINOR_VERSION = 12539;

const int EGL_CONTEXT_OPENGL_PROFILE_MASK = 12541;

const int EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY = 12733;

const int EGL_NO_RESET_NOTIFICATION = 12734;

const int EGL_LOSE_CONTEXT_ON_RESET = 12735;

const int EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT = 1;

const int EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT = 2;

const int EGL_CONTEXT_OPENGL_DEBUG = 12720;

const int EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE = 12721;

const int EGL_CONTEXT_OPENGL_ROBUST_ACCESS = 12722;

const int EGL_OPENGL_ES3_BIT = 64;

const int EGL_CL_EVENT_HANDLE = 12444;

const int EGL_SYNC_CL_EVENT = 12542;

const int EGL_SYNC_CL_EVENT_COMPLETE = 12543;

const int EGL_SYNC_PRIOR_COMMANDS_COMPLETE = 12528;

const int EGL_SYNC_TYPE = 12535;

const int EGL_SYNC_STATUS = 12529;

const int EGL_SYNC_CONDITION = 12536;

const int EGL_SIGNALED = 12530;

const int EGL_UNSIGNALED = 12531;

const int EGL_SYNC_FLUSH_COMMANDS_BIT = 1;

const int EGL_FOREVER = -1;

const int EGL_TIMEOUT_EXPIRED = 12533;

const int EGL_CONDITION_SATISFIED = 12534;

const int EGL_SYNC_FENCE = 12537;

const int EGL_GL_COLORSPACE = 12445;

const int EGL_GL_COLORSPACE_SRGB = 12425;

const int EGL_GL_COLORSPACE_LINEAR = 12426;

const int EGL_GL_RENDERBUFFER = 12473;

const int EGL_GL_TEXTURE_2D = 12465;

const int EGL_GL_TEXTURE_LEVEL = 12476;

const int EGL_GL_TEXTURE_3D = 12466;

const int EGL_GL_TEXTURE_ZOFFSET = 12477;

const int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X = 12467;

const int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 12468;

const int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 12469;

const int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 12470;

const int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 12471;

const int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 12472;

const int EGL_IMAGE_PRESERVED = 12498;

const int __eglext_h_ = 1;

const int EGL_EGLEXT_VERSION = 20200220;

const int EGL_KHR_cl_event = 1;

const int EGL_CL_EVENT_HANDLE_KHR = 12444;

const int EGL_SYNC_CL_EVENT_KHR = 12542;

const int EGL_SYNC_CL_EVENT_COMPLETE_KHR = 12543;

const int EGL_KHR_cl_event2 = 1;

const int EGL_KHR_client_get_all_proc_addresses = 1;

const int EGL_KHR_config_attribs = 1;

const int EGL_CONFORMANT_KHR = 12354;

const int EGL_VG_COLORSPACE_LINEAR_BIT_KHR = 32;

const int EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR = 64;

const int EGL_KHR_context_flush_control = 1;

const int EGL_CONTEXT_RELEASE_BEHAVIOR_NONE_KHR = 0;

const int EGL_CONTEXT_RELEASE_BEHAVIOR_KHR = 8343;

const int EGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 8344;

const int EGL_KHR_create_context = 1;

const int EGL_CONTEXT_MAJOR_VERSION_KHR = 12440;

const int EGL_CONTEXT_MINOR_VERSION_KHR = 12539;

const int EGL_CONTEXT_FLAGS_KHR = 12540;

const int EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR = 12541;

const int EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR = 12733;

const int EGL_NO_RESET_NOTIFICATION_KHR = 12734;

const int EGL_LOSE_CONTEXT_ON_RESET_KHR = 12735;

const int EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR = 1;

const int EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR = 2;

const int EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR = 4;

const int EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR = 1;

const int EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR = 2;

const int EGL_OPENGL_ES3_BIT_KHR = 64;

const int EGL_KHR_create_context_no_error = 1;

const int EGL_CONTEXT_OPENGL_NO_ERROR_KHR = 12723;

const int EGL_KHR_debug = 1;

const int EGL_OBJECT_THREAD_KHR = 13232;

const int EGL_OBJECT_DISPLAY_KHR = 13233;

const int EGL_OBJECT_CONTEXT_KHR = 13234;

const int EGL_OBJECT_SURFACE_KHR = 13235;

const int EGL_OBJECT_IMAGE_KHR = 13236;

const int EGL_OBJECT_SYNC_KHR = 13237;

const int EGL_OBJECT_STREAM_KHR = 13238;

const int EGL_DEBUG_MSG_CRITICAL_KHR = 13241;

const int EGL_DEBUG_MSG_ERROR_KHR = 13242;

const int EGL_DEBUG_MSG_WARN_KHR = 13243;

const int EGL_DEBUG_MSG_INFO_KHR = 13244;

const int EGL_DEBUG_CALLBACK_KHR = 13240;

const int EGL_KHR_display_reference = 1;

const int EGL_TRACK_REFERENCES_KHR = 13138;

const int EGL_KHR_fence_sync = 1;

const int EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR = 12528;

const int EGL_SYNC_CONDITION_KHR = 12536;

const int EGL_SYNC_FENCE_KHR = 12537;

const int EGL_KHR_get_all_proc_addresses = 1;

const int EGL_KHR_gl_colorspace = 1;

const int EGL_GL_COLORSPACE_KHR = 12445;

const int EGL_GL_COLORSPACE_SRGB_KHR = 12425;

const int EGL_GL_COLORSPACE_LINEAR_KHR = 12426;

const int EGL_KHR_gl_renderbuffer_image = 1;

const int EGL_GL_RENDERBUFFER_KHR = 12473;

const int EGL_KHR_gl_texture_2D_image = 1;

const int EGL_GL_TEXTURE_2D_KHR = 12465;

const int EGL_GL_TEXTURE_LEVEL_KHR = 12476;

const int EGL_KHR_gl_texture_3D_image = 1;

const int EGL_GL_TEXTURE_3D_KHR = 12466;

const int EGL_GL_TEXTURE_ZOFFSET_KHR = 12477;

const int EGL_KHR_gl_texture_cubemap_image = 1;

const int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR = 12467;

const int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR = 12468;

const int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR = 12469;

const int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR = 12470;

const int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR = 12471;

const int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR = 12472;

const int EGL_KHR_image = 1;

const int EGL_NATIVE_PIXMAP_KHR = 12464;

const int EGL_KHR_image_base = 1;

const int EGL_IMAGE_PRESERVED_KHR = 12498;

const int EGL_KHR_image_pixmap = 1;

const int EGL_KHR_lock_surface = 1;

const int EGL_READ_SURFACE_BIT_KHR = 1;

const int EGL_WRITE_SURFACE_BIT_KHR = 2;

const int EGL_LOCK_SURFACE_BIT_KHR = 128;

const int EGL_OPTIMAL_FORMAT_BIT_KHR = 256;

const int EGL_MATCH_FORMAT_KHR = 12355;

const int EGL_FORMAT_RGB_565_EXACT_KHR = 12480;

const int EGL_FORMAT_RGB_565_KHR = 12481;

const int EGL_FORMAT_RGBA_8888_EXACT_KHR = 12482;

const int EGL_FORMAT_RGBA_8888_KHR = 12483;

const int EGL_MAP_PRESERVE_PIXELS_KHR = 12484;

const int EGL_LOCK_USAGE_HINT_KHR = 12485;

const int EGL_BITMAP_POINTER_KHR = 12486;

const int EGL_BITMAP_PITCH_KHR = 12487;

const int EGL_BITMAP_ORIGIN_KHR = 12488;

const int EGL_BITMAP_PIXEL_RED_OFFSET_KHR = 12489;

const int EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR = 12490;

const int EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR = 12491;

const int EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR = 12492;

const int EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR = 12493;

const int EGL_LOWER_LEFT_KHR = 12494;

const int EGL_UPPER_LEFT_KHR = 12495;

const int EGL_KHR_lock_surface2 = 1;

const int EGL_BITMAP_PIXEL_SIZE_KHR = 12560;

const int EGL_KHR_lock_surface3 = 1;

const int EGL_KHR_mutable_render_buffer = 1;

const int EGL_MUTABLE_RENDER_BUFFER_BIT_KHR = 4096;

const int EGL_KHR_no_config_context = 1;

const int EGL_KHR_partial_update = 1;

const int EGL_BUFFER_AGE_KHR = 12605;

const int EGL_KHR_platform_android = 1;

const int EGL_PLATFORM_ANDROID_KHR = 12609;

const int EGL_KHR_platform_gbm = 1;

const int EGL_PLATFORM_GBM_KHR = 12759;

const int EGL_KHR_platform_wayland = 1;

const int EGL_PLATFORM_WAYLAND_KHR = 12760;

const int EGL_KHR_platform_x11 = 1;

const int EGL_PLATFORM_X11_KHR = 12757;

const int EGL_PLATFORM_X11_SCREEN_KHR = 12758;

const int EGL_KHR_reusable_sync = 1;

const int EGL_SYNC_STATUS_KHR = 12529;

const int EGL_SIGNALED_KHR = 12530;

const int EGL_UNSIGNALED_KHR = 12531;

const int EGL_TIMEOUT_EXPIRED_KHR = 12533;

const int EGL_CONDITION_SATISFIED_KHR = 12534;

const int EGL_SYNC_TYPE_KHR = 12535;

const int EGL_SYNC_REUSABLE_KHR = 12538;

const int EGL_SYNC_FLUSH_COMMANDS_BIT_KHR = 1;

const int EGL_FOREVER_KHR = -1;

const int EGL_KHR_stream = 1;

const int EGL_CONSUMER_LATENCY_USEC_KHR = 12816;

const int EGL_PRODUCER_FRAME_KHR = 12818;

const int EGL_CONSUMER_FRAME_KHR = 12819;

const int EGL_STREAM_STATE_KHR = 12820;

const int EGL_STREAM_STATE_CREATED_KHR = 12821;

const int EGL_STREAM_STATE_CONNECTING_KHR = 12822;

const int EGL_STREAM_STATE_EMPTY_KHR = 12823;

const int EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR = 12824;

const int EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR = 12825;

const int EGL_STREAM_STATE_DISCONNECTED_KHR = 12826;

const int EGL_BAD_STREAM_KHR = 12827;

const int EGL_BAD_STATE_KHR = 12828;

const int EGL_KHR_stream_attrib = 1;

const int EGL_KHR_stream_consumer_gltexture = 1;

const int EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR = 12830;

const int EGL_KHR_stream_cross_process_fd = 1;

const int EGL_NO_FILE_DESCRIPTOR_KHR = -1;

const int EGL_KHR_stream_fifo = 1;

const int EGL_STREAM_FIFO_LENGTH_KHR = 12796;

const int EGL_STREAM_TIME_NOW_KHR = 12797;

const int EGL_STREAM_TIME_CONSUMER_KHR = 12798;

const int EGL_STREAM_TIME_PRODUCER_KHR = 12799;

const int EGL_KHR_stream_producer_aldatalocator = 1;

const int EGL_KHR_stream_producer_eglsurface = 1;

const int EGL_STREAM_BIT_KHR = 2048;

const int EGL_KHR_surfaceless_context = 1;

const int EGL_KHR_swap_buffers_with_damage = 1;

const int EGL_KHR_vg_parent_image = 1;

const int EGL_VG_PARENT_IMAGE_KHR = 12474;

const int EGL_KHR_wait_sync = 1;

const int EGL_ANDROID_GLES_layers = 1;

const int EGL_ANDROID_blob_cache = 1;

const int EGL_ANDROID_create_native_client_buffer = 1;

const int EGL_NATIVE_BUFFER_USAGE_ANDROID = 12611;

const int EGL_NATIVE_BUFFER_USAGE_PROTECTED_BIT_ANDROID = 1;

const int EGL_NATIVE_BUFFER_USAGE_RENDERBUFFER_BIT_ANDROID = 2;

const int EGL_NATIVE_BUFFER_USAGE_TEXTURE_BIT_ANDROID = 4;

const int EGL_ANDROID_framebuffer_target = 1;

const int EGL_FRAMEBUFFER_TARGET_ANDROID = 12615;

const int EGL_ANDROID_front_buffer_auto_refresh = 1;

const int EGL_FRONT_BUFFER_AUTO_REFRESH_ANDROID = 12620;

const int EGL_ANDROID_get_frame_timestamps = 1;

const int EGL_TIMESTAMP_PENDING_ANDROID = -2;

const int EGL_TIMESTAMP_INVALID_ANDROID = -1;

const int EGL_TIMESTAMPS_ANDROID = 13360;

const int EGL_COMPOSITE_DEADLINE_ANDROID = 13361;

const int EGL_COMPOSITE_INTERVAL_ANDROID = 13362;

const int EGL_COMPOSITE_TO_PRESENT_LATENCY_ANDROID = 13363;

const int EGL_REQUESTED_PRESENT_TIME_ANDROID = 13364;

const int EGL_RENDERING_COMPLETE_TIME_ANDROID = 13365;

const int EGL_COMPOSITION_LATCH_TIME_ANDROID = 13366;

const int EGL_FIRST_COMPOSITION_START_TIME_ANDROID = 13367;

const int EGL_LAST_COMPOSITION_START_TIME_ANDROID = 13368;

const int EGL_FIRST_COMPOSITION_GPU_FINISHED_TIME_ANDROID = 13369;

const int EGL_DISPLAY_PRESENT_TIME_ANDROID = 13370;

const int EGL_DEQUEUE_READY_TIME_ANDROID = 13371;

const int EGL_READS_DONE_TIME_ANDROID = 13372;

const int EGL_ANDROID_get_native_client_buffer = 1;

const int EGL_ANDROID_image_native_buffer = 1;

const int EGL_NATIVE_BUFFER_ANDROID = 12608;

const int EGL_ANDROID_native_fence_sync = 1;

const int EGL_SYNC_NATIVE_FENCE_ANDROID = 12612;

const int EGL_SYNC_NATIVE_FENCE_FD_ANDROID = 12613;

const int EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID = 12614;

const int EGL_NO_NATIVE_FENCE_FD_ANDROID = -1;

const int EGL_ANDROID_presentation_time = 1;

const int EGL_ANDROID_recordable = 1;

const int EGL_RECORDABLE_ANDROID = 12610;

const int EGL_ANGLE_d3d_share_handle_client_buffer = 1;

const int EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE = 12800;

const int EGL_ANGLE_device_d3d = 1;

const int EGL_D3D9_DEVICE_ANGLE = 13216;

const int EGL_D3D11_DEVICE_ANGLE = 13217;

const int EGL_ANGLE_query_surface_pointer = 1;

const int EGL_ANGLE_surface_d3d_texture_2d_share_handle = 1;

const int EGL_ANGLE_window_fixed_size = 1;

const int EGL_FIXED_SIZE_ANGLE = 12801;

const int EGL_ARM_image_format = 1;

const int EGL_COLOR_COMPONENT_TYPE_UNSIGNED_INTEGER_ARM = 12935;

const int EGL_COLOR_COMPONENT_TYPE_INTEGER_ARM = 12936;

const int EGL_ARM_implicit_external_sync = 1;

const int EGL_SYNC_PRIOR_COMMANDS_IMPLICIT_EXTERNAL_ARM = 12938;

const int EGL_ARM_pixmap_multisample_discard = 1;

const int EGL_DISCARD_SAMPLES_ARM = 12934;

const int EGL_EXT_bind_to_front = 1;

const int EGL_FRONT_BUFFER_EXT = 13412;

const int EGL_EXT_buffer_age = 1;

const int EGL_BUFFER_AGE_EXT = 12605;

const int EGL_EXT_client_extensions = 1;

const int EGL_EXT_client_sync = 1;

const int EGL_SYNC_CLIENT_EXT = 13156;

const int EGL_SYNC_CLIENT_SIGNAL_EXT = 13157;

const int EGL_EXT_compositor = 1;

const int EGL_PRIMARY_COMPOSITOR_CONTEXT_EXT = 13408;

const int EGL_EXTERNAL_REF_ID_EXT = 13409;

const int EGL_COMPOSITOR_DROP_NEWEST_FRAME_EXT = 13410;

const int EGL_COMPOSITOR_KEEP_NEWEST_FRAME_EXT = 13411;

const int EGL_EXT_create_context_robustness = 1;

const int EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT = 12479;

const int EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT = 12600;

const int EGL_NO_RESET_NOTIFICATION_EXT = 12734;

const int EGL_LOSE_CONTEXT_ON_RESET_EXT = 12735;

const int EGL_EXT_device_base = 1;

const int EGL_BAD_DEVICE_EXT = 12843;

const int EGL_DEVICE_EXT = 12844;

const int EGL_EXT_device_drm = 1;

const int EGL_DRM_DEVICE_FILE_EXT = 12851;

const int EGL_DRM_MASTER_FD_EXT = 13116;

const int EGL_EXT_device_enumeration = 1;

const int EGL_EXT_device_openwf = 1;

const int EGL_OPENWF_DEVICE_ID_EXT = 12855;

const int EGL_EXT_device_query = 1;

const int EGL_EXT_gl_colorspace_bt2020_linear = 1;

const int EGL_GL_COLORSPACE_BT2020_LINEAR_EXT = 13119;

const int EGL_EXT_gl_colorspace_bt2020_pq = 1;

const int EGL_GL_COLORSPACE_BT2020_PQ_EXT = 13120;

const int EGL_EXT_gl_colorspace_display_p3 = 1;

const int EGL_GL_COLORSPACE_DISPLAY_P3_EXT = 13155;

const int EGL_EXT_gl_colorspace_display_p3_linear = 1;

const int EGL_GL_COLORSPACE_DISPLAY_P3_LINEAR_EXT = 13154;

const int EGL_EXT_gl_colorspace_display_p3_passthrough = 1;

const int EGL_GL_COLORSPACE_DISPLAY_P3_PASSTHROUGH_EXT = 13456;

const int EGL_EXT_gl_colorspace_scrgb = 1;

const int EGL_GL_COLORSPACE_SCRGB_EXT = 13137;

const int EGL_EXT_gl_colorspace_scrgb_linear = 1;

const int EGL_GL_COLORSPACE_SCRGB_LINEAR_EXT = 13136;

const int EGL_EXT_image_dma_buf_import = 1;

const int EGL_LINUX_DMA_BUF_EXT = 12912;

const int EGL_LINUX_DRM_FOURCC_EXT = 12913;

const int EGL_DMA_BUF_PLANE0_FD_EXT = 12914;

const int EGL_DMA_BUF_PLANE0_OFFSET_EXT = 12915;

const int EGL_DMA_BUF_PLANE0_PITCH_EXT = 12916;

const int EGL_DMA_BUF_PLANE1_FD_EXT = 12917;

const int EGL_DMA_BUF_PLANE1_OFFSET_EXT = 12918;

const int EGL_DMA_BUF_PLANE1_PITCH_EXT = 12919;

const int EGL_DMA_BUF_PLANE2_FD_EXT = 12920;

const int EGL_DMA_BUF_PLANE2_OFFSET_EXT = 12921;

const int EGL_DMA_BUF_PLANE2_PITCH_EXT = 12922;

const int EGL_YUV_COLOR_SPACE_HINT_EXT = 12923;

const int EGL_SAMPLE_RANGE_HINT_EXT = 12924;

const int EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT = 12925;

const int EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT = 12926;

const int EGL_ITU_REC601_EXT = 12927;

const int EGL_ITU_REC709_EXT = 12928;

const int EGL_ITU_REC2020_EXT = 12929;

const int EGL_YUV_FULL_RANGE_EXT = 12930;

const int EGL_YUV_NARROW_RANGE_EXT = 12931;

const int EGL_YUV_CHROMA_SITING_0_EXT = 12932;

const int EGL_YUV_CHROMA_SITING_0_5_EXT = 12933;

const int EGL_EXT_image_dma_buf_import_modifiers = 1;

const int EGL_DMA_BUF_PLANE3_FD_EXT = 13376;

const int EGL_DMA_BUF_PLANE3_OFFSET_EXT = 13377;

const int EGL_DMA_BUF_PLANE3_PITCH_EXT = 13378;

const int EGL_DMA_BUF_PLANE0_MODIFIER_LO_EXT = 13379;

const int EGL_DMA_BUF_PLANE0_MODIFIER_HI_EXT = 13380;

const int EGL_DMA_BUF_PLANE1_MODIFIER_LO_EXT = 13381;

const int EGL_DMA_BUF_PLANE1_MODIFIER_HI_EXT = 13382;

const int EGL_DMA_BUF_PLANE2_MODIFIER_LO_EXT = 13383;

const int EGL_DMA_BUF_PLANE2_MODIFIER_HI_EXT = 13384;

const int EGL_DMA_BUF_PLANE3_MODIFIER_LO_EXT = 13385;

const int EGL_DMA_BUF_PLANE3_MODIFIER_HI_EXT = 13386;

const int EGL_EXT_image_gl_colorspace = 1;

const int EGL_GL_COLORSPACE_DEFAULT_EXT = 12621;

const int EGL_EXT_image_implicit_sync_control = 1;

const int EGL_IMPORT_SYNC_TYPE_EXT = 13424;

const int EGL_IMPORT_IMPLICIT_SYNC_EXT = 13425;

const int EGL_IMPORT_EXPLICIT_SYNC_EXT = 13426;

const int EGL_EXT_multiview_window = 1;

const int EGL_MULTIVIEW_VIEW_COUNT_EXT = 12596;

const int EGL_EXT_output_base = 1;

const int EGL_BAD_OUTPUT_LAYER_EXT = 12845;

const int EGL_BAD_OUTPUT_PORT_EXT = 12846;

const int EGL_SWAP_INTERVAL_EXT = 12847;

const int EGL_EXT_output_drm = 1;

const int EGL_DRM_CRTC_EXT = 12852;

const int EGL_DRM_PLANE_EXT = 12853;

const int EGL_DRM_CONNECTOR_EXT = 12854;

const int EGL_EXT_output_openwf = 1;

const int EGL_OPENWF_PIPELINE_ID_EXT = 12856;

const int EGL_OPENWF_PORT_ID_EXT = 12857;

const int EGL_EXT_pixel_format_float = 1;

const int EGL_COLOR_COMPONENT_TYPE_EXT = 13113;

const int EGL_COLOR_COMPONENT_TYPE_FIXED_EXT = 13114;

const int EGL_COLOR_COMPONENT_TYPE_FLOAT_EXT = 13115;

const int EGL_EXT_platform_base = 1;

const int EGL_EXT_platform_device = 1;

const int EGL_PLATFORM_DEVICE_EXT = 12607;

const int EGL_EXT_platform_wayland = 1;

const int EGL_PLATFORM_WAYLAND_EXT = 12760;

const int EGL_EXT_platform_x11 = 1;

const int EGL_PLATFORM_X11_EXT = 12757;

const int EGL_PLATFORM_X11_SCREEN_EXT = 12758;

const int EGL_EXT_protected_content = 1;

const int EGL_PROTECTED_CONTENT_EXT = 12992;

const int EGL_EXT_protected_surface = 1;

const int EGL_EXT_stream_consumer_egloutput = 1;

const int EGL_EXT_surface_CTA861_3_metadata = 1;

const int EGL_CTA861_3_MAX_CONTENT_LIGHT_LEVEL_EXT = 13152;

const int EGL_CTA861_3_MAX_FRAME_AVERAGE_LEVEL_EXT = 13153;

const int EGL_EXT_surface_SMPTE2086_metadata = 1;

const int EGL_SMPTE2086_DISPLAY_PRIMARY_RX_EXT = 13121;

const int EGL_SMPTE2086_DISPLAY_PRIMARY_RY_EXT = 13122;

const int EGL_SMPTE2086_DISPLAY_PRIMARY_GX_EXT = 13123;

const int EGL_SMPTE2086_DISPLAY_PRIMARY_GY_EXT = 13124;

const int EGL_SMPTE2086_DISPLAY_PRIMARY_BX_EXT = 13125;

const int EGL_SMPTE2086_DISPLAY_PRIMARY_BY_EXT = 13126;

const int EGL_SMPTE2086_WHITE_POINT_X_EXT = 13127;

const int EGL_SMPTE2086_WHITE_POINT_Y_EXT = 13128;

const int EGL_SMPTE2086_MAX_LUMINANCE_EXT = 13129;

const int EGL_SMPTE2086_MIN_LUMINANCE_EXT = 13130;

const int EGL_METADATA_SCALING_EXT = 50000;

const int EGL_EXT_swap_buffers_with_damage = 1;

const int EGL_EXT_sync_reuse = 1;

const int EGL_EXT_yuv_surface = 1;

const int EGL_YUV_ORDER_EXT = 13057;

const int EGL_YUV_NUMBER_OF_PLANES_EXT = 13073;

const int EGL_YUV_SUBSAMPLE_EXT = 13074;

const int EGL_YUV_DEPTH_RANGE_EXT = 13079;

const int EGL_YUV_CSC_STANDARD_EXT = 13066;

const int EGL_YUV_PLANE_BPP_EXT = 13082;

const int EGL_YUV_BUFFER_EXT = 13056;

const int EGL_YUV_ORDER_YUV_EXT = 13058;

const int EGL_YUV_ORDER_YVU_EXT = 13059;

const int EGL_YUV_ORDER_YUYV_EXT = 13060;

const int EGL_YUV_ORDER_UYVY_EXT = 13061;

const int EGL_YUV_ORDER_YVYU_EXT = 13062;

const int EGL_YUV_ORDER_VYUY_EXT = 13063;

const int EGL_YUV_ORDER_AYUV_EXT = 13064;

const int EGL_YUV_SUBSAMPLE_4_2_0_EXT = 13075;

const int EGL_YUV_SUBSAMPLE_4_2_2_EXT = 13076;

const int EGL_YUV_SUBSAMPLE_4_4_4_EXT = 13077;

const int EGL_YUV_DEPTH_RANGE_LIMITED_EXT = 13080;

const int EGL_YUV_DEPTH_RANGE_FULL_EXT = 13081;

const int EGL_YUV_CSC_STANDARD_601_EXT = 13067;

const int EGL_YUV_CSC_STANDARD_709_EXT = 13068;

const int EGL_YUV_CSC_STANDARD_2020_EXT = 13069;

const int EGL_YUV_PLANE_BPP_0_EXT = 13083;

const int EGL_YUV_PLANE_BPP_8_EXT = 13084;

const int EGL_YUV_PLANE_BPP_10_EXT = 13085;

const int EGL_HI_clientpixmap = 1;

const int EGL_CLIENT_PIXMAP_POINTER_HI = 36724;

const int EGL_HI_colorformats = 1;

const int EGL_COLOR_FORMAT_HI = 36720;

const int EGL_COLOR_RGB_HI = 36721;

const int EGL_COLOR_RGBA_HI = 36722;

const int EGL_COLOR_ARGB_HI = 36723;

const int EGL_IMG_context_priority = 1;

const int EGL_CONTEXT_PRIORITY_LEVEL_IMG = 12544;

const int EGL_CONTEXT_PRIORITY_HIGH_IMG = 12545;

const int EGL_CONTEXT_PRIORITY_MEDIUM_IMG = 12546;

const int EGL_CONTEXT_PRIORITY_LOW_IMG = 12547;

const int EGL_IMG_image_plane_attribs = 1;

const int EGL_NATIVE_BUFFER_MULTIPLANE_SEPARATE_IMG = 12549;

const int EGL_NATIVE_BUFFER_PLANE_OFFSET_IMG = 12550;

const int EGL_MESA_drm_image = 1;

const int EGL_DRM_BUFFER_FORMAT_MESA = 12752;

const int EGL_DRM_BUFFER_USE_MESA = 12753;

const int EGL_DRM_BUFFER_FORMAT_ARGB32_MESA = 12754;

const int EGL_DRM_BUFFER_MESA = 12755;

const int EGL_DRM_BUFFER_STRIDE_MESA = 12756;

const int EGL_DRM_BUFFER_USE_SCANOUT_MESA = 1;

const int EGL_DRM_BUFFER_USE_SHARE_MESA = 2;

const int EGL_DRM_BUFFER_USE_CURSOR_MESA = 4;

const int EGL_MESA_image_dma_buf_export = 1;

const int EGL_MESA_platform_gbm = 1;

const int EGL_PLATFORM_GBM_MESA = 12759;

const int EGL_MESA_platform_surfaceless = 1;

const int EGL_PLATFORM_SURFACELESS_MESA = 12765;

const int EGL_MESA_query_driver = 1;

const int EGL_NOK_swap_region = 1;

const int EGL_NOK_swap_region2 = 1;

const int EGL_NOK_texture_from_pixmap = 1;

const int EGL_Y_INVERTED_NOK = 12415;

const int EGL_NV_3dvision_surface = 1;

const int EGL_AUTO_STEREO_NV = 12598;

const int EGL_NV_context_priority_realtime = 1;

const int EGL_CONTEXT_PRIORITY_REALTIME_NV = 13143;

const int EGL_NV_coverage_sample = 1;

const int EGL_COVERAGE_BUFFERS_NV = 12512;

const int EGL_COVERAGE_SAMPLES_NV = 12513;

const int EGL_NV_coverage_sample_resolve = 1;

const int EGL_COVERAGE_SAMPLE_RESOLVE_NV = 12593;

const int EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV = 12594;

const int EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV = 12595;

const int EGL_NV_cuda_event = 1;

const int EGL_CUDA_EVENT_HANDLE_NV = 12859;

const int EGL_SYNC_CUDA_EVENT_NV = 12860;

const int EGL_SYNC_CUDA_EVENT_COMPLETE_NV = 12861;

const int EGL_NV_depth_nonlinear = 1;

const int EGL_DEPTH_ENCODING_NV = 12514;

const int EGL_DEPTH_ENCODING_NONE_NV = 0;

const int EGL_DEPTH_ENCODING_NONLINEAR_NV = 12515;

const int EGL_NV_device_cuda = 1;

const int EGL_CUDA_DEVICE_NV = 12858;

const int EGL_NV_native_query = 1;

const int EGL_NV_post_convert_rounding = 1;

const int EGL_NV_post_sub_buffer = 1;

const int EGL_POST_SUB_BUFFER_SUPPORTED_NV = 12478;

const int EGL_NV_quadruple_buffer = 1;

const int EGL_QUADRUPLE_BUFFER_NV = 12849;

const int EGL_NV_robustness_video_memory_purge = 1;

const int EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV = 13132;

const int EGL_NV_stream_consumer_gltexture_yuv = 1;

const int EGL_YUV_PLANE0_TEXTURE_UNIT_NV = 13100;

const int EGL_YUV_PLANE1_TEXTURE_UNIT_NV = 13101;

const int EGL_YUV_PLANE2_TEXTURE_UNIT_NV = 13102;

const int EGL_NV_stream_cross_display = 1;

const int EGL_STREAM_CROSS_DISPLAY_NV = 13134;

const int EGL_NV_stream_cross_object = 1;

const int EGL_STREAM_CROSS_OBJECT_NV = 13133;

const int EGL_NV_stream_cross_partition = 1;

const int EGL_STREAM_CROSS_PARTITION_NV = 12863;

const int EGL_NV_stream_cross_process = 1;

const int EGL_STREAM_CROSS_PROCESS_NV = 12869;

const int EGL_NV_stream_cross_system = 1;

const int EGL_STREAM_CROSS_SYSTEM_NV = 13135;

const int EGL_NV_stream_dma = 1;

const int EGL_STREAM_DMA_NV = 13169;

const int EGL_STREAM_DMA_SERVER_NV = 13170;

const int EGL_NV_stream_fifo_next = 1;

const int EGL_PENDING_FRAME_NV = 13097;

const int EGL_STREAM_TIME_PENDING_NV = 13098;

const int EGL_NV_stream_fifo_synchronous = 1;

const int EGL_STREAM_FIFO_SYNCHRONOUS_NV = 13110;

const int EGL_NV_stream_flush = 1;

const int EGL_NV_stream_frame_limits = 1;

const int EGL_PRODUCER_MAX_FRAME_HINT_NV = 13111;

const int EGL_CONSUMER_MAX_FRAME_HINT_NV = 13112;

const int EGL_NV_stream_metadata = 1;

const int EGL_MAX_STREAM_METADATA_BLOCKS_NV = 12880;

const int EGL_MAX_STREAM_METADATA_BLOCK_SIZE_NV = 12881;

const int EGL_MAX_STREAM_METADATA_TOTAL_SIZE_NV = 12882;

const int EGL_PRODUCER_METADATA_NV = 12883;

const int EGL_CONSUMER_METADATA_NV = 12884;

const int EGL_PENDING_METADATA_NV = 13096;

const int EGL_METADATA0_SIZE_NV = 12885;

const int EGL_METADATA1_SIZE_NV = 12886;

const int EGL_METADATA2_SIZE_NV = 12887;

const int EGL_METADATA3_SIZE_NV = 12888;

const int EGL_METADATA0_TYPE_NV = 12889;

const int EGL_METADATA1_TYPE_NV = 12890;

const int EGL_METADATA2_TYPE_NV = 12891;

const int EGL_METADATA3_TYPE_NV = 12892;

const int EGL_NV_stream_origin = 1;

const int EGL_STREAM_FRAME_ORIGIN_X_NV = 13158;

const int EGL_STREAM_FRAME_ORIGIN_Y_NV = 13159;

const int EGL_STREAM_FRAME_MAJOR_AXIS_NV = 13160;

const int EGL_CONSUMER_AUTO_ORIENTATION_NV = 13161;

const int EGL_PRODUCER_AUTO_ORIENTATION_NV = 13162;

const int EGL_LEFT_NV = 13163;

const int EGL_RIGHT_NV = 13164;

const int EGL_TOP_NV = 13165;

const int EGL_BOTTOM_NV = 13166;

const int EGL_X_AXIS_NV = 13167;

const int EGL_Y_AXIS_NV = 13168;

const int EGL_NV_stream_remote = 1;

const int EGL_STREAM_STATE_INITIALIZING_NV = 12864;

const int EGL_STREAM_TYPE_NV = 12865;

const int EGL_STREAM_PROTOCOL_NV = 12866;

const int EGL_STREAM_ENDPOINT_NV = 12867;

const int EGL_STREAM_LOCAL_NV = 12868;

const int EGL_STREAM_PRODUCER_NV = 12871;

const int EGL_STREAM_CONSUMER_NV = 12872;

const int EGL_STREAM_PROTOCOL_FD_NV = 12870;

const int EGL_NV_stream_reset = 1;

const int EGL_SUPPORT_RESET_NV = 13108;

const int EGL_SUPPORT_REUSE_NV = 13109;

const int EGL_NV_stream_socket = 1;

const int EGL_STREAM_PROTOCOL_SOCKET_NV = 12875;

const int EGL_SOCKET_HANDLE_NV = 12876;

const int EGL_SOCKET_TYPE_NV = 12877;

const int EGL_NV_stream_socket_inet = 1;

const int EGL_SOCKET_TYPE_INET_NV = 12879;

const int EGL_NV_stream_socket_unix = 1;

const int EGL_SOCKET_TYPE_UNIX_NV = 12878;

const int EGL_NV_stream_sync = 1;

const int EGL_SYNC_NEW_FRAME_NV = 12831;

const int EGL_NV_sync = 1;

const int EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV = 12518;

const int EGL_SYNC_STATUS_NV = 12519;

const int EGL_SIGNALED_NV = 12520;

const int EGL_UNSIGNALED_NV = 12521;

const int EGL_SYNC_FLUSH_COMMANDS_BIT_NV = 1;

const int EGL_FOREVER_NV = -1;

const int EGL_ALREADY_SIGNALED_NV = 12522;

const int EGL_TIMEOUT_EXPIRED_NV = 12523;

const int EGL_CONDITION_SATISFIED_NV = 12524;

const int EGL_SYNC_TYPE_NV = 12525;

const int EGL_SYNC_CONDITION_NV = 12526;

const int EGL_SYNC_FENCE_NV = 12527;

const int EGL_NV_system_time = 1;

const int EGL_NV_triple_buffer = 1;

const int EGL_TRIPLE_BUFFER_NV = 12848;

const int EGL_TIZEN_image_native_buffer = 1;

const int EGL_NATIVE_BUFFER_TIZEN = 12960;

const int EGL_TIZEN_image_native_surface = 1;

const int EGL_NATIVE_SURFACE_TIZEN = 12961;

const int EGL_WL_bind_wayland_display = 1;

const int EGL_WAYLAND_BUFFER_WL = 12757;

const int EGL_WAYLAND_PLANE_WL = 12758;

const int EGL_TEXTURE_Y_U_V_WL = 12759;

const int EGL_TEXTURE_Y_UV_WL = 12760;

const int EGL_TEXTURE_Y_XUXV_WL = 12761;

const int EGL_TEXTURE_EXTERNAL_WL = 12762;

const int EGL_WAYLAND_Y_INVERTED_WL = 12763;

const int EGL_WL_create_wayland_buffer_from_image = 1;

const int __gles2_gl2_h_ = 1;

const int GL_GLES_PROTOTYPES = 1;

const int __gles2_gl2ext_h_ = 1;

const int GL_KHR_blend_equation_advanced = 1;

const int GL_MULTIPLY_KHR = 37524;

const int GL_SCREEN_KHR = 37525;

const int GL_OVERLAY_KHR = 37526;

const int GL_DARKEN_KHR = 37527;

const int GL_LIGHTEN_KHR = 37528;

const int GL_COLORDODGE_KHR = 37529;

const int GL_COLORBURN_KHR = 37530;

const int GL_HARDLIGHT_KHR = 37531;

const int GL_SOFTLIGHT_KHR = 37532;

const int GL_DIFFERENCE_KHR = 37534;

const int GL_EXCLUSION_KHR = 37536;

const int GL_HSL_HUE_KHR = 37549;

const int GL_HSL_SATURATION_KHR = 37550;

const int GL_HSL_COLOR_KHR = 37551;

const int GL_HSL_LUMINOSITY_KHR = 37552;

const int GL_KHR_blend_equation_advanced_coherent = 1;

const int GL_BLEND_ADVANCED_COHERENT_KHR = 37509;

const int GL_KHR_context_flush_control = 1;

const int GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 33531;

const int GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 33532;

const int GL_KHR_no_error = 1;

const int GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 8;

const int GL_KHR_parallel_shader_compile = 1;

const int GL_MAX_SHADER_COMPILER_THREADS_KHR = 37296;

const int GL_COMPLETION_STATUS_KHR = 37297;

const int GL_KHR_robust_buffer_access_behavior = 1;

const int GL_KHR_robustness = 1;

const int GL_CONTEXT_ROBUST_ACCESS_KHR = 37107;

const int GL_LOSE_CONTEXT_ON_RESET_KHR = 33362;

const int GL_GUILTY_CONTEXT_RESET_KHR = 33363;

const int GL_INNOCENT_CONTEXT_RESET_KHR = 33364;

const int GL_UNKNOWN_CONTEXT_RESET_KHR = 33365;

const int GL_RESET_NOTIFICATION_STRATEGY_KHR = 33366;

const int GL_NO_RESET_NOTIFICATION_KHR = 33377;

const int GL_CONTEXT_LOST_KHR = 1287;

const int GL_KHR_shader_subgroup = 1;

const int GL_SUBGROUP_SIZE_KHR = 38194;

const int GL_SUBGROUP_SUPPORTED_STAGES_KHR = 38195;

const int GL_SUBGROUP_SUPPORTED_FEATURES_KHR = 38196;

const int GL_SUBGROUP_QUAD_ALL_STAGES_KHR = 38197;

const int GL_SUBGROUP_FEATURE_BASIC_BIT_KHR = 1;

const int GL_SUBGROUP_FEATURE_VOTE_BIT_KHR = 2;

const int GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = 4;

const int GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR = 8;

const int GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = 16;

const int GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = 32;

const int GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = 64;

const int GL_SUBGROUP_FEATURE_QUAD_BIT_KHR = 128;

const int GL_KHR_texture_compression_astc_sliced_3d = 1;

const int GL_OES_EGL_image_external_essl3 = 1;

const int GL_OES_copy_image = 1;

const int GL_OES_draw_buffers_indexed = 1;

const int GL_OES_draw_elements_base_vertex = 1;

const int GL_OES_geometry_point_size = 1;

const int GL_OES_geometry_shader = 1;

const int GL_GEOMETRY_SHADER_OES = 36313;

const int GL_GEOMETRY_SHADER_BIT_OES = 4;

const int GL_GEOMETRY_LINKED_VERTICES_OUT_OES = 35094;

const int GL_GEOMETRY_LINKED_INPUT_TYPE_OES = 35095;

const int GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = 35096;

const int GL_GEOMETRY_SHADER_INVOCATIONS_OES = 34943;

const int GL_LAYER_PROVOKING_VERTEX_OES = 33374;

const int GL_LINES_ADJACENCY_OES = 10;

const int GL_LINE_STRIP_ADJACENCY_OES = 11;

const int GL_TRIANGLES_ADJACENCY_OES = 12;

const int GL_TRIANGLE_STRIP_ADJACENCY_OES = 13;

const int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = 36319;

const int GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = 35372;

const int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = 35378;

const int GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = 37155;

const int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = 37156;

const int GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = 36320;

const int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = 36321;

const int GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = 36442;

const int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = 35881;

const int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = 37583;

const int GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = 37589;

const int GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = 37069;

const int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = 37079;

const int GL_FIRST_VERTEX_CONVENTION_OES = 36429;

const int GL_LAST_VERTEX_CONVENTION_OES = 36430;

const int GL_UNDEFINED_VERTEX_OES = 33376;

const int GL_PRIMITIVES_GENERATED_OES = 35975;

const int GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = 37650;

const int GL_MAX_FRAMEBUFFER_LAYERS_OES = 37655;

const int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = 36264;

const int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = 36263;

const int GL_REFERENCED_BY_GEOMETRY_SHADER_OES = 37641;

const int GL_OES_gpu_shader5 = 1;

const int GL_OES_primitive_bounding_box = 1;

const int GL_PRIMITIVE_BOUNDING_BOX_OES = 37566;

const int GL_OES_sample_shading = 1;

const int GL_SAMPLE_SHADING_OES = 35894;

const int GL_MIN_SAMPLE_SHADING_VALUE_OES = 35895;

const int GL_OES_sample_variables = 1;

const int GL_OES_shader_image_atomic = 1;

const int GL_OES_shader_io_blocks = 1;

const int GL_OES_shader_multisample_interpolation = 1;

const int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 36443;

const int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 36444;

const int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 36445;

const int GL_OES_tessellation_point_size = 1;

const int GL_OES_tessellation_shader = 1;

const int GL_PATCHES_OES = 14;

const int GL_PATCH_VERTICES_OES = 36466;

const int GL_TESS_CONTROL_OUTPUT_VERTICES_OES = 36469;

const int GL_TESS_GEN_MODE_OES = 36470;

const int GL_TESS_GEN_SPACING_OES = 36471;

const int GL_TESS_GEN_VERTEX_ORDER_OES = 36472;

const int GL_TESS_GEN_POINT_MODE_OES = 36473;

const int GL_ISOLINES_OES = 36474;

const int GL_QUADS_OES = 7;

const int GL_FRACTIONAL_ODD_OES = 36475;

const int GL_FRACTIONAL_EVEN_OES = 36476;

const int GL_MAX_PATCH_VERTICES_OES = 36477;

const int GL_MAX_TESS_GEN_LEVEL_OES = 36478;

const int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 36479;

const int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 36480;

const int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = 36481;

const int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = 36482;

const int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = 36483;

const int GL_MAX_TESS_PATCH_COMPONENTS_OES = 36484;

const int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = 36485;

const int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = 36486;

const int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = 36489;

const int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = 36490;

const int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = 34924;

const int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = 34925;

const int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 36382;

const int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 36383;

const int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = 37581;

const int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = 37582;

const int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = 37587;

const int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = 37588;

const int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = 37067;

const int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = 37068;

const int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = 37080;

const int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = 37081;

const int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = 33313;

const int GL_IS_PER_PATCH_OES = 37607;

const int GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = 37639;

const int GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = 37640;

const int GL_TESS_CONTROL_SHADER_OES = 36488;

const int GL_TESS_EVALUATION_SHADER_OES = 36487;

const int GL_TESS_CONTROL_SHADER_BIT_OES = 8;

const int GL_TESS_EVALUATION_SHADER_BIT_OES = 16;

const int GL_OES_texture_border_clamp = 1;

const int GL_TEXTURE_BORDER_COLOR_OES = 4100;

const int GL_CLAMP_TO_BORDER_OES = 33069;

const int GL_OES_texture_buffer = 1;

const int GL_TEXTURE_BUFFER_OES = 35882;

const int GL_TEXTURE_BUFFER_BINDING_OES = 35882;

const int GL_MAX_TEXTURE_BUFFER_SIZE_OES = 35883;

const int GL_TEXTURE_BINDING_BUFFER_OES = 35884;

const int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = 35885;

const int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = 37279;

const int GL_SAMPLER_BUFFER_OES = 36290;

const int GL_INT_SAMPLER_BUFFER_OES = 36304;

const int GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = 36312;

const int GL_IMAGE_BUFFER_OES = 36945;

const int GL_INT_IMAGE_BUFFER_OES = 36956;

const int GL_UNSIGNED_INT_IMAGE_BUFFER_OES = 36967;

const int GL_TEXTURE_BUFFER_OFFSET_OES = 37277;

const int GL_TEXTURE_BUFFER_SIZE_OES = 37278;

const int GL_OES_texture_compression_astc = 1;

const int GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = 37824;

const int GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = 37825;

const int GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = 37826;

const int GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = 37827;

const int GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = 37828;

const int GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = 37829;

const int GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = 37830;

const int GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = 37831;

const int GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = 37832;

const int GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = 37833;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 37856;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 37857;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 37858;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 37859;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 37860;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 37861;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 37862;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 37863;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 37864;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 37865;

const int GL_OES_texture_cube_map_array = 1;

const int GL_TEXTURE_CUBE_MAP_ARRAY_OES = 36873;

const int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = 36874;

const int GL_SAMPLER_CUBE_MAP_ARRAY_OES = 36876;

const int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = 36877;

const int GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 36878;

const int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 36879;

const int GL_IMAGE_CUBE_MAP_ARRAY_OES = 36948;

const int GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = 36959;

const int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = 36970;

const int GL_OES_texture_stencil8 = 1;

const int GL_STENCIL_INDEX_OES = 6401;

const int GL_OES_texture_storage_multisample_2d_array = 1;

const int GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 37122;

const int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 37125;

const int GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37131;

const int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37132;

const int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37133;

const int GL_OES_texture_view = 1;

const int GL_TEXTURE_VIEW_MIN_LEVEL_OES = 33499;

const int GL_TEXTURE_VIEW_NUM_LEVELS_OES = 33500;

const int GL_TEXTURE_VIEW_MIN_LAYER_OES = 33501;

const int GL_TEXTURE_VIEW_NUM_LAYERS_OES = 33502;

const int GL_OES_viewport_array = 1;

const int GL_MAX_VIEWPORTS_OES = 33371;

const int GL_VIEWPORT_SUBPIXEL_BITS_OES = 33372;

const int GL_VIEWPORT_BOUNDS_RANGE_OES = 33373;

const int GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES = 33375;

const int GL_AMD_framebuffer_multisample_advanced = 1;

const int GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = 37298;

const int GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = 37299;

const int GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = 37300;

const int GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = 37301;

const int GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = 37302;

const int GL_SUPPORTED_MULTISAMPLE_MODES_AMD = 37303;

const int GL_ANDROID_extension_pack_es31a = 1;

const int GL_APPLE_clip_distance = 1;

const int GL_MAX_CLIP_DISTANCES_APPLE = 3378;

const int GL_CLIP_DISTANCE0_APPLE = 12288;

const int GL_CLIP_DISTANCE1_APPLE = 12289;

const int GL_CLIP_DISTANCE2_APPLE = 12290;

const int GL_CLIP_DISTANCE3_APPLE = 12291;

const int GL_CLIP_DISTANCE4_APPLE = 12292;

const int GL_CLIP_DISTANCE5_APPLE = 12293;

const int GL_CLIP_DISTANCE6_APPLE = 12294;

const int GL_CLIP_DISTANCE7_APPLE = 12295;

const int GL_APPLE_color_buffer_packed_float = 1;

const int GL_APPLE_texture_packed_float = 1;

const int GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = 35899;

const int GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = 35902;

const int GL_R11F_G11F_B10F_APPLE = 35898;

const int GL_RGB9_E5_APPLE = 35901;

const int GL_ARM_shader_framebuffer_fetch = 1;

const int GL_FETCH_PER_SAMPLE_ARM = 36709;

const int GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 36710;

const int GL_ARM_shader_framebuffer_fetch_depth_stencil = 1;

const int GL_DMP_program_binary = 1;

const int GL_SMAPHS30_PROGRAM_BINARY_DMP = 37457;

const int GL_SMAPHS_PROGRAM_BINARY_DMP = 37458;

const int GL_DMP_PROGRAM_BINARY_DMP = 37459;

const int GL_EXT_EGL_image_array = 1;

const int GL_EXT_EGL_image_storage = 1;

const int GL_EXT_YUV_target = 1;

const int GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT = 35815;

const int GL_EXT_base_instance = 1;

const int GL_EXT_blend_func_extended = 1;

const int GL_SRC1_COLOR_EXT = 35065;

const int GL_SRC1_ALPHA_EXT = 34185;

const int GL_ONE_MINUS_SRC1_COLOR_EXT = 35066;

const int GL_ONE_MINUS_SRC1_ALPHA_EXT = 35067;

const int GL_SRC_ALPHA_SATURATE_EXT = 776;

const int GL_LOCATION_INDEX_EXT = 37647;

const int GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = 35068;

const int GL_EXT_buffer_storage = 1;

const int GL_MAP_PERSISTENT_BIT_EXT = 64;

const int GL_MAP_COHERENT_BIT_EXT = 128;

const int GL_DYNAMIC_STORAGE_BIT_EXT = 256;

const int GL_CLIENT_STORAGE_BIT_EXT = 512;

const int GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = 16384;

const int GL_BUFFER_IMMUTABLE_STORAGE_EXT = 33311;

const int GL_BUFFER_STORAGE_FLAGS_EXT = 33312;

const int GL_EXT_clear_texture = 1;

const int GL_EXT_clip_control = 1;

const int GL_LOWER_LEFT_EXT = 36001;

const int GL_UPPER_LEFT_EXT = 36002;

const int GL_NEGATIVE_ONE_TO_ONE_EXT = 37726;

const int GL_ZERO_TO_ONE_EXT = 37727;

const int GL_CLIP_ORIGIN_EXT = 37724;

const int GL_CLIP_DEPTH_MODE_EXT = 37725;

const int GL_EXT_clip_cull_distance = 1;

const int GL_MAX_CLIP_DISTANCES_EXT = 3378;

const int GL_MAX_CULL_DISTANCES_EXT = 33529;

const int GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT = 33530;

const int GL_CLIP_DISTANCE0_EXT = 12288;

const int GL_CLIP_DISTANCE1_EXT = 12289;

const int GL_CLIP_DISTANCE2_EXT = 12290;

const int GL_CLIP_DISTANCE3_EXT = 12291;

const int GL_CLIP_DISTANCE4_EXT = 12292;

const int GL_CLIP_DISTANCE5_EXT = 12293;

const int GL_CLIP_DISTANCE6_EXT = 12294;

const int GL_CLIP_DISTANCE7_EXT = 12295;

const int GL_EXT_color_buffer_float = 1;

const int GL_EXT_conservative_depth = 1;

const int GL_EXT_copy_image = 1;

const int GL_EXT_depth_clamp = 1;

const int GL_DEPTH_CLAMP_EXT = 34383;

const int GL_EXT_draw_buffers_indexed = 1;

const int GL_EXT_draw_elements_base_vertex = 1;

const int GL_EXT_draw_transform_feedback = 1;

const int GL_EXT_external_buffer = 1;

const int GL_EXT_float_blend = 1;

const int GL_EXT_geometry_point_size = 1;

const int GL_EXT_geometry_shader = 1;

const int GL_GEOMETRY_SHADER_BIT_EXT = 4;

const int GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 35094;

const int GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 35095;

const int GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 35096;

const int GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 34943;

const int GL_LAYER_PROVOKING_VERTEX_EXT = 33374;

const int GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 35372;

const int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 35378;

const int GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 37155;

const int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 37156;

const int GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 36442;

const int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 37583;

const int GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 37589;

const int GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 37069;

const int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 37079;

const int GL_UNDEFINED_VERTEX_EXT = 33376;

const int GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 37650;

const int GL_MAX_FRAMEBUFFER_LAYERS_EXT = 37655;

const int GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 37641;

const int GL_EXT_gpu_shader5 = 1;

const int GL_EXT_instanced_arrays = 1;

const int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = 35070;

const int GL_EXT_memory_object = 1;

const int GL_TEXTURE_TILING_EXT = 38272;

const int GL_DEDICATED_MEMORY_OBJECT_EXT = 38273;

const int GL_PROTECTED_MEMORY_OBJECT_EXT = 38299;

const int GL_NUM_TILING_TYPES_EXT = 38274;

const int GL_TILING_TYPES_EXT = 38275;

const int GL_OPTIMAL_TILING_EXT = 38276;

const int GL_LINEAR_TILING_EXT = 38277;

const int GL_NUM_DEVICE_UUIDS_EXT = 38294;

const int GL_DEVICE_UUID_EXT = 38295;

const int GL_DRIVER_UUID_EXT = 38296;

const int GL_UUID_SIZE_EXT = 16;

const int GL_EXT_memory_object_fd = 1;

const int GL_HANDLE_TYPE_OPAQUE_FD_EXT = 38278;

const int GL_EXT_memory_object_win32 = 1;

const int GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = 38279;

const int GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 38280;

const int GL_DEVICE_LUID_EXT = 38297;

const int GL_DEVICE_NODE_MASK_EXT = 38298;

const int GL_LUID_SIZE_EXT = 8;

const int GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = 38281;

const int GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = 38282;

const int GL_HANDLE_TYPE_D3D11_IMAGE_EXT = 38283;

const int GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 38284;

const int GL_EXT_multi_draw_indirect = 1;

const int GL_EXT_multisampled_compatibility = 1;

const int GL_EXT_multiview_tessellation_geometry_shader = 1;

const int GL_EXT_multiview_texture_multisample = 1;

const int GL_EXT_multiview_timer_query = 1;

const int GL_EXT_polygon_offset_clamp = 1;

const int GL_POLYGON_OFFSET_CLAMP_EXT = 36379;

const int GL_EXT_post_depth_coverage = 1;

const int GL_EXT_primitive_bounding_box = 1;

const int GL_PRIMITIVE_BOUNDING_BOX_EXT = 37566;

const int GL_EXT_protected_textures = 1;

const int GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = 16;

const int GL_TEXTURE_PROTECTED_EXT = 35834;

const int GL_EXT_pvrtc_sRGB = 1;

const int GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = 35412;

const int GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = 35413;

const int GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = 35414;

const int GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = 35415;

const int GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 37872;

const int GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 37873;

const int GL_EXT_raster_multisample = 1;

const int GL_RASTER_MULTISAMPLE_EXT = 37671;

const int GL_RASTER_SAMPLES_EXT = 37672;

const int GL_MAX_RASTER_SAMPLES_EXT = 37673;

const int GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 37674;

const int GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 37675;

const int GL_EFFECTIVE_RASTER_SAMPLES_EXT = 37676;

const int GL_EXT_render_snorm = 1;

const int GL_R16_SNORM_EXT = 36760;

const int GL_RG16_SNORM_EXT = 36761;

const int GL_RGBA16_SNORM_EXT = 36763;

const int GL_EXT_semaphore = 1;

const int GL_LAYOUT_GENERAL_EXT = 38285;

const int GL_LAYOUT_COLOR_ATTACHMENT_EXT = 38286;

const int GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 38287;

const int GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 38288;

const int GL_LAYOUT_SHADER_READ_ONLY_EXT = 38289;

const int GL_LAYOUT_TRANSFER_SRC_EXT = 38290;

const int GL_LAYOUT_TRANSFER_DST_EXT = 38291;

const int GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = 38192;

const int GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = 38193;

const int GL_EXT_semaphore_fd = 1;

const int GL_EXT_semaphore_win32 = 1;

const int GL_HANDLE_TYPE_D3D12_FENCE_EXT = 38292;

const int GL_D3D12_FENCE_VALUE_EXT = 38293;

const int GL_EXT_shader_framebuffer_fetch_non_coherent = 1;

const int GL_EXT_shader_group_vote = 1;

const int GL_EXT_shader_implicit_conversions = 1;

const int GL_EXT_shader_io_blocks = 1;

const int GL_EXT_shader_non_constant_global_initializers = 1;

const int GL_EXT_shader_pixel_local_storage = 1;

const int GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = 36707;

const int GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = 36711;

const int GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = 36708;

const int GL_EXT_shader_pixel_local_storage2 = 1;

const int GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = 38480;

const int GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = 38481;

const int
    GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT =
    38482;

const int GL_EXT_sparse_texture = 1;

const int GL_TEXTURE_SPARSE_EXT = 37286;

const int GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = 37287;

const int GL_NUM_SPARSE_LEVELS_EXT = 37290;

const int GL_NUM_VIRTUAL_PAGE_SIZES_EXT = 37288;

const int GL_VIRTUAL_PAGE_SIZE_X_EXT = 37269;

const int GL_VIRTUAL_PAGE_SIZE_Y_EXT = 37270;

const int GL_VIRTUAL_PAGE_SIZE_Z_EXT = 37271;

const int GL_MAX_SPARSE_TEXTURE_SIZE_EXT = 37272;

const int GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = 37273;

const int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = 37274;

const int GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = 37289;

const int GL_EXT_sparse_texture2 = 1;

const int GL_EXT_tessellation_point_size = 1;

const int GL_EXT_tessellation_shader = 1;

const int GL_PATCHES_EXT = 14;

const int GL_PATCH_VERTICES_EXT = 36466;

const int GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 36469;

const int GL_TESS_GEN_MODE_EXT = 36470;

const int GL_TESS_GEN_SPACING_EXT = 36471;

const int GL_TESS_GEN_VERTEX_ORDER_EXT = 36472;

const int GL_TESS_GEN_POINT_MODE_EXT = 36473;

const int GL_ISOLINES_EXT = 36474;

const int GL_QUADS_EXT = 7;

const int GL_FRACTIONAL_ODD_EXT = 36475;

const int GL_FRACTIONAL_EVEN_EXT = 36476;

const int GL_MAX_PATCH_VERTICES_EXT = 36477;

const int GL_MAX_TESS_GEN_LEVEL_EXT = 36478;

const int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36479;

const int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36480;

const int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 36481;

const int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 36482;

const int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 36483;

const int GL_MAX_TESS_PATCH_COMPONENTS_EXT = 36484;

const int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 36485;

const int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 36486;

const int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 36489;

const int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 36490;

const int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 34924;

const int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 34925;

const int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36382;

const int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36383;

const int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 37581;

const int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 37582;

const int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 37587;

const int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 37588;

const int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 37067;

const int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 37068;

const int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 37080;

const int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 37081;

const int GL_IS_PER_PATCH_EXT = 37607;

const int GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 37639;

const int GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 37640;

const int GL_TESS_CONTROL_SHADER_EXT = 36488;

const int GL_TESS_EVALUATION_SHADER_EXT = 36487;

const int GL_TESS_CONTROL_SHADER_BIT_EXT = 8;

const int GL_TESS_EVALUATION_SHADER_BIT_EXT = 16;

const int GL_EXT_texture_border_clamp = 1;

const int GL_TEXTURE_BORDER_COLOR_EXT = 4100;

const int GL_CLAMP_TO_BORDER_EXT = 33069;

const int GL_EXT_texture_buffer = 1;

const int GL_TEXTURE_BUFFER_BINDING_EXT = 35882;

const int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 37279;

const int GL_TEXTURE_BUFFER_OFFSET_EXT = 37277;

const int GL_TEXTURE_BUFFER_SIZE_EXT = 37278;

const int GL_EXT_texture_compression_astc_decode_mode = 1;

const int GL_TEXTURE_ASTC_DECODE_PRECISION_EXT = 36713;

const int GL_EXT_texture_compression_bptc = 1;

const int GL_COMPRESSED_RGBA_BPTC_UNORM_EXT = 36492;

const int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 36493;

const int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 36494;

const int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 36495;

const int GL_EXT_texture_compression_s3tc_srgb = 1;

const int GL_EXT_texture_cube_map_array = 1;

const int GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 36873;

const int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 36874;

const int GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 36876;

const int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 36877;

const int GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 36878;

const int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 36879;

const int GL_EXT_texture_filter_minmax = 1;

const int GL_TEXTURE_REDUCTION_MODE_EXT = 37734;

const int GL_WEIGHTED_AVERAGE_EXT = 37735;

const int GL_EXT_texture_format_sRGB_override = 1;

const int GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT = 36799;

const int GL_EXT_texture_mirror_clamp_to_edge = 1;

const int GL_EXT_texture_norm16 = 1;

const int GL_R16_EXT = 33322;

const int GL_RG16_EXT = 33324;

const int GL_RGB16_SNORM_EXT = 36762;

const int GL_EXT_texture_query_lod = 1;

const int GL_EXT_texture_sRGB_R8 = 1;

const int GL_SR8_EXT = 36797;

const int GL_EXT_texture_sRGB_RG8 = 1;

const int GL_SRG8_EXT = 36798;

const int GL_EXT_texture_shadow_lod = 1;

const int GL_EXT_texture_view = 1;

const int GL_TEXTURE_VIEW_MIN_LEVEL_EXT = 33499;

const int GL_TEXTURE_VIEW_NUM_LEVELS_EXT = 33500;

const int GL_TEXTURE_VIEW_MIN_LAYER_EXT = 33501;

const int GL_TEXTURE_VIEW_NUM_LAYERS_EXT = 33502;

const int GL_EXT_win32_keyed_mutex = 1;

const int GL_EXT_window_rectangles = 1;

const int GL_INCLUSIVE_EXT = 36624;

const int GL_EXCLUSIVE_EXT = 36625;

const int GL_WINDOW_RECTANGLE_EXT = 36626;

const int GL_WINDOW_RECTANGLE_MODE_EXT = 36627;

const int GL_MAX_WINDOW_RECTANGLES_EXT = 36628;

const int GL_NUM_WINDOW_RECTANGLES_EXT = 36629;

const int GL_IMG_bindless_texture = 1;

const int GL_IMG_framebuffer_downsample = 1;

const int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = 37180;

const int GL_NUM_DOWNSAMPLE_SCALES_IMG = 37181;

const int GL_DOWNSAMPLE_SCALES_IMG = 37182;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = 37183;

const int GL_IMG_texture_filter_cubic = 1;

const int GL_CUBIC_IMG = 37177;

const int GL_CUBIC_MIPMAP_NEAREST_IMG = 37178;

const int GL_CUBIC_MIPMAP_LINEAR_IMG = 37179;

const int GL_INTEL_blackhole_render = 1;

const int GL_BLACKHOLE_RENDER_INTEL = 33788;

const int GL_INTEL_conservative_rasterization = 1;

const int GL_CONSERVATIVE_RASTERIZATION_INTEL = 33790;

const int GL_INTEL_framebuffer_CMAA = 1;

const int GL_MESA_framebuffer_flip_y = 1;

const int GL_FRAMEBUFFER_FLIP_Y_MESA = 35771;

const int GL_MESA_program_binary_formats = 1;

const int GL_PROGRAM_BINARY_FORMAT_MESA = 34655;

const int GL_MESA_shader_integer_functions = 1;

const int GL_NVX_blend_equation_advanced_multi_draw_buffers = 1;

const int GL_NV_blend_minmax_factor = 1;

const int GL_NV_clip_space_w_scaling = 1;

const int GL_VIEWPORT_POSITION_W_SCALE_NV = 37756;

const int GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 37757;

const int GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 37758;

const int GL_NV_compute_shader_derivatives = 1;

const int GL_NV_conservative_raster = 1;

const int GL_CONSERVATIVE_RASTERIZATION_NV = 37702;

const int GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 37703;

const int GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 37704;

const int GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 37705;

const int GL_NV_conservative_raster_pre_snap = 1;

const int GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = 38224;

const int GL_NV_conservative_raster_pre_snap_triangles = 1;

const int GL_CONSERVATIVE_RASTER_MODE_NV = 38221;

const int GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 38222;

const int GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 38223;

const int GL_NV_copy_buffer = 1;

const int GL_COPY_READ_BUFFER_NV = 36662;

const int GL_COPY_WRITE_BUFFER_NV = 36663;

const int GL_NV_draw_vulkan_image = 1;

const int GL_NV_explicit_attrib_location = 1;

const int GL_NV_fill_rectangle = 1;

const int GL_FILL_RECTANGLE_NV = 37692;

const int GL_NV_fragment_coverage_to_color = 1;

const int GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 37597;

const int GL_FRAGMENT_COVERAGE_COLOR_NV = 37598;

const int GL_NV_fragment_shader_barycentric = 1;

const int GL_NV_fragment_shader_interlock = 1;

const int GL_NV_framebuffer_mixed_samples = 1;

const int GL_COVERAGE_MODULATION_TABLE_NV = 37681;

const int GL_DEPTH_SAMPLES_NV = 37677;

const int GL_STENCIL_SAMPLES_NV = 37678;

const int GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 37679;

const int GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 37680;

const int GL_COVERAGE_MODULATION_NV = 37682;

const int GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 37683;

const int GL_NV_geometry_shader_passthrough = 1;

const int GL_NV_image_formats = 1;

const int GL_NV_internalformat_sample_query = 1;

const int GL_MULTISAMPLES_NV = 37745;

const int GL_SUPERSAMPLE_SCALE_X_NV = 37746;

const int GL_SUPERSAMPLE_SCALE_Y_NV = 37747;

const int GL_CONFORMANT_NV = 37748;

const int GL_NV_memory_attachment = 1;

const int GL_ATTACHED_MEMORY_OBJECT_NV = 38308;

const int GL_ATTACHED_MEMORY_OFFSET_NV = 38309;

const int GL_MEMORY_ATTACHABLE_ALIGNMENT_NV = 38310;

const int GL_MEMORY_ATTACHABLE_SIZE_NV = 38311;

const int GL_MEMORY_ATTACHABLE_NV = 38312;

const int GL_DETACHED_MEMORY_INCARNATION_NV = 38313;

const int GL_DETACHED_TEXTURES_NV = 38314;

const int GL_DETACHED_BUFFERS_NV = 38315;

const int GL_MAX_DETACHED_TEXTURES_NV = 38316;

const int GL_MAX_DETACHED_BUFFERS_NV = 38317;

const int GL_NV_mesh_shader = 1;

const int GL_MESH_SHADER_NV = 38233;

const int GL_TASK_SHADER_NV = 38234;

const int GL_MAX_MESH_UNIFORM_BLOCKS_NV = 36448;

const int GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV = 36449;

const int GL_MAX_MESH_IMAGE_UNIFORMS_NV = 36450;

const int GL_MAX_MESH_UNIFORM_COMPONENTS_NV = 36451;

const int GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = 36452;

const int GL_MAX_MESH_ATOMIC_COUNTERS_NV = 36453;

const int GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV = 36454;

const int GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = 36455;

const int GL_MAX_TASK_UNIFORM_BLOCKS_NV = 36456;

const int GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV = 36457;

const int GL_MAX_TASK_IMAGE_UNIFORMS_NV = 36458;

const int GL_MAX_TASK_UNIFORM_COMPONENTS_NV = 36459;

const int GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = 36460;

const int GL_MAX_TASK_ATOMIC_COUNTERS_NV = 36461;

const int GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV = 36462;

const int GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = 36463;

const int GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV = 38306;

const int GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV = 38307;

const int GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV = 38198;

const int GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV = 38199;

const int GL_MAX_MESH_OUTPUT_VERTICES_NV = 38200;

const int GL_MAX_MESH_OUTPUT_PRIMITIVES_NV = 38201;

const int GL_MAX_TASK_OUTPUT_COUNT_NV = 38202;

const int GL_MAX_DRAW_MESH_TASKS_COUNT_NV = 38205;

const int GL_MAX_MESH_VIEWS_NV = 38231;

const int GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = 37599;

const int GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = 38211;

const int GL_MAX_MESH_WORK_GROUP_SIZE_NV = 38203;

const int GL_MAX_TASK_WORK_GROUP_SIZE_NV = 38204;

const int GL_MESH_WORK_GROUP_SIZE_NV = 38206;

const int GL_TASK_WORK_GROUP_SIZE_NV = 38207;

const int GL_MESH_VERTICES_OUT_NV = 38265;

const int GL_MESH_PRIMITIVES_OUT_NV = 38266;

const int GL_MESH_OUTPUT_TYPE_NV = 38267;

const int GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = 38300;

const int GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = 38301;

const int GL_REFERENCED_BY_MESH_SHADER_NV = 38304;

const int GL_REFERENCED_BY_TASK_SHADER_NV = 38305;

const int GL_MESH_SHADER_BIT_NV = 64;

const int GL_TASK_SHADER_BIT_NV = 128;

const int GL_MESH_SUBROUTINE_NV = 38268;

const int GL_TASK_SUBROUTINE_NV = 38269;

const int GL_MESH_SUBROUTINE_UNIFORM_NV = 38270;

const int GL_TASK_SUBROUTINE_UNIFORM_NV = 38271;

const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = 38302;

const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = 38303;

const int GL_NV_non_square_matrices = 1;

const int GL_FLOAT_MAT2x3_NV = 35685;

const int GL_FLOAT_MAT2x4_NV = 35686;

const int GL_FLOAT_MAT3x2_NV = 35687;

const int GL_FLOAT_MAT3x4_NV = 35688;

const int GL_FLOAT_MAT4x2_NV = 35689;

const int GL_FLOAT_MAT4x3_NV = 35690;

const int GL_NV_path_rendering_shared_edge = 1;

const int GL_SHARED_EDGE_NV = 192;

const int GL_NV_pixel_buffer_object = 1;

const int GL_PIXEL_PACK_BUFFER_NV = 35051;

const int GL_PIXEL_UNPACK_BUFFER_NV = 35052;

const int GL_PIXEL_PACK_BUFFER_BINDING_NV = 35053;

const int GL_PIXEL_UNPACK_BUFFER_BINDING_NV = 35055;

const int GL_NV_polygon_mode = 1;

const int GL_POLYGON_MODE_NV = 2880;

const int GL_POLYGON_OFFSET_POINT_NV = 10753;

const int GL_POLYGON_OFFSET_LINE_NV = 10754;

const int GL_POINT_NV = 6912;

const int GL_LINE_NV = 6913;

const int GL_FILL_NV = 6914;

const int GL_NV_representative_fragment_test = 1;

const int GL_REPRESENTATIVE_FRAGMENT_TEST_NV = 37759;

const int GL_NV_sample_locations = 1;

const int GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 37693;

const int GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 37694;

const int GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 37695;

const int GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 37696;

const int GL_SAMPLE_LOCATION_NV = 36432;

const int GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 37697;

const int GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 37698;

const int GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 37699;

const int GL_NV_sample_mask_override_coverage = 1;

const int GL_NV_scissor_exclusive = 1;

const int GL_SCISSOR_TEST_EXCLUSIVE_NV = 38229;

const int GL_SCISSOR_BOX_EXCLUSIVE_NV = 38230;

const int GL_NV_shader_atomic_fp16_vector = 1;

const int GL_NV_shader_noperspective_interpolation = 1;

const int GL_NV_shader_subgroup_partitioned = 1;

const int GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256;

const int GL_NV_shader_texture_footprint = 1;

const int GL_NV_shading_rate_image = 1;

const int GL_SHADING_RATE_IMAGE_NV = 38243;

const int GL_SHADING_RATE_NO_INVOCATIONS_NV = 38244;

const int GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 38245;

const int GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 38246;

const int GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 38247;

const int GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 38248;

const int GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 38249;

const int GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 38250;

const int GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 38251;

const int GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 38252;

const int GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 38253;

const int GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 38254;

const int GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 38255;

const int GL_SHADING_RATE_IMAGE_BINDING_NV = 38235;

const int GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = 38236;

const int GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = 38237;

const int GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV = 38238;

const int GL_MAX_COARSE_FRAGMENT_SAMPLES_NV = 38239;

const int GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = 38318;

const int GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = 38319;

const int GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = 38320;

const int GL_NV_stereo_view_rendering = 1;

const int GL_NV_viewport_array = 1;

const int GL_MAX_VIEWPORTS_NV = 33371;

const int GL_VIEWPORT_SUBPIXEL_BITS_NV = 33372;

const int GL_VIEWPORT_BOUNDS_RANGE_NV = 33373;

const int GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = 33375;

const int GL_NV_viewport_array2 = 1;

const int GL_NV_viewport_swizzle = 1;

const int GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = 37712;

const int GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 37713;

const int GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 37714;

const int GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 37715;

const int GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 37716;

const int GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 37717;

const int GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = 37718;

const int GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 37719;

const int GL_VIEWPORT_SWIZZLE_X_NV = 37720;

const int GL_VIEWPORT_SWIZZLE_Y_NV = 37721;

const int GL_VIEWPORT_SWIZZLE_Z_NV = 37722;

const int GL_VIEWPORT_SWIZZLE_W_NV = 37723;

const int GL_OVR_multiview = 1;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 38448;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 38450;

const int GL_MAX_VIEWS_OVR = 38449;

const int GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 38451;

const int GL_OVR_multiview2 = 1;

const int GL_OVR_multiview_multisampled_render_to_texture = 1;

const int GL_QCOM_YUV_texture_gather = 1;

const int GL_QCOM_framebuffer_foveated = 1;

const int GL_FOVEATION_ENABLE_BIT_QCOM = 1;

const int GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = 2;

const int GL_QCOM_shader_framebuffer_fetch_noncoherent = 1;

const int GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 38562;

const int GL_QCOM_shader_framebuffer_fetch_rate = 1;

const int GL_QCOM_texture_foveated = 1;

const int GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM = 35835;

const int GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM = 35836;

const int GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM = 35837;

const int GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM = 35838;

const int GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM = 35839;

const int GL_QCOM_texture_foveated_subsampled_layout = 1;

const int GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM = 4;

const int GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM = 36769;

const int SDL_SENSOR_DISABLED = 1;

const int DEFAULT_WINDOW_WIDTH = 640;

const int DEFAULT_WINDOW_HEIGHT = 480;

const int VERBOSE_VIDEO = 1;

const int VERBOSE_MODES = 2;

const int VERBOSE_RENDER = 4;

const int VERBOSE_EVENT = 8;

const int VERBOSE_AUDIO = 16;

const int SDLTEST_MAX_LOGMESSAGE_LENGTH = 3584;

typedef _c_SDLTest_Crc32Init = ffi.Int32 Function(
  ffi.Pointer<SDLTest_Crc32Context> crcContext,
);

typedef _dart_SDLTest_Crc32Init = int Function(
  ffi.Pointer<SDLTest_Crc32Context> crcContext,
);

typedef _c_SDLTest_Crc32Calc = ffi.Int32 Function(
  ffi.Pointer<SDLTest_Crc32Context> crcContext,
  ffi.Pointer<ffi.Uint8> inBuf,
  ffi.Uint32 inLen,
  ffi.Pointer<ffi.Uint32> crc32,
);

typedef _dart_SDLTest_Crc32Calc = int Function(
  ffi.Pointer<SDLTest_Crc32Context> crcContext,
  ffi.Pointer<ffi.Uint8> inBuf,
  int inLen,
  ffi.Pointer<ffi.Uint32> crc32,
);

typedef _c_SDLTest_Crc32CalcStart = ffi.Int32 Function(
  ffi.Pointer<SDLTest_Crc32Context> crcContext,
  ffi.Pointer<ffi.Uint32> crc32,
);

typedef _dart_SDLTest_Crc32CalcStart = int Function(
  ffi.Pointer<SDLTest_Crc32Context> crcContext,
  ffi.Pointer<ffi.Uint32> crc32,
);

typedef _c_SDLTest_Crc32CalcEnd = ffi.Int32 Function(
  ffi.Pointer<SDLTest_Crc32Context> crcContext,
  ffi.Pointer<ffi.Uint32> crc32,
);

typedef _dart_SDLTest_Crc32CalcEnd = int Function(
  ffi.Pointer<SDLTest_Crc32Context> crcContext,
  ffi.Pointer<ffi.Uint32> crc32,
);

typedef _c_SDLTest_Crc32CalcBuffer = ffi.Int32 Function(
  ffi.Pointer<SDLTest_Crc32Context> crcContext,
  ffi.Pointer<ffi.Uint8> inBuf,
  ffi.Uint32 inLen,
  ffi.Pointer<ffi.Uint32> crc32,
);

typedef _dart_SDLTest_Crc32CalcBuffer = int Function(
  ffi.Pointer<SDLTest_Crc32Context> crcContext,
  ffi.Pointer<ffi.Uint8> inBuf,
  int inLen,
  ffi.Pointer<ffi.Uint32> crc32,
);

typedef _c_SDLTest_Crc32Done = ffi.Int32 Function(
  ffi.Pointer<SDLTest_Crc32Context> crcContext,
);

typedef _dart_SDLTest_Crc32Done = int Function(
  ffi.Pointer<SDLTest_Crc32Context> crcContext,
);

typedef _c_SDL_GetPlatform = ffi.Pointer<ffi.Int8> Function();

typedef _dart_SDL_GetPlatform = ffi.Pointer<ffi.Int8> Function();

typedef _c___bswap_16 = ffi.Uint16 Function(
  ffi.Uint16 __bsx,
);

typedef _dart___bswap_16 = int Function(
  int __bsx,
);

typedef _c___bswap_32 = ffi.Uint32 Function(
  ffi.Uint32 __bsx,
);

typedef _dart___bswap_32 = int Function(
  int __bsx,
);

typedef _c___bswap_64 = ffi.Uint64 Function(
  ffi.Uint64 __bsx,
);

typedef _dart___bswap_64 = int Function(
  int __bsx,
);

typedef _c___uint16_identity = ffi.Uint16 Function(
  ffi.Uint16 __x,
);

typedef _dart___uint16_identity = int Function(
  int __x,
);

typedef _c___uint32_identity = ffi.Uint32 Function(
  ffi.Uint32 __x,
);

typedef _dart___uint32_identity = int Function(
  int __x,
);

typedef _c___uint64_identity = ffi.Uint64 Function(
  ffi.Uint64 __x,
);

typedef _dart___uint64_identity = int Function(
  int __x,
);

typedef _c_select = ffi.Int32 Function(
  ffi.Int32 __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timeval> __timeout,
);

typedef _dart_select = int Function(
  int __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timeval> __timeout,
);

typedef _c_pselect = ffi.Int32 Function(
  ffi.Int32 __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timespec> __timeout,
  ffi.Pointer<__sigset_t> __sigmask,
);

typedef _dart_pselect = int Function(
  int __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timespec> __timeout,
  ffi.Pointer<__sigset_t> __sigmask,
);

typedef _c_remove = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __filename,
);

typedef _dart_remove = int Function(
  ffi.Pointer<ffi.Int8> __filename,
);

typedef _c_rename = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _dart_rename = int Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _c_renameat = ffi.Int32 Function(
  ffi.Int32 __oldfd,
  ffi.Pointer<ffi.Int8> __old,
  ffi.Int32 __newfd,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _dart_renameat = int Function(
  int __oldfd,
  ffi.Pointer<ffi.Int8> __old,
  int __newfd,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _c_tmpfile = ffi.Pointer<_IO_FILE> Function();

typedef _dart_tmpfile = ffi.Pointer<_IO_FILE> Function();

typedef _c_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_tmpnam_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_tmpnam_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __pfx,
);

typedef _dart_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __pfx,
);

typedef _c_fclose = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fclose = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fflush = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fflush = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fflush_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fflush_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_fopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_freopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_freopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fdopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_fdopen = ffi.Pointer<_IO_FILE> Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_fmemopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Uint64 __len,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_fmemopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Void> __s,
  int __len,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_open_memstream = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
  ffi.Pointer<ffi.Uint64> __sizeloc,
);

typedef _dart_open_memstream = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
  ffi.Pointer<ffi.Uint64> __sizeloc,
);

typedef _c_setbuf = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_setbuf = void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_setvbuf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Int32 __modes,
  ffi.Uint64 __n,
);

typedef _dart_setvbuf = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  int __modes,
  int __n,
);

typedef _c_setbuffer = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __size,
);

typedef _dart_setbuffer = void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  int __size,
);

typedef _c_setlinebuf = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_setlinebuf = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fprintf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_fprintf = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_printf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_printf = int Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_sprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_sprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vfprintf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vfprintf = int Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vprintf = int Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vsprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vsprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_snprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __maxlen,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_snprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxlen,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vsnprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __maxlen,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vsnprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxlen,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vdprintf = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __fmt,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vdprintf = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __fmt,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_dprintf = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __fmt,
);

typedef _dart_dprintf = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __fmt,
);

typedef _c_fscanf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_fscanf = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_scanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_scanf = int Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_sscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_sscanf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vfscanf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vfscanf = int Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vscanf = int Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vsscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vsscanf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_fgetc = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fgetc = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getc = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getc = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getchar = ffi.Int32 Function();

typedef _dart_getchar = int Function();

typedef _c_getc_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getc_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getchar_unlocked = ffi.Int32 Function();

typedef _dart_getchar_unlocked = int Function();

typedef _c_fgetc_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fgetc_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fputc = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fputc = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putc = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_putc = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putchar = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_putchar = int Function(
  int __c,
);

typedef _c_fputc_unlocked = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fputc_unlocked = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putc_unlocked = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_putc_unlocked = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putchar_unlocked = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_putchar_unlocked = int Function(
  int __c,
);

typedef _c_getw = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getw = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putw = ffi.Int32 Function(
  ffi.Int32 __w,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_putw = int Function(
  int __w,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c___getdelim = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  ffi.Int32 __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart___getdelim = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  int __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getdelim = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  ffi.Int32 __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getdelim = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  int __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getline = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getline = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fputs = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fputs = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_puts = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_puts = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_ungetc = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ungetc = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fread = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fread = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fwrite = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __n,
  ffi.Pointer<_IO_FILE> __s,
);

typedef _dart_fwrite = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __s,
);

typedef _c_fread_unlocked = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fread_unlocked = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fwrite_unlocked = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fwrite_unlocked = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fseek = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Int64 __off,
  ffi.Int32 __whence,
);

typedef _dart_fseek = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  int __off,
  int __whence,
);

typedef _c_ftell = ffi.Int64 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ftell = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_rewind = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_rewind = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fseeko = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Int64 __off,
  ffi.Int32 __whence,
);

typedef _dart_fseeko = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  int __off,
  int __whence,
);

typedef _c_ftello = ffi.Int64 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ftello = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fgetpos = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _dart_fgetpos = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _c_fsetpos = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _dart_fsetpos = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _c_clearerr = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_clearerr = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_feof = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_feof = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ferror = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ferror = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_clearerr_unlocked = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_clearerr_unlocked = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_feof_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_feof_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ferror_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ferror_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_perror = ffi.Void Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_perror = void Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_fileno = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fileno = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fileno_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fileno_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_popen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __command,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_popen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __command,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_pclose = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_pclose = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_flockfile = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_flockfile = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ftrylockfile = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ftrylockfile = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_funlockfile = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_funlockfile = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c___uflow = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> arg0,
);

typedef _dart___uflow = int Function(
  ffi.Pointer<_IO_FILE> arg0,
);

typedef _c___overflow = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> arg0,
  ffi.Int32 arg1,
);

typedef _dart___overflow = int Function(
  ffi.Pointer<_IO_FILE> arg0,
  int arg1,
);

typedef _c___ctype_get_mb_cur_max = ffi.Uint64 Function();

typedef _dart___ctype_get_mb_cur_max = int Function();

typedef _c_atof = ffi.Double Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _dart_atof = double Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _c_atoi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _dart_atoi = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _c_atol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _dart_atol = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _c_atoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _dart_atoll = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _c_strtod = ffi.Double Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
);

typedef _dart_strtod = double Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
);

typedef _c_strtof = ffi.Float Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
);

typedef _dart_strtof = double Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
);

typedef _c_strtol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtol = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoul = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoul = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoq = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoq = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtouq = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtouq = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoll = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoull = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoull = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_l64a = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 __n,
);

typedef _dart_l64a = ffi.Pointer<ffi.Int8> Function(
  int __n,
);

typedef _c_a64l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_a64l = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_random = ffi.Int64 Function();

typedef _dart_random = int Function();

typedef _c_srandom = ffi.Void Function(
  ffi.Uint32 __seed,
);

typedef _dart_srandom = void Function(
  int __seed,
);

typedef _c_initstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 __seed,
  ffi.Pointer<ffi.Int8> __statebuf,
  ffi.Uint64 __statelen,
);

typedef _dart_initstate = ffi.Pointer<ffi.Int8> Function(
  int __seed,
  ffi.Pointer<ffi.Int8> __statebuf,
  int __statelen,
);

typedef _c_setstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __statebuf,
);

typedef _dart_setstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __statebuf,
);

typedef _c_random_r = ffi.Int32 Function(
  ffi.Pointer<random_data> __buf,
  ffi.Pointer<ffi.Int32> __result,
);

typedef _dart_random_r = int Function(
  ffi.Pointer<random_data> __buf,
  ffi.Pointer<ffi.Int32> __result,
);

typedef _c_srandom_r = ffi.Int32 Function(
  ffi.Uint32 __seed,
  ffi.Pointer<random_data> __buf,
);

typedef _dart_srandom_r = int Function(
  int __seed,
  ffi.Pointer<random_data> __buf,
);

typedef _c_initstate_r = ffi.Int32 Function(
  ffi.Uint32 __seed,
  ffi.Pointer<ffi.Int8> __statebuf,
  ffi.Uint64 __statelen,
  ffi.Pointer<random_data> __buf,
);

typedef _dart_initstate_r = int Function(
  int __seed,
  ffi.Pointer<ffi.Int8> __statebuf,
  int __statelen,
  ffi.Pointer<random_data> __buf,
);

typedef _c_setstate_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __statebuf,
  ffi.Pointer<random_data> __buf,
);

typedef _dart_setstate_r = int Function(
  ffi.Pointer<ffi.Int8> __statebuf,
  ffi.Pointer<random_data> __buf,
);

typedef _c_rand = ffi.Int32 Function();

typedef _dart_rand = int Function();

typedef _c_srand = ffi.Void Function(
  ffi.Uint32 __seed,
);

typedef _dart_srand = void Function(
  int __seed,
);

typedef _c_rand_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> __seed,
);

typedef _dart_rand_r = int Function(
  ffi.Pointer<ffi.Uint32> __seed,
);

typedef _c_drand48 = ffi.Double Function();

typedef _dart_drand48 = double Function();

typedef _c_erand48 = ffi.Double Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _dart_erand48 = double Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _c_lrand48 = ffi.Int64 Function();

typedef _dart_lrand48 = int Function();

typedef _c_nrand48 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _dart_nrand48 = int Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _c_mrand48 = ffi.Int64 Function();

typedef _dart_mrand48 = int Function();

typedef _c_jrand48 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _dart_jrand48 = int Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _c_srand48 = ffi.Void Function(
  ffi.Int64 __seedval,
);

typedef _dart_srand48 = void Function(
  int __seedval,
);

typedef _c_seed48 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> __seed16v,
);

typedef _dart_seed48 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> __seed16v,
);

typedef _c_lcong48 = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> __param,
);

typedef _dart_lcong48 = void Function(
  ffi.Pointer<ffi.Uint16> __param,
);

typedef _c_drand48_r = ffi.Int32 Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

typedef _dart_drand48_r = int Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

typedef _c_erand48_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

typedef _dart_erand48_r = int Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

typedef _c_lrand48_r = ffi.Int32 Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _dart_lrand48_r = int Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _c_nrand48_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _dart_nrand48_r = int Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _c_mrand48_r = ffi.Int32 Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _dart_mrand48_r = int Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _c_jrand48_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _dart_jrand48_r = int Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _c_srand48_r = ffi.Int32 Function(
  ffi.Int64 __seedval,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _dart_srand48_r = int Function(
  int __seedval,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _c_seed48_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __seed16v,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _dart_seed48_r = int Function(
  ffi.Pointer<ffi.Uint16> __seed16v,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _c_lcong48_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __param,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _dart_lcong48_r = int Function(
  ffi.Pointer<ffi.Uint16> __param,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _c_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __size,
);

typedef _dart_malloc = ffi.Pointer<ffi.Void> Function(
  int __size,
);

typedef _c_calloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __nmemb,
  ffi.Uint64 __size,
);

typedef _dart_calloc = ffi.Pointer<ffi.Void> Function(
  int __nmemb,
  int __size,
);

typedef _c_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
);

typedef _dart_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
);

typedef _c_reallocarray = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __nmemb,
  ffi.Uint64 __size,
);

typedef _dart_reallocarray = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __nmemb,
  int __size,
);

typedef _c_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> __ptr,
);

typedef _dart_free = void Function(
  ffi.Pointer<ffi.Void> __ptr,
);

typedef _c_alloca = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __size,
);

typedef _dart_alloca = ffi.Pointer<ffi.Void> Function(
  int __size,
);

typedef _c_valloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __size,
);

typedef _dart_valloc = ffi.Pointer<ffi.Void> Function(
  int __size,
);

typedef _c_posix_memalign = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  ffi.Uint64 __alignment,
  ffi.Uint64 __size,
);

typedef _dart_posix_memalign = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  int __alignment,
  int __size,
);

typedef _c_aligned_alloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __alignment,
  ffi.Uint64 __size,
);

typedef _dart_aligned_alloc = ffi.Pointer<ffi.Void> Function(
  int __alignment,
  int __size,
);

typedef _c_abort = ffi.Void Function();

typedef _dart_abort = void Function();

typedef _typedefC_1 = ffi.Void Function();

typedef _c_atexit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __func,
);

typedef _dart_atexit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __func,
);

typedef _typedefC_2 = ffi.Void Function();

typedef _c_at_quick_exit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> __func,
);

typedef _dart_at_quick_exit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> __func,
);

typedef _typedefC_3 = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_on_exit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> __func,
  ffi.Pointer<ffi.Void> __arg,
);

typedef _dart_on_exit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> __func,
  ffi.Pointer<ffi.Void> __arg,
);

typedef _c_exit = ffi.Void Function(
  ffi.Int32 __status,
);

typedef _dart_exit = void Function(
  int __status,
);

typedef _c_quick_exit = ffi.Void Function(
  ffi.Int32 __status,
);

typedef _dart_quick_exit = void Function(
  int __status,
);

typedef _c__Exit = ffi.Void Function(
  ffi.Int32 __status,
);

typedef _dart__Exit = void Function(
  int __status,
);

typedef _c_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_putenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __string,
);

typedef _dart_putenv = int Function(
  ffi.Pointer<ffi.Int8> __string,
);

typedef _c_setenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __value,
  ffi.Int32 __replace,
);

typedef _dart_setenv = int Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __value,
  int __replace,
);

typedef _c_unsetenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_unsetenv = int Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_clearenv = ffi.Int32 Function();

typedef _dart_clearenv = int Function();

typedef _c_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _dart_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _c_mkstemp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _dart_mkstemp = int Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _c_mkstemps = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __template,
  ffi.Int32 __suffixlen,
);

typedef _dart_mkstemps = int Function(
  ffi.Pointer<ffi.Int8> __template,
  int __suffixlen,
);

typedef _c_mkdtemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _dart_mkdtemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _c_system = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __command,
);

typedef _dart_system = int Function(
  ffi.Pointer<ffi.Int8> __command,
);

typedef _c_realpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __resolved,
);

typedef _dart_realpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __resolved,
);

typedef __compar_fn_t = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nmemb,
  ffi.Uint64 __size,
  ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
);

typedef _dart_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  int __nmemb,
  int __size,
  ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
);

typedef _c_qsort = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nmemb,
  ffi.Uint64 __size,
  ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
);

typedef _dart_qsort = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nmemb,
  int __size,
  ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
);

typedef _c_abs = ffi.Int32 Function(
  ffi.Int32 __x,
);

typedef _dart_abs = int Function(
  int __x,
);

typedef _c_labs = ffi.Int64 Function(
  ffi.Int64 __x,
);

typedef _dart_labs = int Function(
  int __x,
);

typedef _c_llabs = ffi.Int64 Function(
  ffi.Int64 __x,
);

typedef _dart_llabs = int Function(
  int __x,
);

typedef _c_ecvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double __value,
  ffi.Int32 __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
);

typedef _dart_ecvt = ffi.Pointer<ffi.Int8> Function(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
);

typedef _c_fcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double __value,
  ffi.Int32 __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
);

typedef _dart_fcvt = ffi.Pointer<ffi.Int8> Function(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
);

typedef _c_gcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double __value,
  ffi.Int32 __ndigit,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_gcvt = ffi.Pointer<ffi.Int8> Function(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_ecvt_r = ffi.Int32 Function(
  ffi.Double __value,
  ffi.Int32 __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __len,
);

typedef _dart_ecvt_r = int Function(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_fcvt_r = ffi.Int32 Function(
  ffi.Double __value,
  ffi.Int32 __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __len,
);

typedef _dart_fcvt_r = int Function(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_mblen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __n,
);

typedef _dart_mblen = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __n,
);

typedef _c_mbtowc = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __pwc,
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __n,
);

typedef _dart_mbtowc = int Function(
  ffi.Pointer<ffi.Int32> __pwc,
  ffi.Pointer<ffi.Int8> __s,
  int __n,
);

typedef _c_wctomb = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __wchar,
);

typedef _dart_wctomb = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __wchar,
);

typedef _c_mbstowcs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __pwcs,
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __n,
);

typedef _dart_mbstowcs = int Function(
  ffi.Pointer<ffi.Int32> __pwcs,
  ffi.Pointer<ffi.Int8> __s,
  int __n,
);

typedef _c_wcstombs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int32> __pwcs,
  ffi.Uint64 __n,
);

typedef _dart_wcstombs = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int32> __pwcs,
  int __n,
);

typedef _c_rpmatch = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __response,
);

typedef _dart_rpmatch = int Function(
  ffi.Pointer<ffi.Int8> __response,
);

typedef _c_getsubopt = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __optionp,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __tokens,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __valuep,
);

typedef _dart_getsubopt = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __optionp,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __tokens,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __valuep,
);

typedef _c_getloadavg = ffi.Int32 Function(
  ffi.Pointer<ffi.Double> __loadavg,
  ffi.Int32 __nelem,
);

typedef _dart_getloadavg = int Function(
  ffi.Pointer<ffi.Double> __loadavg,
  int __nelem,
);

typedef _c_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  ffi.Uint64 __n,
);

typedef _dart_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

typedef _c_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  ffi.Uint64 __n,
);

typedef _dart_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

typedef _c_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __c,
  int __n,
);

typedef _c_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

typedef _c_memcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  ffi.Uint64 __n,
);

typedef _dart_memcmp = int Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

typedef _c_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

typedef _c_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strncmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strcoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcoll = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_strxfrm = int Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strcoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart_strcoll_l = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c_strxfrm_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart_strxfrm_l = int Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __string,
  ffi.Uint64 __n,
);

typedef _dart_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __string,
  int __n,
);

typedef _c_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strcspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __reject,
);

typedef _dart_strcspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __reject,
);

typedef _c_strspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _dart_strspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _c_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _dart_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _c_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __haystack,
  ffi.Pointer<ffi.Int8> __needle,
);

typedef _dart_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __haystack,
  ffi.Pointer<ffi.Int8> __needle,
);

typedef _c_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _dart_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _c___strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _dart___strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _c_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _dart_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _c_strlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_strlen = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_strnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __string,
  ffi.Uint64 __maxlen,
);

typedef _dart_strnlen = int Function(
  ffi.Pointer<ffi.Int8> __string,
  int __maxlen,
);

typedef _c_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __errnum,
);

typedef _dart_strerror = ffi.Pointer<ffi.Int8> Function(
  int __errnum,
);

typedef _c_strerror_r = ffi.Int32 Function(
  ffi.Int32 __errnum,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __buflen,
);

typedef _dart_strerror_r = int Function(
  int __errnum,
  ffi.Pointer<ffi.Int8> __buf,
  int __buflen,
);

typedef _c_strerror_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __errnum,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart_strerror_l = ffi.Pointer<ffi.Int8> Function(
  int __errnum,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c_bcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  ffi.Uint64 __n,
);

typedef _dart_bcmp = int Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

typedef _c_bcopy = ffi.Void Function(
  ffi.Pointer<ffi.Void> __src,
  ffi.Pointer<ffi.Void> __dest,
  ffi.Uint64 __n,
);

typedef _dart_bcopy = void Function(
  ffi.Pointer<ffi.Void> __src,
  ffi.Pointer<ffi.Void> __dest,
  int __n,
);

typedef _c_bzero = ffi.Void Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Uint64 __n,
);

typedef _dart_bzero = void Function(
  ffi.Pointer<ffi.Void> __s,
  int __n,
);

typedef _c_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_ffs = ffi.Int32 Function(
  ffi.Int32 __i,
);

typedef _dart_ffs = int Function(
  int __i,
);

typedef _c_ffsl = ffi.Int32 Function(
  ffi.Int64 __l,
);

typedef _dart_ffsl = int Function(
  int __l,
);

typedef _c_ffsll = ffi.Int32 Function(
  ffi.Int64 __ll,
);

typedef _dart_ffsll = int Function(
  int __ll,
);

typedef _c_strcasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcasecmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strncasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strncasecmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strcasecmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _dart_strcasecmp_l = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _c_strncasecmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _dart_strncasecmp_l = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _c_explicit_bzero = ffi.Void Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Uint64 __n,
);

typedef _dart_explicit_bzero = void Function(
  ffi.Pointer<ffi.Void> __s,
  int __n,
);

typedef _c_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _dart_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _c_strsignal = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __sig,
);

typedef _dart_strsignal = ffi.Pointer<ffi.Int8> Function(
  int __sig,
);

typedef _c___stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart___stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c___stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart___stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_wcscpy = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __dest,
  ffi.Pointer<ffi.Int32> __src,
);

typedef _dart_wcscpy = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __dest,
  ffi.Pointer<ffi.Int32> __src,
);

typedef _c_wcsncpy = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __dest,
  ffi.Pointer<ffi.Int32> __src,
  ffi.Uint64 __n,
);

typedef _dart_wcsncpy = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __dest,
  ffi.Pointer<ffi.Int32> __src,
  int __n,
);

typedef _c_wcscat = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __dest,
  ffi.Pointer<ffi.Int32> __src,
);

typedef _dart_wcscat = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __dest,
  ffi.Pointer<ffi.Int32> __src,
);

typedef _c_wcsncat = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __dest,
  ffi.Pointer<ffi.Int32> __src,
  ffi.Uint64 __n,
);

typedef _dart_wcsncat = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __dest,
  ffi.Pointer<ffi.Int32> __src,
  int __n,
);

typedef _c_wcscmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
);

typedef _dart_wcscmp = int Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
);

typedef _c_wcsncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  ffi.Uint64 __n,
);

typedef _dart_wcsncmp = int Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  int __n,
);

typedef _c_wcscasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
);

typedef _dart_wcscasecmp = int Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
);

typedef _c_wcsncasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  ffi.Uint64 __n,
);

typedef _dart_wcsncasecmp = int Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  int __n,
);

typedef _c_wcscasecmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _dart_wcscasecmp_l = int Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _c_wcsncasecmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  ffi.Uint64 __n,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _dart_wcsncasecmp_l = int Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  int __n,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _c_wcscoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
);

typedef _dart_wcscoll = int Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
);

typedef _c_wcsxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  ffi.Uint64 __n,
);

typedef _dart_wcsxfrm = int Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  int __n,
);

typedef _c_wcscoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _dart_wcscoll_l = int Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _c_wcsxfrm_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  ffi.Uint64 __n,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _dart_wcsxfrm_l = int Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  int __n,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _c_wcsdup = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __s,
);

typedef _dart_wcsdup = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __s,
);

typedef _c_wcschr = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __wcs,
  ffi.Int32 __wc,
);

typedef _dart_wcschr = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __wcs,
  int __wc,
);

typedef _c_wcsrchr = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __wcs,
  ffi.Int32 __wc,
);

typedef _dart_wcsrchr = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __wcs,
  int __wc,
);

typedef _c_wcscspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __wcs,
  ffi.Pointer<ffi.Int32> __reject,
);

typedef _dart_wcscspn = int Function(
  ffi.Pointer<ffi.Int32> __wcs,
  ffi.Pointer<ffi.Int32> __reject,
);

typedef _c_wcsspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __wcs,
  ffi.Pointer<ffi.Int32> __accept,
);

typedef _dart_wcsspn = int Function(
  ffi.Pointer<ffi.Int32> __wcs,
  ffi.Pointer<ffi.Int32> __accept,
);

typedef _c_wcspbrk = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __wcs,
  ffi.Pointer<ffi.Int32> __accept,
);

typedef _dart_wcspbrk = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __wcs,
  ffi.Pointer<ffi.Int32> __accept,
);

typedef _c_wcsstr = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __haystack,
  ffi.Pointer<ffi.Int32> __needle,
);

typedef _dart_wcsstr = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __haystack,
  ffi.Pointer<ffi.Int32> __needle,
);

typedef _c_wcstok = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __s,
  ffi.Pointer<ffi.Int32> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __ptr,
);

typedef _dart_wcstok = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __s,
  ffi.Pointer<ffi.Int32> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __ptr,
);

typedef _c_wcslen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __s,
);

typedef _dart_wcslen = int Function(
  ffi.Pointer<ffi.Int32> __s,
);

typedef _c_wcsnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __s,
  ffi.Uint64 __maxlen,
);

typedef _dart_wcsnlen = int Function(
  ffi.Pointer<ffi.Int32> __s,
  int __maxlen,
);

typedef _c_wmemchr = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __s,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_wmemchr = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __s,
  int __c,
  int __n,
);

typedef _c_wmemcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  ffi.Uint64 __n,
);

typedef _dart_wmemcmp = int Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  int __n,
);

typedef _c_wmemcpy = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  ffi.Uint64 __n,
);

typedef _dart_wmemcpy = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  int __n,
);

typedef _c_wmemmove = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  ffi.Uint64 __n,
);

typedef _dart_wmemmove = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __s1,
  ffi.Pointer<ffi.Int32> __s2,
  int __n,
);

typedef _c_wmemset = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __s,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_wmemset = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __s,
  int __c,
  int __n,
);

typedef _c_btowc = ffi.Uint32 Function(
  ffi.Int32 __c,
);

typedef _dart_btowc = int Function(
  int __c,
);

typedef _c_wctob = ffi.Int32 Function(
  ffi.Uint32 __c,
);

typedef _dart_wctob = int Function(
  int __c,
);

typedef _c_mbsinit = ffi.Int32 Function(
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _dart_mbsinit = int Function(
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _c_mbrtowc = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __pwc,
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __n,
  ffi.Pointer<__mbstate_t> __p,
);

typedef _dart_mbrtowc = int Function(
  ffi.Pointer<ffi.Int32> __pwc,
  ffi.Pointer<ffi.Int8> __s,
  int __n,
  ffi.Pointer<__mbstate_t> __p,
);

typedef _c_wcrtomb = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __wc,
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _dart_wcrtomb = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __wc,
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _c___mbrlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __n,
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _dart___mbrlen = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __n,
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _c_mbrlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __n,
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _dart_mbrlen = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __n,
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _c_mbsrtowcs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __dst,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __src,
  ffi.Uint64 __len,
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _dart_mbsrtowcs = int Function(
  ffi.Pointer<ffi.Int32> __dst,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __src,
  int __len,
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _c_wcsrtombs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __src,
  ffi.Uint64 __len,
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _dart_wcsrtombs = int Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __src,
  int __len,
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _c_mbsnrtowcs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __dst,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __src,
  ffi.Uint64 __nmc,
  ffi.Uint64 __len,
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _dart_mbsnrtowcs = int Function(
  ffi.Pointer<ffi.Int32> __dst,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __src,
  int __nmc,
  int __len,
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _c_wcsnrtombs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __src,
  ffi.Uint64 __nwc,
  ffi.Uint64 __len,
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _dart_wcsnrtombs = int Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __src,
  int __nwc,
  int __len,
  ffi.Pointer<__mbstate_t> __ps,
);

typedef _c_wcstod = ffi.Double Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
);

typedef _dart_wcstod = double Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
);

typedef _c_wcstof = ffi.Float Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
);

typedef _dart_wcstof = double Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
);

typedef _c_wcstol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_wcstol = int Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  int __base,
);

typedef _c_wcstoul = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_wcstoul = int Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  int __base,
);

typedef _c_wcstoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_wcstoll = int Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  int __base,
);

typedef _c_wcstoull = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_wcstoull = int Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  int __base,
);

typedef _c_wcpcpy = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __dest,
  ffi.Pointer<ffi.Int32> __src,
);

typedef _dart_wcpcpy = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __dest,
  ffi.Pointer<ffi.Int32> __src,
);

typedef _c_wcpncpy = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __dest,
  ffi.Pointer<ffi.Int32> __src,
  ffi.Uint64 __n,
);

typedef _dart_wcpncpy = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __dest,
  ffi.Pointer<ffi.Int32> __src,
  int __n,
);

typedef _c_open_wmemstream = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __bufloc,
  ffi.Pointer<ffi.Uint64> __sizeloc,
);

typedef _dart_open_wmemstream = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __bufloc,
  ffi.Pointer<ffi.Uint64> __sizeloc,
);

typedef _c_fwide = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __fp,
  ffi.Int32 __mode,
);

typedef _dart_fwide = int Function(
  ffi.Pointer<_IO_FILE> __fp,
  int __mode,
);

typedef _c_fwprintf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int32> __format,
);

typedef _dart_fwprintf = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int32> __format,
);

typedef _c_wprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __format,
);

typedef _dart_wprintf = int Function(
  ffi.Pointer<ffi.Int32> __format,
);

typedef _c_swprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __s,
  ffi.Uint64 __n,
  ffi.Pointer<ffi.Int32> __format,
);

typedef _dart_swprintf = int Function(
  ffi.Pointer<ffi.Int32> __s,
  int __n,
  ffi.Pointer<ffi.Int32> __format,
);

typedef _c_vfwprintf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int32> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vfwprintf = int Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int32> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vwprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vwprintf = int Function(
  ffi.Pointer<ffi.Int32> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vswprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __s,
  ffi.Uint64 __n,
  ffi.Pointer<ffi.Int32> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vswprintf = int Function(
  ffi.Pointer<ffi.Int32> __s,
  int __n,
  ffi.Pointer<ffi.Int32> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_fwscanf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int32> __format,
);

typedef _dart_fwscanf = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int32> __format,
);

typedef _c_wscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __format,
);

typedef _dart_wscanf = int Function(
  ffi.Pointer<ffi.Int32> __format,
);

typedef _c_swscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __s,
  ffi.Pointer<ffi.Int32> __format,
);

typedef _dart_swscanf = int Function(
  ffi.Pointer<ffi.Int32> __s,
  ffi.Pointer<ffi.Int32> __format,
);

typedef _c_vfwscanf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int32> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vfwscanf = int Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int32> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vwscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vwscanf = int Function(
  ffi.Pointer<ffi.Int32> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vswscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __s,
  ffi.Pointer<ffi.Int32> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vswscanf = int Function(
  ffi.Pointer<ffi.Int32> __s,
  ffi.Pointer<ffi.Int32> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_fgetwc = ffi.Uint32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fgetwc = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getwc = ffi.Uint32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getwc = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getwchar = ffi.Uint32 Function();

typedef _dart_getwchar = int Function();

typedef _c_fputwc = ffi.Uint32 Function(
  ffi.Int32 __wc,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fputwc = int Function(
  int __wc,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putwc = ffi.Uint32 Function(
  ffi.Int32 __wc,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_putwc = int Function(
  int __wc,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putwchar = ffi.Uint32 Function(
  ffi.Int32 __wc,
);

typedef _dart_putwchar = int Function(
  int __wc,
);

typedef _c_fgetws = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __ws,
  ffi.Int32 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fgetws = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> __ws,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fputws = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __ws,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fputws = int Function(
  ffi.Pointer<ffi.Int32> __ws,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ungetwc = ffi.Uint32 Function(
  ffi.Uint32 __wc,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ungetwc = int Function(
  int __wc,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_wcsftime = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __s,
  ffi.Uint64 __maxsize,
  ffi.Pointer<ffi.Int32> __format,
  ffi.Pointer<tm> __tp,
);

typedef _dart_wcsftime = int Function(
  ffi.Pointer<ffi.Int32> __s,
  int __maxsize,
  ffi.Pointer<ffi.Int32> __format,
  ffi.Pointer<tm> __tp,
);

typedef _c_imaxabs = ffi.Int64 Function(
  ffi.Int64 __n,
);

typedef _dart_imaxabs = int Function(
  int __n,
);

typedef _c_strtoimax = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoimax = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoumax = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoumax = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_wcstoimax = ffi.Int64 Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_wcstoimax = int Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  int __base,
);

typedef _c_wcstoumax = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_wcstoumax = int Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  int __base,
);

typedef _c___ctype_b_loc = ffi.Pointer<ffi.Pointer<ffi.Uint16>> Function();

typedef _dart___ctype_b_loc = ffi.Pointer<ffi.Pointer<ffi.Uint16>> Function();

typedef _c___ctype_tolower_loc = ffi.Pointer<ffi.Pointer<ffi.Int32>> Function();

typedef _dart___ctype_tolower_loc = ffi.Pointer<ffi.Pointer<ffi.Int32>>
    Function();

typedef _c___ctype_toupper_loc = ffi.Pointer<ffi.Pointer<ffi.Int32>> Function();

typedef _dart___ctype_toupper_loc = ffi.Pointer<ffi.Pointer<ffi.Int32>>
    Function();

typedef _c_isalnum = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isalnum = int Function(
  int arg0,
);

typedef _c_isalpha = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isalpha = int Function(
  int arg0,
);

typedef _c_iscntrl = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_iscntrl = int Function(
  int arg0,
);

typedef _c_isdigit = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isdigit = int Function(
  int arg0,
);

typedef _c_islower = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_islower = int Function(
  int arg0,
);

typedef _c_isgraph = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isgraph = int Function(
  int arg0,
);

typedef _c_isprint = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isprint = int Function(
  int arg0,
);

typedef _c_ispunct = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_ispunct = int Function(
  int arg0,
);

typedef _c_isspace = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isspace = int Function(
  int arg0,
);

typedef _c_isupper = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isupper = int Function(
  int arg0,
);

typedef _c_isxdigit = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isxdigit = int Function(
  int arg0,
);

typedef _c_tolower = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_tolower = int Function(
  int __c,
);

typedef _c_toupper = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_toupper = int Function(
  int __c,
);

typedef _c_isblank = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isblank = int Function(
  int arg0,
);

typedef _c_isascii = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_isascii = int Function(
  int __c,
);

typedef _c_toascii = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_toascii = int Function(
  int __c,
);

typedef _c__toupper = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart__toupper = int Function(
  int arg0,
);

typedef _c__tolower = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart__tolower = int Function(
  int arg0,
);

typedef _c_isalnum_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isalnum_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isalpha_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isalpha_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_iscntrl_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_iscntrl_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isdigit_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isdigit_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_islower_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_islower_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isgraph_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isgraph_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isprint_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isprint_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_ispunct_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_ispunct_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isspace_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isspace_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isupper_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isupper_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isxdigit_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isxdigit_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isblank_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isblank_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c___tolower_l = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart___tolower_l = int Function(
  int __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c_tolower_l = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart_tolower_l = int Function(
  int __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c___toupper_l = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart___toupper_l = int Function(
  int __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c_toupper_l = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart_toupper_l = int Function(
  int __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c___fpclassify = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart___fpclassify = int Function(
  double __value,
);

typedef _c___signbit = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart___signbit = int Function(
  double __value,
);

typedef _c___isinf = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart___isinf = int Function(
  double __value,
);

typedef _c___finite = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart___finite = int Function(
  double __value,
);

typedef _c___isnan = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart___isnan = int Function(
  double __value,
);

typedef _c___iseqsig = ffi.Int32 Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___iseqsig = int Function(
  double __x,
  double __y,
);

typedef _c___issignaling = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart___issignaling = int Function(
  double __value,
);

typedef _c_acos = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_acos = double Function(
  double __x,
);

typedef _c___acos = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___acos = double Function(
  double __x,
);

typedef _c_asin = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_asin = double Function(
  double __x,
);

typedef _c___asin = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___asin = double Function(
  double __x,
);

typedef _c_atan = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_atan = double Function(
  double __x,
);

typedef _c___atan = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___atan = double Function(
  double __x,
);

typedef _c_atan2 = ffi.Double Function(
  ffi.Double __y,
  ffi.Double __x,
);

typedef _dart_atan2 = double Function(
  double __y,
  double __x,
);

typedef _c___atan2 = ffi.Double Function(
  ffi.Double __y,
  ffi.Double __x,
);

typedef _dart___atan2 = double Function(
  double __y,
  double __x,
);

typedef _c_cos = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_cos = double Function(
  double __x,
);

typedef _c___cos = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___cos = double Function(
  double __x,
);

typedef _c_sin = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_sin = double Function(
  double __x,
);

typedef _c___sin = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___sin = double Function(
  double __x,
);

typedef _c_tan = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_tan = double Function(
  double __x,
);

typedef _c___tan = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___tan = double Function(
  double __x,
);

typedef _c_cosh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_cosh = double Function(
  double __x,
);

typedef _c___cosh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___cosh = double Function(
  double __x,
);

typedef _c_sinh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_sinh = double Function(
  double __x,
);

typedef _c___sinh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___sinh = double Function(
  double __x,
);

typedef _c_tanh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_tanh = double Function(
  double __x,
);

typedef _c___tanh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___tanh = double Function(
  double __x,
);

typedef _c_acosh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_acosh = double Function(
  double __x,
);

typedef _c___acosh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___acosh = double Function(
  double __x,
);

typedef _c_asinh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_asinh = double Function(
  double __x,
);

typedef _c___asinh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___asinh = double Function(
  double __x,
);

typedef _c_atanh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_atanh = double Function(
  double __x,
);

typedef _c___atanh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___atanh = double Function(
  double __x,
);

typedef _c_exp = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_exp = double Function(
  double __x,
);

typedef _c___exp = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___exp = double Function(
  double __x,
);

typedef _c_frexp = ffi.Double Function(
  ffi.Double __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _dart_frexp = double Function(
  double __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _c___frexp = ffi.Double Function(
  ffi.Double __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _dart___frexp = double Function(
  double __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _c_ldexp = ffi.Double Function(
  ffi.Double __x,
  ffi.Int32 __exponent,
);

typedef _dart_ldexp = double Function(
  double __x,
  int __exponent,
);

typedef _c___ldexp = ffi.Double Function(
  ffi.Double __x,
  ffi.Int32 __exponent,
);

typedef _dart___ldexp = double Function(
  double __x,
  int __exponent,
);

typedef _c_log = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_log = double Function(
  double __x,
);

typedef _c___log = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___log = double Function(
  double __x,
);

typedef _c_log10 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_log10 = double Function(
  double __x,
);

typedef _c___log10 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___log10 = double Function(
  double __x,
);

typedef _c_modf = ffi.Double Function(
  ffi.Double __x,
  ffi.Pointer<ffi.Double> __iptr,
);

typedef _dart_modf = double Function(
  double __x,
  ffi.Pointer<ffi.Double> __iptr,
);

typedef _c___modf = ffi.Double Function(
  ffi.Double __x,
  ffi.Pointer<ffi.Double> __iptr,
);

typedef _dart___modf = double Function(
  double __x,
  ffi.Pointer<ffi.Double> __iptr,
);

typedef _c_expm1 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_expm1 = double Function(
  double __x,
);

typedef _c___expm1 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___expm1 = double Function(
  double __x,
);

typedef _c_log1p = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_log1p = double Function(
  double __x,
);

typedef _c___log1p = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___log1p = double Function(
  double __x,
);

typedef _c_logb = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_logb = double Function(
  double __x,
);

typedef _c___logb = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___logb = double Function(
  double __x,
);

typedef _c_exp2 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_exp2 = double Function(
  double __x,
);

typedef _c___exp2 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___exp2 = double Function(
  double __x,
);

typedef _c_log2 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_log2 = double Function(
  double __x,
);

typedef _c___log2 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___log2 = double Function(
  double __x,
);

typedef _c_pow = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_pow = double Function(
  double __x,
  double __y,
);

typedef _c___pow = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___pow = double Function(
  double __x,
  double __y,
);

typedef _c_sqrt = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_sqrt = double Function(
  double __x,
);

typedef _c___sqrt = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___sqrt = double Function(
  double __x,
);

typedef _c_hypot = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_hypot = double Function(
  double __x,
  double __y,
);

typedef _c___hypot = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___hypot = double Function(
  double __x,
  double __y,
);

typedef _c_cbrt = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_cbrt = double Function(
  double __x,
);

typedef _c___cbrt = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___cbrt = double Function(
  double __x,
);

typedef _c_ceil = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_ceil = double Function(
  double __x,
);

typedef _c___ceil = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___ceil = double Function(
  double __x,
);

typedef _c_fabs = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_fabs = double Function(
  double __x,
);

typedef _c___fabs = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___fabs = double Function(
  double __x,
);

typedef _c_floor = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_floor = double Function(
  double __x,
);

typedef _c___floor = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___floor = double Function(
  double __x,
);

typedef _c_fmod = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_fmod = double Function(
  double __x,
  double __y,
);

typedef _c___fmod = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___fmod = double Function(
  double __x,
  double __y,
);

typedef _c_isinf = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart_isinf = int Function(
  double __value,
);

typedef _c_finite = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart_finite = int Function(
  double __value,
);

typedef _c_drem = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_drem = double Function(
  double __x,
  double __y,
);

typedef _c___drem = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___drem = double Function(
  double __x,
  double __y,
);

typedef _c_significand = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_significand = double Function(
  double __x,
);

typedef _c___significand = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___significand = double Function(
  double __x,
);

typedef _c_copysign = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_copysign = double Function(
  double __x,
  double __y,
);

typedef _c___copysign = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___copysign = double Function(
  double __x,
  double __y,
);

typedef _c_nan = ffi.Double Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _dart_nan = double Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _c___nan = ffi.Double Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _dart___nan = double Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _c_isnan = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart_isnan = int Function(
  double __value,
);

typedef _c_j0 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_j0 = double Function(
  double arg0,
);

typedef _c___j0 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___j0 = double Function(
  double arg0,
);

typedef _c_j1 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_j1 = double Function(
  double arg0,
);

typedef _c___j1 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___j1 = double Function(
  double arg0,
);

typedef _c_jn = ffi.Double Function(
  ffi.Int32 arg0,
  ffi.Double arg1,
);

typedef _dart_jn = double Function(
  int arg0,
  double arg1,
);

typedef _c___jn = ffi.Double Function(
  ffi.Int32 arg0,
  ffi.Double arg1,
);

typedef _dart___jn = double Function(
  int arg0,
  double arg1,
);

typedef _c_y0 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_y0 = double Function(
  double arg0,
);

typedef _c___y0 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___y0 = double Function(
  double arg0,
);

typedef _c_y1 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_y1 = double Function(
  double arg0,
);

typedef _c___y1 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___y1 = double Function(
  double arg0,
);

typedef _c_yn = ffi.Double Function(
  ffi.Int32 arg0,
  ffi.Double arg1,
);

typedef _dart_yn = double Function(
  int arg0,
  double arg1,
);

typedef _c___yn = ffi.Double Function(
  ffi.Int32 arg0,
  ffi.Double arg1,
);

typedef _dart___yn = double Function(
  int arg0,
  double arg1,
);

typedef _c_erf = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_erf = double Function(
  double arg0,
);

typedef _c___erf = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___erf = double Function(
  double arg0,
);

typedef _c_erfc = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_erfc = double Function(
  double arg0,
);

typedef _c___erfc = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___erfc = double Function(
  double arg0,
);

typedef _c_lgamma = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_lgamma = double Function(
  double arg0,
);

typedef _c___lgamma = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___lgamma = double Function(
  double arg0,
);

typedef _c_tgamma = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_tgamma = double Function(
  double arg0,
);

typedef _c___tgamma = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___tgamma = double Function(
  double arg0,
);

typedef _c_gamma = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_gamma = double Function(
  double arg0,
);

typedef _c___gamma = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___gamma = double Function(
  double arg0,
);

typedef _c_lgamma_r = ffi.Double Function(
  ffi.Double arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _dart_lgamma_r = double Function(
  double arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _c___lgamma_r = ffi.Double Function(
  ffi.Double arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _dart___lgamma_r = double Function(
  double arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _c_rint = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_rint = double Function(
  double __x,
);

typedef _c___rint = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___rint = double Function(
  double __x,
);

typedef _c_nextafter = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_nextafter = double Function(
  double __x,
  double __y,
);

typedef _c___nextafter = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___nextafter = double Function(
  double __x,
  double __y,
);

typedef _c_remainder = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_remainder = double Function(
  double __x,
  double __y,
);

typedef _c___remainder = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___remainder = double Function(
  double __x,
  double __y,
);

typedef _c_scalbn = ffi.Double Function(
  ffi.Double __x,
  ffi.Int32 __n,
);

typedef _dart_scalbn = double Function(
  double __x,
  int __n,
);

typedef _c___scalbn = ffi.Double Function(
  ffi.Double __x,
  ffi.Int32 __n,
);

typedef _dart___scalbn = double Function(
  double __x,
  int __n,
);

typedef _c_ilogb = ffi.Int32 Function(
  ffi.Double __x,
);

typedef _dart_ilogb = int Function(
  double __x,
);

typedef _c___ilogb = ffi.Int32 Function(
  ffi.Double __x,
);

typedef _dart___ilogb = int Function(
  double __x,
);

typedef _c_scalbln = ffi.Double Function(
  ffi.Double __x,
  ffi.Int64 __n,
);

typedef _dart_scalbln = double Function(
  double __x,
  int __n,
);

typedef _c___scalbln = ffi.Double Function(
  ffi.Double __x,
  ffi.Int64 __n,
);

typedef _dart___scalbln = double Function(
  double __x,
  int __n,
);

typedef _c_nearbyint = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_nearbyint = double Function(
  double __x,
);

typedef _c___nearbyint = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___nearbyint = double Function(
  double __x,
);

typedef _c_round = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_round = double Function(
  double __x,
);

typedef _c___round = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___round = double Function(
  double __x,
);

typedef _c_trunc = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_trunc = double Function(
  double __x,
);

typedef _c___trunc = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___trunc = double Function(
  double __x,
);

typedef _c_remquo = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _dart_remquo = double Function(
  double __x,
  double __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _c___remquo = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _dart___remquo = double Function(
  double __x,
  double __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _c_lrint = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart_lrint = int Function(
  double __x,
);

typedef _c___lrint = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart___lrint = int Function(
  double __x,
);

typedef _c_llrint = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart_llrint = int Function(
  double __x,
);

typedef _c___llrint = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart___llrint = int Function(
  double __x,
);

typedef _c_lround = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart_lround = int Function(
  double __x,
);

typedef _c___lround = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart___lround = int Function(
  double __x,
);

typedef _c_llround = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart_llround = int Function(
  double __x,
);

typedef _c___llround = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart___llround = int Function(
  double __x,
);

typedef _c_fdim = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_fdim = double Function(
  double __x,
  double __y,
);

typedef _c___fdim = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___fdim = double Function(
  double __x,
  double __y,
);

typedef _c_fmax = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_fmax = double Function(
  double __x,
  double __y,
);

typedef _c___fmax = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___fmax = double Function(
  double __x,
  double __y,
);

typedef _c_fmin = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_fmin = double Function(
  double __x,
  double __y,
);

typedef _c___fmin = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___fmin = double Function(
  double __x,
  double __y,
);

typedef _c_fma = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
  ffi.Double __z,
);

typedef _dart_fma = double Function(
  double __x,
  double __y,
  double __z,
);

typedef _c___fma = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
  ffi.Double __z,
);

typedef _dart___fma = double Function(
  double __x,
  double __y,
  double __z,
);

typedef _c_scalb = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __n,
);

typedef _dart_scalb = double Function(
  double __x,
  double __n,
);

typedef _c___scalb = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __n,
);

typedef _dart___scalb = double Function(
  double __x,
  double __n,
);

typedef _c___fpclassifyf = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart___fpclassifyf = int Function(
  double __value,
);

typedef _c___signbitf = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart___signbitf = int Function(
  double __value,
);

typedef _c___isinff = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart___isinff = int Function(
  double __value,
);

typedef _c___finitef = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart___finitef = int Function(
  double __value,
);

typedef _c___isnanf = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart___isnanf = int Function(
  double __value,
);

typedef _c___iseqsigf = ffi.Int32 Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___iseqsigf = int Function(
  double __x,
  double __y,
);

typedef _c___issignalingf = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart___issignalingf = int Function(
  double __value,
);

typedef _c_acosf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_acosf = double Function(
  double __x,
);

typedef _c___acosf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___acosf = double Function(
  double __x,
);

typedef _c_asinf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_asinf = double Function(
  double __x,
);

typedef _c___asinf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___asinf = double Function(
  double __x,
);

typedef _c_atanf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_atanf = double Function(
  double __x,
);

typedef _c___atanf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___atanf = double Function(
  double __x,
);

typedef _c_atan2f = ffi.Float Function(
  ffi.Float __y,
  ffi.Float __x,
);

typedef _dart_atan2f = double Function(
  double __y,
  double __x,
);

typedef _c___atan2f = ffi.Float Function(
  ffi.Float __y,
  ffi.Float __x,
);

typedef _dart___atan2f = double Function(
  double __y,
  double __x,
);

typedef _c_cosf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_cosf = double Function(
  double __x,
);

typedef _c___cosf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___cosf = double Function(
  double __x,
);

typedef _c_sinf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_sinf = double Function(
  double __x,
);

typedef _c___sinf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___sinf = double Function(
  double __x,
);

typedef _c_tanf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_tanf = double Function(
  double __x,
);

typedef _c___tanf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___tanf = double Function(
  double __x,
);

typedef _c_coshf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_coshf = double Function(
  double __x,
);

typedef _c___coshf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___coshf = double Function(
  double __x,
);

typedef _c_sinhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_sinhf = double Function(
  double __x,
);

typedef _c___sinhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___sinhf = double Function(
  double __x,
);

typedef _c_tanhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_tanhf = double Function(
  double __x,
);

typedef _c___tanhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___tanhf = double Function(
  double __x,
);

typedef _c_acoshf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_acoshf = double Function(
  double __x,
);

typedef _c___acoshf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___acoshf = double Function(
  double __x,
);

typedef _c_asinhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_asinhf = double Function(
  double __x,
);

typedef _c___asinhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___asinhf = double Function(
  double __x,
);

typedef _c_atanhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_atanhf = double Function(
  double __x,
);

typedef _c___atanhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___atanhf = double Function(
  double __x,
);

typedef _c_expf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_expf = double Function(
  double __x,
);

typedef _c___expf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___expf = double Function(
  double __x,
);

typedef _c_frexpf = ffi.Float Function(
  ffi.Float __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _dart_frexpf = double Function(
  double __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _c___frexpf = ffi.Float Function(
  ffi.Float __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _dart___frexpf = double Function(
  double __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _c_ldexpf = ffi.Float Function(
  ffi.Float __x,
  ffi.Int32 __exponent,
);

typedef _dart_ldexpf = double Function(
  double __x,
  int __exponent,
);

typedef _c___ldexpf = ffi.Float Function(
  ffi.Float __x,
  ffi.Int32 __exponent,
);

typedef _dart___ldexpf = double Function(
  double __x,
  int __exponent,
);

typedef _c_logf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_logf = double Function(
  double __x,
);

typedef _c___logf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___logf = double Function(
  double __x,
);

typedef _c_log10f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_log10f = double Function(
  double __x,
);

typedef _c___log10f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___log10f = double Function(
  double __x,
);

typedef _c_modff = ffi.Float Function(
  ffi.Float __x,
  ffi.Pointer<ffi.Float> __iptr,
);

typedef _dart_modff = double Function(
  double __x,
  ffi.Pointer<ffi.Float> __iptr,
);

typedef _c___modff = ffi.Float Function(
  ffi.Float __x,
  ffi.Pointer<ffi.Float> __iptr,
);

typedef _dart___modff = double Function(
  double __x,
  ffi.Pointer<ffi.Float> __iptr,
);

typedef _c_expm1f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_expm1f = double Function(
  double __x,
);

typedef _c___expm1f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___expm1f = double Function(
  double __x,
);

typedef _c_log1pf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_log1pf = double Function(
  double __x,
);

typedef _c___log1pf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___log1pf = double Function(
  double __x,
);

typedef _c_logbf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_logbf = double Function(
  double __x,
);

typedef _c___logbf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___logbf = double Function(
  double __x,
);

typedef _c_exp2f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_exp2f = double Function(
  double __x,
);

typedef _c___exp2f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___exp2f = double Function(
  double __x,
);

typedef _c_log2f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_log2f = double Function(
  double __x,
);

typedef _c___log2f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___log2f = double Function(
  double __x,
);

typedef _c_powf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_powf = double Function(
  double __x,
  double __y,
);

typedef _c___powf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___powf = double Function(
  double __x,
  double __y,
);

typedef _c_sqrtf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_sqrtf = double Function(
  double __x,
);

typedef _c___sqrtf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___sqrtf = double Function(
  double __x,
);

typedef _c_hypotf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_hypotf = double Function(
  double __x,
  double __y,
);

typedef _c___hypotf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___hypotf = double Function(
  double __x,
  double __y,
);

typedef _c_cbrtf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_cbrtf = double Function(
  double __x,
);

typedef _c___cbrtf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___cbrtf = double Function(
  double __x,
);

typedef _c_ceilf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_ceilf = double Function(
  double __x,
);

typedef _c___ceilf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___ceilf = double Function(
  double __x,
);

typedef _c_fabsf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_fabsf = double Function(
  double __x,
);

typedef _c___fabsf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___fabsf = double Function(
  double __x,
);

typedef _c_floorf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_floorf = double Function(
  double __x,
);

typedef _c___floorf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___floorf = double Function(
  double __x,
);

typedef _c_fmodf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_fmodf = double Function(
  double __x,
  double __y,
);

typedef _c___fmodf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___fmodf = double Function(
  double __x,
  double __y,
);

typedef _c_isinff = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart_isinff = int Function(
  double __value,
);

typedef _c_finitef = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart_finitef = int Function(
  double __value,
);

typedef _c_dremf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_dremf = double Function(
  double __x,
  double __y,
);

typedef _c___dremf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___dremf = double Function(
  double __x,
  double __y,
);

typedef _c_significandf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_significandf = double Function(
  double __x,
);

typedef _c___significandf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___significandf = double Function(
  double __x,
);

typedef _c_copysignf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_copysignf = double Function(
  double __x,
  double __y,
);

typedef _c___copysignf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___copysignf = double Function(
  double __x,
  double __y,
);

typedef _c_nanf = ffi.Float Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _dart_nanf = double Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _c___nanf = ffi.Float Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _dart___nanf = double Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _c_isnanf = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart_isnanf = int Function(
  double __value,
);

typedef _c_j0f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_j0f = double Function(
  double arg0,
);

typedef _c___j0f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___j0f = double Function(
  double arg0,
);

typedef _c_j1f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_j1f = double Function(
  double arg0,
);

typedef _c___j1f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___j1f = double Function(
  double arg0,
);

typedef _c_jnf = ffi.Float Function(
  ffi.Int32 arg0,
  ffi.Float arg1,
);

typedef _dart_jnf = double Function(
  int arg0,
  double arg1,
);

typedef _c___jnf = ffi.Float Function(
  ffi.Int32 arg0,
  ffi.Float arg1,
);

typedef _dart___jnf = double Function(
  int arg0,
  double arg1,
);

typedef _c_y0f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_y0f = double Function(
  double arg0,
);

typedef _c___y0f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___y0f = double Function(
  double arg0,
);

typedef _c_y1f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_y1f = double Function(
  double arg0,
);

typedef _c___y1f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___y1f = double Function(
  double arg0,
);

typedef _c_ynf = ffi.Float Function(
  ffi.Int32 arg0,
  ffi.Float arg1,
);

typedef _dart_ynf = double Function(
  int arg0,
  double arg1,
);

typedef _c___ynf = ffi.Float Function(
  ffi.Int32 arg0,
  ffi.Float arg1,
);

typedef _dart___ynf = double Function(
  int arg0,
  double arg1,
);

typedef _c_erff = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_erff = double Function(
  double arg0,
);

typedef _c___erff = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___erff = double Function(
  double arg0,
);

typedef _c_erfcf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_erfcf = double Function(
  double arg0,
);

typedef _c___erfcf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___erfcf = double Function(
  double arg0,
);

typedef _c_lgammaf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_lgammaf = double Function(
  double arg0,
);

typedef _c___lgammaf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___lgammaf = double Function(
  double arg0,
);

typedef _c_tgammaf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_tgammaf = double Function(
  double arg0,
);

typedef _c___tgammaf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___tgammaf = double Function(
  double arg0,
);

typedef _c_gammaf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_gammaf = double Function(
  double arg0,
);

typedef _c___gammaf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___gammaf = double Function(
  double arg0,
);

typedef _c_lgammaf_r = ffi.Float Function(
  ffi.Float arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _dart_lgammaf_r = double Function(
  double arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _c___lgammaf_r = ffi.Float Function(
  ffi.Float arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _dart___lgammaf_r = double Function(
  double arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _c_rintf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_rintf = double Function(
  double __x,
);

typedef _c___rintf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___rintf = double Function(
  double __x,
);

typedef _c_nextafterf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_nextafterf = double Function(
  double __x,
  double __y,
);

typedef _c___nextafterf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___nextafterf = double Function(
  double __x,
  double __y,
);

typedef _c_remainderf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_remainderf = double Function(
  double __x,
  double __y,
);

typedef _c___remainderf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___remainderf = double Function(
  double __x,
  double __y,
);

typedef _c_scalbnf = ffi.Float Function(
  ffi.Float __x,
  ffi.Int32 __n,
);

typedef _dart_scalbnf = double Function(
  double __x,
  int __n,
);

typedef _c___scalbnf = ffi.Float Function(
  ffi.Float __x,
  ffi.Int32 __n,
);

typedef _dart___scalbnf = double Function(
  double __x,
  int __n,
);

typedef _c_ilogbf = ffi.Int32 Function(
  ffi.Float __x,
);

typedef _dart_ilogbf = int Function(
  double __x,
);

typedef _c___ilogbf = ffi.Int32 Function(
  ffi.Float __x,
);

typedef _dart___ilogbf = int Function(
  double __x,
);

typedef _c_scalblnf = ffi.Float Function(
  ffi.Float __x,
  ffi.Int64 __n,
);

typedef _dart_scalblnf = double Function(
  double __x,
  int __n,
);

typedef _c___scalblnf = ffi.Float Function(
  ffi.Float __x,
  ffi.Int64 __n,
);

typedef _dart___scalblnf = double Function(
  double __x,
  int __n,
);

typedef _c_nearbyintf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_nearbyintf = double Function(
  double __x,
);

typedef _c___nearbyintf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___nearbyintf = double Function(
  double __x,
);

typedef _c_roundf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_roundf = double Function(
  double __x,
);

typedef _c___roundf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___roundf = double Function(
  double __x,
);

typedef _c_truncf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_truncf = double Function(
  double __x,
);

typedef _c___truncf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___truncf = double Function(
  double __x,
);

typedef _c_remquof = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _dart_remquof = double Function(
  double __x,
  double __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _c___remquof = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _dart___remquof = double Function(
  double __x,
  double __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _c_lrintf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart_lrintf = int Function(
  double __x,
);

typedef _c___lrintf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart___lrintf = int Function(
  double __x,
);

typedef _c_llrintf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart_llrintf = int Function(
  double __x,
);

typedef _c___llrintf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart___llrintf = int Function(
  double __x,
);

typedef _c_lroundf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart_lroundf = int Function(
  double __x,
);

typedef _c___lroundf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart___lroundf = int Function(
  double __x,
);

typedef _c_llroundf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart_llroundf = int Function(
  double __x,
);

typedef _c___llroundf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart___llroundf = int Function(
  double __x,
);

typedef _c_fdimf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_fdimf = double Function(
  double __x,
  double __y,
);

typedef _c___fdimf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___fdimf = double Function(
  double __x,
  double __y,
);

typedef _c_fmaxf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_fmaxf = double Function(
  double __x,
  double __y,
);

typedef _c___fmaxf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___fmaxf = double Function(
  double __x,
  double __y,
);

typedef _c_fminf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_fminf = double Function(
  double __x,
  double __y,
);

typedef _c___fminf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___fminf = double Function(
  double __x,
  double __y,
);

typedef _c_fmaf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
  ffi.Float __z,
);

typedef _dart_fmaf = double Function(
  double __x,
  double __y,
  double __z,
);

typedef _c___fmaf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
  ffi.Float __z,
);

typedef _dart___fmaf = double Function(
  double __x,
  double __y,
  double __z,
);

typedef _c_scalbf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __n,
);

typedef _dart_scalbf = double Function(
  double __x,
  double __n,
);

typedef _c___scalbf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __n,
);

typedef _dart___scalbf = double Function(
  double __x,
  double __n,
);

typedef _c_SDL_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 size,
);

typedef _dart_SDL_malloc = ffi.Pointer<ffi.Void> Function(
  int size,
);

typedef _c_SDL_calloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 nmemb,
  ffi.Uint64 size,
);

typedef _dart_SDL_calloc = ffi.Pointer<ffi.Void> Function(
  int nmemb,
  int size,
);

typedef _c_SDL_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> mem,
  ffi.Uint64 size,
);

typedef _dart_SDL_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> mem,
  int size,
);

typedef _c_SDL_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> mem,
);

typedef _dart_SDL_free = void Function(
  ffi.Pointer<ffi.Void> mem,
);

typedef SDL_malloc_func = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64,
);

typedef SDL_calloc_func = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64,
  ffi.Uint64,
);

typedef SDL_realloc_func = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef SDL_free_func = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_SDL_GetMemoryFunctions = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<SDL_malloc_func>>> malloc_func,
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<SDL_calloc_func>>> calloc_func,
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<SDL_realloc_func>>> realloc_func,
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<SDL_free_func>>> free_func,
);

typedef _dart_SDL_GetMemoryFunctions = void Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<SDL_malloc_func>>> malloc_func,
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<SDL_calloc_func>>> calloc_func,
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<SDL_realloc_func>>> realloc_func,
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<SDL_free_func>>> free_func,
);

typedef _c_SDL_SetMemoryFunctions = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<SDL_malloc_func>> malloc_func,
  ffi.Pointer<ffi.NativeFunction<SDL_calloc_func>> calloc_func,
  ffi.Pointer<ffi.NativeFunction<SDL_realloc_func>> realloc_func,
  ffi.Pointer<ffi.NativeFunction<SDL_free_func>> free_func,
);

typedef _dart_SDL_SetMemoryFunctions = int Function(
  ffi.Pointer<ffi.NativeFunction<SDL_malloc_func>> malloc_func,
  ffi.Pointer<ffi.NativeFunction<SDL_calloc_func>> calloc_func,
  ffi.Pointer<ffi.NativeFunction<SDL_realloc_func>> realloc_func,
  ffi.Pointer<ffi.NativeFunction<SDL_free_func>> free_func,
);

typedef _c_SDL_GetNumAllocations = ffi.Int32 Function();

typedef _dart_SDL_GetNumAllocations = int Function();

typedef _c_SDL_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_SDL_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_SDL_setenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> value,
  ffi.Int32 overwrite,
);

typedef _dart_SDL_setenv = int Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> value,
  int overwrite,
);

typedef _typedefC_4 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_SDL_qsort = ffi.Void Function(
  ffi.Pointer<ffi.Void> base,
  ffi.Uint64 nmemb,
  ffi.Uint64 size,
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> compare,
);

typedef _dart_SDL_qsort = void Function(
  ffi.Pointer<ffi.Void> base,
  int nmemb,
  int size,
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> compare,
);

typedef _c_SDL_abs = ffi.Int32 Function(
  ffi.Int32 x,
);

typedef _dart_SDL_abs = int Function(
  int x,
);

typedef _c_SDL_isdigit = ffi.Int32 Function(
  ffi.Int32 x,
);

typedef _dart_SDL_isdigit = int Function(
  int x,
);

typedef _c_SDL_isspace = ffi.Int32 Function(
  ffi.Int32 x,
);

typedef _dart_SDL_isspace = int Function(
  int x,
);

typedef _c_SDL_isupper = ffi.Int32 Function(
  ffi.Int32 x,
);

typedef _dart_SDL_isupper = int Function(
  int x,
);

typedef _c_SDL_islower = ffi.Int32 Function(
  ffi.Int32 x,
);

typedef _dart_SDL_islower = int Function(
  int x,
);

typedef _c_SDL_toupper = ffi.Int32 Function(
  ffi.Int32 x,
);

typedef _dart_SDL_toupper = int Function(
  int x,
);

typedef _c_SDL_tolower = ffi.Int32 Function(
  ffi.Int32 x,
);

typedef _dart_SDL_tolower = int Function(
  int x,
);

typedef _c_SDL_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dst,
  ffi.Int32 c,
  ffi.Uint64 len,
);

typedef _dart_SDL_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dst,
  int c,
  int len,
);

typedef _c_SDL_memset4 = ffi.Void Function(
  ffi.Pointer<ffi.Void> dst,
  ffi.Uint32 val,
  ffi.Uint64 dwords,
);

typedef _dart_SDL_memset4 = void Function(
  ffi.Pointer<ffi.Void> dst,
  int val,
  int dwords,
);

typedef _c_SDL_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dst,
  ffi.Pointer<ffi.Void> src,
  ffi.Uint64 len,
);

typedef _dart_SDL_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dst,
  ffi.Pointer<ffi.Void> src,
  int len,
);

typedef _c_SDL_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dst,
  ffi.Pointer<ffi.Void> src,
  ffi.Uint64 len,
);

typedef _dart_SDL_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dst,
  ffi.Pointer<ffi.Void> src,
  int len,
);

typedef _c_SDL_memcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> s1,
  ffi.Pointer<ffi.Void> s2,
  ffi.Uint64 len,
);

typedef _dart_SDL_memcmp = int Function(
  ffi.Pointer<ffi.Void> s1,
  ffi.Pointer<ffi.Void> s2,
  int len,
);

typedef _c_SDL_wcslen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> wstr,
);

typedef _dart_SDL_wcslen = int Function(
  ffi.Pointer<ffi.Int32> wstr,
);

typedef _c_SDL_wcslcpy = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> dst,
  ffi.Pointer<ffi.Int32> src,
  ffi.Uint64 maxlen,
);

typedef _dart_SDL_wcslcpy = int Function(
  ffi.Pointer<ffi.Int32> dst,
  ffi.Pointer<ffi.Int32> src,
  int maxlen,
);

typedef _c_SDL_wcslcat = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> dst,
  ffi.Pointer<ffi.Int32> src,
  ffi.Uint64 maxlen,
);

typedef _dart_SDL_wcslcat = int Function(
  ffi.Pointer<ffi.Int32> dst,
  ffi.Pointer<ffi.Int32> src,
  int maxlen,
);

typedef _c_SDL_wcsdup = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> wstr,
);

typedef _dart_SDL_wcsdup = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> wstr,
);

typedef _c_SDL_wcsstr = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> haystack,
  ffi.Pointer<ffi.Int32> needle,
);

typedef _dart_SDL_wcsstr = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> haystack,
  ffi.Pointer<ffi.Int32> needle,
);

typedef _c_SDL_wcscmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> str1,
  ffi.Pointer<ffi.Int32> str2,
);

typedef _dart_SDL_wcscmp = int Function(
  ffi.Pointer<ffi.Int32> str1,
  ffi.Pointer<ffi.Int32> str2,
);

typedef _c_SDL_wcsncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> str1,
  ffi.Pointer<ffi.Int32> str2,
  ffi.Uint64 maxlen,
);

typedef _dart_SDL_wcsncmp = int Function(
  ffi.Pointer<ffi.Int32> str1,
  ffi.Pointer<ffi.Int32> str2,
  int maxlen,
);

typedef _c_SDL_strlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_SDL_strlen = int Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_SDL_strlcpy = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> dst,
  ffi.Pointer<ffi.Int8> src,
  ffi.Uint64 maxlen,
);

typedef _dart_SDL_strlcpy = int Function(
  ffi.Pointer<ffi.Int8> dst,
  ffi.Pointer<ffi.Int8> src,
  int maxlen,
);

typedef _c_SDL_utf8strlcpy = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> dst,
  ffi.Pointer<ffi.Int8> src,
  ffi.Uint64 dst_bytes,
);

typedef _dart_SDL_utf8strlcpy = int Function(
  ffi.Pointer<ffi.Int8> dst,
  ffi.Pointer<ffi.Int8> src,
  int dst_bytes,
);

typedef _c_SDL_strlcat = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> dst,
  ffi.Pointer<ffi.Int8> src,
  ffi.Uint64 maxlen,
);

typedef _dart_SDL_strlcat = int Function(
  ffi.Pointer<ffi.Int8> dst,
  ffi.Pointer<ffi.Int8> src,
  int maxlen,
);

typedef _c_SDL_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_SDL_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_SDL_strrev = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_SDL_strrev = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_SDL_strupr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_SDL_strupr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_SDL_strlwr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_SDL_strlwr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_SDL_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 c,
);

typedef _dart_SDL_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
  int c,
);

typedef _c_SDL_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 c,
);

typedef _dart_SDL_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
  int c,
);

typedef _c_SDL_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> haystack,
  ffi.Pointer<ffi.Int8> needle,
);

typedef _dart_SDL_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> haystack,
  ffi.Pointer<ffi.Int8> needle,
);

typedef _c_SDL_strtokr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> s1,
  ffi.Pointer<ffi.Int8> s2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> saveptr,
);

typedef _dart_SDL_strtokr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> s1,
  ffi.Pointer<ffi.Int8> s2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> saveptr,
);

typedef _c_SDL_utf8strlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_SDL_utf8strlen = int Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_SDL_itoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 value,
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 radix,
);

typedef _dart_SDL_itoa = ffi.Pointer<ffi.Int8> Function(
  int value,
  ffi.Pointer<ffi.Int8> str,
  int radix,
);

typedef _c_SDL_uitoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 value,
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 radix,
);

typedef _dart_SDL_uitoa = ffi.Pointer<ffi.Int8> Function(
  int value,
  ffi.Pointer<ffi.Int8> str,
  int radix,
);

typedef _c_SDL_ltoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 value,
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 radix,
);

typedef _dart_SDL_ltoa = ffi.Pointer<ffi.Int8> Function(
  int value,
  ffi.Pointer<ffi.Int8> str,
  int radix,
);

typedef _c_SDL_ultoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint64 value,
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 radix,
);

typedef _dart_SDL_ultoa = ffi.Pointer<ffi.Int8> Function(
  int value,
  ffi.Pointer<ffi.Int8> str,
  int radix,
);

typedef _c_SDL_lltoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 value,
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 radix,
);

typedef _dart_SDL_lltoa = ffi.Pointer<ffi.Int8> Function(
  int value,
  ffi.Pointer<ffi.Int8> str,
  int radix,
);

typedef _c_SDL_ulltoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint64 value,
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 radix,
);

typedef _dart_SDL_ulltoa = ffi.Pointer<ffi.Int8> Function(
  int value,
  ffi.Pointer<ffi.Int8> str,
  int radix,
);

typedef _c_SDL_atoi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_SDL_atoi = int Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_SDL_atof = ffi.Double Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_SDL_atof = double Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_SDL_strtol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> endp,
  ffi.Int32 base,
);

typedef _dart_SDL_strtol = int Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> endp,
  int base,
);

typedef _c_SDL_strtoul = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> endp,
  ffi.Int32 base,
);

typedef _dart_SDL_strtoul = int Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> endp,
  int base,
);

typedef _c_SDL_strtoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> endp,
  ffi.Int32 base,
);

typedef _dart_SDL_strtoll = int Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> endp,
  int base,
);

typedef _c_SDL_strtoull = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> endp,
  ffi.Int32 base,
);

typedef _dart_SDL_strtoull = int Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> endp,
  int base,
);

typedef _c_SDL_strtod = ffi.Double Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> endp,
);

typedef _dart_SDL_strtod = double Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> endp,
);

typedef _c_SDL_strcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str1,
  ffi.Pointer<ffi.Int8> str2,
);

typedef _dart_SDL_strcmp = int Function(
  ffi.Pointer<ffi.Int8> str1,
  ffi.Pointer<ffi.Int8> str2,
);

typedef _c_SDL_strncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str1,
  ffi.Pointer<ffi.Int8> str2,
  ffi.Uint64 maxlen,
);

typedef _dart_SDL_strncmp = int Function(
  ffi.Pointer<ffi.Int8> str1,
  ffi.Pointer<ffi.Int8> str2,
  int maxlen,
);

typedef _c_SDL_strcasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str1,
  ffi.Pointer<ffi.Int8> str2,
);

typedef _dart_SDL_strcasecmp = int Function(
  ffi.Pointer<ffi.Int8> str1,
  ffi.Pointer<ffi.Int8> str2,
);

typedef _c_SDL_strncasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str1,
  ffi.Pointer<ffi.Int8> str2,
  ffi.Uint64 len,
);

typedef _dart_SDL_strncasecmp = int Function(
  ffi.Pointer<ffi.Int8> str1,
  ffi.Pointer<ffi.Int8> str2,
  int len,
);

typedef _c_SDL_sscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_SDL_sscanf = int Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_SDL_vsscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int8> fmt,
  ffi.Pointer<__va_list_tag> ap,
);

typedef _dart_SDL_vsscanf = int Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int8> fmt,
  ffi.Pointer<__va_list_tag> ap,
);

typedef _c_SDL_snprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Uint64 maxlen,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_SDL_snprintf = int Function(
  ffi.Pointer<ffi.Int8> text,
  int maxlen,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_SDL_vsnprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Uint64 maxlen,
  ffi.Pointer<ffi.Int8> fmt,
  ffi.Pointer<__va_list_tag> ap,
);

typedef _dart_SDL_vsnprintf = int Function(
  ffi.Pointer<ffi.Int8> text,
  int maxlen,
  ffi.Pointer<ffi.Int8> fmt,
  ffi.Pointer<__va_list_tag> ap,
);

typedef _c_SDL_acos = ffi.Double Function(
  ffi.Double x,
);

typedef _dart_SDL_acos = double Function(
  double x,
);

typedef _c_SDL_acosf = ffi.Float Function(
  ffi.Float x,
);

typedef _dart_SDL_acosf = double Function(
  double x,
);

typedef _c_SDL_asin = ffi.Double Function(
  ffi.Double x,
);

typedef _dart_SDL_asin = double Function(
  double x,
);

typedef _c_SDL_asinf = ffi.Float Function(
  ffi.Float x,
);

typedef _dart_SDL_asinf = double Function(
  double x,
);

typedef _c_SDL_atan = ffi.Double Function(
  ffi.Double x,
);

typedef _dart_SDL_atan = double Function(
  double x,
);

typedef _c_SDL_atanf = ffi.Float Function(
  ffi.Float x,
);

typedef _dart_SDL_atanf = double Function(
  double x,
);

typedef _c_SDL_atan2 = ffi.Double Function(
  ffi.Double x,
  ffi.Double y,
);

typedef _dart_SDL_atan2 = double Function(
  double x,
  double y,
);

typedef _c_SDL_atan2f = ffi.Float Function(
  ffi.Float x,
  ffi.Float y,
);

typedef _dart_SDL_atan2f = double Function(
  double x,
  double y,
);

typedef _c_SDL_ceil = ffi.Double Function(
  ffi.Double x,
);

typedef _dart_SDL_ceil = double Function(
  double x,
);

typedef _c_SDL_ceilf = ffi.Float Function(
  ffi.Float x,
);

typedef _dart_SDL_ceilf = double Function(
  double x,
);

typedef _c_SDL_copysign = ffi.Double Function(
  ffi.Double x,
  ffi.Double y,
);

typedef _dart_SDL_copysign = double Function(
  double x,
  double y,
);

typedef _c_SDL_copysignf = ffi.Float Function(
  ffi.Float x,
  ffi.Float y,
);

typedef _dart_SDL_copysignf = double Function(
  double x,
  double y,
);

typedef _c_SDL_cos = ffi.Double Function(
  ffi.Double x,
);

typedef _dart_SDL_cos = double Function(
  double x,
);

typedef _c_SDL_cosf = ffi.Float Function(
  ffi.Float x,
);

typedef _dart_SDL_cosf = double Function(
  double x,
);

typedef _c_SDL_exp = ffi.Double Function(
  ffi.Double x,
);

typedef _dart_SDL_exp = double Function(
  double x,
);

typedef _c_SDL_expf = ffi.Float Function(
  ffi.Float x,
);

typedef _dart_SDL_expf = double Function(
  double x,
);

typedef _c_SDL_fabs = ffi.Double Function(
  ffi.Double x,
);

typedef _dart_SDL_fabs = double Function(
  double x,
);

typedef _c_SDL_fabsf = ffi.Float Function(
  ffi.Float x,
);

typedef _dart_SDL_fabsf = double Function(
  double x,
);

typedef _c_SDL_floor = ffi.Double Function(
  ffi.Double x,
);

typedef _dart_SDL_floor = double Function(
  double x,
);

typedef _c_SDL_floorf = ffi.Float Function(
  ffi.Float x,
);

typedef _dart_SDL_floorf = double Function(
  double x,
);

typedef _c_SDL_fmod = ffi.Double Function(
  ffi.Double x,
  ffi.Double y,
);

typedef _dart_SDL_fmod = double Function(
  double x,
  double y,
);

typedef _c_SDL_fmodf = ffi.Float Function(
  ffi.Float x,
  ffi.Float y,
);

typedef _dart_SDL_fmodf = double Function(
  double x,
  double y,
);

typedef _c_SDL_log = ffi.Double Function(
  ffi.Double x,
);

typedef _dart_SDL_log = double Function(
  double x,
);

typedef _c_SDL_logf = ffi.Float Function(
  ffi.Float x,
);

typedef _dart_SDL_logf = double Function(
  double x,
);

typedef _c_SDL_log10 = ffi.Double Function(
  ffi.Double x,
);

typedef _dart_SDL_log10 = double Function(
  double x,
);

typedef _c_SDL_log10f = ffi.Float Function(
  ffi.Float x,
);

typedef _dart_SDL_log10f = double Function(
  double x,
);

typedef _c_SDL_pow = ffi.Double Function(
  ffi.Double x,
  ffi.Double y,
);

typedef _dart_SDL_pow = double Function(
  double x,
  double y,
);

typedef _c_SDL_powf = ffi.Float Function(
  ffi.Float x,
  ffi.Float y,
);

typedef _dart_SDL_powf = double Function(
  double x,
  double y,
);

typedef _c_SDL_scalbn = ffi.Double Function(
  ffi.Double x,
  ffi.Int32 n,
);

typedef _dart_SDL_scalbn = double Function(
  double x,
  int n,
);

typedef _c_SDL_scalbnf = ffi.Float Function(
  ffi.Float x,
  ffi.Int32 n,
);

typedef _dart_SDL_scalbnf = double Function(
  double x,
  int n,
);

typedef _c_SDL_sin = ffi.Double Function(
  ffi.Double x,
);

typedef _dart_SDL_sin = double Function(
  double x,
);

typedef _c_SDL_sinf = ffi.Float Function(
  ffi.Float x,
);

typedef _dart_SDL_sinf = double Function(
  double x,
);

typedef _c_SDL_sqrt = ffi.Double Function(
  ffi.Double x,
);

typedef _dart_SDL_sqrt = double Function(
  double x,
);

typedef _c_SDL_sqrtf = ffi.Float Function(
  ffi.Float x,
);

typedef _dart_SDL_sqrtf = double Function(
  double x,
);

typedef _c_SDL_tan = ffi.Double Function(
  ffi.Double x,
);

typedef _dart_SDL_tan = double Function(
  double x,
);

typedef _c_SDL_tanf = ffi.Float Function(
  ffi.Float x,
);

typedef _dart_SDL_tanf = double Function(
  double x,
);

typedef _c_SDL_iconv_open = ffi.Pointer<_SDL_iconv_t> Function(
  ffi.Pointer<ffi.Int8> tocode,
  ffi.Pointer<ffi.Int8> fromcode,
);

typedef _dart_SDL_iconv_open = ffi.Pointer<_SDL_iconv_t> Function(
  ffi.Pointer<ffi.Int8> tocode,
  ffi.Pointer<ffi.Int8> fromcode,
);

typedef _c_SDL_iconv_close = ffi.Int32 Function(
  ffi.Pointer<_SDL_iconv_t> cd,
);

typedef _dart_SDL_iconv_close = int Function(
  ffi.Pointer<_SDL_iconv_t> cd,
);

typedef _c_SDL_iconv = ffi.Uint64 Function(
  ffi.Pointer<_SDL_iconv_t> cd,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> inbuf,
  ffi.Pointer<ffi.Uint64> inbytesleft,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> outbuf,
  ffi.Pointer<ffi.Uint64> outbytesleft,
);

typedef _dart_SDL_iconv = int Function(
  ffi.Pointer<_SDL_iconv_t> cd,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> inbuf,
  ffi.Pointer<ffi.Uint64> inbytesleft,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> outbuf,
  ffi.Pointer<ffi.Uint64> outbytesleft,
);

typedef _c_SDL_iconv_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> tocode,
  ffi.Pointer<ffi.Int8> fromcode,
  ffi.Pointer<ffi.Int8> inbuf,
  ffi.Uint64 inbytesleft,
);

typedef _dart_SDL_iconv_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> tocode,
  ffi.Pointer<ffi.Int8> fromcode,
  ffi.Pointer<ffi.Int8> inbuf,
  int inbytesleft,
);

typedef _c_SDL_memcpy4 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dst,
  ffi.Pointer<ffi.Void> src,
  ffi.Uint64 dwords,
);

typedef _dart_SDL_memcpy4 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dst,
  ffi.Pointer<ffi.Void> src,
  int dwords,
);

typedef _c_SDL_SetError = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_SDL_SetError = int Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_SDL_GetError = ffi.Pointer<ffi.Int8> Function();

typedef _dart_SDL_GetError = ffi.Pointer<ffi.Int8> Function();

typedef _c_SDL_ClearError = ffi.Void Function();

typedef _dart_SDL_ClearError = void Function();

typedef _c_SDL_Error = ffi.Int32 Function(
  ffi.Int32 code,
);

typedef _dart_SDL_Error = int Function(
  int code,
);

typedef _c_SDL_Swap16 = ffi.Uint16 Function(
  ffi.Uint16 x,
);

typedef _dart_SDL_Swap16 = int Function(
  int x,
);

typedef _c_SDL_Swap32 = ffi.Uint32 Function(
  ffi.Uint32 x,
);

typedef _dart_SDL_Swap32 = int Function(
  int x,
);

typedef _c_SDL_Swap64 = ffi.Uint64 Function(
  ffi.Uint64 x,
);

typedef _dart_SDL_Swap64 = int Function(
  int x,
);

typedef _c_SDL_SwapFloat = ffi.Float Function(
  ffi.Float x,
);

typedef _dart_SDL_SwapFloat = double Function(
  double x,
);

typedef _c_SDL_CreateMutex = ffi.Pointer<SDL_mutex> Function();

typedef _dart_SDL_CreateMutex = ffi.Pointer<SDL_mutex> Function();

typedef _c_SDL_LockMutex = ffi.Int32 Function(
  ffi.Pointer<SDL_mutex> mutex,
);

typedef _dart_SDL_LockMutex = int Function(
  ffi.Pointer<SDL_mutex> mutex,
);

typedef _c_SDL_TryLockMutex = ffi.Int32 Function(
  ffi.Pointer<SDL_mutex> mutex,
);

typedef _dart_SDL_TryLockMutex = int Function(
  ffi.Pointer<SDL_mutex> mutex,
);

typedef _c_SDL_UnlockMutex = ffi.Int32 Function(
  ffi.Pointer<SDL_mutex> mutex,
);

typedef _dart_SDL_UnlockMutex = int Function(
  ffi.Pointer<SDL_mutex> mutex,
);

typedef _c_SDL_DestroyMutex = ffi.Void Function(
  ffi.Pointer<SDL_mutex> mutex,
);

typedef _dart_SDL_DestroyMutex = void Function(
  ffi.Pointer<SDL_mutex> mutex,
);

typedef _c_SDL_CreateSemaphore = ffi.Pointer<SDL_semaphore> Function(
  ffi.Uint32 initial_value,
);

typedef _dart_SDL_CreateSemaphore = ffi.Pointer<SDL_semaphore> Function(
  int initial_value,
);

typedef _c_SDL_DestroySemaphore = ffi.Void Function(
  ffi.Pointer<SDL_semaphore> sem,
);

typedef _dart_SDL_DestroySemaphore = void Function(
  ffi.Pointer<SDL_semaphore> sem,
);

typedef _c_SDL_SemWait = ffi.Int32 Function(
  ffi.Pointer<SDL_semaphore> sem,
);

typedef _dart_SDL_SemWait = int Function(
  ffi.Pointer<SDL_semaphore> sem,
);

typedef _c_SDL_SemTryWait = ffi.Int32 Function(
  ffi.Pointer<SDL_semaphore> sem,
);

typedef _dart_SDL_SemTryWait = int Function(
  ffi.Pointer<SDL_semaphore> sem,
);

typedef _c_SDL_SemWaitTimeout = ffi.Int32 Function(
  ffi.Pointer<SDL_semaphore> sem,
  ffi.Uint32 ms,
);

typedef _dart_SDL_SemWaitTimeout = int Function(
  ffi.Pointer<SDL_semaphore> sem,
  int ms,
);

typedef _c_SDL_SemPost = ffi.Int32 Function(
  ffi.Pointer<SDL_semaphore> sem,
);

typedef _dart_SDL_SemPost = int Function(
  ffi.Pointer<SDL_semaphore> sem,
);

typedef _c_SDL_SemValue = ffi.Uint32 Function(
  ffi.Pointer<SDL_semaphore> sem,
);

typedef _dart_SDL_SemValue = int Function(
  ffi.Pointer<SDL_semaphore> sem,
);

typedef _c_SDL_CreateCond = ffi.Pointer<SDL_cond> Function();

typedef _dart_SDL_CreateCond = ffi.Pointer<SDL_cond> Function();

typedef _c_SDL_DestroyCond = ffi.Void Function(
  ffi.Pointer<SDL_cond> cond,
);

typedef _dart_SDL_DestroyCond = void Function(
  ffi.Pointer<SDL_cond> cond,
);

typedef _c_SDL_CondSignal = ffi.Int32 Function(
  ffi.Pointer<SDL_cond> cond,
);

typedef _dart_SDL_CondSignal = int Function(
  ffi.Pointer<SDL_cond> cond,
);

typedef _c_SDL_CondBroadcast = ffi.Int32 Function(
  ffi.Pointer<SDL_cond> cond,
);

typedef _dart_SDL_CondBroadcast = int Function(
  ffi.Pointer<SDL_cond> cond,
);

typedef _c_SDL_CondWait = ffi.Int32 Function(
  ffi.Pointer<SDL_cond> cond,
  ffi.Pointer<SDL_mutex> mutex,
);

typedef _dart_SDL_CondWait = int Function(
  ffi.Pointer<SDL_cond> cond,
  ffi.Pointer<SDL_mutex> mutex,
);

typedef _c_SDL_CondWaitTimeout = ffi.Int32 Function(
  ffi.Pointer<SDL_cond> cond,
  ffi.Pointer<SDL_mutex> mutex,
  ffi.Uint32 ms,
);

typedef _dart_SDL_CondWaitTimeout = int Function(
  ffi.Pointer<SDL_cond> cond,
  ffi.Pointer<SDL_mutex> mutex,
  int ms,
);

typedef _c_SDL_AtomicTryLock = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> lock,
);

typedef _dart_SDL_AtomicTryLock = int Function(
  ffi.Pointer<ffi.Int32> lock,
);

typedef _c_SDL_AtomicLock = ffi.Void Function(
  ffi.Pointer<ffi.Int32> lock,
);

typedef _dart_SDL_AtomicLock = void Function(
  ffi.Pointer<ffi.Int32> lock,
);

typedef _c_SDL_AtomicUnlock = ffi.Void Function(
  ffi.Pointer<ffi.Int32> lock,
);

typedef _dart_SDL_AtomicUnlock = void Function(
  ffi.Pointer<ffi.Int32> lock,
);

typedef _c_SDL_MemoryBarrierReleaseFunction = ffi.Void Function();

typedef _dart_SDL_MemoryBarrierReleaseFunction = void Function();

typedef _c_SDL_MemoryBarrierAcquireFunction = ffi.Void Function();

typedef _dart_SDL_MemoryBarrierAcquireFunction = void Function();

typedef _c_SDL_AtomicCAS = ffi.Int32 Function(
  ffi.Pointer<SDL_atomic_t> a,
  ffi.Int32 oldval,
  ffi.Int32 newval,
);

typedef _dart_SDL_AtomicCAS = int Function(
  ffi.Pointer<SDL_atomic_t> a,
  int oldval,
  int newval,
);

typedef _c_SDL_AtomicSet = ffi.Int32 Function(
  ffi.Pointer<SDL_atomic_t> a,
  ffi.Int32 v,
);

typedef _dart_SDL_AtomicSet = int Function(
  ffi.Pointer<SDL_atomic_t> a,
  int v,
);

typedef _c_SDL_AtomicGet = ffi.Int32 Function(
  ffi.Pointer<SDL_atomic_t> a,
);

typedef _dart_SDL_AtomicGet = int Function(
  ffi.Pointer<SDL_atomic_t> a,
);

typedef _c_SDL_AtomicAdd = ffi.Int32 Function(
  ffi.Pointer<SDL_atomic_t> a,
  ffi.Int32 v,
);

typedef _dart_SDL_AtomicAdd = int Function(
  ffi.Pointer<SDL_atomic_t> a,
  int v,
);

typedef _c_SDL_AtomicCASPtr = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> a,
  ffi.Pointer<ffi.Void> oldval,
  ffi.Pointer<ffi.Void> newval,
);

typedef _dart_SDL_AtomicCASPtr = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> a,
  ffi.Pointer<ffi.Void> oldval,
  ffi.Pointer<ffi.Void> newval,
);

typedef _c_SDL_AtomicSetPtr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> a,
  ffi.Pointer<ffi.Void> v,
);

typedef _dart_SDL_AtomicSetPtr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> a,
  ffi.Pointer<ffi.Void> v,
);

typedef _c_SDL_AtomicGetPtr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> a,
);

typedef _dart_SDL_AtomicGetPtr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> a,
);

typedef SDL_ThreadFunction = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_SDL_CreateThread = ffi.Pointer<SDL_Thread> Function(
  ffi.Pointer<ffi.NativeFunction<SDL_ThreadFunction>> fn,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_SDL_CreateThread = ffi.Pointer<SDL_Thread> Function(
  ffi.Pointer<ffi.NativeFunction<SDL_ThreadFunction>> fn,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_SDL_CreateThreadWithStackSize = ffi.Pointer<SDL_Thread> Function(
  ffi.Pointer<ffi.NativeFunction<SDL_ThreadFunction>> fn,
  ffi.Pointer<ffi.Int8> name,
  ffi.Uint64 stacksize,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_SDL_CreateThreadWithStackSize = ffi.Pointer<SDL_Thread> Function(
  ffi.Pointer<ffi.NativeFunction<SDL_ThreadFunction>> fn,
  ffi.Pointer<ffi.Int8> name,
  int stacksize,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_SDL_GetThreadName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<SDL_Thread> thread,
);

typedef _dart_SDL_GetThreadName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<SDL_Thread> thread,
);

typedef _c_SDL_ThreadID = ffi.Uint64 Function();

typedef _dart_SDL_ThreadID = int Function();

typedef _c_SDL_GetThreadID = ffi.Uint64 Function(
  ffi.Pointer<SDL_Thread> thread,
);

typedef _dart_SDL_GetThreadID = int Function(
  ffi.Pointer<SDL_Thread> thread,
);

typedef _c_SDL_SetThreadPriority = ffi.Int32 Function(
  ffi.Int32 priority,
);

typedef _dart_SDL_SetThreadPriority = int Function(
  int priority,
);

typedef _c_SDL_WaitThread = ffi.Void Function(
  ffi.Pointer<SDL_Thread> thread,
  ffi.Pointer<ffi.Int32> status,
);

typedef _dart_SDL_WaitThread = void Function(
  ffi.Pointer<SDL_Thread> thread,
  ffi.Pointer<ffi.Int32> status,
);

typedef _c_SDL_DetachThread = ffi.Void Function(
  ffi.Pointer<SDL_Thread> thread,
);

typedef _dart_SDL_DetachThread = void Function(
  ffi.Pointer<SDL_Thread> thread,
);

typedef _c_SDL_TLSCreate = ffi.Uint32 Function();

typedef _dart_SDL_TLSCreate = int Function();

typedef _c_SDL_TLSGet = ffi.Pointer<ffi.Void> Function(
  ffi.Uint32 id,
);

typedef _dart_SDL_TLSGet = ffi.Pointer<ffi.Void> Function(
  int id,
);

typedef _typedefC_5 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_SDL_TLSSet = ffi.Int32 Function(
  ffi.Uint32 id,
  ffi.Pointer<ffi.Void> value,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> destructor,
);

typedef _dart_SDL_TLSSet = int Function(
  int id,
  ffi.Pointer<ffi.Void> value,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> destructor,
);

typedef _c_SDL_RWFromFile = ffi.Pointer<SDL_RWops> Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _dart_SDL_RWFromFile = ffi.Pointer<SDL_RWops> Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _c_SDL_RWFromFP = ffi.Pointer<SDL_RWops> Function(
  ffi.Pointer<_IO_FILE> fp,
  ffi.Int32 autoclose,
);

typedef _dart_SDL_RWFromFP = ffi.Pointer<SDL_RWops> Function(
  ffi.Pointer<_IO_FILE> fp,
  int autoclose,
);

typedef _c_SDL_RWFromMem = ffi.Pointer<SDL_RWops> Function(
  ffi.Pointer<ffi.Void> mem,
  ffi.Int32 size,
);

typedef _dart_SDL_RWFromMem = ffi.Pointer<SDL_RWops> Function(
  ffi.Pointer<ffi.Void> mem,
  int size,
);

typedef _c_SDL_RWFromConstMem = ffi.Pointer<SDL_RWops> Function(
  ffi.Pointer<ffi.Void> mem,
  ffi.Int32 size,
);

typedef _dart_SDL_RWFromConstMem = ffi.Pointer<SDL_RWops> Function(
  ffi.Pointer<ffi.Void> mem,
  int size,
);

typedef _c_SDL_AllocRW = ffi.Pointer<SDL_RWops> Function();

typedef _dart_SDL_AllocRW = ffi.Pointer<SDL_RWops> Function();

typedef _c_SDL_FreeRW = ffi.Void Function(
  ffi.Pointer<SDL_RWops> area,
);

typedef _dart_SDL_FreeRW = void Function(
  ffi.Pointer<SDL_RWops> area,
);

typedef _c_SDL_RWsize = ffi.Int64 Function(
  ffi.Pointer<SDL_RWops> context,
);

typedef _dart_SDL_RWsize = int Function(
  ffi.Pointer<SDL_RWops> context,
);

typedef _c_SDL_RWseek = ffi.Int64 Function(
  ffi.Pointer<SDL_RWops> context,
  ffi.Int64 offset,
  ffi.Int32 whence,
);

typedef _dart_SDL_RWseek = int Function(
  ffi.Pointer<SDL_RWops> context,
  int offset,
  int whence,
);

typedef _c_SDL_RWtell = ffi.Int64 Function(
  ffi.Pointer<SDL_RWops> context,
);

typedef _dart_SDL_RWtell = int Function(
  ffi.Pointer<SDL_RWops> context,
);

typedef _c_SDL_RWread = ffi.Uint64 Function(
  ffi.Pointer<SDL_RWops> context,
  ffi.Pointer<ffi.Void> ptr,
  ffi.Uint64 size,
  ffi.Uint64 maxnum,
);

typedef _dart_SDL_RWread = int Function(
  ffi.Pointer<SDL_RWops> context,
  ffi.Pointer<ffi.Void> ptr,
  int size,
  int maxnum,
);

typedef _c_SDL_RWwrite = ffi.Uint64 Function(
  ffi.Pointer<SDL_RWops> context,
  ffi.Pointer<ffi.Void> ptr,
  ffi.Uint64 size,
  ffi.Uint64 num,
);

typedef _dart_SDL_RWwrite = int Function(
  ffi.Pointer<SDL_RWops> context,
  ffi.Pointer<ffi.Void> ptr,
  int size,
  int num,
);

typedef _c_SDL_RWclose = ffi.Int32 Function(
  ffi.Pointer<SDL_RWops> context,
);

typedef _dart_SDL_RWclose = int Function(
  ffi.Pointer<SDL_RWops> context,
);

typedef _c_SDL_LoadFile_RW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SDL_RWops> src,
  ffi.Pointer<ffi.Uint64> datasize,
  ffi.Int32 freesrc,
);

typedef _dart_SDL_LoadFile_RW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SDL_RWops> src,
  ffi.Pointer<ffi.Uint64> datasize,
  int freesrc,
);

typedef _c_SDL_LoadFile = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Uint64> datasize,
);

typedef _dart_SDL_LoadFile = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Uint64> datasize,
);

typedef _c_SDL_ReadU8 = ffi.Uint8 Function(
  ffi.Pointer<SDL_RWops> src,
);

typedef _dart_SDL_ReadU8 = int Function(
  ffi.Pointer<SDL_RWops> src,
);

typedef _c_SDL_ReadLE16 = ffi.Uint16 Function(
  ffi.Pointer<SDL_RWops> src,
);

typedef _dart_SDL_ReadLE16 = int Function(
  ffi.Pointer<SDL_RWops> src,
);

typedef _c_SDL_ReadBE16 = ffi.Uint16 Function(
  ffi.Pointer<SDL_RWops> src,
);

typedef _dart_SDL_ReadBE16 = int Function(
  ffi.Pointer<SDL_RWops> src,
);

typedef _c_SDL_ReadLE32 = ffi.Uint32 Function(
  ffi.Pointer<SDL_RWops> src,
);

typedef _dart_SDL_ReadLE32 = int Function(
  ffi.Pointer<SDL_RWops> src,
);

typedef _c_SDL_ReadBE32 = ffi.Uint32 Function(
  ffi.Pointer<SDL_RWops> src,
);

typedef _dart_SDL_ReadBE32 = int Function(
  ffi.Pointer<SDL_RWops> src,
);

typedef _c_SDL_ReadLE64 = ffi.Uint64 Function(
  ffi.Pointer<SDL_RWops> src,
);

typedef _dart_SDL_ReadLE64 = int Function(
  ffi.Pointer<SDL_RWops> src,
);

typedef _c_SDL_ReadBE64 = ffi.Uint64 Function(
  ffi.Pointer<SDL_RWops> src,
);

typedef _dart_SDL_ReadBE64 = int Function(
  ffi.Pointer<SDL_RWops> src,
);

typedef _c_SDL_WriteU8 = ffi.Uint64 Function(
  ffi.Pointer<SDL_RWops> dst,
  ffi.Uint8 value,
);

typedef _dart_SDL_WriteU8 = int Function(
  ffi.Pointer<SDL_RWops> dst,
  int value,
);

typedef _c_SDL_WriteLE16 = ffi.Uint64 Function(
  ffi.Pointer<SDL_RWops> dst,
  ffi.Uint16 value,
);

typedef _dart_SDL_WriteLE16 = int Function(
  ffi.Pointer<SDL_RWops> dst,
  int value,
);

typedef _c_SDL_WriteBE16 = ffi.Uint64 Function(
  ffi.Pointer<SDL_RWops> dst,
  ffi.Uint16 value,
);

typedef _dart_SDL_WriteBE16 = int Function(
  ffi.Pointer<SDL_RWops> dst,
  int value,
);

typedef _c_SDL_WriteLE32 = ffi.Uint64 Function(
  ffi.Pointer<SDL_RWops> dst,
  ffi.Uint32 value,
);

typedef _dart_SDL_WriteLE32 = int Function(
  ffi.Pointer<SDL_RWops> dst,
  int value,
);

typedef _c_SDL_WriteBE32 = ffi.Uint64 Function(
  ffi.Pointer<SDL_RWops> dst,
  ffi.Uint32 value,
);

typedef _dart_SDL_WriteBE32 = int Function(
  ffi.Pointer<SDL_RWops> dst,
  int value,
);

typedef _c_SDL_WriteLE64 = ffi.Uint64 Function(
  ffi.Pointer<SDL_RWops> dst,
  ffi.Uint64 value,
);

typedef _dart_SDL_WriteLE64 = int Function(
  ffi.Pointer<SDL_RWops> dst,
  int value,
);

typedef _c_SDL_WriteBE64 = ffi.Uint64 Function(
  ffi.Pointer<SDL_RWops> dst,
  ffi.Uint64 value,
);

typedef _dart_SDL_WriteBE64 = int Function(
  ffi.Pointer<SDL_RWops> dst,
  int value,
);

typedef _c_SDL_GetNumAudioDrivers = ffi.Int32 Function();

typedef _dart_SDL_GetNumAudioDrivers = int Function();

typedef _c_SDL_GetAudioDriver = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 index,
);

typedef _dart_SDL_GetAudioDriver = ffi.Pointer<ffi.Int8> Function(
  int index,
);

typedef _c_SDL_AudioInit = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> driver_name,
);

typedef _dart_SDL_AudioInit = int Function(
  ffi.Pointer<ffi.Int8> driver_name,
);

typedef _c_SDL_AudioQuit = ffi.Void Function();

typedef _dart_SDL_AudioQuit = void Function();

typedef _c_SDL_GetCurrentAudioDriver = ffi.Pointer<ffi.Int8> Function();

typedef _dart_SDL_GetCurrentAudioDriver = ffi.Pointer<ffi.Int8> Function();

typedef _c_SDL_OpenAudio = ffi.Int32 Function(
  ffi.Pointer<SDL_AudioSpec> desired,
  ffi.Pointer<SDL_AudioSpec> obtained,
);

typedef _dart_SDL_OpenAudio = int Function(
  ffi.Pointer<SDL_AudioSpec> desired,
  ffi.Pointer<SDL_AudioSpec> obtained,
);

typedef _c_SDL_GetNumAudioDevices = ffi.Int32 Function(
  ffi.Int32 iscapture,
);

typedef _dart_SDL_GetNumAudioDevices = int Function(
  int iscapture,
);

typedef _c_SDL_GetAudioDeviceName = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 index,
  ffi.Int32 iscapture,
);

typedef _dart_SDL_GetAudioDeviceName = ffi.Pointer<ffi.Int8> Function(
  int index,
  int iscapture,
);

typedef _c_SDL_OpenAudioDevice = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Int32 iscapture,
  ffi.Pointer<SDL_AudioSpec> desired,
  ffi.Pointer<SDL_AudioSpec> obtained,
  ffi.Int32 allowed_changes,
);

typedef _dart_SDL_OpenAudioDevice = int Function(
  ffi.Pointer<ffi.Int8> device,
  int iscapture,
  ffi.Pointer<SDL_AudioSpec> desired,
  ffi.Pointer<SDL_AudioSpec> obtained,
  int allowed_changes,
);

typedef _c_SDL_GetAudioStatus = ffi.Int32 Function();

typedef _dart_SDL_GetAudioStatus = int Function();

typedef _c_SDL_GetAudioDeviceStatus = ffi.Int32 Function(
  ffi.Uint32 dev,
);

typedef _dart_SDL_GetAudioDeviceStatus = int Function(
  int dev,
);

typedef _c_SDL_PauseAudio = ffi.Void Function(
  ffi.Int32 pause_on,
);

typedef _dart_SDL_PauseAudio = void Function(
  int pause_on,
);

typedef _c_SDL_PauseAudioDevice = ffi.Void Function(
  ffi.Uint32 dev,
  ffi.Int32 pause_on,
);

typedef _dart_SDL_PauseAudioDevice = void Function(
  int dev,
  int pause_on,
);

typedef _c_SDL_LoadWAV_RW = ffi.Pointer<SDL_AudioSpec> Function(
  ffi.Pointer<SDL_RWops> src,
  ffi.Int32 freesrc,
  ffi.Pointer<SDL_AudioSpec> spec,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> audio_buf,
  ffi.Pointer<ffi.Uint32> audio_len,
);

typedef _dart_SDL_LoadWAV_RW = ffi.Pointer<SDL_AudioSpec> Function(
  ffi.Pointer<SDL_RWops> src,
  int freesrc,
  ffi.Pointer<SDL_AudioSpec> spec,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> audio_buf,
  ffi.Pointer<ffi.Uint32> audio_len,
);

typedef _c_SDL_FreeWAV = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> audio_buf,
);

typedef _dart_SDL_FreeWAV = void Function(
  ffi.Pointer<ffi.Uint8> audio_buf,
);

typedef _c_SDL_BuildAudioCVT = ffi.Int32 Function(
  ffi.Pointer<SDL_AudioCVT> cvt,
  ffi.Uint16 src_format,
  ffi.Uint8 src_channels,
  ffi.Int32 src_rate,
  ffi.Uint16 dst_format,
  ffi.Uint8 dst_channels,
  ffi.Int32 dst_rate,
);

typedef _dart_SDL_BuildAudioCVT = int Function(
  ffi.Pointer<SDL_AudioCVT> cvt,
  int src_format,
  int src_channels,
  int src_rate,
  int dst_format,
  int dst_channels,
  int dst_rate,
);

typedef _c_SDL_ConvertAudio = ffi.Int32 Function(
  ffi.Pointer<SDL_AudioCVT> cvt,
);

typedef _dart_SDL_ConvertAudio = int Function(
  ffi.Pointer<SDL_AudioCVT> cvt,
);

typedef _c_SDL_NewAudioStream = ffi.Pointer<_SDL_AudioStream> Function(
  ffi.Uint16 src_format,
  ffi.Uint8 src_channels,
  ffi.Int32 src_rate,
  ffi.Uint16 dst_format,
  ffi.Uint8 dst_channels,
  ffi.Int32 dst_rate,
);

typedef _dart_SDL_NewAudioStream = ffi.Pointer<_SDL_AudioStream> Function(
  int src_format,
  int src_channels,
  int src_rate,
  int dst_format,
  int dst_channels,
  int dst_rate,
);

typedef _c_SDL_AudioStreamPut = ffi.Int32 Function(
  ffi.Pointer<_SDL_AudioStream> stream,
  ffi.Pointer<ffi.Void> buf,
  ffi.Int32 len,
);

typedef _dart_SDL_AudioStreamPut = int Function(
  ffi.Pointer<_SDL_AudioStream> stream,
  ffi.Pointer<ffi.Void> buf,
  int len,
);

typedef _c_SDL_AudioStreamGet = ffi.Int32 Function(
  ffi.Pointer<_SDL_AudioStream> stream,
  ffi.Pointer<ffi.Void> buf,
  ffi.Int32 len,
);

typedef _dart_SDL_AudioStreamGet = int Function(
  ffi.Pointer<_SDL_AudioStream> stream,
  ffi.Pointer<ffi.Void> buf,
  int len,
);

typedef _c_SDL_AudioStreamAvailable = ffi.Int32 Function(
  ffi.Pointer<_SDL_AudioStream> stream,
);

typedef _dart_SDL_AudioStreamAvailable = int Function(
  ffi.Pointer<_SDL_AudioStream> stream,
);

typedef _c_SDL_AudioStreamFlush = ffi.Int32 Function(
  ffi.Pointer<_SDL_AudioStream> stream,
);

typedef _dart_SDL_AudioStreamFlush = int Function(
  ffi.Pointer<_SDL_AudioStream> stream,
);

typedef _c_SDL_AudioStreamClear = ffi.Void Function(
  ffi.Pointer<_SDL_AudioStream> stream,
);

typedef _dart_SDL_AudioStreamClear = void Function(
  ffi.Pointer<_SDL_AudioStream> stream,
);

typedef _c_SDL_FreeAudioStream = ffi.Void Function(
  ffi.Pointer<_SDL_AudioStream> stream,
);

typedef _dart_SDL_FreeAudioStream = void Function(
  ffi.Pointer<_SDL_AudioStream> stream,
);

typedef _c_SDL_MixAudio = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> dst,
  ffi.Pointer<ffi.Uint8> src,
  ffi.Uint32 len,
  ffi.Int32 volume,
);

typedef _dart_SDL_MixAudio = void Function(
  ffi.Pointer<ffi.Uint8> dst,
  ffi.Pointer<ffi.Uint8> src,
  int len,
  int volume,
);

typedef _c_SDL_MixAudioFormat = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> dst,
  ffi.Pointer<ffi.Uint8> src,
  ffi.Uint16 format,
  ffi.Uint32 len,
  ffi.Int32 volume,
);

typedef _dart_SDL_MixAudioFormat = void Function(
  ffi.Pointer<ffi.Uint8> dst,
  ffi.Pointer<ffi.Uint8> src,
  int format,
  int len,
  int volume,
);

typedef _c_SDL_QueueAudio = ffi.Int32 Function(
  ffi.Uint32 dev,
  ffi.Pointer<ffi.Void> data,
  ffi.Uint32 len,
);

typedef _dart_SDL_QueueAudio = int Function(
  int dev,
  ffi.Pointer<ffi.Void> data,
  int len,
);

typedef _c_SDL_DequeueAudio = ffi.Uint32 Function(
  ffi.Uint32 dev,
  ffi.Pointer<ffi.Void> data,
  ffi.Uint32 len,
);

typedef _dart_SDL_DequeueAudio = int Function(
  int dev,
  ffi.Pointer<ffi.Void> data,
  int len,
);

typedef _c_SDL_GetQueuedAudioSize = ffi.Uint32 Function(
  ffi.Uint32 dev,
);

typedef _dart_SDL_GetQueuedAudioSize = int Function(
  int dev,
);

typedef _c_SDL_ClearQueuedAudio = ffi.Void Function(
  ffi.Uint32 dev,
);

typedef _dart_SDL_ClearQueuedAudio = void Function(
  int dev,
);

typedef _c_SDL_LockAudio = ffi.Void Function();

typedef _dart_SDL_LockAudio = void Function();

typedef _c_SDL_LockAudioDevice = ffi.Void Function(
  ffi.Uint32 dev,
);

typedef _dart_SDL_LockAudioDevice = void Function(
  int dev,
);

typedef _c_SDL_UnlockAudio = ffi.Void Function();

typedef _dart_SDL_UnlockAudio = void Function();

typedef _c_SDL_UnlockAudioDevice = ffi.Void Function(
  ffi.Uint32 dev,
);

typedef _dart_SDL_UnlockAudioDevice = void Function(
  int dev,
);

typedef _c_SDL_CloseAudio = ffi.Void Function();

typedef _dart_SDL_CloseAudio = void Function();

typedef _c_SDL_CloseAudioDevice = ffi.Void Function(
  ffi.Uint32 dev,
);

typedef _dart_SDL_CloseAudioDevice = void Function(
  int dev,
);

typedef _c_SDL_GetPixelFormatName = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 format,
);

typedef _dart_SDL_GetPixelFormatName = ffi.Pointer<ffi.Int8> Function(
  int format,
);

typedef _c_SDL_PixelFormatEnumToMasks = ffi.Int32 Function(
  ffi.Uint32 format,
  ffi.Pointer<ffi.Int32> bpp,
  ffi.Pointer<ffi.Uint32> Rmask,
  ffi.Pointer<ffi.Uint32> Gmask,
  ffi.Pointer<ffi.Uint32> Bmask,
  ffi.Pointer<ffi.Uint32> Amask,
);

typedef _dart_SDL_PixelFormatEnumToMasks = int Function(
  int format,
  ffi.Pointer<ffi.Int32> bpp,
  ffi.Pointer<ffi.Uint32> Rmask,
  ffi.Pointer<ffi.Uint32> Gmask,
  ffi.Pointer<ffi.Uint32> Bmask,
  ffi.Pointer<ffi.Uint32> Amask,
);

typedef _c_SDL_MasksToPixelFormatEnum = ffi.Uint32 Function(
  ffi.Int32 bpp,
  ffi.Uint32 Rmask,
  ffi.Uint32 Gmask,
  ffi.Uint32 Bmask,
  ffi.Uint32 Amask,
);

typedef _dart_SDL_MasksToPixelFormatEnum = int Function(
  int bpp,
  int Rmask,
  int Gmask,
  int Bmask,
  int Amask,
);

typedef _c_SDL_AllocFormat = ffi.Pointer<SDL_PixelFormat> Function(
  ffi.Uint32 pixel_format,
);

typedef _dart_SDL_AllocFormat = ffi.Pointer<SDL_PixelFormat> Function(
  int pixel_format,
);

typedef _c_SDL_FreeFormat = ffi.Void Function(
  ffi.Pointer<SDL_PixelFormat> format,
);

typedef _dart_SDL_FreeFormat = void Function(
  ffi.Pointer<SDL_PixelFormat> format,
);

typedef _c_SDL_AllocPalette = ffi.Pointer<SDL_Palette> Function(
  ffi.Int32 ncolors,
);

typedef _dart_SDL_AllocPalette = ffi.Pointer<SDL_Palette> Function(
  int ncolors,
);

typedef _c_SDL_SetPixelFormatPalette = ffi.Int32 Function(
  ffi.Pointer<SDL_PixelFormat> format,
  ffi.Pointer<SDL_Palette> palette,
);

typedef _dart_SDL_SetPixelFormatPalette = int Function(
  ffi.Pointer<SDL_PixelFormat> format,
  ffi.Pointer<SDL_Palette> palette,
);

typedef _c_SDL_SetPaletteColors = ffi.Int32 Function(
  ffi.Pointer<SDL_Palette> palette,
  ffi.Pointer<SDL_Color> colors,
  ffi.Int32 firstcolor,
  ffi.Int32 ncolors,
);

typedef _dart_SDL_SetPaletteColors = int Function(
  ffi.Pointer<SDL_Palette> palette,
  ffi.Pointer<SDL_Color> colors,
  int firstcolor,
  int ncolors,
);

typedef _c_SDL_FreePalette = ffi.Void Function(
  ffi.Pointer<SDL_Palette> palette,
);

typedef _dart_SDL_FreePalette = void Function(
  ffi.Pointer<SDL_Palette> palette,
);

typedef _c_SDL_MapRGB = ffi.Uint32 Function(
  ffi.Pointer<SDL_PixelFormat> format,
  ffi.Uint8 r,
  ffi.Uint8 g,
  ffi.Uint8 b,
);

typedef _dart_SDL_MapRGB = int Function(
  ffi.Pointer<SDL_PixelFormat> format,
  int r,
  int g,
  int b,
);

typedef _c_SDL_MapRGBA = ffi.Uint32 Function(
  ffi.Pointer<SDL_PixelFormat> format,
  ffi.Uint8 r,
  ffi.Uint8 g,
  ffi.Uint8 b,
  ffi.Uint8 a,
);

typedef _dart_SDL_MapRGBA = int Function(
  ffi.Pointer<SDL_PixelFormat> format,
  int r,
  int g,
  int b,
  int a,
);

typedef _c_SDL_GetRGB = ffi.Void Function(
  ffi.Uint32 pixel,
  ffi.Pointer<SDL_PixelFormat> format,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> g,
  ffi.Pointer<ffi.Uint8> b,
);

typedef _dart_SDL_GetRGB = void Function(
  int pixel,
  ffi.Pointer<SDL_PixelFormat> format,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> g,
  ffi.Pointer<ffi.Uint8> b,
);

typedef _c_SDL_GetRGBA = ffi.Void Function(
  ffi.Uint32 pixel,
  ffi.Pointer<SDL_PixelFormat> format,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> g,
  ffi.Pointer<ffi.Uint8> b,
  ffi.Pointer<ffi.Uint8> a,
);

typedef _dart_SDL_GetRGBA = void Function(
  int pixel,
  ffi.Pointer<SDL_PixelFormat> format,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> g,
  ffi.Pointer<ffi.Uint8> b,
  ffi.Pointer<ffi.Uint8> a,
);

typedef _c_SDL_CalculateGammaRamp = ffi.Void Function(
  ffi.Float gamma,
  ffi.Pointer<ffi.Uint16> ramp,
);

typedef _dart_SDL_CalculateGammaRamp = void Function(
  double gamma,
  ffi.Pointer<ffi.Uint16> ramp,
);

typedef _c_SDL_PointInRect = ffi.Int32 Function(
  ffi.Pointer<SDL_Point> p,
  ffi.Pointer<SDL_Rect> r,
);

typedef _dart_SDL_PointInRect = int Function(
  ffi.Pointer<SDL_Point> p,
  ffi.Pointer<SDL_Rect> r,
);

typedef _c_SDL_RectEmpty = ffi.Int32 Function(
  ffi.Pointer<SDL_Rect> r,
);

typedef _dart_SDL_RectEmpty = int Function(
  ffi.Pointer<SDL_Rect> r,
);

typedef _c_SDL_RectEquals = ffi.Int32 Function(
  ffi.Pointer<SDL_Rect> a,
  ffi.Pointer<SDL_Rect> b,
);

typedef _dart_SDL_RectEquals = int Function(
  ffi.Pointer<SDL_Rect> a,
  ffi.Pointer<SDL_Rect> b,
);

typedef _c_SDL_HasIntersection = ffi.Int32 Function(
  ffi.Pointer<SDL_Rect> A,
  ffi.Pointer<SDL_Rect> B,
);

typedef _dart_SDL_HasIntersection = int Function(
  ffi.Pointer<SDL_Rect> A,
  ffi.Pointer<SDL_Rect> B,
);

typedef _c_SDL_IntersectRect = ffi.Int32 Function(
  ffi.Pointer<SDL_Rect> A,
  ffi.Pointer<SDL_Rect> B,
  ffi.Pointer<SDL_Rect> result,
);

typedef _dart_SDL_IntersectRect = int Function(
  ffi.Pointer<SDL_Rect> A,
  ffi.Pointer<SDL_Rect> B,
  ffi.Pointer<SDL_Rect> result,
);

typedef _c_SDL_UnionRect = ffi.Void Function(
  ffi.Pointer<SDL_Rect> A,
  ffi.Pointer<SDL_Rect> B,
  ffi.Pointer<SDL_Rect> result,
);

typedef _dart_SDL_UnionRect = void Function(
  ffi.Pointer<SDL_Rect> A,
  ffi.Pointer<SDL_Rect> B,
  ffi.Pointer<SDL_Rect> result,
);

typedef _c_SDL_EnclosePoints = ffi.Int32 Function(
  ffi.Pointer<SDL_Point> points,
  ffi.Int32 count,
  ffi.Pointer<SDL_Rect> clip,
  ffi.Pointer<SDL_Rect> result,
);

typedef _dart_SDL_EnclosePoints = int Function(
  ffi.Pointer<SDL_Point> points,
  int count,
  ffi.Pointer<SDL_Rect> clip,
  ffi.Pointer<SDL_Rect> result,
);

typedef _c_SDL_IntersectRectAndLine = ffi.Int32 Function(
  ffi.Pointer<SDL_Rect> rect,
  ffi.Pointer<ffi.Int32> X1,
  ffi.Pointer<ffi.Int32> Y1,
  ffi.Pointer<ffi.Int32> X2,
  ffi.Pointer<ffi.Int32> Y2,
);

typedef _dart_SDL_IntersectRectAndLine = int Function(
  ffi.Pointer<SDL_Rect> rect,
  ffi.Pointer<ffi.Int32> X1,
  ffi.Pointer<ffi.Int32> Y1,
  ffi.Pointer<ffi.Int32> X2,
  ffi.Pointer<ffi.Int32> Y2,
);

typedef _c_SDL_ComposeCustomBlendMode = ffi.Int32 Function(
  ffi.Int32 srcColorFactor,
  ffi.Int32 dstColorFactor,
  ffi.Int32 colorOperation,
  ffi.Int32 srcAlphaFactor,
  ffi.Int32 dstAlphaFactor,
  ffi.Int32 alphaOperation,
);

typedef _dart_SDL_ComposeCustomBlendMode = int Function(
  int srcColorFactor,
  int dstColorFactor,
  int colorOperation,
  int srcAlphaFactor,
  int dstAlphaFactor,
  int alphaOperation,
);

typedef _c_SDL_CreateRGBSurface = ffi.Pointer<SDL_Surface> Function(
  ffi.Uint32 flags,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 depth,
  ffi.Uint32 Rmask,
  ffi.Uint32 Gmask,
  ffi.Uint32 Bmask,
  ffi.Uint32 Amask,
);

typedef _dart_SDL_CreateRGBSurface = ffi.Pointer<SDL_Surface> Function(
  int flags,
  int width,
  int height,
  int depth,
  int Rmask,
  int Gmask,
  int Bmask,
  int Amask,
);

typedef _c_SDL_CreateRGBSurfaceWithFormat = ffi.Pointer<SDL_Surface> Function(
  ffi.Uint32 flags,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 depth,
  ffi.Uint32 format,
);

typedef _dart_SDL_CreateRGBSurfaceWithFormat = ffi.Pointer<SDL_Surface>
    Function(
  int flags,
  int width,
  int height,
  int depth,
  int format,
);

typedef _c_SDL_CreateRGBSurfaceFrom = ffi.Pointer<SDL_Surface> Function(
  ffi.Pointer<ffi.Void> pixels,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 depth,
  ffi.Int32 pitch,
  ffi.Uint32 Rmask,
  ffi.Uint32 Gmask,
  ffi.Uint32 Bmask,
  ffi.Uint32 Amask,
);

typedef _dart_SDL_CreateRGBSurfaceFrom = ffi.Pointer<SDL_Surface> Function(
  ffi.Pointer<ffi.Void> pixels,
  int width,
  int height,
  int depth,
  int pitch,
  int Rmask,
  int Gmask,
  int Bmask,
  int Amask,
);

typedef _c_SDL_CreateRGBSurfaceWithFormatFrom = ffi.Pointer<SDL_Surface>
    Function(
  ffi.Pointer<ffi.Void> pixels,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 depth,
  ffi.Int32 pitch,
  ffi.Uint32 format,
);

typedef _dart_SDL_CreateRGBSurfaceWithFormatFrom = ffi.Pointer<SDL_Surface>
    Function(
  ffi.Pointer<ffi.Void> pixels,
  int width,
  int height,
  int depth,
  int pitch,
  int format,
);

typedef _c_SDL_FreeSurface = ffi.Void Function(
  ffi.Pointer<SDL_Surface> surface,
);

typedef _dart_SDL_FreeSurface = void Function(
  ffi.Pointer<SDL_Surface> surface,
);

typedef _c_SDL_SetSurfacePalette = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<SDL_Palette> palette,
);

typedef _dart_SDL_SetSurfacePalette = int Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<SDL_Palette> palette,
);

typedef _c_SDL_LockSurface = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> surface,
);

typedef _dart_SDL_LockSurface = int Function(
  ffi.Pointer<SDL_Surface> surface,
);

typedef _c_SDL_UnlockSurface = ffi.Void Function(
  ffi.Pointer<SDL_Surface> surface,
);

typedef _dart_SDL_UnlockSurface = void Function(
  ffi.Pointer<SDL_Surface> surface,
);

typedef _c_SDL_LoadBMP_RW = ffi.Pointer<SDL_Surface> Function(
  ffi.Pointer<SDL_RWops> src,
  ffi.Int32 freesrc,
);

typedef _dart_SDL_LoadBMP_RW = ffi.Pointer<SDL_Surface> Function(
  ffi.Pointer<SDL_RWops> src,
  int freesrc,
);

typedef _c_SDL_SaveBMP_RW = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<SDL_RWops> dst,
  ffi.Int32 freedst,
);

typedef _dart_SDL_SaveBMP_RW = int Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<SDL_RWops> dst,
  int freedst,
);

typedef _c_SDL_SetSurfaceRLE = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Int32 flag,
);

typedef _dart_SDL_SetSurfaceRLE = int Function(
  ffi.Pointer<SDL_Surface> surface,
  int flag,
);

typedef _c_SDL_SetColorKey = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Int32 flag,
  ffi.Uint32 key,
);

typedef _dart_SDL_SetColorKey = int Function(
  ffi.Pointer<SDL_Surface> surface,
  int flag,
  int key,
);

typedef _c_SDL_HasColorKey = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> surface,
);

typedef _dart_SDL_HasColorKey = int Function(
  ffi.Pointer<SDL_Surface> surface,
);

typedef _c_SDL_GetColorKey = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<ffi.Uint32> key,
);

typedef _dart_SDL_GetColorKey = int Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<ffi.Uint32> key,
);

typedef _c_SDL_SetSurfaceColorMod = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Uint8 r,
  ffi.Uint8 g,
  ffi.Uint8 b,
);

typedef _dart_SDL_SetSurfaceColorMod = int Function(
  ffi.Pointer<SDL_Surface> surface,
  int r,
  int g,
  int b,
);

typedef _c_SDL_GetSurfaceColorMod = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> g,
  ffi.Pointer<ffi.Uint8> b,
);

typedef _dart_SDL_GetSurfaceColorMod = int Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> g,
  ffi.Pointer<ffi.Uint8> b,
);

typedef _c_SDL_SetSurfaceAlphaMod = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Uint8 alpha,
);

typedef _dart_SDL_SetSurfaceAlphaMod = int Function(
  ffi.Pointer<SDL_Surface> surface,
  int alpha,
);

typedef _c_SDL_GetSurfaceAlphaMod = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<ffi.Uint8> alpha,
);

typedef _dart_SDL_GetSurfaceAlphaMod = int Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<ffi.Uint8> alpha,
);

typedef _c_SDL_SetSurfaceBlendMode = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Int32 blendMode,
);

typedef _dart_SDL_SetSurfaceBlendMode = int Function(
  ffi.Pointer<SDL_Surface> surface,
  int blendMode,
);

typedef _c_SDL_GetSurfaceBlendMode = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<ffi.Int32> blendMode,
);

typedef _dart_SDL_GetSurfaceBlendMode = int Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<ffi.Int32> blendMode,
);

typedef _c_SDL_SetClipRect = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _dart_SDL_SetClipRect = int Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _c_SDL_GetClipRect = ffi.Void Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _dart_SDL_GetClipRect = void Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _c_SDL_DuplicateSurface = ffi.Pointer<SDL_Surface> Function(
  ffi.Pointer<SDL_Surface> surface,
);

typedef _dart_SDL_DuplicateSurface = ffi.Pointer<SDL_Surface> Function(
  ffi.Pointer<SDL_Surface> surface,
);

typedef _c_SDL_ConvertSurface = ffi.Pointer<SDL_Surface> Function(
  ffi.Pointer<SDL_Surface> src,
  ffi.Pointer<SDL_PixelFormat> fmt,
  ffi.Uint32 flags,
);

typedef _dart_SDL_ConvertSurface = ffi.Pointer<SDL_Surface> Function(
  ffi.Pointer<SDL_Surface> src,
  ffi.Pointer<SDL_PixelFormat> fmt,
  int flags,
);

typedef _c_SDL_ConvertSurfaceFormat = ffi.Pointer<SDL_Surface> Function(
  ffi.Pointer<SDL_Surface> src,
  ffi.Uint32 pixel_format,
  ffi.Uint32 flags,
);

typedef _dart_SDL_ConvertSurfaceFormat = ffi.Pointer<SDL_Surface> Function(
  ffi.Pointer<SDL_Surface> src,
  int pixel_format,
  int flags,
);

typedef _c_SDL_ConvertPixels = ffi.Int32 Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Uint32 src_format,
  ffi.Pointer<ffi.Void> src,
  ffi.Int32 src_pitch,
  ffi.Uint32 dst_format,
  ffi.Pointer<ffi.Void> dst,
  ffi.Int32 dst_pitch,
);

typedef _dart_SDL_ConvertPixels = int Function(
  int width,
  int height,
  int src_format,
  ffi.Pointer<ffi.Void> src,
  int src_pitch,
  int dst_format,
  ffi.Pointer<ffi.Void> dst,
  int dst_pitch,
);

typedef _c_SDL_FillRect = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> dst,
  ffi.Pointer<SDL_Rect> rect,
  ffi.Uint32 color,
);

typedef _dart_SDL_FillRect = int Function(
  ffi.Pointer<SDL_Surface> dst,
  ffi.Pointer<SDL_Rect> rect,
  int color,
);

typedef _c_SDL_FillRects = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> dst,
  ffi.Pointer<SDL_Rect> rects,
  ffi.Int32 count,
  ffi.Uint32 color,
);

typedef _dart_SDL_FillRects = int Function(
  ffi.Pointer<SDL_Surface> dst,
  ffi.Pointer<SDL_Rect> rects,
  int count,
  int color,
);

typedef _c_SDL_UpperBlit = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> src,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_Surface> dst,
  ffi.Pointer<SDL_Rect> dstrect,
);

typedef _dart_SDL_UpperBlit = int Function(
  ffi.Pointer<SDL_Surface> src,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_Surface> dst,
  ffi.Pointer<SDL_Rect> dstrect,
);

typedef _c_SDL_LowerBlit = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> src,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_Surface> dst,
  ffi.Pointer<SDL_Rect> dstrect,
);

typedef _dart_SDL_LowerBlit = int Function(
  ffi.Pointer<SDL_Surface> src,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_Surface> dst,
  ffi.Pointer<SDL_Rect> dstrect,
);

typedef _c_SDL_SoftStretch = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> src,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_Surface> dst,
  ffi.Pointer<SDL_Rect> dstrect,
);

typedef _dart_SDL_SoftStretch = int Function(
  ffi.Pointer<SDL_Surface> src,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_Surface> dst,
  ffi.Pointer<SDL_Rect> dstrect,
);

typedef _c_SDL_UpperBlitScaled = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> src,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_Surface> dst,
  ffi.Pointer<SDL_Rect> dstrect,
);

typedef _dart_SDL_UpperBlitScaled = int Function(
  ffi.Pointer<SDL_Surface> src,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_Surface> dst,
  ffi.Pointer<SDL_Rect> dstrect,
);

typedef _c_SDL_LowerBlitScaled = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> src,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_Surface> dst,
  ffi.Pointer<SDL_Rect> dstrect,
);

typedef _dart_SDL_LowerBlitScaled = int Function(
  ffi.Pointer<SDL_Surface> src,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_Surface> dst,
  ffi.Pointer<SDL_Rect> dstrect,
);

typedef _c_SDL_SetYUVConversionMode = ffi.Void Function(
  ffi.Int32 mode,
);

typedef _dart_SDL_SetYUVConversionMode = void Function(
  int mode,
);

typedef _c_SDL_GetYUVConversionMode = ffi.Int32 Function();

typedef _dart_SDL_GetYUVConversionMode = int Function();

typedef _c_SDL_GetYUVConversionModeForResolution = ffi.Int32 Function(
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_SDL_GetYUVConversionModeForResolution = int Function(
  int width,
  int height,
);

typedef _c_SDL_GetNumVideoDrivers = ffi.Int32 Function();

typedef _dart_SDL_GetNumVideoDrivers = int Function();

typedef _c_SDL_GetVideoDriver = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 index,
);

typedef _dart_SDL_GetVideoDriver = ffi.Pointer<ffi.Int8> Function(
  int index,
);

typedef _c_SDL_VideoInit = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> driver_name,
);

typedef _dart_SDL_VideoInit = int Function(
  ffi.Pointer<ffi.Int8> driver_name,
);

typedef _c_SDL_VideoQuit = ffi.Void Function();

typedef _dart_SDL_VideoQuit = void Function();

typedef _c_SDL_GetCurrentVideoDriver = ffi.Pointer<ffi.Int8> Function();

typedef _dart_SDL_GetCurrentVideoDriver = ffi.Pointer<ffi.Int8> Function();

typedef _c_SDL_GetNumVideoDisplays = ffi.Int32 Function();

typedef _dart_SDL_GetNumVideoDisplays = int Function();

typedef _c_SDL_GetDisplayName = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 displayIndex,
);

typedef _dart_SDL_GetDisplayName = ffi.Pointer<ffi.Int8> Function(
  int displayIndex,
);

typedef _c_SDL_GetDisplayBounds = ffi.Int32 Function(
  ffi.Int32 displayIndex,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _dart_SDL_GetDisplayBounds = int Function(
  int displayIndex,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _c_SDL_GetDisplayUsableBounds = ffi.Int32 Function(
  ffi.Int32 displayIndex,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _dart_SDL_GetDisplayUsableBounds = int Function(
  int displayIndex,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _c_SDL_GetDisplayDPI = ffi.Int32 Function(
  ffi.Int32 displayIndex,
  ffi.Pointer<ffi.Float> ddpi,
  ffi.Pointer<ffi.Float> hdpi,
  ffi.Pointer<ffi.Float> vdpi,
);

typedef _dart_SDL_GetDisplayDPI = int Function(
  int displayIndex,
  ffi.Pointer<ffi.Float> ddpi,
  ffi.Pointer<ffi.Float> hdpi,
  ffi.Pointer<ffi.Float> vdpi,
);

typedef _c_SDL_GetDisplayOrientation = ffi.Int32 Function(
  ffi.Int32 displayIndex,
);

typedef _dart_SDL_GetDisplayOrientation = int Function(
  int displayIndex,
);

typedef _c_SDL_GetNumDisplayModes = ffi.Int32 Function(
  ffi.Int32 displayIndex,
);

typedef _dart_SDL_GetNumDisplayModes = int Function(
  int displayIndex,
);

typedef _c_SDL_GetDisplayMode = ffi.Int32 Function(
  ffi.Int32 displayIndex,
  ffi.Int32 modeIndex,
  ffi.Pointer<SDL_DisplayMode> mode,
);

typedef _dart_SDL_GetDisplayMode = int Function(
  int displayIndex,
  int modeIndex,
  ffi.Pointer<SDL_DisplayMode> mode,
);

typedef _c_SDL_GetDesktopDisplayMode = ffi.Int32 Function(
  ffi.Int32 displayIndex,
  ffi.Pointer<SDL_DisplayMode> mode,
);

typedef _dart_SDL_GetDesktopDisplayMode = int Function(
  int displayIndex,
  ffi.Pointer<SDL_DisplayMode> mode,
);

typedef _c_SDL_GetCurrentDisplayMode = ffi.Int32 Function(
  ffi.Int32 displayIndex,
  ffi.Pointer<SDL_DisplayMode> mode,
);

typedef _dart_SDL_GetCurrentDisplayMode = int Function(
  int displayIndex,
  ffi.Pointer<SDL_DisplayMode> mode,
);

typedef _c_SDL_GetClosestDisplayMode = ffi.Pointer<SDL_DisplayMode> Function(
  ffi.Int32 displayIndex,
  ffi.Pointer<SDL_DisplayMode> mode,
  ffi.Pointer<SDL_DisplayMode> closest,
);

typedef _dart_SDL_GetClosestDisplayMode = ffi.Pointer<SDL_DisplayMode> Function(
  int displayIndex,
  ffi.Pointer<SDL_DisplayMode> mode,
  ffi.Pointer<SDL_DisplayMode> closest,
);

typedef _c_SDL_GetWindowDisplayIndex = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_GetWindowDisplayIndex = int Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_SetWindowDisplayMode = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<SDL_DisplayMode> mode,
);

typedef _dart_SDL_SetWindowDisplayMode = int Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<SDL_DisplayMode> mode,
);

typedef _c_SDL_GetWindowDisplayMode = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<SDL_DisplayMode> mode,
);

typedef _dart_SDL_GetWindowDisplayMode = int Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<SDL_DisplayMode> mode,
);

typedef _c_SDL_GetWindowPixelFormat = ffi.Uint32 Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_GetWindowPixelFormat = int Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_CreateWindow = ffi.Pointer<SDL_Window> Function(
  ffi.Pointer<ffi.Int8> title,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 w,
  ffi.Int32 h,
  ffi.Uint32 flags,
);

typedef _dart_SDL_CreateWindow = ffi.Pointer<SDL_Window> Function(
  ffi.Pointer<ffi.Int8> title,
  int x,
  int y,
  int w,
  int h,
  int flags,
);

typedef _c_SDL_CreateWindowFrom = ffi.Pointer<SDL_Window> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_SDL_CreateWindowFrom = ffi.Pointer<SDL_Window> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_SDL_GetWindowID = ffi.Uint32 Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_GetWindowID = int Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_GetWindowFromID = ffi.Pointer<SDL_Window> Function(
  ffi.Uint32 id,
);

typedef _dart_SDL_GetWindowFromID = ffi.Pointer<SDL_Window> Function(
  int id,
);

typedef _c_SDL_GetWindowFlags = ffi.Uint32 Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_GetWindowFlags = int Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_SetWindowTitle = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int8> title,
);

typedef _dart_SDL_SetWindowTitle = void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int8> title,
);

typedef _c_SDL_GetWindowTitle = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_GetWindowTitle = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_SetWindowIcon = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<SDL_Surface> icon,
);

typedef _dart_SDL_SetWindowIcon = void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<SDL_Surface> icon,
);

typedef _c_SDL_SetWindowData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_SDL_SetWindowData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_SDL_GetWindowData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_SDL_GetWindowData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_SDL_SetWindowPosition = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_SDL_SetWindowPosition = void Function(
  ffi.Pointer<SDL_Window> window,
  int x,
  int y,
);

typedef _c_SDL_GetWindowPosition = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int32> x,
  ffi.Pointer<ffi.Int32> y,
);

typedef _dart_SDL_GetWindowPosition = void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int32> x,
  ffi.Pointer<ffi.Int32> y,
);

typedef _c_SDL_SetWindowSize = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Int32 w,
  ffi.Int32 h,
);

typedef _dart_SDL_SetWindowSize = void Function(
  ffi.Pointer<SDL_Window> window,
  int w,
  int h,
);

typedef _c_SDL_GetWindowSize = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _dart_SDL_GetWindowSize = void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _c_SDL_GetWindowBordersSize = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int32> top,
  ffi.Pointer<ffi.Int32> left,
  ffi.Pointer<ffi.Int32> bottom,
  ffi.Pointer<ffi.Int32> right,
);

typedef _dart_SDL_GetWindowBordersSize = int Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int32> top,
  ffi.Pointer<ffi.Int32> left,
  ffi.Pointer<ffi.Int32> bottom,
  ffi.Pointer<ffi.Int32> right,
);

typedef _c_SDL_SetWindowMinimumSize = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Int32 min_w,
  ffi.Int32 min_h,
);

typedef _dart_SDL_SetWindowMinimumSize = void Function(
  ffi.Pointer<SDL_Window> window,
  int min_w,
  int min_h,
);

typedef _c_SDL_GetWindowMinimumSize = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _dart_SDL_GetWindowMinimumSize = void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _c_SDL_SetWindowMaximumSize = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Int32 max_w,
  ffi.Int32 max_h,
);

typedef _dart_SDL_SetWindowMaximumSize = void Function(
  ffi.Pointer<SDL_Window> window,
  int max_w,
  int max_h,
);

typedef _c_SDL_GetWindowMaximumSize = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _dart_SDL_GetWindowMaximumSize = void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _c_SDL_SetWindowBordered = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Int32 bordered,
);

typedef _dart_SDL_SetWindowBordered = void Function(
  ffi.Pointer<SDL_Window> window,
  int bordered,
);

typedef _c_SDL_SetWindowResizable = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Int32 resizable,
);

typedef _dart_SDL_SetWindowResizable = void Function(
  ffi.Pointer<SDL_Window> window,
  int resizable,
);

typedef _c_SDL_ShowWindow = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_ShowWindow = void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_HideWindow = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_HideWindow = void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_RaiseWindow = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_RaiseWindow = void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_MaximizeWindow = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_MaximizeWindow = void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_MinimizeWindow = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_MinimizeWindow = void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_RestoreWindow = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_RestoreWindow = void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_SetWindowFullscreen = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Uint32 flags,
);

typedef _dart_SDL_SetWindowFullscreen = int Function(
  ffi.Pointer<SDL_Window> window,
  int flags,
);

typedef _c_SDL_GetWindowSurface = ffi.Pointer<SDL_Surface> Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_GetWindowSurface = ffi.Pointer<SDL_Surface> Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_UpdateWindowSurface = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_UpdateWindowSurface = int Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_UpdateWindowSurfaceRects = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<SDL_Rect> rects,
  ffi.Int32 numrects,
);

typedef _dart_SDL_UpdateWindowSurfaceRects = int Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<SDL_Rect> rects,
  int numrects,
);

typedef _c_SDL_SetWindowGrab = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Int32 grabbed,
);

typedef _dart_SDL_SetWindowGrab = void Function(
  ffi.Pointer<SDL_Window> window,
  int grabbed,
);

typedef _c_SDL_GetWindowGrab = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_GetWindowGrab = int Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_GetGrabbedWindow = ffi.Pointer<SDL_Window> Function();

typedef _dart_SDL_GetGrabbedWindow = ffi.Pointer<SDL_Window> Function();

typedef _c_SDL_SetWindowBrightness = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Float brightness,
);

typedef _dart_SDL_SetWindowBrightness = int Function(
  ffi.Pointer<SDL_Window> window,
  double brightness,
);

typedef _c_SDL_GetWindowBrightness = ffi.Float Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_GetWindowBrightness = double Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_SetWindowOpacity = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Float opacity,
);

typedef _dart_SDL_SetWindowOpacity = int Function(
  ffi.Pointer<SDL_Window> window,
  double opacity,
);

typedef _c_SDL_GetWindowOpacity = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Float> out_opacity,
);

typedef _dart_SDL_GetWindowOpacity = int Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Float> out_opacity,
);

typedef _c_SDL_SetWindowModalFor = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> modal_window,
  ffi.Pointer<SDL_Window> parent_window,
);

typedef _dart_SDL_SetWindowModalFor = int Function(
  ffi.Pointer<SDL_Window> modal_window,
  ffi.Pointer<SDL_Window> parent_window,
);

typedef _c_SDL_SetWindowInputFocus = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_SetWindowInputFocus = int Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_SetWindowGammaRamp = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Uint16> red,
  ffi.Pointer<ffi.Uint16> green,
  ffi.Pointer<ffi.Uint16> blue,
);

typedef _dart_SDL_SetWindowGammaRamp = int Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Uint16> red,
  ffi.Pointer<ffi.Uint16> green,
  ffi.Pointer<ffi.Uint16> blue,
);

typedef _c_SDL_GetWindowGammaRamp = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Uint16> red,
  ffi.Pointer<ffi.Uint16> green,
  ffi.Pointer<ffi.Uint16> blue,
);

typedef _dart_SDL_GetWindowGammaRamp = int Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Uint16> red,
  ffi.Pointer<ffi.Uint16> green,
  ffi.Pointer<ffi.Uint16> blue,
);

typedef SDL_HitTest = ffi.Int32 Function(
  ffi.Pointer<SDL_Window>,
  ffi.Pointer<SDL_Point>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_SDL_SetWindowHitTest = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.NativeFunction<SDL_HitTest>> callback,
  ffi.Pointer<ffi.Void> callback_data,
);

typedef _dart_SDL_SetWindowHitTest = int Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.NativeFunction<SDL_HitTest>> callback,
  ffi.Pointer<ffi.Void> callback_data,
);

typedef _c_SDL_DestroyWindow = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_DestroyWindow = void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_IsScreenSaverEnabled = ffi.Int32 Function();

typedef _dart_SDL_IsScreenSaverEnabled = int Function();

typedef _c_SDL_EnableScreenSaver = ffi.Void Function();

typedef _dart_SDL_EnableScreenSaver = void Function();

typedef _c_SDL_DisableScreenSaver = ffi.Void Function();

typedef _dart_SDL_DisableScreenSaver = void Function();

typedef _c_SDL_GL_LoadLibrary = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_SDL_GL_LoadLibrary = int Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_SDL_GL_GetProcAddress = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> proc,
);

typedef _dart_SDL_GL_GetProcAddress = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> proc,
);

typedef _c_SDL_GL_UnloadLibrary = ffi.Void Function();

typedef _dart_SDL_GL_UnloadLibrary = void Function();

typedef _c_SDL_GL_ExtensionSupported = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> extension_1,
);

typedef _dart_SDL_GL_ExtensionSupported = int Function(
  ffi.Pointer<ffi.Int8> extension_1,
);

typedef _c_SDL_GL_ResetAttributes = ffi.Void Function();

typedef _dart_SDL_GL_ResetAttributes = void Function();

typedef _c_SDL_GL_SetAttribute = ffi.Int32 Function(
  ffi.Int32 attr,
  ffi.Int32 value,
);

typedef _dart_SDL_GL_SetAttribute = int Function(
  int attr,
  int value,
);

typedef _c_SDL_GL_GetAttribute = ffi.Int32 Function(
  ffi.Int32 attr,
  ffi.Pointer<ffi.Int32> value,
);

typedef _dart_SDL_GL_GetAttribute = int Function(
  int attr,
  ffi.Pointer<ffi.Int32> value,
);

typedef _c_SDL_GL_CreateContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_GL_CreateContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_GL_MakeCurrent = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_SDL_GL_MakeCurrent = int Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Void> context,
);

typedef _c_SDL_GL_GetCurrentWindow = ffi.Pointer<SDL_Window> Function();

typedef _dart_SDL_GL_GetCurrentWindow = ffi.Pointer<SDL_Window> Function();

typedef _c_SDL_GL_GetCurrentContext = ffi.Pointer<ffi.Void> Function();

typedef _dart_SDL_GL_GetCurrentContext = ffi.Pointer<ffi.Void> Function();

typedef _c_SDL_GL_GetDrawableSize = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _dart_SDL_GL_GetDrawableSize = void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _c_SDL_GL_SetSwapInterval = ffi.Int32 Function(
  ffi.Int32 interval,
);

typedef _dart_SDL_GL_SetSwapInterval = int Function(
  int interval,
);

typedef _c_SDL_GL_GetSwapInterval = ffi.Int32 Function();

typedef _dart_SDL_GL_GetSwapInterval = int Function();

typedef _c_SDL_GL_SwapWindow = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_GL_SwapWindow = void Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_GL_DeleteContext = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_SDL_GL_DeleteContext = void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_SDL_GetKeyboardFocus = ffi.Pointer<SDL_Window> Function();

typedef _dart_SDL_GetKeyboardFocus = ffi.Pointer<SDL_Window> Function();

typedef _c_SDL_GetKeyboardState = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Int32> numkeys,
);

typedef _dart_SDL_GetKeyboardState = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Int32> numkeys,
);

typedef _c_SDL_GetModState = ffi.Int32 Function();

typedef _dart_SDL_GetModState = int Function();

typedef _c_SDL_SetModState = ffi.Void Function(
  ffi.Int32 modstate,
);

typedef _dart_SDL_SetModState = void Function(
  int modstate,
);

typedef _c_SDL_GetKeyFromScancode = ffi.Int32 Function(
  ffi.Int32 scancode,
);

typedef _dart_SDL_GetKeyFromScancode = int Function(
  int scancode,
);

typedef _c_SDL_GetScancodeFromKey = ffi.Int32 Function(
  ffi.Int32 key,
);

typedef _dart_SDL_GetScancodeFromKey = int Function(
  int key,
);

typedef _c_SDL_GetScancodeName = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 scancode,
);

typedef _dart_SDL_GetScancodeName = ffi.Pointer<ffi.Int8> Function(
  int scancode,
);

typedef _c_SDL_GetScancodeFromName = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_SDL_GetScancodeFromName = int Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_SDL_GetKeyName = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 key,
);

typedef _dart_SDL_GetKeyName = ffi.Pointer<ffi.Int8> Function(
  int key,
);

typedef _c_SDL_GetKeyFromName = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_SDL_GetKeyFromName = int Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_SDL_StartTextInput = ffi.Void Function();

typedef _dart_SDL_StartTextInput = void Function();

typedef _c_SDL_IsTextInputActive = ffi.Int32 Function();

typedef _dart_SDL_IsTextInputActive = int Function();

typedef _c_SDL_StopTextInput = ffi.Void Function();

typedef _dart_SDL_StopTextInput = void Function();

typedef _c_SDL_SetTextInputRect = ffi.Void Function(
  ffi.Pointer<SDL_Rect> rect,
);

typedef _dart_SDL_SetTextInputRect = void Function(
  ffi.Pointer<SDL_Rect> rect,
);

typedef _c_SDL_HasScreenKeyboardSupport = ffi.Int32 Function();

typedef _dart_SDL_HasScreenKeyboardSupport = int Function();

typedef _c_SDL_IsScreenKeyboardShown = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_IsScreenKeyboardShown = int Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_Metal_CreateView = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_Metal_CreateView = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_Metal_DestroyView = ffi.Void Function(
  ffi.Pointer<ffi.Void> view,
);

typedef _dart_SDL_Metal_DestroyView = void Function(
  ffi.Pointer<ffi.Void> view,
);

typedef _c_SDLTest_GenerateRunSeed = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 length,
);

typedef _dart_SDLTest_GenerateRunSeed = ffi.Pointer<ffi.Int8> Function(
  int length,
);

typedef _c_SDLTest_RunSuites = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<SDLTest_TestSuiteReference>> testSuites,
  ffi.Pointer<ffi.Int8> userRunSeed,
  ffi.Int32 userExecKey,
  ffi.Pointer<ffi.Int8> filter,
  ffi.Int32 testIterations,
);

typedef _dart_SDLTest_RunSuites = int Function(
  ffi.Pointer<ffi.Pointer<SDLTest_TestSuiteReference>> testSuites,
  ffi.Pointer<ffi.Int8> userRunSeed,
  int userExecKey,
  ffi.Pointer<ffi.Int8> filter,
  int testIterations,
);

typedef _c_SDL_main = ffi.Int32 Function(
  ffi.Int32 argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
);

typedef _dart_SDL_main = int Function(
  int argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
);

typedef _c_SDL_SetMainReady = ffi.Void Function();

typedef _dart_SDL_SetMainReady = void Function();

typedef _c_SDL_ReportAssertion = ffi.Int32 Function(
  ffi.Pointer<SDL_AssertData> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int32 arg3,
);

typedef _dart_SDL_ReportAssertion = int Function(
  ffi.Pointer<SDL_AssertData> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
);

typedef SDL_AssertionHandler = ffi.Int32 Function(
  ffi.Pointer<SDL_AssertData>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_SDL_SetAssertionHandler = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<SDL_AssertionHandler>> handler,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_SDL_SetAssertionHandler = void Function(
  ffi.Pointer<ffi.NativeFunction<SDL_AssertionHandler>> handler,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_SDL_GetDefaultAssertionHandler
    = ffi.Pointer<ffi.NativeFunction<SDL_AssertionHandler>> Function();

typedef _dart_SDL_GetDefaultAssertionHandler
    = ffi.Pointer<ffi.NativeFunction<SDL_AssertionHandler>> Function();

typedef _c_SDL_GetAssertionHandler
    = ffi.Pointer<ffi.NativeFunction<SDL_AssertionHandler>> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> puserdata,
);

typedef _dart_SDL_GetAssertionHandler
    = ffi.Pointer<ffi.NativeFunction<SDL_AssertionHandler>> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> puserdata,
);

typedef _c_SDL_GetAssertionReport = ffi.Pointer<SDL_AssertData> Function();

typedef _dart_SDL_GetAssertionReport = ffi.Pointer<SDL_AssertData> Function();

typedef _c_SDL_ResetAssertionReport = ffi.Void Function();

typedef _dart_SDL_ResetAssertionReport = void Function();

typedef _c_SDL_SetClipboardText = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _dart_SDL_SetClipboardText = int Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _c_SDL_GetClipboardText = ffi.Pointer<ffi.Int8> Function();

typedef _dart_SDL_GetClipboardText = ffi.Pointer<ffi.Int8> Function();

typedef _c_SDL_HasClipboardText = ffi.Int32 Function();

typedef _dart_SDL_HasClipboardText = int Function();

typedef _c__mm_empty = ffi.Void Function();

typedef _dart__mm_empty = void Function();

typedef _c__mm_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __size,
  ffi.Uint64 __align,
);

typedef _dart__mm_malloc = ffi.Pointer<ffi.Void> Function(
  int __size,
  int __align,
);

typedef _c__mm_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _dart__mm_free = void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _c__mm_sfence = ffi.Void Function();

typedef _dart__mm_sfence = void Function();

typedef _c__mm_getcsr = ffi.Uint32 Function();

typedef _dart__mm_getcsr = int Function();

typedef _c__mm_setcsr = ffi.Void Function(
  ffi.Uint32 __i,
);

typedef _dart__mm_setcsr = void Function(
  int __i,
);

typedef _c__mm_stream_si32 = ffi.Void Function(
  ffi.Pointer<ffi.Int32> __p,
  ffi.Int32 __a,
);

typedef _dart__mm_stream_si32 = void Function(
  ffi.Pointer<ffi.Int32> __p,
  int __a,
);

typedef _c__mm_stream_si64 = ffi.Void Function(
  ffi.Pointer<ffi.Int64> __p,
  ffi.Int64 __a,
);

typedef _dart__mm_stream_si64 = void Function(
  ffi.Pointer<ffi.Int64> __p,
  int __a,
);

typedef _c__mm_clflush = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _dart__mm_clflush = void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _c__mm_lfence = ffi.Void Function();

typedef _dart__mm_lfence = void Function();

typedef _c__mm_mfence = ffi.Void Function();

typedef _dart__mm_mfence = void Function();

typedef _c__mm_pause = ffi.Void Function();

typedef _dart__mm_pause = void Function();

typedef _c__mm_monitor = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
  ffi.Uint32 __extensions,
  ffi.Uint32 __hints,
);

typedef _dart__mm_monitor = void Function(
  ffi.Pointer<ffi.Void> __p,
  int __extensions,
  int __hints,
);

typedef _c__mm_mwait = ffi.Void Function(
  ffi.Uint32 __extensions,
  ffi.Uint32 __hints,
);

typedef _dart__mm_mwait = void Function(
  int __extensions,
  int __hints,
);

typedef _c__mm_crc32_u8 = ffi.Uint32 Function(
  ffi.Uint32 __C,
  ffi.Uint8 __D,
);

typedef _dart__mm_crc32_u8 = int Function(
  int __C,
  int __D,
);

typedef _c__mm_crc32_u16 = ffi.Uint32 Function(
  ffi.Uint32 __C,
  ffi.Uint16 __D,
);

typedef _dart__mm_crc32_u16 = int Function(
  int __C,
  int __D,
);

typedef _c__mm_crc32_u32 = ffi.Uint32 Function(
  ffi.Uint32 __C,
  ffi.Uint32 __D,
);

typedef _dart__mm_crc32_u32 = int Function(
  int __C,
  int __D,
);

typedef _c__mm_crc32_u64 = ffi.Uint64 Function(
  ffi.Uint64 __C,
  ffi.Uint64 __D,
);

typedef _dart__mm_crc32_u64 = int Function(
  int __C,
  int __D,
);

typedef _c__mm_popcnt_u32 = ffi.Int32 Function(
  ffi.Uint32 __A,
);

typedef _dart__mm_popcnt_u32 = int Function(
  int __A,
);

typedef _c__mm_popcnt_u64 = ffi.Int64 Function(
  ffi.Uint64 __A,
);

typedef _dart__mm_popcnt_u64 = int Function(
  int __A,
);

typedef _c__mm_clflushopt = ffi.Void Function(
  ffi.Pointer<ffi.Void> __m,
);

typedef _dart__mm_clflushopt = void Function(
  ffi.Pointer<ffi.Void> __m,
);

typedef _c__mm_clwb = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _dart__mm_clwb = void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _c__mm256_zeroall = ffi.Void Function();

typedef _dart__mm256_zeroall = void Function();

typedef _c__mm256_zeroupper = ffi.Void Function();

typedef _dart__mm256_zeroupper = void Function();

typedef _c__cvtsh_ss = ffi.Float Function(
  ffi.Uint16 __a,
);

typedef _dart__cvtsh_ss = double Function(
  int __a,
);

typedef _c___tzcnt_u16 = ffi.Uint16 Function(
  ffi.Uint16 __X,
);

typedef _dart___tzcnt_u16 = int Function(
  int __X,
);

typedef _c___tzcnt_u32 = ffi.Uint32 Function(
  ffi.Uint32 __X,
);

typedef _dart___tzcnt_u32 = int Function(
  int __X,
);

typedef _c__mm_tzcnt_32 = ffi.Int32 Function(
  ffi.Uint32 __X,
);

typedef _dart__mm_tzcnt_32 = int Function(
  int __X,
);

typedef _c___tzcnt_u64 = ffi.Uint64 Function(
  ffi.Uint64 __X,
);

typedef _dart___tzcnt_u64 = int Function(
  int __X,
);

typedef _c__mm_tzcnt_64 = ffi.Int64 Function(
  ffi.Uint64 __X,
);

typedef _dart__mm_tzcnt_64 = int Function(
  int __X,
);

typedef _c___andn_u32 = ffi.Uint32 Function(
  ffi.Uint32 __X,
  ffi.Uint32 __Y,
);

typedef _dart___andn_u32 = int Function(
  int __X,
  int __Y,
);

typedef _c___bextr_u32 = ffi.Uint32 Function(
  ffi.Uint32 __X,
  ffi.Uint32 __Y,
);

typedef _dart___bextr_u32 = int Function(
  int __X,
  int __Y,
);

typedef _c__bextr_u32 = ffi.Uint32 Function(
  ffi.Uint32 __X,
  ffi.Uint32 __Y,
  ffi.Uint32 __Z,
);

typedef _dart__bextr_u32 = int Function(
  int __X,
  int __Y,
  int __Z,
);

typedef _c__bextr2_u32 = ffi.Uint32 Function(
  ffi.Uint32 __X,
  ffi.Uint32 __Y,
);

typedef _dart__bextr2_u32 = int Function(
  int __X,
  int __Y,
);

typedef _c___blsi_u32 = ffi.Uint32 Function(
  ffi.Uint32 __X,
);

typedef _dart___blsi_u32 = int Function(
  int __X,
);

typedef _c___blsmsk_u32 = ffi.Uint32 Function(
  ffi.Uint32 __X,
);

typedef _dart___blsmsk_u32 = int Function(
  int __X,
);

typedef _c___blsr_u32 = ffi.Uint32 Function(
  ffi.Uint32 __X,
);

typedef _dart___blsr_u32 = int Function(
  int __X,
);

typedef _c___andn_u64 = ffi.Uint64 Function(
  ffi.Uint64 __X,
  ffi.Uint64 __Y,
);

typedef _dart___andn_u64 = int Function(
  int __X,
  int __Y,
);

typedef _c___bextr_u64 = ffi.Uint64 Function(
  ffi.Uint64 __X,
  ffi.Uint64 __Y,
);

typedef _dart___bextr_u64 = int Function(
  int __X,
  int __Y,
);

typedef _c__bextr_u64 = ffi.Uint64 Function(
  ffi.Uint64 __X,
  ffi.Uint32 __Y,
  ffi.Uint32 __Z,
);

typedef _dart__bextr_u64 = int Function(
  int __X,
  int __Y,
  int __Z,
);

typedef _c__bextr2_u64 = ffi.Uint64 Function(
  ffi.Uint64 __X,
  ffi.Uint64 __Y,
);

typedef _dart__bextr2_u64 = int Function(
  int __X,
  int __Y,
);

typedef _c___blsi_u64 = ffi.Uint64 Function(
  ffi.Uint64 __X,
);

typedef _dart___blsi_u64 = int Function(
  int __X,
);

typedef _c___blsmsk_u64 = ffi.Uint64 Function(
  ffi.Uint64 __X,
);

typedef _dart___blsmsk_u64 = int Function(
  int __X,
);

typedef _c___blsr_u64 = ffi.Uint64 Function(
  ffi.Uint64 __X,
);

typedef _dart___blsr_u64 = int Function(
  int __X,
);

typedef _c__bzhi_u32 = ffi.Uint32 Function(
  ffi.Uint32 __X,
  ffi.Uint32 __Y,
);

typedef _dart__bzhi_u32 = int Function(
  int __X,
  int __Y,
);

typedef _c__pdep_u32 = ffi.Uint32 Function(
  ffi.Uint32 __X,
  ffi.Uint32 __Y,
);

typedef _dart__pdep_u32 = int Function(
  int __X,
  int __Y,
);

typedef _c__pext_u32 = ffi.Uint32 Function(
  ffi.Uint32 __X,
  ffi.Uint32 __Y,
);

typedef _dart__pext_u32 = int Function(
  int __X,
  int __Y,
);

typedef _c__bzhi_u64 = ffi.Uint64 Function(
  ffi.Uint64 __X,
  ffi.Uint64 __Y,
);

typedef _dart__bzhi_u64 = int Function(
  int __X,
  int __Y,
);

typedef _c__pdep_u64 = ffi.Uint64 Function(
  ffi.Uint64 __X,
  ffi.Uint64 __Y,
);

typedef _dart__pdep_u64 = int Function(
  int __X,
  int __Y,
);

typedef _c__pext_u64 = ffi.Uint64 Function(
  ffi.Uint64 __X,
  ffi.Uint64 __Y,
);

typedef _dart__pext_u64 = int Function(
  int __X,
  int __Y,
);

typedef _c__mulx_u64 = ffi.Uint64 Function(
  ffi.Uint64 __X,
  ffi.Uint64 __Y,
  ffi.Pointer<ffi.Uint64> __P,
);

typedef _dart__mulx_u64 = int Function(
  int __X,
  int __Y,
  ffi.Pointer<ffi.Uint64> __P,
);

typedef _c___lzcnt32 = ffi.Uint32 Function(
  ffi.Uint32 __X,
);

typedef _dart___lzcnt32 = int Function(
  int __X,
);

typedef _c__lzcnt_u32 = ffi.Uint32 Function(
  ffi.Uint32 __X,
);

typedef _dart__lzcnt_u32 = int Function(
  int __X,
);

typedef _c__lzcnt_u64 = ffi.Uint64 Function(
  ffi.Uint64 __X,
);

typedef _dart__lzcnt_u64 = int Function(
  int __X,
);

typedef _c__mm512_int2mask = ffi.Uint16 Function(
  ffi.Int32 __a,
);

typedef _dart__mm512_int2mask = int Function(
  int __a,
);

typedef _c__mm512_mask2int = ffi.Int32 Function(
  ffi.Uint16 __a,
);

typedef _dart__mm512_mask2int = int Function(
  int __a,
);

typedef _c__mm512_knot = ffi.Uint16 Function(
  ffi.Uint16 __M,
);

typedef _dart__mm512_knot = int Function(
  int __M,
);

typedef _c__mm512_kmov = ffi.Uint16 Function(
  ffi.Uint16 __A,
);

typedef _dart__mm512_kmov = int Function(
  int __A,
);

typedef _c__mm512_kand = ffi.Uint16 Function(
  ffi.Uint16 __A,
  ffi.Uint16 __B,
);

typedef _dart__mm512_kand = int Function(
  int __A,
  int __B,
);

typedef _c__mm512_kandn = ffi.Uint16 Function(
  ffi.Uint16 __A,
  ffi.Uint16 __B,
);

typedef _dart__mm512_kandn = int Function(
  int __A,
  int __B,
);

typedef _c__mm512_kor = ffi.Uint16 Function(
  ffi.Uint16 __A,
  ffi.Uint16 __B,
);

typedef _dart__mm512_kor = int Function(
  int __A,
  int __B,
);

typedef _c__mm512_kortestc = ffi.Int32 Function(
  ffi.Uint16 __A,
  ffi.Uint16 __B,
);

typedef _dart__mm512_kortestc = int Function(
  int __A,
  int __B,
);

typedef _c__mm512_kortestz = ffi.Int32 Function(
  ffi.Uint16 __A,
  ffi.Uint16 __B,
);

typedef _dart__mm512_kortestz = int Function(
  int __A,
  int __B,
);

typedef _c__kortestc_mask16_u8 = ffi.Uint8 Function(
  ffi.Uint16 __A,
  ffi.Uint16 __B,
);

typedef _dart__kortestc_mask16_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__kortestz_mask16_u8 = ffi.Uint8 Function(
  ffi.Uint16 __A,
  ffi.Uint16 __B,
);

typedef _dart__kortestz_mask16_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__kortest_mask16_u8 = ffi.Uint8 Function(
  ffi.Uint16 __A,
  ffi.Uint16 __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _dart__kortest_mask16_u8 = int Function(
  int __A,
  int __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _c__mm512_kunpackb = ffi.Uint16 Function(
  ffi.Uint16 __A,
  ffi.Uint16 __B,
);

typedef _dart__mm512_kunpackb = int Function(
  int __A,
  int __B,
);

typedef _c__mm512_kxnor = ffi.Uint16 Function(
  ffi.Uint16 __A,
  ffi.Uint16 __B,
);

typedef _dart__mm512_kxnor = int Function(
  int __A,
  int __B,
);

typedef _c__mm512_kxor = ffi.Uint16 Function(
  ffi.Uint16 __A,
  ffi.Uint16 __B,
);

typedef _dart__mm512_kxor = int Function(
  int __A,
  int __B,
);

typedef _c__cvtmask16_u32 = ffi.Uint32 Function(
  ffi.Uint16 __A,
);

typedef _dart__cvtmask16_u32 = int Function(
  int __A,
);

typedef _c__cvtu32_mask16 = ffi.Uint16 Function(
  ffi.Uint32 __A,
);

typedef _dart__cvtu32_mask16 = int Function(
  int __A,
);

typedef _c__load_mask16 = ffi.Uint16 Function(
  ffi.Pointer<ffi.Uint16> __A,
);

typedef _dart__load_mask16 = int Function(
  ffi.Pointer<ffi.Uint16> __A,
);

typedef _c__store_mask16 = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> __A,
  ffi.Uint16 __B,
);

typedef _dart__store_mask16 = void Function(
  ffi.Pointer<ffi.Uint16> __A,
  int __B,
);

typedef _c__knot_mask32 = ffi.Uint32 Function(
  ffi.Uint32 __M,
);

typedef _dart__knot_mask32 = int Function(
  int __M,
);

typedef _c__knot_mask64 = ffi.Uint64 Function(
  ffi.Uint64 __M,
);

typedef _dart__knot_mask64 = int Function(
  int __M,
);

typedef _c__kand_mask32 = ffi.Uint32 Function(
  ffi.Uint32 __A,
  ffi.Uint32 __B,
);

typedef _dart__kand_mask32 = int Function(
  int __A,
  int __B,
);

typedef _c__kand_mask64 = ffi.Uint64 Function(
  ffi.Uint64 __A,
  ffi.Uint64 __B,
);

typedef _dart__kand_mask64 = int Function(
  int __A,
  int __B,
);

typedef _c__kandn_mask32 = ffi.Uint32 Function(
  ffi.Uint32 __A,
  ffi.Uint32 __B,
);

typedef _dart__kandn_mask32 = int Function(
  int __A,
  int __B,
);

typedef _c__kandn_mask64 = ffi.Uint64 Function(
  ffi.Uint64 __A,
  ffi.Uint64 __B,
);

typedef _dart__kandn_mask64 = int Function(
  int __A,
  int __B,
);

typedef _c__kor_mask32 = ffi.Uint32 Function(
  ffi.Uint32 __A,
  ffi.Uint32 __B,
);

typedef _dart__kor_mask32 = int Function(
  int __A,
  int __B,
);

typedef _c__kor_mask64 = ffi.Uint64 Function(
  ffi.Uint64 __A,
  ffi.Uint64 __B,
);

typedef _dart__kor_mask64 = int Function(
  int __A,
  int __B,
);

typedef _c__kxnor_mask32 = ffi.Uint32 Function(
  ffi.Uint32 __A,
  ffi.Uint32 __B,
);

typedef _dart__kxnor_mask32 = int Function(
  int __A,
  int __B,
);

typedef _c__kxnor_mask64 = ffi.Uint64 Function(
  ffi.Uint64 __A,
  ffi.Uint64 __B,
);

typedef _dart__kxnor_mask64 = int Function(
  int __A,
  int __B,
);

typedef _c__kxor_mask32 = ffi.Uint32 Function(
  ffi.Uint32 __A,
  ffi.Uint32 __B,
);

typedef _dart__kxor_mask32 = int Function(
  int __A,
  int __B,
);

typedef _c__kxor_mask64 = ffi.Uint64 Function(
  ffi.Uint64 __A,
  ffi.Uint64 __B,
);

typedef _dart__kxor_mask64 = int Function(
  int __A,
  int __B,
);

typedef _c__kortestc_mask32_u8 = ffi.Uint8 Function(
  ffi.Uint32 __A,
  ffi.Uint32 __B,
);

typedef _dart__kortestc_mask32_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__kortestz_mask32_u8 = ffi.Uint8 Function(
  ffi.Uint32 __A,
  ffi.Uint32 __B,
);

typedef _dart__kortestz_mask32_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__kortest_mask32_u8 = ffi.Uint8 Function(
  ffi.Uint32 __A,
  ffi.Uint32 __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _dart__kortest_mask32_u8 = int Function(
  int __A,
  int __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _c__kortestc_mask64_u8 = ffi.Uint8 Function(
  ffi.Uint64 __A,
  ffi.Uint64 __B,
);

typedef _dart__kortestc_mask64_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__kortestz_mask64_u8 = ffi.Uint8 Function(
  ffi.Uint64 __A,
  ffi.Uint64 __B,
);

typedef _dart__kortestz_mask64_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__kortest_mask64_u8 = ffi.Uint8 Function(
  ffi.Uint64 __A,
  ffi.Uint64 __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _dart__kortest_mask64_u8 = int Function(
  int __A,
  int __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _c__ktestc_mask32_u8 = ffi.Uint8 Function(
  ffi.Uint32 __A,
  ffi.Uint32 __B,
);

typedef _dart__ktestc_mask32_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__ktestz_mask32_u8 = ffi.Uint8 Function(
  ffi.Uint32 __A,
  ffi.Uint32 __B,
);

typedef _dart__ktestz_mask32_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__ktest_mask32_u8 = ffi.Uint8 Function(
  ffi.Uint32 __A,
  ffi.Uint32 __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _dart__ktest_mask32_u8 = int Function(
  int __A,
  int __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _c__ktestc_mask64_u8 = ffi.Uint8 Function(
  ffi.Uint64 __A,
  ffi.Uint64 __B,
);

typedef _dart__ktestc_mask64_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__ktestz_mask64_u8 = ffi.Uint8 Function(
  ffi.Uint64 __A,
  ffi.Uint64 __B,
);

typedef _dart__ktestz_mask64_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__ktest_mask64_u8 = ffi.Uint8 Function(
  ffi.Uint64 __A,
  ffi.Uint64 __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _dart__ktest_mask64_u8 = int Function(
  int __A,
  int __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _c__kadd_mask32 = ffi.Uint32 Function(
  ffi.Uint32 __A,
  ffi.Uint32 __B,
);

typedef _dart__kadd_mask32 = int Function(
  int __A,
  int __B,
);

typedef _c__kadd_mask64 = ffi.Uint64 Function(
  ffi.Uint64 __A,
  ffi.Uint64 __B,
);

typedef _dart__kadd_mask64 = int Function(
  int __A,
  int __B,
);

typedef _c__cvtmask32_u32 = ffi.Uint32 Function(
  ffi.Uint32 __A,
);

typedef _dart__cvtmask32_u32 = int Function(
  int __A,
);

typedef _c__cvtmask64_u64 = ffi.Uint64 Function(
  ffi.Uint64 __A,
);

typedef _dart__cvtmask64_u64 = int Function(
  int __A,
);

typedef _c__cvtu32_mask32 = ffi.Uint32 Function(
  ffi.Uint32 __A,
);

typedef _dart__cvtu32_mask32 = int Function(
  int __A,
);

typedef _c__cvtu64_mask64 = ffi.Uint64 Function(
  ffi.Uint64 __A,
);

typedef _dart__cvtu64_mask64 = int Function(
  int __A,
);

typedef _c__load_mask32 = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint32> __A,
);

typedef _dart__load_mask32 = int Function(
  ffi.Pointer<ffi.Uint32> __A,
);

typedef _c__load_mask64 = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint64> __A,
);

typedef _dart__load_mask64 = int Function(
  ffi.Pointer<ffi.Uint64> __A,
);

typedef _c__store_mask32 = ffi.Void Function(
  ffi.Pointer<ffi.Uint32> __A,
  ffi.Uint32 __B,
);

typedef _dart__store_mask32 = void Function(
  ffi.Pointer<ffi.Uint32> __A,
  int __B,
);

typedef _c__store_mask64 = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> __A,
  ffi.Uint64 __B,
);

typedef _dart__store_mask64 = void Function(
  ffi.Pointer<ffi.Uint64> __A,
  int __B,
);

typedef _c__mm512_kunpackd = ffi.Uint64 Function(
  ffi.Uint64 __A,
  ffi.Uint64 __B,
);

typedef _dart__mm512_kunpackd = int Function(
  int __A,
  int __B,
);

typedef _c__mm512_kunpackw = ffi.Uint32 Function(
  ffi.Uint32 __A,
  ffi.Uint32 __B,
);

typedef _dart__mm512_kunpackw = int Function(
  int __A,
  int __B,
);

typedef _c__knot_mask8 = ffi.Uint8 Function(
  ffi.Uint8 __M,
);

typedef _dart__knot_mask8 = int Function(
  int __M,
);

typedef _c__kand_mask8 = ffi.Uint8 Function(
  ffi.Uint8 __A,
  ffi.Uint8 __B,
);

typedef _dart__kand_mask8 = int Function(
  int __A,
  int __B,
);

typedef _c__kandn_mask8 = ffi.Uint8 Function(
  ffi.Uint8 __A,
  ffi.Uint8 __B,
);

typedef _dart__kandn_mask8 = int Function(
  int __A,
  int __B,
);

typedef _c__kor_mask8 = ffi.Uint8 Function(
  ffi.Uint8 __A,
  ffi.Uint8 __B,
);

typedef _dart__kor_mask8 = int Function(
  int __A,
  int __B,
);

typedef _c__kxnor_mask8 = ffi.Uint8 Function(
  ffi.Uint8 __A,
  ffi.Uint8 __B,
);

typedef _dart__kxnor_mask8 = int Function(
  int __A,
  int __B,
);

typedef _c__kxor_mask8 = ffi.Uint8 Function(
  ffi.Uint8 __A,
  ffi.Uint8 __B,
);

typedef _dart__kxor_mask8 = int Function(
  int __A,
  int __B,
);

typedef _c__kortestc_mask8_u8 = ffi.Uint8 Function(
  ffi.Uint8 __A,
  ffi.Uint8 __B,
);

typedef _dart__kortestc_mask8_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__kortestz_mask8_u8 = ffi.Uint8 Function(
  ffi.Uint8 __A,
  ffi.Uint8 __B,
);

typedef _dart__kortestz_mask8_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__kortest_mask8_u8 = ffi.Uint8 Function(
  ffi.Uint8 __A,
  ffi.Uint8 __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _dart__kortest_mask8_u8 = int Function(
  int __A,
  int __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _c__ktestc_mask8_u8 = ffi.Uint8 Function(
  ffi.Uint8 __A,
  ffi.Uint8 __B,
);

typedef _dart__ktestc_mask8_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__ktestz_mask8_u8 = ffi.Uint8 Function(
  ffi.Uint8 __A,
  ffi.Uint8 __B,
);

typedef _dart__ktestz_mask8_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__ktest_mask8_u8 = ffi.Uint8 Function(
  ffi.Uint8 __A,
  ffi.Uint8 __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _dart__ktest_mask8_u8 = int Function(
  int __A,
  int __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _c__ktestc_mask16_u8 = ffi.Uint8 Function(
  ffi.Uint16 __A,
  ffi.Uint16 __B,
);

typedef _dart__ktestc_mask16_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__ktestz_mask16_u8 = ffi.Uint8 Function(
  ffi.Uint16 __A,
  ffi.Uint16 __B,
);

typedef _dart__ktestz_mask16_u8 = int Function(
  int __A,
  int __B,
);

typedef _c__ktest_mask16_u8 = ffi.Uint8 Function(
  ffi.Uint16 __A,
  ffi.Uint16 __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _dart__ktest_mask16_u8 = int Function(
  int __A,
  int __B,
  ffi.Pointer<ffi.Uint8> __C,
);

typedef _c__kadd_mask8 = ffi.Uint8 Function(
  ffi.Uint8 __A,
  ffi.Uint8 __B,
);

typedef _dart__kadd_mask8 = int Function(
  int __A,
  int __B,
);

typedef _c__kadd_mask16 = ffi.Uint16 Function(
  ffi.Uint16 __A,
  ffi.Uint16 __B,
);

typedef _dart__kadd_mask16 = int Function(
  int __A,
  int __B,
);

typedef _c__cvtmask8_u32 = ffi.Uint32 Function(
  ffi.Uint8 __A,
);

typedef _dart__cvtmask8_u32 = int Function(
  int __A,
);

typedef _c__cvtu32_mask8 = ffi.Uint8 Function(
  ffi.Uint32 __A,
);

typedef _dart__cvtu32_mask8 = int Function(
  int __A,
);

typedef _c__load_mask8 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint8> __A,
);

typedef _dart__load_mask8 = int Function(
  ffi.Pointer<ffi.Uint8> __A,
);

typedef _c__store_mask8 = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> __A,
  ffi.Uint8 __B,
);

typedef _dart__store_mask8 = void Function(
  ffi.Pointer<ffi.Uint8> __A,
  int __B,
);

typedef _c__mm_cvtsbh_ss = ffi.Float Function(
  ffi.Uint16 __A,
);

typedef _dart__mm_cvtsbh_ss = double Function(
  int __A,
);

typedef _c__mm_cvtness_sbh = ffi.Uint16 Function(
  ffi.Float __A,
);

typedef _dart__mm_cvtness_sbh = int Function(
  double __A,
);

typedef _c__rdpkru_u32 = ffi.Uint32 Function();

typedef _dart__rdpkru_u32 = int Function();

typedef _c__wrpkru = ffi.Void Function(
  ffi.Uint32 __val,
);

typedef _dart__wrpkru = void Function(
  int __val,
);

typedef _c__rdpid_u32 = ffi.Uint32 Function();

typedef _dart__rdpid_u32 = int Function();

typedef _c__rdrand16_step = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __p,
);

typedef _dart__rdrand16_step = int Function(
  ffi.Pointer<ffi.Uint16> __p,
);

typedef _c__rdrand32_step = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> __p,
);

typedef _dart__rdrand32_step = int Function(
  ffi.Pointer<ffi.Uint32> __p,
);

typedef _c__rdrand64_step = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> __p,
);

typedef _dart__rdrand64_step = int Function(
  ffi.Pointer<ffi.Uint64> __p,
);

typedef _c__readfsbase_u32 = ffi.Uint32 Function();

typedef _dart__readfsbase_u32 = int Function();

typedef _c__readfsbase_u64 = ffi.Uint64 Function();

typedef _dart__readfsbase_u64 = int Function();

typedef _c__readgsbase_u32 = ffi.Uint32 Function();

typedef _dart__readgsbase_u32 = int Function();

typedef _c__readgsbase_u64 = ffi.Uint64 Function();

typedef _dart__readgsbase_u64 = int Function();

typedef _c__writefsbase_u32 = ffi.Void Function(
  ffi.Uint32 __V,
);

typedef _dart__writefsbase_u32 = void Function(
  int __V,
);

typedef _c__writefsbase_u64 = ffi.Void Function(
  ffi.Uint64 __V,
);

typedef _dart__writefsbase_u64 = void Function(
  int __V,
);

typedef _c__writegsbase_u32 = ffi.Void Function(
  ffi.Uint32 __V,
);

typedef _dart__writegsbase_u32 = void Function(
  int __V,
);

typedef _c__writegsbase_u64 = ffi.Void Function(
  ffi.Uint64 __V,
);

typedef _dart__writegsbase_u64 = void Function(
  int __V,
);

typedef _c__loadbe_i16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Void> __P,
);

typedef _dart__loadbe_i16 = int Function(
  ffi.Pointer<ffi.Void> __P,
);

typedef _c__storebe_i16 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __P,
  ffi.Int16 __D,
);

typedef _dart__storebe_i16 = void Function(
  ffi.Pointer<ffi.Void> __P,
  int __D,
);

typedef _c__loadbe_i32 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __P,
);

typedef _dart__loadbe_i32 = int Function(
  ffi.Pointer<ffi.Void> __P,
);

typedef _c__storebe_i32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __P,
  ffi.Int32 __D,
);

typedef _dart__storebe_i32 = void Function(
  ffi.Pointer<ffi.Void> __P,
  int __D,
);

typedef _c__loadbe_i64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> __P,
);

typedef _dart__loadbe_i64 = int Function(
  ffi.Pointer<ffi.Void> __P,
);

typedef _c__storebe_i64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __P,
  ffi.Int64 __D,
);

typedef _dart__storebe_i64 = void Function(
  ffi.Pointer<ffi.Void> __P,
  int __D,
);

typedef _c__xbegin = ffi.Uint32 Function();

typedef _dart__xbegin = int Function();

typedef _c__xend = ffi.Void Function();

typedef _dart__xend = void Function();

typedef _c__xtest = ffi.Int32 Function();

typedef _dart__xtest = int Function();

typedef _c__fxsave = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _dart__fxsave = void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _c__fxrstor = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _dart__fxrstor = void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _c__fxsave64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _dart__fxsave64 = void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _c__fxrstor64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _dart__fxrstor64 = void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _c__xsave = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
  ffi.Uint64 __m,
);

typedef _dart__xsave = void Function(
  ffi.Pointer<ffi.Void> __p,
  int __m,
);

typedef _c__xrstor = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
  ffi.Uint64 __m,
);

typedef _dart__xrstor = void Function(
  ffi.Pointer<ffi.Void> __p,
  int __m,
);

typedef _c__xsave64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
  ffi.Uint64 __m,
);

typedef _dart__xsave64 = void Function(
  ffi.Pointer<ffi.Void> __p,
  int __m,
);

typedef _c__xrstor64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
  ffi.Uint64 __m,
);

typedef _dart__xrstor64 = void Function(
  ffi.Pointer<ffi.Void> __p,
  int __m,
);

typedef _c__xsaveopt = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
  ffi.Uint64 __m,
);

typedef _dart__xsaveopt = void Function(
  ffi.Pointer<ffi.Void> __p,
  int __m,
);

typedef _c__xsaveopt64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
  ffi.Uint64 __m,
);

typedef _dart__xsaveopt64 = void Function(
  ffi.Pointer<ffi.Void> __p,
  int __m,
);

typedef _c__xsavec = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
  ffi.Uint64 __m,
);

typedef _dart__xsavec = void Function(
  ffi.Pointer<ffi.Void> __p,
  int __m,
);

typedef _c__xsavec64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
  ffi.Uint64 __m,
);

typedef _dart__xsavec64 = void Function(
  ffi.Pointer<ffi.Void> __p,
  int __m,
);

typedef _c__xsaves = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
  ffi.Uint64 __m,
);

typedef _dart__xsaves = void Function(
  ffi.Pointer<ffi.Void> __p,
  int __m,
);

typedef _c__xrstors = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
  ffi.Uint64 __m,
);

typedef _dart__xrstors = void Function(
  ffi.Pointer<ffi.Void> __p,
  int __m,
);

typedef _c__xrstors64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
  ffi.Uint64 __m,
);

typedef _dart__xrstors64 = void Function(
  ffi.Pointer<ffi.Void> __p,
  int __m,
);

typedef _c__xsaves64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
  ffi.Uint64 __m,
);

typedef _dart__xsaves64 = void Function(
  ffi.Pointer<ffi.Void> __p,
  int __m,
);

typedef _c__incsspd = ffi.Void Function(
  ffi.Int32 __a,
);

typedef _dart__incsspd = void Function(
  int __a,
);

typedef _c__incsspq = ffi.Void Function(
  ffi.Uint64 __a,
);

typedef _dart__incsspq = void Function(
  int __a,
);

typedef _c__inc_ssp = ffi.Void Function(
  ffi.Uint32 __a,
);

typedef _dart__inc_ssp = void Function(
  int __a,
);

typedef _c__rdsspd = ffi.Uint32 Function(
  ffi.Uint32 __a,
);

typedef _dart__rdsspd = int Function(
  int __a,
);

typedef _c__rdsspq = ffi.Uint64 Function(
  ffi.Uint64 __a,
);

typedef _dart__rdsspq = int Function(
  int __a,
);

typedef _c__get_ssp = ffi.Uint64 Function();

typedef _dart__get_ssp = int Function();

typedef _c__saveprevssp = ffi.Void Function();

typedef _dart__saveprevssp = void Function();

typedef _c__rstorssp = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _dart__rstorssp = void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _c__wrssd = ffi.Void Function(
  ffi.Uint32 __a,
  ffi.Pointer<ffi.Void> __p,
);

typedef _dart__wrssd = void Function(
  int __a,
  ffi.Pointer<ffi.Void> __p,
);

typedef _c__wrssq = ffi.Void Function(
  ffi.Uint64 __a,
  ffi.Pointer<ffi.Void> __p,
);

typedef _dart__wrssq = void Function(
  int __a,
  ffi.Pointer<ffi.Void> __p,
);

typedef _c__wrussd = ffi.Void Function(
  ffi.Uint32 __a,
  ffi.Pointer<ffi.Void> __p,
);

typedef _dart__wrussd = void Function(
  int __a,
  ffi.Pointer<ffi.Void> __p,
);

typedef _c__wrussq = ffi.Void Function(
  ffi.Uint64 __a,
  ffi.Pointer<ffi.Void> __p,
);

typedef _dart__wrussq = void Function(
  int __a,
  ffi.Pointer<ffi.Void> __p,
);

typedef _c__setssbsy = ffi.Void Function();

typedef _dart__setssbsy = void Function();

typedef _c__clrssbsy = ffi.Void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _dart__clrssbsy = void Function(
  ffi.Pointer<ffi.Void> __p,
);

typedef _c__addcarryx_u32 = ffi.Uint8 Function(
  ffi.Uint8 __cf,
  ffi.Uint32 __x,
  ffi.Uint32 __y,
  ffi.Pointer<ffi.Uint32> __p,
);

typedef _dart__addcarryx_u32 = int Function(
  int __cf,
  int __x,
  int __y,
  ffi.Pointer<ffi.Uint32> __p,
);

typedef _c__addcarryx_u64 = ffi.Uint8 Function(
  ffi.Uint8 __cf,
  ffi.Uint64 __x,
  ffi.Uint64 __y,
  ffi.Pointer<ffi.Uint64> __p,
);

typedef _dart__addcarryx_u64 = int Function(
  int __cf,
  int __x,
  int __y,
  ffi.Pointer<ffi.Uint64> __p,
);

typedef _c__addcarry_u32 = ffi.Uint8 Function(
  ffi.Uint8 __cf,
  ffi.Uint32 __x,
  ffi.Uint32 __y,
  ffi.Pointer<ffi.Uint32> __p,
);

typedef _dart__addcarry_u32 = int Function(
  int __cf,
  int __x,
  int __y,
  ffi.Pointer<ffi.Uint32> __p,
);

typedef _c__addcarry_u64 = ffi.Uint8 Function(
  ffi.Uint8 __cf,
  ffi.Uint64 __x,
  ffi.Uint64 __y,
  ffi.Pointer<ffi.Uint64> __p,
);

typedef _dart__addcarry_u64 = int Function(
  int __cf,
  int __x,
  int __y,
  ffi.Pointer<ffi.Uint64> __p,
);

typedef _c__subborrow_u32 = ffi.Uint8 Function(
  ffi.Uint8 __cf,
  ffi.Uint32 __x,
  ffi.Uint32 __y,
  ffi.Pointer<ffi.Uint32> __p,
);

typedef _dart__subborrow_u32 = int Function(
  int __cf,
  int __x,
  int __y,
  ffi.Pointer<ffi.Uint32> __p,
);

typedef _c__subborrow_u64 = ffi.Uint8 Function(
  ffi.Uint8 __cf,
  ffi.Uint64 __x,
  ffi.Uint64 __y,
  ffi.Pointer<ffi.Uint64> __p,
);

typedef _dart__subborrow_u64 = int Function(
  int __cf,
  int __x,
  int __y,
  ffi.Pointer<ffi.Uint64> __p,
);

typedef _c__rdseed16_step = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __p,
);

typedef _dart__rdseed16_step = int Function(
  ffi.Pointer<ffi.Uint16> __p,
);

typedef _c__rdseed32_step = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> __p,
);

typedef _dart__rdseed32_step = int Function(
  ffi.Pointer<ffi.Uint32> __p,
);

typedef _c__rdseed64_step = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> __p,
);

typedef _dart__rdseed64_step = int Function(
  ffi.Pointer<ffi.Uint64> __p,
);

typedef _c__wbnoinvd = ffi.Void Function();

typedef _dart__wbnoinvd = void Function();

typedef _c__cldemote = ffi.Void Function(
  ffi.Pointer<ffi.Void> __P,
);

typedef _dart__cldemote = void Function(
  ffi.Pointer<ffi.Void> __P,
);

typedef _c__umonitor = ffi.Void Function(
  ffi.Pointer<ffi.Void> __address,
);

typedef _dart__umonitor = void Function(
  ffi.Pointer<ffi.Void> __address,
);

typedef _c__umwait = ffi.Uint8 Function(
  ffi.Uint32 __control,
  ffi.Uint64 __counter,
);

typedef _dart__umwait = int Function(
  int __control,
  int __counter,
);

typedef _c__tpause = ffi.Uint8 Function(
  ffi.Uint32 __control,
  ffi.Uint64 __counter,
);

typedef _dart__tpause = int Function(
  int __control,
  int __counter,
);

typedef _c__directstoreu_u32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Uint32 __value,
);

typedef _dart__directstoreu_u32 = void Function(
  ffi.Pointer<ffi.Void> __dst,
  int __value,
);

typedef _c__directstoreu_u64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Uint64 __value,
);

typedef _dart__directstoreu_u64 = void Function(
  ffi.Pointer<ffi.Void> __dst,
  int __value,
);

typedef _c__movdir64b = ffi.Void Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
);

typedef _dart__movdir64b = void Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
);

typedef _c__pconfig_u32 = ffi.Uint32 Function(
  ffi.Uint32 __leaf,
  ffi.Pointer<ffi.Uint64> __d,
);

typedef _dart__pconfig_u32 = int Function(
  int __leaf,
  ffi.Pointer<ffi.Uint64> __d,
);

typedef _c__enclu_u32 = ffi.Uint32 Function(
  ffi.Uint32 __leaf,
  ffi.Pointer<ffi.Uint64> __d,
);

typedef _dart__enclu_u32 = int Function(
  int __leaf,
  ffi.Pointer<ffi.Uint64> __d,
);

typedef _c__encls_u32 = ffi.Uint32 Function(
  ffi.Uint32 __leaf,
  ffi.Pointer<ffi.Uint64> __d,
);

typedef _dart__encls_u32 = int Function(
  int __leaf,
  ffi.Pointer<ffi.Uint64> __d,
);

typedef _c__enclv_u32 = ffi.Uint32 Function(
  ffi.Uint32 __leaf,
  ffi.Pointer<ffi.Uint64> __d,
);

typedef _dart__enclv_u32 = int Function(
  int __leaf,
  ffi.Pointer<ffi.Uint64> __d,
);

typedef _c__ptwrite32 = ffi.Void Function(
  ffi.Uint32 __value,
);

typedef _dart__ptwrite32 = void Function(
  int __value,
);

typedef _c__ptwrite64 = ffi.Void Function(
  ffi.Uint64 __value,
);

typedef _dart__ptwrite64 = void Function(
  int __value,
);

typedef _c__invpcid = ffi.Void Function(
  ffi.Uint32 __type,
  ffi.Pointer<ffi.Void> __descriptor,
);

typedef _dart__invpcid = void Function(
  int __type,
  ffi.Pointer<ffi.Void> __descriptor,
);

typedef _c__tile_loadconfig = ffi.Void Function(
  ffi.Pointer<ffi.Void> __config,
);

typedef _dart__tile_loadconfig = void Function(
  ffi.Pointer<ffi.Void> __config,
);

typedef _c__tile_storeconfig = ffi.Void Function(
  ffi.Pointer<ffi.Void> __config,
);

typedef _dart__tile_storeconfig = void Function(
  ffi.Pointer<ffi.Void> __config,
);

typedef _c__tile_release = ffi.Void Function();

typedef _dart__tile_release = void Function();

typedef _c__enqcmd = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
);

typedef _dart__enqcmd = int Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
);

typedef _c__enqcmds = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
);

typedef _dart__enqcmds = int Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
);

typedef _c__serialize = ffi.Void Function();

typedef _dart__serialize = void Function();

typedef _c__xsusldtrk = ffi.Void Function();

typedef _dart__xsusldtrk = void Function();

typedef _c__xresldtrk = ffi.Void Function();

typedef _dart__xresldtrk = void Function();

typedef _c_SDL_GetCPUCount = ffi.Int32 Function();

typedef _dart_SDL_GetCPUCount = int Function();

typedef _c_SDL_GetCPUCacheLineSize = ffi.Int32 Function();

typedef _dart_SDL_GetCPUCacheLineSize = int Function();

typedef _c_SDL_HasRDTSC = ffi.Int32 Function();

typedef _dart_SDL_HasRDTSC = int Function();

typedef _c_SDL_HasAltiVec = ffi.Int32 Function();

typedef _dart_SDL_HasAltiVec = int Function();

typedef _c_SDL_HasMMX = ffi.Int32 Function();

typedef _dart_SDL_HasMMX = int Function();

typedef _c_SDL_Has3DNow = ffi.Int32 Function();

typedef _dart_SDL_Has3DNow = int Function();

typedef _c_SDL_HasSSE = ffi.Int32 Function();

typedef _dart_SDL_HasSSE = int Function();

typedef _c_SDL_HasSSE2 = ffi.Int32 Function();

typedef _dart_SDL_HasSSE2 = int Function();

typedef _c_SDL_HasSSE3 = ffi.Int32 Function();

typedef _dart_SDL_HasSSE3 = int Function();

typedef _c_SDL_HasSSE41 = ffi.Int32 Function();

typedef _dart_SDL_HasSSE41 = int Function();

typedef _c_SDL_HasSSE42 = ffi.Int32 Function();

typedef _dart_SDL_HasSSE42 = int Function();

typedef _c_SDL_HasAVX = ffi.Int32 Function();

typedef _dart_SDL_HasAVX = int Function();

typedef _c_SDL_HasAVX2 = ffi.Int32 Function();

typedef _dart_SDL_HasAVX2 = int Function();

typedef _c_SDL_HasAVX512F = ffi.Int32 Function();

typedef _dart_SDL_HasAVX512F = int Function();

typedef _c_SDL_HasARMSIMD = ffi.Int32 Function();

typedef _dart_SDL_HasARMSIMD = int Function();

typedef _c_SDL_HasNEON = ffi.Int32 Function();

typedef _dart_SDL_HasNEON = int Function();

typedef _c_SDL_GetSystemRAM = ffi.Int32 Function();

typedef _dart_SDL_GetSystemRAM = int Function();

typedef _c_SDL_SIMDGetAlignment = ffi.Uint64 Function();

typedef _dart_SDL_SIMDGetAlignment = int Function();

typedef _c_SDL_SIMDAlloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 len,
);

typedef _dart_SDL_SIMDAlloc = ffi.Pointer<ffi.Void> Function(
  int len,
);

typedef _c_SDL_SIMDFree = ffi.Void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_SDL_SIMDFree = void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_SDL_GetMouseFocus = ffi.Pointer<SDL_Window> Function();

typedef _dart_SDL_GetMouseFocus = ffi.Pointer<SDL_Window> Function();

typedef _c_SDL_GetMouseState = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int32> x,
  ffi.Pointer<ffi.Int32> y,
);

typedef _dart_SDL_GetMouseState = int Function(
  ffi.Pointer<ffi.Int32> x,
  ffi.Pointer<ffi.Int32> y,
);

typedef _c_SDL_GetGlobalMouseState = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int32> x,
  ffi.Pointer<ffi.Int32> y,
);

typedef _dart_SDL_GetGlobalMouseState = int Function(
  ffi.Pointer<ffi.Int32> x,
  ffi.Pointer<ffi.Int32> y,
);

typedef _c_SDL_GetRelativeMouseState = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int32> x,
  ffi.Pointer<ffi.Int32> y,
);

typedef _dart_SDL_GetRelativeMouseState = int Function(
  ffi.Pointer<ffi.Int32> x,
  ffi.Pointer<ffi.Int32> y,
);

typedef _c_SDL_WarpMouseInWindow = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_SDL_WarpMouseInWindow = void Function(
  ffi.Pointer<SDL_Window> window,
  int x,
  int y,
);

typedef _c_SDL_WarpMouseGlobal = ffi.Int32 Function(
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_SDL_WarpMouseGlobal = int Function(
  int x,
  int y,
);

typedef _c_SDL_SetRelativeMouseMode = ffi.Int32 Function(
  ffi.Int32 enabled,
);

typedef _dart_SDL_SetRelativeMouseMode = int Function(
  int enabled,
);

typedef _c_SDL_CaptureMouse = ffi.Int32 Function(
  ffi.Int32 enabled,
);

typedef _dart_SDL_CaptureMouse = int Function(
  int enabled,
);

typedef _c_SDL_GetRelativeMouseMode = ffi.Int32 Function();

typedef _dart_SDL_GetRelativeMouseMode = int Function();

typedef _c_SDL_CreateCursor = ffi.Pointer<SDL_Cursor> Function(
  ffi.Pointer<ffi.Uint8> data,
  ffi.Pointer<ffi.Uint8> mask,
  ffi.Int32 w,
  ffi.Int32 h,
  ffi.Int32 hot_x,
  ffi.Int32 hot_y,
);

typedef _dart_SDL_CreateCursor = ffi.Pointer<SDL_Cursor> Function(
  ffi.Pointer<ffi.Uint8> data,
  ffi.Pointer<ffi.Uint8> mask,
  int w,
  int h,
  int hot_x,
  int hot_y,
);

typedef _c_SDL_CreateColorCursor = ffi.Pointer<SDL_Cursor> Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Int32 hot_x,
  ffi.Int32 hot_y,
);

typedef _dart_SDL_CreateColorCursor = ffi.Pointer<SDL_Cursor> Function(
  ffi.Pointer<SDL_Surface> surface,
  int hot_x,
  int hot_y,
);

typedef _c_SDL_CreateSystemCursor = ffi.Pointer<SDL_Cursor> Function(
  ffi.Int32 id,
);

typedef _dart_SDL_CreateSystemCursor = ffi.Pointer<SDL_Cursor> Function(
  int id,
);

typedef _c_SDL_SetCursor = ffi.Void Function(
  ffi.Pointer<SDL_Cursor> cursor,
);

typedef _dart_SDL_SetCursor = void Function(
  ffi.Pointer<SDL_Cursor> cursor,
);

typedef _c_SDL_GetCursor = ffi.Pointer<SDL_Cursor> Function();

typedef _dart_SDL_GetCursor = ffi.Pointer<SDL_Cursor> Function();

typedef _c_SDL_GetDefaultCursor = ffi.Pointer<SDL_Cursor> Function();

typedef _dart_SDL_GetDefaultCursor = ffi.Pointer<SDL_Cursor> Function();

typedef _c_SDL_FreeCursor = ffi.Void Function(
  ffi.Pointer<SDL_Cursor> cursor,
);

typedef _dart_SDL_FreeCursor = void Function(
  ffi.Pointer<SDL_Cursor> cursor,
);

typedef _c_SDL_ShowCursor = ffi.Int32 Function(
  ffi.Int32 toggle,
);

typedef _dart_SDL_ShowCursor = int Function(
  int toggle,
);

typedef _c_SDL_LockJoysticks = ffi.Void Function();

typedef _dart_SDL_LockJoysticks = void Function();

typedef _c_SDL_UnlockJoysticks = ffi.Void Function();

typedef _dart_SDL_UnlockJoysticks = void Function();

typedef _c_SDL_NumJoysticks = ffi.Int32 Function();

typedef _dart_SDL_NumJoysticks = int Function();

typedef _c_SDL_JoystickNameForIndex = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_JoystickNameForIndex = ffi.Pointer<ffi.Int8> Function(
  int device_index,
);

typedef _c_SDL_JoystickGetDevicePlayerIndex = ffi.Int32 Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_JoystickGetDevicePlayerIndex = int Function(
  int device_index,
);

typedef _c_SDL_JoystickGetDeviceVendor = ffi.Uint16 Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_JoystickGetDeviceVendor = int Function(
  int device_index,
);

typedef _c_SDL_JoystickGetDeviceProduct = ffi.Uint16 Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_JoystickGetDeviceProduct = int Function(
  int device_index,
);

typedef _c_SDL_JoystickGetDeviceProductVersion = ffi.Uint16 Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_JoystickGetDeviceProductVersion = int Function(
  int device_index,
);

typedef _c_SDL_JoystickGetDeviceType = ffi.Int32 Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_JoystickGetDeviceType = int Function(
  int device_index,
);

typedef _c_SDL_JoystickGetDeviceInstanceID = ffi.Int32 Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_JoystickGetDeviceInstanceID = int Function(
  int device_index,
);

typedef _c_SDL_JoystickOpen = ffi.Pointer<_SDL_Joystick> Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_JoystickOpen = ffi.Pointer<_SDL_Joystick> Function(
  int device_index,
);

typedef _c_SDL_JoystickFromInstanceID = ffi.Pointer<_SDL_Joystick> Function(
  ffi.Int32 instance_id,
);

typedef _dart_SDL_JoystickFromInstanceID = ffi.Pointer<_SDL_Joystick> Function(
  int instance_id,
);

typedef _c_SDL_JoystickFromPlayerIndex = ffi.Pointer<_SDL_Joystick> Function(
  ffi.Int32 player_index,
);

typedef _dart_SDL_JoystickFromPlayerIndex = ffi.Pointer<_SDL_Joystick> Function(
  int player_index,
);

typedef _c_SDL_JoystickName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_JoystickName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_JoystickGetPlayerIndex = ffi.Int32 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_JoystickGetPlayerIndex = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_JoystickSetPlayerIndex = ffi.Void Function(
  ffi.Pointer<_SDL_Joystick> joystick,
  ffi.Int32 player_index,
);

typedef _dart_SDL_JoystickSetPlayerIndex = void Function(
  ffi.Pointer<_SDL_Joystick> joystick,
  int player_index,
);

typedef _c_SDL_JoystickGetVendor = ffi.Uint16 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_JoystickGetVendor = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_JoystickGetProduct = ffi.Uint16 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_JoystickGetProduct = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_JoystickGetProductVersion = ffi.Uint16 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_JoystickGetProductVersion = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_JoystickGetType = ffi.Int32 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_JoystickGetType = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_JoystickGetAttached = ffi.Int32 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_JoystickGetAttached = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_JoystickInstanceID = ffi.Int32 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_JoystickInstanceID = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_JoystickNumAxes = ffi.Int32 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_JoystickNumAxes = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_JoystickNumBalls = ffi.Int32 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_JoystickNumBalls = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_JoystickNumHats = ffi.Int32 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_JoystickNumHats = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_JoystickNumButtons = ffi.Int32 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_JoystickNumButtons = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_JoystickUpdate = ffi.Void Function();

typedef _dart_SDL_JoystickUpdate = void Function();

typedef _c_SDL_JoystickEventState = ffi.Int32 Function(
  ffi.Int32 state,
);

typedef _dart_SDL_JoystickEventState = int Function(
  int state,
);

typedef _c_SDL_JoystickGetAxis = ffi.Int16 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
  ffi.Int32 axis,
);

typedef _dart_SDL_JoystickGetAxis = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
  int axis,
);

typedef _c_SDL_JoystickGetAxisInitialState = ffi.Int32 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
  ffi.Int32 axis,
  ffi.Pointer<ffi.Int16> state,
);

typedef _dart_SDL_JoystickGetAxisInitialState = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
  int axis,
  ffi.Pointer<ffi.Int16> state,
);

typedef _c_SDL_JoystickGetHat = ffi.Uint8 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
  ffi.Int32 hat,
);

typedef _dart_SDL_JoystickGetHat = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
  int hat,
);

typedef _c_SDL_JoystickGetBall = ffi.Int32 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
  ffi.Int32 ball,
  ffi.Pointer<ffi.Int32> dx,
  ffi.Pointer<ffi.Int32> dy,
);

typedef _dart_SDL_JoystickGetBall = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
  int ball,
  ffi.Pointer<ffi.Int32> dx,
  ffi.Pointer<ffi.Int32> dy,
);

typedef _c_SDL_JoystickGetButton = ffi.Uint8 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
  ffi.Int32 button,
);

typedef _dart_SDL_JoystickGetButton = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
  int button,
);

typedef _c_SDL_JoystickRumble = ffi.Int32 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
  ffi.Uint16 low_frequency_rumble,
  ffi.Uint16 high_frequency_rumble,
  ffi.Uint32 duration_ms,
);

typedef _dart_SDL_JoystickRumble = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
  int low_frequency_rumble,
  int high_frequency_rumble,
  int duration_ms,
);

typedef _c_SDL_JoystickClose = ffi.Void Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_JoystickClose = void Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_JoystickCurrentPowerLevel = ffi.Int32 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_JoystickCurrentPowerLevel = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_GameControllerAddMappingsFromRW = ffi.Int32 Function(
  ffi.Pointer<SDL_RWops> rw,
  ffi.Int32 freerw,
);

typedef _dart_SDL_GameControllerAddMappingsFromRW = int Function(
  ffi.Pointer<SDL_RWops> rw,
  int freerw,
);

typedef _c_SDL_GameControllerAddMapping = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> mappingString,
);

typedef _dart_SDL_GameControllerAddMapping = int Function(
  ffi.Pointer<ffi.Int8> mappingString,
);

typedef _c_SDL_GameControllerNumMappings = ffi.Int32 Function();

typedef _dart_SDL_GameControllerNumMappings = int Function();

typedef _c_SDL_GameControllerMappingForIndex = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 mapping_index,
);

typedef _dart_SDL_GameControllerMappingForIndex = ffi.Pointer<ffi.Int8>
    Function(
  int mapping_index,
);

typedef _c_SDL_GameControllerMapping = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _dart_SDL_GameControllerMapping = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _c_SDL_IsGameController = ffi.Int32 Function(
  ffi.Int32 joystick_index,
);

typedef _dart_SDL_IsGameController = int Function(
  int joystick_index,
);

typedef _c_SDL_GameControllerNameForIndex = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 joystick_index,
);

typedef _dart_SDL_GameControllerNameForIndex = ffi.Pointer<ffi.Int8> Function(
  int joystick_index,
);

typedef _c_SDL_GameControllerTypeForIndex = ffi.Int32 Function(
  ffi.Int32 joystick_index,
);

typedef _dart_SDL_GameControllerTypeForIndex = int Function(
  int joystick_index,
);

typedef _c_SDL_GameControllerMappingForDeviceIndex = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Int32 joystick_index,
);

typedef _dart_SDL_GameControllerMappingForDeviceIndex = ffi.Pointer<ffi.Int8>
    Function(
  int joystick_index,
);

typedef _c_SDL_GameControllerOpen = ffi.Pointer<_SDL_GameController> Function(
  ffi.Int32 joystick_index,
);

typedef _dart_SDL_GameControllerOpen = ffi.Pointer<_SDL_GameController>
    Function(
  int joystick_index,
);

typedef _c_SDL_GameControllerFromInstanceID = ffi.Pointer<_SDL_GameController>
    Function(
  ffi.Int32 joyid,
);

typedef _dart_SDL_GameControllerFromInstanceID
    = ffi.Pointer<_SDL_GameController> Function(
  int joyid,
);

typedef _c_SDL_GameControllerFromPlayerIndex = ffi.Pointer<_SDL_GameController>
    Function(
  ffi.Int32 player_index,
);

typedef _dart_SDL_GameControllerFromPlayerIndex
    = ffi.Pointer<_SDL_GameController> Function(
  int player_index,
);

typedef _c_SDL_GameControllerName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _dart_SDL_GameControllerName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _c_SDL_GameControllerGetType = ffi.Int32 Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _dart_SDL_GameControllerGetType = int Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _c_SDL_GameControllerGetPlayerIndex = ffi.Int32 Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _dart_SDL_GameControllerGetPlayerIndex = int Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _c_SDL_GameControllerSetPlayerIndex = ffi.Void Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
  ffi.Int32 player_index,
);

typedef _dart_SDL_GameControllerSetPlayerIndex = void Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
  int player_index,
);

typedef _c_SDL_GameControllerGetVendor = ffi.Uint16 Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _dart_SDL_GameControllerGetVendor = int Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _c_SDL_GameControllerGetProduct = ffi.Uint16 Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _dart_SDL_GameControllerGetProduct = int Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _c_SDL_GameControllerGetProductVersion = ffi.Uint16 Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _dart_SDL_GameControllerGetProductVersion = int Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _c_SDL_GameControllerGetAttached = ffi.Int32 Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _dart_SDL_GameControllerGetAttached = int Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _c_SDL_GameControllerGetJoystick = ffi.Pointer<_SDL_Joystick> Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _dart_SDL_GameControllerGetJoystick = ffi.Pointer<_SDL_Joystick>
    Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _c_SDL_GameControllerEventState = ffi.Int32 Function(
  ffi.Int32 state,
);

typedef _dart_SDL_GameControllerEventState = int Function(
  int state,
);

typedef _c_SDL_GameControllerUpdate = ffi.Void Function();

typedef _dart_SDL_GameControllerUpdate = void Function();

typedef _c_SDL_GameControllerGetAxisFromString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pchString,
);

typedef _dart_SDL_GameControllerGetAxisFromString = int Function(
  ffi.Pointer<ffi.Int8> pchString,
);

typedef _c_SDL_GameControllerGetStringForAxis = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 axis,
);

typedef _dart_SDL_GameControllerGetStringForAxis = ffi.Pointer<ffi.Int8>
    Function(
  int axis,
);

typedef _c_SDL_GameControllerGetAxis = ffi.Int16 Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
  ffi.Int32 axis,
);

typedef _dart_SDL_GameControllerGetAxis = int Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
  int axis,
);

typedef _c_SDL_GameControllerGetButtonFromString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pchString,
);

typedef _dart_SDL_GameControllerGetButtonFromString = int Function(
  ffi.Pointer<ffi.Int8> pchString,
);

typedef _c_SDL_GameControllerGetStringForButton = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Int32 button,
);

typedef _dart_SDL_GameControllerGetStringForButton = ffi.Pointer<ffi.Int8>
    Function(
  int button,
);

typedef _c_SDL_GameControllerGetButton = ffi.Uint8 Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
  ffi.Int32 button,
);

typedef _dart_SDL_GameControllerGetButton = int Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
  int button,
);

typedef _c_SDL_GameControllerRumble = ffi.Int32 Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
  ffi.Uint16 low_frequency_rumble,
  ffi.Uint16 high_frequency_rumble,
  ffi.Uint32 duration_ms,
);

typedef _dart_SDL_GameControllerRumble = int Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
  int low_frequency_rumble,
  int high_frequency_rumble,
  int duration_ms,
);

typedef _c_SDL_GameControllerClose = ffi.Void Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _dart_SDL_GameControllerClose = void Function(
  ffi.Pointer<_SDL_GameController> gamecontroller,
);

typedef _c_SDL_GetNumTouchDevices = ffi.Int32 Function();

typedef _dart_SDL_GetNumTouchDevices = int Function();

typedef _c_SDL_GetTouchDevice = ffi.Int64 Function(
  ffi.Int32 index,
);

typedef _dart_SDL_GetTouchDevice = int Function(
  int index,
);

typedef _c_SDL_GetTouchDeviceType = ffi.Int32 Function(
  ffi.Int64 touchID,
);

typedef _dart_SDL_GetTouchDeviceType = int Function(
  int touchID,
);

typedef _c_SDL_GetNumTouchFingers = ffi.Int32 Function(
  ffi.Int64 touchID,
);

typedef _dart_SDL_GetNumTouchFingers = int Function(
  int touchID,
);

typedef _c_SDL_GetTouchFinger = ffi.Pointer<SDL_Finger> Function(
  ffi.Int64 touchID,
  ffi.Int32 index,
);

typedef _dart_SDL_GetTouchFinger = ffi.Pointer<SDL_Finger> Function(
  int touchID,
  int index,
);

typedef _c_SDL_RecordGesture = ffi.Int32 Function(
  ffi.Int64 touchId,
);

typedef _dart_SDL_RecordGesture = int Function(
  int touchId,
);

typedef _c_SDL_SaveAllDollarTemplates = ffi.Int32 Function(
  ffi.Pointer<SDL_RWops> dst,
);

typedef _dart_SDL_SaveAllDollarTemplates = int Function(
  ffi.Pointer<SDL_RWops> dst,
);

typedef _c_SDL_SaveDollarTemplate = ffi.Int32 Function(
  ffi.Int64 gestureId,
  ffi.Pointer<SDL_RWops> dst,
);

typedef _dart_SDL_SaveDollarTemplate = int Function(
  int gestureId,
  ffi.Pointer<SDL_RWops> dst,
);

typedef _c_SDL_LoadDollarTemplates = ffi.Int32 Function(
  ffi.Int64 touchId,
  ffi.Pointer<SDL_RWops> src,
);

typedef _dart_SDL_LoadDollarTemplates = int Function(
  int touchId,
  ffi.Pointer<SDL_RWops> src,
);

typedef _c_SDL_PumpEvents = ffi.Void Function();

typedef _dart_SDL_PumpEvents = void Function();

typedef _c_SDL_HasEvent = ffi.Int32 Function(
  ffi.Uint32 type,
);

typedef _dart_SDL_HasEvent = int Function(
  int type,
);

typedef _c_SDL_HasEvents = ffi.Int32 Function(
  ffi.Uint32 minType,
  ffi.Uint32 maxType,
);

typedef _dart_SDL_HasEvents = int Function(
  int minType,
  int maxType,
);

typedef _c_SDL_FlushEvent = ffi.Void Function(
  ffi.Uint32 type,
);

typedef _dart_SDL_FlushEvent = void Function(
  int type,
);

typedef _c_SDL_FlushEvents = ffi.Void Function(
  ffi.Uint32 minType,
  ffi.Uint32 maxType,
);

typedef _dart_SDL_FlushEvents = void Function(
  int minType,
  int maxType,
);

typedef _c_SDL_EventState = ffi.Uint8 Function(
  ffi.Uint32 type,
  ffi.Int32 state,
);

typedef _dart_SDL_EventState = int Function(
  int type,
  int state,
);

typedef _c_SDL_RegisterEvents = ffi.Uint32 Function(
  ffi.Int32 numevents,
);

typedef _dart_SDL_RegisterEvents = int Function(
  int numevents,
);

typedef _c_SDL_GetBasePath = ffi.Pointer<ffi.Int8> Function();

typedef _dart_SDL_GetBasePath = ffi.Pointer<ffi.Int8> Function();

typedef _c_SDL_GetPrefPath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> org,
  ffi.Pointer<ffi.Int8> app,
);

typedef _dart_SDL_GetPrefPath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> org,
  ffi.Pointer<ffi.Int8> app,
);

typedef _c_SDL_NumHaptics = ffi.Int32 Function();

typedef _dart_SDL_NumHaptics = int Function();

typedef _c_SDL_HapticName = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_HapticName = ffi.Pointer<ffi.Int8> Function(
  int device_index,
);

typedef _c_SDL_HapticOpen = ffi.Pointer<_SDL_Haptic> Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_HapticOpen = ffi.Pointer<_SDL_Haptic> Function(
  int device_index,
);

typedef _c_SDL_HapticOpened = ffi.Int32 Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_HapticOpened = int Function(
  int device_index,
);

typedef _c_SDL_HapticIndex = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _dart_SDL_HapticIndex = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _c_SDL_MouseIsHaptic = ffi.Int32 Function();

typedef _dart_SDL_MouseIsHaptic = int Function();

typedef _c_SDL_HapticOpenFromMouse = ffi.Pointer<_SDL_Haptic> Function();

typedef _dart_SDL_HapticOpenFromMouse = ffi.Pointer<_SDL_Haptic> Function();

typedef _c_SDL_JoystickIsHaptic = ffi.Int32 Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_JoystickIsHaptic = int Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_HapticOpenFromJoystick = ffi.Pointer<_SDL_Haptic> Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _dart_SDL_HapticOpenFromJoystick = ffi.Pointer<_SDL_Haptic> Function(
  ffi.Pointer<_SDL_Joystick> joystick,
);

typedef _c_SDL_HapticClose = ffi.Void Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _dart_SDL_HapticClose = void Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _c_SDL_HapticNumEffects = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _dart_SDL_HapticNumEffects = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _c_SDL_HapticNumEffectsPlaying = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _dart_SDL_HapticNumEffectsPlaying = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _c_SDL_HapticQuery = ffi.Uint32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _dart_SDL_HapticQuery = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _c_SDL_HapticNumAxes = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _dart_SDL_HapticNumAxes = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _c_SDL_HapticRunEffect = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
  ffi.Int32 effect,
  ffi.Uint32 iterations,
);

typedef _dart_SDL_HapticRunEffect = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
  int effect,
  int iterations,
);

typedef _c_SDL_HapticStopEffect = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
  ffi.Int32 effect,
);

typedef _dart_SDL_HapticStopEffect = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
  int effect,
);

typedef _c_SDL_HapticDestroyEffect = ffi.Void Function(
  ffi.Pointer<_SDL_Haptic> haptic,
  ffi.Int32 effect,
);

typedef _dart_SDL_HapticDestroyEffect = void Function(
  ffi.Pointer<_SDL_Haptic> haptic,
  int effect,
);

typedef _c_SDL_HapticGetEffectStatus = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
  ffi.Int32 effect,
);

typedef _dart_SDL_HapticGetEffectStatus = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
  int effect,
);

typedef _c_SDL_HapticSetGain = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
  ffi.Int32 gain,
);

typedef _dart_SDL_HapticSetGain = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
  int gain,
);

typedef _c_SDL_HapticSetAutocenter = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
  ffi.Int32 autocenter,
);

typedef _dart_SDL_HapticSetAutocenter = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
  int autocenter,
);

typedef _c_SDL_HapticPause = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _dart_SDL_HapticPause = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _c_SDL_HapticUnpause = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _dart_SDL_HapticUnpause = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _c_SDL_HapticStopAll = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _dart_SDL_HapticStopAll = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _c_SDL_HapticRumbleSupported = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _dart_SDL_HapticRumbleSupported = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _c_SDL_HapticRumbleInit = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _dart_SDL_HapticRumbleInit = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _c_SDL_HapticRumblePlay = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
  ffi.Float strength,
  ffi.Uint32 length,
);

typedef _dart_SDL_HapticRumblePlay = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
  double strength,
  int length,
);

typedef _c_SDL_HapticRumbleStop = ffi.Int32 Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _dart_SDL_HapticRumbleStop = int Function(
  ffi.Pointer<_SDL_Haptic> haptic,
);

typedef _c_SDL_SetHintWithPriority = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> value,
  ffi.Int32 priority,
);

typedef _dart_SDL_SetHintWithPriority = int Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> value,
  int priority,
);

typedef _c_SDL_SetHint = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_SDL_SetHint = int Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> value,
);

typedef _c_SDL_GetHint = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_SDL_GetHint = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_SDL_GetHintBoolean = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 default_value,
);

typedef _dart_SDL_GetHintBoolean = int Function(
  ffi.Pointer<ffi.Int8> name,
  int default_value,
);

typedef SDL_HintCallback = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_SDL_AddHintCallback = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.NativeFunction<SDL_HintCallback>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_SDL_AddHintCallback = void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.NativeFunction<SDL_HintCallback>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_SDL_DelHintCallback = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.NativeFunction<SDL_HintCallback>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_SDL_DelHintCallback = void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.NativeFunction<SDL_HintCallback>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_SDL_ClearHints = ffi.Void Function();

typedef _dart_SDL_ClearHints = void Function();

typedef _c_SDL_LoadObject = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> sofile,
);

typedef _dart_SDL_LoadObject = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> sofile,
);

typedef _c_SDL_LoadFunction = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> handle,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_SDL_LoadFunction = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> handle,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_SDL_UnloadObject = ffi.Void Function(
  ffi.Pointer<ffi.Void> handle,
);

typedef _dart_SDL_UnloadObject = void Function(
  ffi.Pointer<ffi.Void> handle,
);

typedef _c_SDL_LogSetAllPriority = ffi.Void Function(
  ffi.Int32 priority,
);

typedef _dart_SDL_LogSetAllPriority = void Function(
  int priority,
);

typedef _c_SDL_LogSetPriority = ffi.Void Function(
  ffi.Int32 category,
  ffi.Int32 priority,
);

typedef _dart_SDL_LogSetPriority = void Function(
  int category,
  int priority,
);

typedef _c_SDL_LogGetPriority = ffi.Int32 Function(
  ffi.Int32 category,
);

typedef _dart_SDL_LogGetPriority = int Function(
  int category,
);

typedef _c_SDL_LogResetPriorities = ffi.Void Function();

typedef _dart_SDL_LogResetPriorities = void Function();

typedef _c_SDL_Log = ffi.Void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_SDL_Log = void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_SDL_LogVerbose = ffi.Void Function(
  ffi.Int32 category,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_SDL_LogVerbose = void Function(
  int category,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_SDL_LogDebug = ffi.Void Function(
  ffi.Int32 category,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_SDL_LogDebug = void Function(
  int category,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_SDL_LogInfo = ffi.Void Function(
  ffi.Int32 category,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_SDL_LogInfo = void Function(
  int category,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_SDL_LogWarn = ffi.Void Function(
  ffi.Int32 category,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_SDL_LogWarn = void Function(
  int category,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_SDL_LogError = ffi.Void Function(
  ffi.Int32 category,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_SDL_LogError = void Function(
  int category,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_SDL_LogCritical = ffi.Void Function(
  ffi.Int32 category,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_SDL_LogCritical = void Function(
  int category,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_SDL_LogMessage = ffi.Void Function(
  ffi.Int32 category,
  ffi.Int32 priority,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_SDL_LogMessage = void Function(
  int category,
  int priority,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_SDL_LogMessageV = ffi.Void Function(
  ffi.Int32 category,
  ffi.Int32 priority,
  ffi.Pointer<ffi.Int8> fmt,
  ffi.Pointer<__va_list_tag> ap,
);

typedef _dart_SDL_LogMessageV = void Function(
  int category,
  int priority,
  ffi.Pointer<ffi.Int8> fmt,
  ffi.Pointer<__va_list_tag> ap,
);

typedef SDL_LogOutputFunction = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_SDL_LogGetOutputFunction = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<SDL_LogOutputFunction>>> callback,
  ffi.Pointer<ffi.Pointer<ffi.Void>> userdata,
);

typedef _dart_SDL_LogGetOutputFunction = void Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<SDL_LogOutputFunction>>> callback,
  ffi.Pointer<ffi.Pointer<ffi.Void>> userdata,
);

typedef _c_SDL_LogSetOutputFunction = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<SDL_LogOutputFunction>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_SDL_LogSetOutputFunction = void Function(
  ffi.Pointer<ffi.NativeFunction<SDL_LogOutputFunction>> callback,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_SDL_ShowMessageBox = ffi.Int32 Function(
  ffi.Pointer<SDL_MessageBoxData> messageboxdata,
  ffi.Pointer<ffi.Int32> buttonid,
);

typedef _dart_SDL_ShowMessageBox = int Function(
  ffi.Pointer<SDL_MessageBoxData> messageboxdata,
  ffi.Pointer<ffi.Int32> buttonid,
);

typedef _c_SDL_ShowSimpleMessageBox = ffi.Int32 Function(
  ffi.Uint32 flags,
  ffi.Pointer<ffi.Int8> title,
  ffi.Pointer<ffi.Int8> message,
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_ShowSimpleMessageBox = int Function(
  int flags,
  ffi.Pointer<ffi.Int8> title,
  ffi.Pointer<ffi.Int8> message,
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_GetPowerInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> secs,
  ffi.Pointer<ffi.Int32> pct,
);

typedef _dart_SDL_GetPowerInfo = int Function(
  ffi.Pointer<ffi.Int32> secs,
  ffi.Pointer<ffi.Int32> pct,
);

typedef _c_SDL_GetNumRenderDrivers = ffi.Int32 Function();

typedef _dart_SDL_GetNumRenderDrivers = int Function();

typedef _c_SDL_GetRenderDriverInfo = ffi.Int32 Function(
  ffi.Int32 index,
  ffi.Pointer<SDL_RendererInfo> info,
);

typedef _dart_SDL_GetRenderDriverInfo = int Function(
  int index,
  ffi.Pointer<SDL_RendererInfo> info,
);

typedef _c_SDL_CreateWindowAndRenderer = ffi.Int32 Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Uint32 window_flags,
  ffi.Pointer<ffi.Pointer<SDL_Window>> window,
  ffi.Pointer<ffi.Pointer<SDL_Renderer>> renderer,
);

typedef _dart_SDL_CreateWindowAndRenderer = int Function(
  int width,
  int height,
  int window_flags,
  ffi.Pointer<ffi.Pointer<SDL_Window>> window,
  ffi.Pointer<ffi.Pointer<SDL_Renderer>> renderer,
);

typedef _c_SDL_CreateRenderer = ffi.Pointer<SDL_Renderer> Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Int32 index,
  ffi.Uint32 flags,
);

typedef _dart_SDL_CreateRenderer = ffi.Pointer<SDL_Renderer> Function(
  ffi.Pointer<SDL_Window> window,
  int index,
  int flags,
);

typedef _c_SDL_CreateSoftwareRenderer = ffi.Pointer<SDL_Renderer> Function(
  ffi.Pointer<SDL_Surface> surface,
);

typedef _dart_SDL_CreateSoftwareRenderer = ffi.Pointer<SDL_Renderer> Function(
  ffi.Pointer<SDL_Surface> surface,
);

typedef _c_SDL_GetRenderer = ffi.Pointer<SDL_Renderer> Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_GetRenderer = ffi.Pointer<SDL_Renderer> Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_GetRendererInfo = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_RendererInfo> info,
);

typedef _dart_SDL_GetRendererInfo = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_RendererInfo> info,
);

typedef _c_SDL_GetRendererOutputSize = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _dart_SDL_GetRendererOutputSize = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _c_SDL_CreateTexture = ffi.Pointer<SDL_Texture> Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Uint32 format,
  ffi.Int32 access,
  ffi.Int32 w,
  ffi.Int32 h,
);

typedef _dart_SDL_CreateTexture = ffi.Pointer<SDL_Texture> Function(
  ffi.Pointer<SDL_Renderer> renderer,
  int format,
  int access,
  int w,
  int h,
);

typedef _c_SDL_CreateTextureFromSurface = ffi.Pointer<SDL_Texture> Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Surface> surface,
);

typedef _dart_SDL_CreateTextureFromSurface = ffi.Pointer<SDL_Texture> Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Surface> surface,
);

typedef _c_SDL_QueryTexture = ffi.Int32 Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<ffi.Uint32> format,
  ffi.Pointer<ffi.Int32> access,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _dart_SDL_QueryTexture = int Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<ffi.Uint32> format,
  ffi.Pointer<ffi.Int32> access,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _c_SDL_SetTextureColorMod = ffi.Int32 Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Uint8 r,
  ffi.Uint8 g,
  ffi.Uint8 b,
);

typedef _dart_SDL_SetTextureColorMod = int Function(
  ffi.Pointer<SDL_Texture> texture,
  int r,
  int g,
  int b,
);

typedef _c_SDL_GetTextureColorMod = ffi.Int32 Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> g,
  ffi.Pointer<ffi.Uint8> b,
);

typedef _dart_SDL_GetTextureColorMod = int Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> g,
  ffi.Pointer<ffi.Uint8> b,
);

typedef _c_SDL_SetTextureAlphaMod = ffi.Int32 Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Uint8 alpha,
);

typedef _dart_SDL_SetTextureAlphaMod = int Function(
  ffi.Pointer<SDL_Texture> texture,
  int alpha,
);

typedef _c_SDL_GetTextureAlphaMod = ffi.Int32 Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<ffi.Uint8> alpha,
);

typedef _dart_SDL_GetTextureAlphaMod = int Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<ffi.Uint8> alpha,
);

typedef _c_SDL_SetTextureBlendMode = ffi.Int32 Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Int32 blendMode,
);

typedef _dart_SDL_SetTextureBlendMode = int Function(
  ffi.Pointer<SDL_Texture> texture,
  int blendMode,
);

typedef _c_SDL_GetTextureBlendMode = ffi.Int32 Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<ffi.Int32> blendMode,
);

typedef _dart_SDL_GetTextureBlendMode = int Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<ffi.Int32> blendMode,
);

typedef _c_SDL_SetTextureScaleMode = ffi.Int32 Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Int32 scaleMode,
);

typedef _dart_SDL_SetTextureScaleMode = int Function(
  ffi.Pointer<SDL_Texture> texture,
  int scaleMode,
);

typedef _c_SDL_GetTextureScaleMode = ffi.Int32 Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<ffi.Int32> scaleMode,
);

typedef _dart_SDL_GetTextureScaleMode = int Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<ffi.Int32> scaleMode,
);

typedef _c_SDL_UpdateTexture = ffi.Int32 Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> rect,
  ffi.Pointer<ffi.Void> pixels,
  ffi.Int32 pitch,
);

typedef _dart_SDL_UpdateTexture = int Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> rect,
  ffi.Pointer<ffi.Void> pixels,
  int pitch,
);

typedef _c_SDL_UpdateYUVTexture = ffi.Int32 Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> rect,
  ffi.Pointer<ffi.Uint8> Yplane,
  ffi.Int32 Ypitch,
  ffi.Pointer<ffi.Uint8> Uplane,
  ffi.Int32 Upitch,
  ffi.Pointer<ffi.Uint8> Vplane,
  ffi.Int32 Vpitch,
);

typedef _dart_SDL_UpdateYUVTexture = int Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> rect,
  ffi.Pointer<ffi.Uint8> Yplane,
  int Ypitch,
  ffi.Pointer<ffi.Uint8> Uplane,
  int Upitch,
  ffi.Pointer<ffi.Uint8> Vplane,
  int Vpitch,
);

typedef _c_SDL_LockTexture = ffi.Int32 Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> rect,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pixels,
  ffi.Pointer<ffi.Int32> pitch,
);

typedef _dart_SDL_LockTexture = int Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> rect,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pixels,
  ffi.Pointer<ffi.Int32> pitch,
);

typedef _c_SDL_LockTextureToSurface = ffi.Int32 Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> rect,
  ffi.Pointer<ffi.Pointer<SDL_Surface>> surface,
);

typedef _dart_SDL_LockTextureToSurface = int Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> rect,
  ffi.Pointer<ffi.Pointer<SDL_Surface>> surface,
);

typedef _c_SDL_UnlockTexture = ffi.Void Function(
  ffi.Pointer<SDL_Texture> texture,
);

typedef _dart_SDL_UnlockTexture = void Function(
  ffi.Pointer<SDL_Texture> texture,
);

typedef _c_SDL_RenderTargetSupported = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _dart_SDL_RenderTargetSupported = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _c_SDL_SetRenderTarget = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Texture> texture,
);

typedef _dart_SDL_SetRenderTarget = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Texture> texture,
);

typedef _c_SDL_GetRenderTarget = ffi.Pointer<SDL_Texture> Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _dart_SDL_GetRenderTarget = ffi.Pointer<SDL_Texture> Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _c_SDL_RenderSetLogicalSize = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Int32 w,
  ffi.Int32 h,
);

typedef _dart_SDL_RenderSetLogicalSize = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  int w,
  int h,
);

typedef _c_SDL_RenderGetLogicalSize = ffi.Void Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _dart_SDL_RenderGetLogicalSize = void Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _c_SDL_RenderSetIntegerScale = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Int32 enable,
);

typedef _dart_SDL_RenderSetIntegerScale = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  int enable,
);

typedef _c_SDL_RenderGetIntegerScale = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _dart_SDL_RenderGetIntegerScale = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _c_SDL_RenderSetViewport = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _dart_SDL_RenderSetViewport = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _c_SDL_RenderGetViewport = ffi.Void Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _dart_SDL_RenderGetViewport = void Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _c_SDL_RenderSetClipRect = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _dart_SDL_RenderSetClipRect = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _c_SDL_RenderGetClipRect = ffi.Void Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _dart_SDL_RenderGetClipRect = void Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _c_SDL_RenderIsClipEnabled = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _dart_SDL_RenderIsClipEnabled = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _c_SDL_RenderSetScale = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Float scaleX,
  ffi.Float scaleY,
);

typedef _dart_SDL_RenderSetScale = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  double scaleX,
  double scaleY,
);

typedef _c_SDL_RenderGetScale = ffi.Void Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<ffi.Float> scaleX,
  ffi.Pointer<ffi.Float> scaleY,
);

typedef _dart_SDL_RenderGetScale = void Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<ffi.Float> scaleX,
  ffi.Pointer<ffi.Float> scaleY,
);

typedef _c_SDL_SetRenderDrawColor = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Uint8 r,
  ffi.Uint8 g,
  ffi.Uint8 b,
  ffi.Uint8 a,
);

typedef _dart_SDL_SetRenderDrawColor = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  int r,
  int g,
  int b,
  int a,
);

typedef _c_SDL_GetRenderDrawColor = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> g,
  ffi.Pointer<ffi.Uint8> b,
  ffi.Pointer<ffi.Uint8> a,
);

typedef _dart_SDL_GetRenderDrawColor = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> g,
  ffi.Pointer<ffi.Uint8> b,
  ffi.Pointer<ffi.Uint8> a,
);

typedef _c_SDL_SetRenderDrawBlendMode = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Int32 blendMode,
);

typedef _dart_SDL_SetRenderDrawBlendMode = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  int blendMode,
);

typedef _c_SDL_GetRenderDrawBlendMode = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<ffi.Int32> blendMode,
);

typedef _dart_SDL_GetRenderDrawBlendMode = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<ffi.Int32> blendMode,
);

typedef _c_SDL_RenderClear = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _dart_SDL_RenderClear = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _c_SDL_RenderDrawPoint = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_SDL_RenderDrawPoint = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  int x,
  int y,
);

typedef _c_SDL_RenderDrawPoints = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Point> points,
  ffi.Int32 count,
);

typedef _dart_SDL_RenderDrawPoints = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Point> points,
  int count,
);

typedef _c_SDL_RenderDrawLine = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Int32 x1,
  ffi.Int32 y1,
  ffi.Int32 x2,
  ffi.Int32 y2,
);

typedef _dart_SDL_RenderDrawLine = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  int x1,
  int y1,
  int x2,
  int y2,
);

typedef _c_SDL_RenderDrawLines = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Point> points,
  ffi.Int32 count,
);

typedef _dart_SDL_RenderDrawLines = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Point> points,
  int count,
);

typedef _c_SDL_RenderDrawRect = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _dart_SDL_RenderDrawRect = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _c_SDL_RenderDrawRects = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rects,
  ffi.Int32 count,
);

typedef _dart_SDL_RenderDrawRects = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rects,
  int count,
);

typedef _c_SDL_RenderFillRect = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _dart_SDL_RenderFillRect = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rect,
);

typedef _c_SDL_RenderFillRects = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rects,
  ffi.Int32 count,
);

typedef _dart_SDL_RenderFillRects = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rects,
  int count,
);

typedef _c_SDL_RenderCopy = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_Rect> dstrect,
);

typedef _dart_SDL_RenderCopy = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_Rect> dstrect,
);

typedef _c_SDL_RenderCopyEx = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_Rect> dstrect,
  ffi.Double angle,
  ffi.Pointer<SDL_Point> center,
  ffi.Int32 flip,
);

typedef _dart_SDL_RenderCopyEx = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_Rect> dstrect,
  double angle,
  ffi.Pointer<SDL_Point> center,
  int flip,
);

typedef _c_SDL_RenderDrawPointF = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Float x,
  ffi.Float y,
);

typedef _dart_SDL_RenderDrawPointF = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  double x,
  double y,
);

typedef _c_SDL_RenderDrawPointsF = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_FPoint> points,
  ffi.Int32 count,
);

typedef _dart_SDL_RenderDrawPointsF = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_FPoint> points,
  int count,
);

typedef _c_SDL_RenderDrawLineF = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Float x1,
  ffi.Float y1,
  ffi.Float x2,
  ffi.Float y2,
);

typedef _dart_SDL_RenderDrawLineF = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  double x1,
  double y1,
  double x2,
  double y2,
);

typedef _c_SDL_RenderDrawLinesF = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_FPoint> points,
  ffi.Int32 count,
);

typedef _dart_SDL_RenderDrawLinesF = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_FPoint> points,
  int count,
);

typedef _c_SDL_RenderDrawRectF = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_FRect> rect,
);

typedef _dart_SDL_RenderDrawRectF = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_FRect> rect,
);

typedef _c_SDL_RenderDrawRectsF = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_FRect> rects,
  ffi.Int32 count,
);

typedef _dart_SDL_RenderDrawRectsF = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_FRect> rects,
  int count,
);

typedef _c_SDL_RenderFillRectF = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_FRect> rect,
);

typedef _dart_SDL_RenderFillRectF = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_FRect> rect,
);

typedef _c_SDL_RenderFillRectsF = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_FRect> rects,
  ffi.Int32 count,
);

typedef _dart_SDL_RenderFillRectsF = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_FRect> rects,
  int count,
);

typedef _c_SDL_RenderCopyF = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_FRect> dstrect,
);

typedef _dart_SDL_RenderCopyF = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_FRect> dstrect,
);

typedef _c_SDL_RenderCopyExF = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_FRect> dstrect,
  ffi.Double angle,
  ffi.Pointer<SDL_FPoint> center,
  ffi.Int32 flip,
);

typedef _dart_SDL_RenderCopyExF = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<SDL_Rect> srcrect,
  ffi.Pointer<SDL_FRect> dstrect,
  double angle,
  ffi.Pointer<SDL_FPoint> center,
  int flip,
);

typedef _c_SDL_RenderReadPixels = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rect,
  ffi.Uint32 format,
  ffi.Pointer<ffi.Void> pixels,
  ffi.Int32 pitch,
);

typedef _dart_SDL_RenderReadPixels = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
  ffi.Pointer<SDL_Rect> rect,
  int format,
  ffi.Pointer<ffi.Void> pixels,
  int pitch,
);

typedef _c_SDL_RenderPresent = ffi.Void Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _dart_SDL_RenderPresent = void Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _c_SDL_DestroyTexture = ffi.Void Function(
  ffi.Pointer<SDL_Texture> texture,
);

typedef _dart_SDL_DestroyTexture = void Function(
  ffi.Pointer<SDL_Texture> texture,
);

typedef _c_SDL_DestroyRenderer = ffi.Void Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _dart_SDL_DestroyRenderer = void Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _c_SDL_RenderFlush = ffi.Int32 Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _dart_SDL_RenderFlush = int Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _c_SDL_GL_BindTexture = ffi.Int32 Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<ffi.Float> texw,
  ffi.Pointer<ffi.Float> texh,
);

typedef _dart_SDL_GL_BindTexture = int Function(
  ffi.Pointer<SDL_Texture> texture,
  ffi.Pointer<ffi.Float> texw,
  ffi.Pointer<ffi.Float> texh,
);

typedef _c_SDL_GL_UnbindTexture = ffi.Int32 Function(
  ffi.Pointer<SDL_Texture> texture,
);

typedef _dart_SDL_GL_UnbindTexture = int Function(
  ffi.Pointer<SDL_Texture> texture,
);

typedef _c_SDL_RenderGetMetalLayer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _dart_SDL_RenderGetMetalLayer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _c_SDL_RenderGetMetalCommandEncoder = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _dart_SDL_RenderGetMetalCommandEncoder = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SDL_Renderer> renderer,
);

typedef _c_SDL_NumSensors = ffi.Int32 Function();

typedef _dart_SDL_NumSensors = int Function();

typedef _c_SDL_SensorGetDeviceName = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_SensorGetDeviceName = ffi.Pointer<ffi.Int8> Function(
  int device_index,
);

typedef _c_SDL_SensorGetDeviceType = ffi.Int32 Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_SensorGetDeviceType = int Function(
  int device_index,
);

typedef _c_SDL_SensorGetDeviceNonPortableType = ffi.Int32 Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_SensorGetDeviceNonPortableType = int Function(
  int device_index,
);

typedef _c_SDL_SensorGetDeviceInstanceID = ffi.Int32 Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_SensorGetDeviceInstanceID = int Function(
  int device_index,
);

typedef _c_SDL_SensorOpen = ffi.Pointer<_SDL_Sensor> Function(
  ffi.Int32 device_index,
);

typedef _dart_SDL_SensorOpen = ffi.Pointer<_SDL_Sensor> Function(
  int device_index,
);

typedef _c_SDL_SensorFromInstanceID = ffi.Pointer<_SDL_Sensor> Function(
  ffi.Int32 instance_id,
);

typedef _dart_SDL_SensorFromInstanceID = ffi.Pointer<_SDL_Sensor> Function(
  int instance_id,
);

typedef _c_SDL_SensorGetName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_SDL_Sensor> sensor,
);

typedef _dart_SDL_SensorGetName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_SDL_Sensor> sensor,
);

typedef _c_SDL_SensorGetType = ffi.Int32 Function(
  ffi.Pointer<_SDL_Sensor> sensor,
);

typedef _dart_SDL_SensorGetType = int Function(
  ffi.Pointer<_SDL_Sensor> sensor,
);

typedef _c_SDL_SensorGetNonPortableType = ffi.Int32 Function(
  ffi.Pointer<_SDL_Sensor> sensor,
);

typedef _dart_SDL_SensorGetNonPortableType = int Function(
  ffi.Pointer<_SDL_Sensor> sensor,
);

typedef _c_SDL_SensorGetInstanceID = ffi.Int32 Function(
  ffi.Pointer<_SDL_Sensor> sensor,
);

typedef _dart_SDL_SensorGetInstanceID = int Function(
  ffi.Pointer<_SDL_Sensor> sensor,
);

typedef _c_SDL_SensorGetData = ffi.Int32 Function(
  ffi.Pointer<_SDL_Sensor> sensor,
  ffi.Pointer<ffi.Float> data,
  ffi.Int32 num_values,
);

typedef _dart_SDL_SensorGetData = int Function(
  ffi.Pointer<_SDL_Sensor> sensor,
  ffi.Pointer<ffi.Float> data,
  int num_values,
);

typedef _c_SDL_SensorClose = ffi.Void Function(
  ffi.Pointer<_SDL_Sensor> sensor,
);

typedef _dart_SDL_SensorClose = void Function(
  ffi.Pointer<_SDL_Sensor> sensor,
);

typedef _c_SDL_SensorUpdate = ffi.Void Function();

typedef _dart_SDL_SensorUpdate = void Function();

typedef _c_SDL_CreateShapedWindow = ffi.Pointer<SDL_Window> Function(
  ffi.Pointer<ffi.Int8> title,
  ffi.Uint32 x,
  ffi.Uint32 y,
  ffi.Uint32 w,
  ffi.Uint32 h,
  ffi.Uint32 flags,
);

typedef _dart_SDL_CreateShapedWindow = ffi.Pointer<SDL_Window> Function(
  ffi.Pointer<ffi.Int8> title,
  int x,
  int y,
  int w,
  int h,
  int flags,
);

typedef _c_SDL_IsShapedWindow = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _dart_SDL_IsShapedWindow = int Function(
  ffi.Pointer<SDL_Window> window,
);

typedef _c_SDL_SetWindowShape = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<SDL_Surface> shape,
  ffi.Pointer<SDL_WindowShapeMode> shape_mode,
);

typedef _dart_SDL_SetWindowShape = int Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<SDL_Surface> shape,
  ffi.Pointer<SDL_WindowShapeMode> shape_mode,
);

typedef _c_SDL_GetShapedWindowMode = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<SDL_WindowShapeMode> shape_mode,
);

typedef _dart_SDL_GetShapedWindowMode = int Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<SDL_WindowShapeMode> shape_mode,
);

typedef _c_SDL_LinuxSetThreadPriority = ffi.Int32 Function(
  ffi.Int64 threadID,
  ffi.Int32 priority,
);

typedef _dart_SDL_LinuxSetThreadPriority = int Function(
  int threadID,
  int priority,
);

typedef _c_SDL_IsTablet = ffi.Int32 Function();

typedef _dart_SDL_IsTablet = int Function();

typedef _c_SDL_OnApplicationWillTerminate = ffi.Void Function();

typedef _dart_SDL_OnApplicationWillTerminate = void Function();

typedef _c_SDL_OnApplicationDidReceiveMemoryWarning = ffi.Void Function();

typedef _dart_SDL_OnApplicationDidReceiveMemoryWarning = void Function();

typedef _c_SDL_OnApplicationWillResignActive = ffi.Void Function();

typedef _dart_SDL_OnApplicationWillResignActive = void Function();

typedef _c_SDL_OnApplicationDidEnterBackground = ffi.Void Function();

typedef _dart_SDL_OnApplicationDidEnterBackground = void Function();

typedef _c_SDL_OnApplicationWillEnterForeground = ffi.Void Function();

typedef _dart_SDL_OnApplicationWillEnterForeground = void Function();

typedef _c_SDL_OnApplicationDidBecomeActive = ffi.Void Function();

typedef _dart_SDL_OnApplicationDidBecomeActive = void Function();

typedef _c_SDL_GetTicks = ffi.Uint32 Function();

typedef _dart_SDL_GetTicks = int Function();

typedef _c_SDL_GetPerformanceCounter = ffi.Uint64 Function();

typedef _dart_SDL_GetPerformanceCounter = int Function();

typedef _c_SDL_GetPerformanceFrequency = ffi.Uint64 Function();

typedef _dart_SDL_GetPerformanceFrequency = int Function();

typedef _c_SDL_Delay = ffi.Void Function(
  ffi.Uint32 ms,
);

typedef _dart_SDL_Delay = void Function(
  int ms,
);

typedef SDL_TimerCallback = ffi.Uint32 Function(
  ffi.Uint32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_SDL_AddTimer = ffi.Int32 Function(
  ffi.Uint32 interval,
  ffi.Pointer<ffi.NativeFunction<SDL_TimerCallback>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_SDL_AddTimer = int Function(
  int interval,
  ffi.Pointer<ffi.NativeFunction<SDL_TimerCallback>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_SDL_RemoveTimer = ffi.Int32 Function(
  ffi.Int32 id,
);

typedef _dart_SDL_RemoveTimer = int Function(
  int id,
);

typedef _c_SDL_GetVersion = ffi.Void Function(
  ffi.Pointer<SDL_version> ver,
);

typedef _dart_SDL_GetVersion = void Function(
  ffi.Pointer<SDL_version> ver,
);

typedef _c_SDL_GetRevision = ffi.Pointer<ffi.Int8> Function();

typedef _dart_SDL_GetRevision = ffi.Pointer<ffi.Int8> Function();

typedef _c_SDL_GetRevisionNumber = ffi.Int32 Function();

typedef _dart_SDL_GetRevisionNumber = int Function();

typedef _c_SDL_Init = ffi.Int32 Function(
  ffi.Uint32 flags,
);

typedef _dart_SDL_Init = int Function(
  int flags,
);

typedef _c_SDL_InitSubSystem = ffi.Int32 Function(
  ffi.Uint32 flags,
);

typedef _dart_SDL_InitSubSystem = int Function(
  int flags,
);

typedef _c_SDL_QuitSubSystem = ffi.Void Function(
  ffi.Uint32 flags,
);

typedef _dart_SDL_QuitSubSystem = void Function(
  int flags,
);

typedef _c_SDL_WasInit = ffi.Uint32 Function(
  ffi.Uint32 flags,
);

typedef _dart_SDL_WasInit = int Function(
  int flags,
);

typedef _c_SDL_Quit = ffi.Void Function();

typedef _dart_SDL_Quit = void Function();

typedef _c_SDLTest_ImageBlit = ffi.Pointer<SDL_Surface> Function();

typedef _dart_SDLTest_ImageBlit = ffi.Pointer<SDL_Surface> Function();

typedef _c_SDLTest_ImageBlitColor = ffi.Pointer<SDL_Surface> Function();

typedef _dart_SDLTest_ImageBlitColor = ffi.Pointer<SDL_Surface> Function();

typedef _c_SDLTest_ImageBlitAlpha = ffi.Pointer<SDL_Surface> Function();

typedef _dart_SDLTest_ImageBlitAlpha = ffi.Pointer<SDL_Surface> Function();

typedef _c_SDLTest_ImageBlitBlendAdd = ffi.Pointer<SDL_Surface> Function();

typedef _dart_SDLTest_ImageBlitBlendAdd = ffi.Pointer<SDL_Surface> Function();

typedef _c_SDLTest_ImageBlitBlend = ffi.Pointer<SDL_Surface> Function();

typedef _dart_SDLTest_ImageBlitBlend = ffi.Pointer<SDL_Surface> Function();

typedef _c_SDLTest_ImageBlitBlendMod = ffi.Pointer<SDL_Surface> Function();

typedef _dart_SDLTest_ImageBlitBlendMod = ffi.Pointer<SDL_Surface> Function();

typedef _c_SDLTest_ImageBlitBlendNone = ffi.Pointer<SDL_Surface> Function();

typedef _dart_SDLTest_ImageBlitBlendNone = ffi.Pointer<SDL_Surface> Function();

typedef _c_SDLTest_ImageBlitBlendAll = ffi.Pointer<SDL_Surface> Function();

typedef _dart_SDLTest_ImageBlitBlendAll = ffi.Pointer<SDL_Surface> Function();

typedef _c_SDLTest_ImageFace = ffi.Pointer<SDL_Surface> Function();

typedef _dart_SDLTest_ImageFace = ffi.Pointer<SDL_Surface> Function();

typedef _c_SDLTest_ImagePrimitives = ffi.Pointer<SDL_Surface> Function();

typedef _dart_SDLTest_ImagePrimitives = ffi.Pointer<SDL_Surface> Function();

typedef _c_SDLTest_ImagePrimitivesBlend = ffi.Pointer<SDL_Surface> Function();

typedef _dart_SDLTest_ImagePrimitivesBlend = ffi.Pointer<SDL_Surface>
    Function();

typedef _c_SDLTest_CompareSurfaces = ffi.Int32 Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<SDL_Surface> referenceSurface,
  ffi.Int32 allowable_error,
);

typedef _dart_SDLTest_CompareSurfaces = int Function(
  ffi.Pointer<SDL_Surface> surface,
  ffi.Pointer<SDL_Surface> referenceSurface,
  int allowable_error,
);

typedef _c_SDLTest_Md5Init = ffi.Void Function(
  ffi.Pointer<SDLTest_Md5Context> mdContext,
);

typedef _dart_SDLTest_Md5Init = void Function(
  ffi.Pointer<SDLTest_Md5Context> mdContext,
);

typedef _c_SDLTest_Md5Update = ffi.Void Function(
  ffi.Pointer<SDLTest_Md5Context> mdContext,
  ffi.Pointer<ffi.Uint8> inBuf,
  ffi.Uint32 inLen,
);

typedef _dart_SDLTest_Md5Update = void Function(
  ffi.Pointer<SDLTest_Md5Context> mdContext,
  ffi.Pointer<ffi.Uint8> inBuf,
  int inLen,
);

typedef _c_SDLTest_Md5Final = ffi.Void Function(
  ffi.Pointer<SDLTest_Md5Context> mdContext,
);

typedef _dart_SDLTest_Md5Final = void Function(
  ffi.Pointer<SDLTest_Md5Context> mdContext,
);

typedef _c_SDLTest_FuzzerInit = ffi.Void Function(
  ffi.Int32 execKey,
);

typedef _dart_SDLTest_FuzzerInit = void Function(
  int execKey,
);

typedef _c_SDLTest_RandomUint8 = ffi.Int32 Function();

typedef _dart_SDLTest_RandomUint8 = int Function();

typedef _c_SDLTest_RandomSint8 = ffi.Int32 Function();

typedef _dart_SDLTest_RandomSint8 = int Function();

typedef _c_SDLTest_RandomUint16 = ffi.Int32 Function();

typedef _dart_SDLTest_RandomUint16 = int Function();

typedef _c_SDLTest_RandomSint16 = ffi.Int32 Function();

typedef _dart_SDLTest_RandomSint16 = int Function();

typedef _c_SDLTest_RandomSint32 = ffi.Int32 Function();

typedef _dart_SDLTest_RandomSint32 = int Function();

typedef _c_SDLTest_RandomUint32 = ffi.Int32 Function();

typedef _dart_SDLTest_RandomUint32 = int Function();

typedef _c_SDLTest_RandomUint64 = ffi.Int32 Function();

typedef _dart_SDLTest_RandomUint64 = int Function();

typedef _c_SDLTest_RandomSint64 = ffi.Int32 Function();

typedef _dart_SDLTest_RandomSint64 = int Function();

typedef _c_SDLTest_RandomUnitFloat = ffi.Float Function();

typedef _dart_SDLTest_RandomUnitFloat = double Function();

typedef _c_SDLTest_RandomUnitDouble = ffi.Double Function();

typedef _dart_SDLTest_RandomUnitDouble = double Function();

typedef _c_SDLTest_RandomFloat = ffi.Float Function();

typedef _dart_SDLTest_RandomFloat = double Function();

typedef _c_SDLTest_RandomDouble = ffi.Double Function();

typedef _dart_SDLTest_RandomDouble = double Function();

typedef _c_SDLTest_RandomUint8BoundaryValue = ffi.Int32 Function(
  ffi.Int32 boundary1,
  ffi.Int32 boundary2,
  ffi.Int32 validDomain,
);

typedef _dart_SDLTest_RandomUint8BoundaryValue = int Function(
  int boundary1,
  int boundary2,
  int validDomain,
);

typedef _c_SDLTest_RandomUint16BoundaryValue = ffi.Int32 Function(
  ffi.Int32 boundary1,
  ffi.Int32 boundary2,
  ffi.Int32 validDomain,
);

typedef _dart_SDLTest_RandomUint16BoundaryValue = int Function(
  int boundary1,
  int boundary2,
  int validDomain,
);

typedef _c_SDLTest_RandomUint32BoundaryValue = ffi.Int32 Function(
  ffi.Int32 boundary1,
  ffi.Int32 boundary2,
  ffi.Int32 validDomain,
);

typedef _dart_SDLTest_RandomUint32BoundaryValue = int Function(
  int boundary1,
  int boundary2,
  int validDomain,
);

typedef _c_SDLTest_RandomUint64BoundaryValue = ffi.Int32 Function(
  ffi.Int32 boundary1,
  ffi.Int32 boundary2,
  ffi.Int32 validDomain,
);

typedef _dart_SDLTest_RandomUint64BoundaryValue = int Function(
  int boundary1,
  int boundary2,
  int validDomain,
);

typedef _c_SDLTest_RandomSint8BoundaryValue = ffi.Int32 Function(
  ffi.Int32 boundary1,
  ffi.Int32 boundary2,
  ffi.Int32 validDomain,
);

typedef _dart_SDLTest_RandomSint8BoundaryValue = int Function(
  int boundary1,
  int boundary2,
  int validDomain,
);

typedef _c_SDLTest_RandomSint16BoundaryValue = ffi.Int32 Function(
  ffi.Int32 boundary1,
  ffi.Int32 boundary2,
  ffi.Int32 validDomain,
);

typedef _dart_SDLTest_RandomSint16BoundaryValue = int Function(
  int boundary1,
  int boundary2,
  int validDomain,
);

typedef _c_SDLTest_RandomSint32BoundaryValue = ffi.Int32 Function(
  ffi.Int32 boundary1,
  ffi.Int32 boundary2,
  ffi.Int32 validDomain,
);

typedef _dart_SDLTest_RandomSint32BoundaryValue = int Function(
  int boundary1,
  int boundary2,
  int validDomain,
);

typedef _c_SDLTest_RandomSint64BoundaryValue = ffi.Int32 Function(
  ffi.Int32 boundary1,
  ffi.Int32 boundary2,
  ffi.Int32 validDomain,
);

typedef _dart_SDLTest_RandomSint64BoundaryValue = int Function(
  int boundary1,
  int boundary2,
  int validDomain,
);

typedef _c_SDLTest_RandomIntegerInRange = ffi.Int32 Function(
  ffi.Int32 min,
  ffi.Int32 max,
);

typedef _dart_SDLTest_RandomIntegerInRange = int Function(
  int min,
  int max,
);

typedef _c_SDLTest_RandomAsciiString = ffi.Pointer<ffi.Int8> Function();

typedef _dart_SDLTest_RandomAsciiString = ffi.Pointer<ffi.Int8> Function();

typedef _c_SDLTest_RandomAsciiStringWithMaximumLength = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Int32 maxLength,
);

typedef _dart_SDLTest_RandomAsciiStringWithMaximumLength = ffi.Pointer<ffi.Int8>
    Function(
  int maxLength,
);

typedef _c_SDLTest_RandomAsciiStringOfSize = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 size,
);

typedef _dart_SDLTest_RandomAsciiStringOfSize = ffi.Pointer<ffi.Int8> Function(
  int size,
);

typedef _c_SDLTest_GetFuzzerInvocationCount = ffi.Int32 Function();

typedef _dart_SDLTest_GetFuzzerInvocationCount = int Function();

typedef _c__Xmblen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 len,
);

typedef _dart__Xmblen = int Function(
  ffi.Pointer<ffi.Int8> str,
  int len,
);

typedef _c_XLoadQueryFont = ffi.Pointer<XFontStruct> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_XLoadQueryFont = ffi.Pointer<XFontStruct> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_XQueryFont = ffi.Pointer<XFontStruct> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XQueryFont = ffi.Pointer<XFontStruct> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XGetMotionEvents = ffi.Pointer<XTimeCoord> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XGetMotionEvents = ffi.Pointer<XTimeCoord> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XDeleteModifiermapEntry = ffi.Pointer<XModifierKeymap> Function(
  ffi.Pointer<XModifierKeymap> arg0,
  ffi.Uint8 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XDeleteModifiermapEntry = ffi.Pointer<XModifierKeymap> Function(
  ffi.Pointer<XModifierKeymap> arg0,
  int arg1,
  int arg2,
);

typedef _c_XGetModifierMapping = ffi.Pointer<XModifierKeymap> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XGetModifierMapping = ffi.Pointer<XModifierKeymap> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XInsertModifiermapEntry = ffi.Pointer<XModifierKeymap> Function(
  ffi.Pointer<XModifierKeymap> arg0,
  ffi.Uint8 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XInsertModifiermapEntry = ffi.Pointer<XModifierKeymap> Function(
  ffi.Pointer<XModifierKeymap> arg0,
  int arg1,
  int arg2,
);

typedef _c_XNewModifiermap = ffi.Pointer<XModifierKeymap> Function(
  ffi.Int32 arg0,
);

typedef _dart_XNewModifiermap = ffi.Pointer<XModifierKeymap> Function(
  int arg0,
);

typedef _c_XCreateImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<Visual> arg1,
  ffi.Uint32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<ffi.Int8> arg5,
  ffi.Uint32 arg6,
  ffi.Uint32 arg7,
  ffi.Int32 arg8,
  ffi.Int32 arg9,
);

typedef _dart_XCreateImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<Visual> arg1,
  int arg2,
  int arg3,
  int arg4,
  ffi.Pointer<ffi.Int8> arg5,
  int arg6,
  int arg7,
  int arg8,
  int arg9,
);

typedef _c_XInitImage = ffi.Int32 Function(
  ffi.Pointer<XImage> arg0,
);

typedef _dart_XInitImage = int Function(
  ffi.Pointer<XImage> arg0,
);

typedef _c_XGetImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint64 arg6,
  ffi.Int32 arg7,
);

typedef _dart_XGetImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
);

typedef _c_XGetSubImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint64 arg6,
  ffi.Int32 arg7,
  ffi.Pointer<XImage> arg8,
  ffi.Int32 arg9,
  ffi.Int32 arg10,
);

typedef _dart_XGetSubImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  ffi.Pointer<XImage> arg8,
  int arg9,
  int arg10,
);

typedef _c_XOpenDisplay = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_XOpenDisplay = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_XrmInitialize = ffi.Void Function();

typedef _dart_XrmInitialize = void Function();

typedef _c_XFetchBytes = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_XFetchBytes = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_XFetchBuffer = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XFetchBuffer = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
);

typedef _c_XGetAtomName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XGetAtomName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XGetAtomNames = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
);

typedef _dart_XGetAtomNames = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  int arg2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
);

typedef _c_XGetDefault = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XGetDefault = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_XDisplayName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_XDisplayName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_XKeysymToString = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint64 arg0,
);

typedef _dart_XKeysymToString = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _typedefC_20 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
);

typedef _c_XSynchronize = ffi.Pointer<ffi.NativeFunction<_typedefC_20>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XSynchronize = ffi.Pointer<ffi.NativeFunction<_typedefC_20>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _typedefC_21 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
);

typedef _typedefC_22 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
);

typedef _c_XSetAfterFunction = ffi.Pointer<ffi.NativeFunction<_typedefC_21>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_22>> arg1,
);

typedef _dart_XSetAfterFunction = ffi.Pointer<ffi.NativeFunction<_typedefC_21>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_22>> arg1,
);

typedef _c_XInternAtom = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XInternAtom = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_XInternAtoms = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Uint64> arg4,
);

typedef _dart_XInternAtoms = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Uint64> arg4,
);

typedef _c_XCopyColormapAndFree = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XCopyColormapAndFree = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XCreateColormap = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<Visual> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XCreateColormap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<Visual> arg2,
  int arg3,
);

typedef _c_XCreatePixmapCursor = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<XColor> arg3,
  ffi.Pointer<XColor> arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
);

typedef _dart_XCreatePixmapCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XColor> arg3,
  ffi.Pointer<XColor> arg4,
  int arg5,
  int arg6,
);

typedef _c_XCreateGlyphCursor = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
  ffi.Pointer<XColor> arg5,
  ffi.Pointer<XColor> arg6,
);

typedef _dart_XCreateGlyphCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XColor> arg5,
  ffi.Pointer<XColor> arg6,
);

typedef _c_XCreateFontCursor = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
);

typedef _dart_XCreateFontCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XLoadFont = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_XLoadFont = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_XCreateGC = ffi.Pointer<_XGC> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<XGCValues> arg3,
);

typedef _dart_XCreateGC = ffi.Pointer<_XGC> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XGCValues> arg3,
);

typedef _c_XGContextFromGC = ffi.Uint64 Function(
  ffi.Pointer<_XGC> arg0,
);

typedef _dart_XGContextFromGC = int Function(
  ffi.Pointer<_XGC> arg0,
);

typedef _c_XFlushGC = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
);

typedef _dart_XFlushGC = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
);

typedef _c_XCreatePixmap = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_XCreatePixmap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XCreateBitmapFromData = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_XCreateBitmapFromData = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  int arg4,
);

typedef _c_XCreatePixmapFromBitmapData = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint64 arg5,
  ffi.Uint64 arg6,
  ffi.Uint32 arg7,
);

typedef _dart_XCreatePixmapFromBitmapData = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
);

typedef _c_XCreateSimpleWindow = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
  ffi.Uint64 arg7,
  ffi.Uint64 arg8,
);

typedef _dart_XCreateSimpleWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
);

typedef _c_XGetSelectionOwner = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XGetSelectionOwner = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XCreateWindow = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
  ffi.Int32 arg7,
  ffi.Uint32 arg8,
  ffi.Pointer<Visual> arg9,
  ffi.Uint64 arg10,
  ffi.Pointer<XSetWindowAttributes> arg11,
);

typedef _dart_XCreateWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
  ffi.Pointer<Visual> arg9,
  int arg10,
  ffi.Pointer<XSetWindowAttributes> arg11,
);

typedef _c_XListInstalledColormaps = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XListInstalledColormaps = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XListFonts = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XListFonts = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XListFontsWithInfo = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Pointer<XFontStruct>> arg4,
);

typedef _dart_XListFontsWithInfo = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Pointer<XFontStruct>> arg4,
);

typedef _c_XGetFontPath = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_XGetFontPath = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_XListExtensions = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_XListExtensions = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_XListProperties = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XListProperties = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XListHosts = ffi.Pointer<XHostAddress> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XListHosts = ffi.Pointer<XHostAddress> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XKeycodeToKeysym = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint8 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XKeycodeToKeysym = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XLookupKeysym = ffi.Uint64 Function(
  ffi.Pointer<XKeyEvent> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XLookupKeysym = int Function(
  ffi.Pointer<XKeyEvent> arg0,
  int arg1,
);

typedef _c_XGetKeyboardMapping = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint8 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XGetKeyboardMapping = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XStringToKeysym = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_XStringToKeysym = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_XMaxRequestSize = ffi.Int64 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XMaxRequestSize = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XExtendedMaxRequestSize = ffi.Int64 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XExtendedMaxRequestSize = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XResourceManagerString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XResourceManagerString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XScreenResourceString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XScreenResourceString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XDisplayMotionBufferSize = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XDisplayMotionBufferSize = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XVisualIDFromVisual = ffi.Uint64 Function(
  ffi.Pointer<Visual> arg0,
);

typedef _dart_XVisualIDFromVisual = int Function(
  ffi.Pointer<Visual> arg0,
);

typedef _c_XInitThreads = ffi.Int32 Function();

typedef _dart_XInitThreads = int Function();

typedef _c_XLockDisplay = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XLockDisplay = void Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XUnlockDisplay = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XUnlockDisplay = void Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XInitExtension = ffi.Pointer<XExtCodes> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_XInitExtension = ffi.Pointer<XExtCodes> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_XAddExtension = ffi.Pointer<XExtCodes> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XAddExtension = ffi.Pointer<XExtCodes> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XFindOnExtensionList = ffi.Pointer<XExtData> Function(
  ffi.Pointer<ffi.Pointer<XExtData>> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XFindOnExtensionList = ffi.Pointer<XExtData> Function(
  ffi.Pointer<ffi.Pointer<XExtData>> arg0,
  int arg1,
);

typedef _c_XRootWindow = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XRootWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDefaultRootWindow = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XDefaultRootWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XRootWindowOfScreen = ffi.Uint64 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XRootWindowOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XDefaultVisual = ffi.Pointer<Visual> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDefaultVisual = ffi.Pointer<Visual> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDefaultVisualOfScreen = ffi.Pointer<Visual> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XDefaultVisualOfScreen = ffi.Pointer<Visual> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XDefaultGC = ffi.Pointer<_XGC> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDefaultGC = ffi.Pointer<_XGC> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDefaultGCOfScreen = ffi.Pointer<_XGC> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XDefaultGCOfScreen = ffi.Pointer<_XGC> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XBlackPixel = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XBlackPixel = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XWhitePixel = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XWhitePixel = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XAllPlanes = ffi.Uint64 Function();

typedef _dart_XAllPlanes = int Function();

typedef _c_XBlackPixelOfScreen = ffi.Uint64 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XBlackPixelOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XWhitePixelOfScreen = ffi.Uint64 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XWhitePixelOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XNextRequest = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XNextRequest = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XLastKnownRequestProcessed = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XLastKnownRequestProcessed = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XServerVendor = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XServerVendor = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XDisplayString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XDisplayString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XDefaultColormap = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDefaultColormap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDefaultColormapOfScreen = ffi.Uint64 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XDefaultColormapOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XDisplayOfScreen = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XDisplayOfScreen = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XScreenOfDisplay = ffi.Pointer<Screen> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XScreenOfDisplay = ffi.Pointer<Screen> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDefaultScreenOfDisplay = ffi.Pointer<Screen> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XDefaultScreenOfDisplay = ffi.Pointer<Screen> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XEventMaskOfScreen = ffi.Int64 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XEventMaskOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XScreenNumberOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XScreenNumberOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef XErrorHandler = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XErrorEvent>,
);

typedef _c_XSetErrorHandler = ffi.Pointer<ffi.NativeFunction<XErrorHandler>>
    Function(
  ffi.Pointer<ffi.NativeFunction<XErrorHandler>> arg0,
);

typedef _dart_XSetErrorHandler = ffi.Pointer<ffi.NativeFunction<XErrorHandler>>
    Function(
  ffi.Pointer<ffi.NativeFunction<XErrorHandler>> arg0,
);

typedef XIOErrorHandler = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
);

typedef _c_XSetIOErrorHandler = ffi.Pointer<ffi.NativeFunction<XIOErrorHandler>>
    Function(
  ffi.Pointer<ffi.NativeFunction<XIOErrorHandler>> arg0,
);

typedef _dart_XSetIOErrorHandler
    = ffi.Pointer<ffi.NativeFunction<XIOErrorHandler>> Function(
  ffi.Pointer<ffi.NativeFunction<XIOErrorHandler>> arg0,
);

typedef _c_XListPixmapFormats = ffi.Pointer<XPixmapFormatValues> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_XListPixmapFormats = ffi.Pointer<XPixmapFormatValues> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_XListDepths = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XListDepths = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XReconfigureWMWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<XWindowChanges> arg4,
);

typedef _dart_XReconfigureWMWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<XWindowChanges> arg4,
);

typedef _c_XGetWMProtocols = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XGetWMProtocols = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XSetWMProtocols = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XSetWMProtocols = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  int arg3,
);

typedef _c_XIconifyWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XIconifyWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XWithdrawWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XWithdrawWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XGetCommand = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XGetCommand = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XGetWMColormapWindows = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XGetWMColormapWindows = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XSetWMColormapWindows = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XSetWMColormapWindows = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  int arg3,
);

typedef _c_XFreeStringList = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart_XFreeStringList = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _c_XSetTransientForHint = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetTransientForHint = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XActivateScreenSaver = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XActivateScreenSaver = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XAddHost = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
);

typedef _dart_XAddHost = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
);

typedef _c_XAddHosts = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XAddHosts = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
  int arg2,
);

typedef _c_XAddToExtensionList = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<XExtData>> arg0,
  ffi.Pointer<XExtData> arg1,
);

typedef _dart_XAddToExtensionList = int Function(
  ffi.Pointer<ffi.Pointer<XExtData>> arg0,
  ffi.Pointer<XExtData> arg1,
);

typedef _c_XAddToSaveSet = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XAddToSaveSet = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XAllocColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XColor> arg2,
);

typedef _dart_XAllocColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XColor> arg2,
);

typedef _c_XAllocColorCells = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Uint32 arg4,
  ffi.Pointer<ffi.Uint64> arg5,
  ffi.Uint32 arg6,
);

typedef _dart_XAllocColorCells = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  int arg4,
  ffi.Pointer<ffi.Uint64> arg5,
  int arg6,
);

typedef _c_XAllocColorPlanes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
  ffi.Int32 arg7,
  ffi.Pointer<ffi.Uint64> arg8,
  ffi.Pointer<ffi.Uint64> arg9,
  ffi.Pointer<ffi.Uint64> arg10,
);

typedef _dart_XAllocColorPlanes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  ffi.Pointer<ffi.Uint64> arg8,
  ffi.Pointer<ffi.Uint64> arg9,
  ffi.Pointer<ffi.Uint64> arg10,
);

typedef _c_XAllocNamedColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XColor> arg3,
  ffi.Pointer<XColor> arg4,
);

typedef _dart_XAllocNamedColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XColor> arg3,
  ffi.Pointer<XColor> arg4,
);

typedef _c_XAllowEvents = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XAllowEvents = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XAutoRepeatOff = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XAutoRepeatOff = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XAutoRepeatOn = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XAutoRepeatOn = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XBell = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XBell = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XBitmapBitOrder = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XBitmapBitOrder = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XBitmapPad = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XBitmapPad = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XBitmapUnit = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XBitmapUnit = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XCellsOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XCellsOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XChangeActivePointerGrab = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XChangeActivePointerGrab = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XChangeGC = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<XGCValues> arg3,
);

typedef _dart_XChangeGC = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  ffi.Pointer<XGCValues> arg3,
);

typedef _c_XChangeKeyboardControl = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XKeyboardControl> arg2,
);

typedef _dart_XChangeKeyboardControl = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XKeyboardControl> arg2,
);

typedef _c_XChangeKeyboardMapping = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Int32 arg4,
);

typedef _dart_XChangeKeyboardMapping = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  int arg4,
);

typedef _c_XChangePointerControl = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
);

typedef _dart_XChangePointerControl = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
);

typedef _c_XChangeProperty = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Uint8> arg6,
  ffi.Int32 arg7,
);

typedef _dart_XChangeProperty = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  ffi.Pointer<ffi.Uint8> arg6,
  int arg7,
);

typedef _c_XChangeSaveSet = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XChangeSaveSet = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XChangeWindowAttributes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<XSetWindowAttributes> arg3,
);

typedef _dart_XChangeWindowAttributes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XSetWindowAttributes> arg3,
);

typedef _c_XCirculateSubwindows = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XCirculateSubwindows = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XCirculateSubwindowsDown = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XCirculateSubwindowsDown = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XCirculateSubwindowsUp = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XCirculateSubwindowsUp = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XClearArea = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
  ffi.Int32 arg6,
);

typedef _dart_XClearArea = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XClearWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XClearWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XCloseDisplay = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XCloseDisplay = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XConfigureWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<XWindowChanges> arg3,
);

typedef _dart_XConfigureWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XWindowChanges> arg3,
);

typedef _c_XConnectionNumber = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XConnectionNumber = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XConvertSelection = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
  ffi.Uint64 arg4,
  ffi.Uint64 arg5,
);

typedef _dart_XConvertSelection = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
);

typedef _c_XCopyArea = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Uint32 arg6,
  ffi.Uint32 arg7,
  ffi.Int32 arg8,
  ffi.Int32 arg9,
);

typedef _dart_XCopyArea = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
  int arg9,
);

typedef _c_XCopyGC = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<_XGC> arg3,
);

typedef _dart_XCopyGC = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  ffi.Pointer<_XGC> arg3,
);

typedef _c_XCopyPlane = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Uint32 arg6,
  ffi.Uint32 arg7,
  ffi.Int32 arg8,
  ffi.Int32 arg9,
  ffi.Uint64 arg10,
);

typedef _dart_XCopyPlane = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
  int arg9,
  int arg10,
);

typedef _c_XDefaultDepth = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDefaultDepth = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDefaultDepthOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XDefaultDepthOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XDefaultScreen = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XDefaultScreen = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XDefineCursor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XDefineCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XDeleteProperty = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XDeleteProperty = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XDestroyWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XDestroyWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDestroySubwindows = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XDestroySubwindows = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDoesBackingStore = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XDoesBackingStore = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XDoesSaveUnders = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XDoesSaveUnders = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XDisableAccessControl = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XDisableAccessControl = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XDisplayCells = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDisplayCells = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDisplayHeight = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDisplayHeight = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDisplayHeightMM = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDisplayHeightMM = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDisplayKeycodes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XDisplayKeycodes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XDisplayPlanes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDisplayPlanes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDisplayWidth = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDisplayWidth = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDisplayWidthMM = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDisplayWidthMM = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDrawArc = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
  ffi.Int32 arg7,
  ffi.Int32 arg8,
);

typedef _dart_XDrawArc = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
);

typedef _c_XDrawArcs = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XArc> arg3,
  ffi.Int32 arg4,
);

typedef _dart_XDrawArcs = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XArc> arg3,
  int arg4,
);

typedef _c_XDrawImageString = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<ffi.Int8> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XDrawImageString = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<ffi.Int8> arg5,
  int arg6,
);

typedef _c_XDrawImageString16 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XChar2b> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XDrawImageString16 = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XChar2b> arg5,
  int arg6,
);

typedef _c_XDrawLine = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
);

typedef _dart_XDrawLine = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XDrawLines = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XPoint> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
);

typedef _dart_XDrawLines = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XPoint> arg3,
  int arg4,
  int arg5,
);

typedef _c_XDrawPoint = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
);

typedef _dart_XDrawPoint = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
);

typedef _c_XDrawPoints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XPoint> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
);

typedef _dart_XDrawPoints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XPoint> arg3,
  int arg4,
  int arg5,
);

typedef _c_XDrawRectangle = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
);

typedef _dart_XDrawRectangle = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XDrawRectangles = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Int32 arg4,
);

typedef _dart_XDrawRectangles = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XRectangle> arg3,
  int arg4,
);

typedef _c_XDrawSegments = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XSegment> arg3,
  ffi.Int32 arg4,
);

typedef _dart_XDrawSegments = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XSegment> arg3,
  int arg4,
);

typedef _c_XDrawString = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<ffi.Int8> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XDrawString = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<ffi.Int8> arg5,
  int arg6,
);

typedef _c_XDrawString16 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XChar2b> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XDrawString16 = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XChar2b> arg5,
  int arg6,
);

typedef _c_XDrawText = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XTextItem> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XDrawText = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XTextItem> arg5,
  int arg6,
);

typedef _c_XDrawText16 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XTextItem16> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XDrawText16 = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XTextItem16> arg5,
  int arg6,
);

typedef _c_XEnableAccessControl = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XEnableAccessControl = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XEventsQueued = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XEventsQueued = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XFetchName = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_XFetchName = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_XFillArc = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
  ffi.Int32 arg7,
  ffi.Int32 arg8,
);

typedef _dart_XFillArc = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
);

typedef _c_XFillArcs = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XArc> arg3,
  ffi.Int32 arg4,
);

typedef _dart_XFillArcs = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XArc> arg3,
  int arg4,
);

typedef _c_XFillPolygon = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XPoint> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
);

typedef _dart_XFillPolygon = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XPoint> arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XFillRectangle = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
);

typedef _dart_XFillRectangle = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XFillRectangles = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Int32 arg4,
);

typedef _dart_XFillRectangles = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XRectangle> arg3,
  int arg4,
);

typedef _c_XFlush = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XFlush = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XForceScreenSaver = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XForceScreenSaver = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XFree = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_XFree = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_XFreeColormap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XFreeColormap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XFreeColors = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Int32 arg3,
  ffi.Uint64 arg4,
);

typedef _dart_XFreeColors = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  int arg3,
  int arg4,
);

typedef _c_XFreeCursor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XFreeCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XFreeExtensionList = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart_XFreeExtensionList = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _c_XFreeFont = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XFontStruct> arg1,
);

typedef _dart_XFreeFont = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XFontStruct> arg1,
);

typedef _c_XFreeFontInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<XFontStruct> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XFreeFontInfo = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<XFontStruct> arg1,
  int arg2,
);

typedef _c_XFreeFontNames = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart_XFreeFontNames = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _c_XFreeFontPath = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart_XFreeFontPath = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _c_XFreeGC = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
);

typedef _dart_XFreeGC = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
);

typedef _c_XFreeModifiermap = ffi.Int32 Function(
  ffi.Pointer<XModifierKeymap> arg0,
);

typedef _dart_XFreeModifiermap = int Function(
  ffi.Pointer<XModifierKeymap> arg0,
);

typedef _c_XFreePixmap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XFreePixmap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XGeometry = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
  ffi.Int32 arg7,
  ffi.Int32 arg8,
  ffi.Pointer<ffi.Int32> arg9,
  ffi.Pointer<ffi.Int32> arg10,
  ffi.Pointer<ffi.Int32> arg11,
  ffi.Pointer<ffi.Int32> arg12,
);

typedef _dart_XGeometry = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
  ffi.Pointer<ffi.Int32> arg9,
  ffi.Pointer<ffi.Int32> arg10,
  ffi.Pointer<ffi.Int32> arg11,
  ffi.Pointer<ffi.Int32> arg12,
);

typedef _c_XGetErrorDatabaseText = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Int32 arg5,
);

typedef _dart_XGetErrorDatabaseText = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
  int arg5,
);

typedef _c_XGetErrorText = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XGetErrorText = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
);

typedef _c_XGetFontProperty = ffi.Int32 Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _dart_XGetFontProperty = int Function(
  ffi.Pointer<XFontStruct> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _c_XGetGCValues = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<XGCValues> arg3,
);

typedef _dart_XGetGCValues = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  ffi.Pointer<XGCValues> arg3,
);

typedef _c_XGetGeometry = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
  ffi.Pointer<ffi.Uint32> arg6,
  ffi.Pointer<ffi.Uint32> arg7,
  ffi.Pointer<ffi.Uint32> arg8,
);

typedef _dart_XGetGeometry = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
  ffi.Pointer<ffi.Uint32> arg6,
  ffi.Pointer<ffi.Uint32> arg7,
  ffi.Pointer<ffi.Uint32> arg8,
);

typedef _c_XGetIconName = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_XGetIconName = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_XGetInputFocus = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XGetInputFocus = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XGetKeyboardControl = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XKeyboardState> arg1,
);

typedef _dart_XGetKeyboardControl = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XKeyboardState> arg1,
);

typedef _c_XGetPointerControl = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XGetPointerControl = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XGetPointerMapping = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XGetPointerMapping = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
  int arg2,
);

typedef _c_XGetScreenSaver = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XGetScreenSaver = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XGetTransientForHint = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _dart_XGetTransientForHint = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _c_XGetWindowProperty = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Int64 arg3,
  ffi.Int64 arg4,
  ffi.Int32 arg5,
  ffi.Uint64 arg6,
  ffi.Pointer<ffi.Uint64> arg7,
  ffi.Pointer<ffi.Int32> arg8,
  ffi.Pointer<ffi.Uint64> arg9,
  ffi.Pointer<ffi.Uint64> arg10,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> arg11,
);

typedef _dart_XGetWindowProperty = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  ffi.Pointer<ffi.Uint64> arg7,
  ffi.Pointer<ffi.Int32> arg8,
  ffi.Pointer<ffi.Uint64> arg9,
  ffi.Pointer<ffi.Uint64> arg10,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> arg11,
);

typedef _c_XGetWindowAttributes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XWindowAttributes> arg2,
);

typedef _dart_XGetWindowAttributes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XWindowAttributes> arg2,
);

typedef _c_XGrabButton = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint64 arg3,
  ffi.Int32 arg4,
  ffi.Uint32 arg5,
  ffi.Int32 arg6,
  ffi.Int32 arg7,
  ffi.Uint64 arg8,
  ffi.Uint64 arg9,
);

typedef _dart_XGrabButton = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
  int arg9,
);

typedef _c_XGrabKey = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint64 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
);

typedef _dart_XGrabKey = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XGrabKeyboard = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Uint64 arg5,
);

typedef _dart_XGrabKeyboard = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
);

typedef _c_XGrabPointer = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Uint32 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Uint64 arg6,
  ffi.Uint64 arg7,
  ffi.Uint64 arg8,
);

typedef _dart_XGrabPointer = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
);

typedef _c_XGrabServer = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XGrabServer = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XHeightMMOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XHeightMMOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XHeightOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XHeightOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XImageByteOrder = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XImageByteOrder = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XInstallColormap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XInstallColormap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XKeysymToKeycode = ffi.Uint8 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XKeysymToKeycode = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XKillClient = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XKillClient = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XLookupColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XColor> arg3,
  ffi.Pointer<XColor> arg4,
);

typedef _dart_XLookupColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XColor> arg3,
  ffi.Pointer<XColor> arg4,
);

typedef _c_XLowerWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XLowerWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XMapRaised = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XMapRaised = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XMapSubwindows = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XMapSubwindows = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XMapWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XMapWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XMaxCmapsOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XMaxCmapsOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XMinCmapsOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XMinCmapsOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XMoveResizeWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
);

typedef _dart_XMoveResizeWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
);

typedef _c_XMoveWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_XMoveWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XNoOp = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XNoOp = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XParseColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XColor> arg3,
);

typedef _dart_XParseColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XColor> arg3,
);

typedef _c_XParseGeometry = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Uint32> arg3,
  ffi.Pointer<ffi.Uint32> arg4,
);

typedef _dart_XParseGeometry = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Uint32> arg3,
  ffi.Pointer<ffi.Uint32> arg4,
);

typedef _c_XPending = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XPending = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XPlanesOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XPlanesOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XProtocolRevision = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XProtocolRevision = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XProtocolVersion = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XProtocolVersion = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XPutImage = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XImage> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
  ffi.Int32 arg7,
  ffi.Uint32 arg8,
  ffi.Uint32 arg9,
);

typedef _dart_XPutImage = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XImage> arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
  int arg9,
);

typedef _c_XQLength = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XQLength = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XQueryBestCursor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _dart_XQueryBestCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _c_XQueryBestSize = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Uint64 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
  ffi.Pointer<ffi.Uint32> arg5,
  ffi.Pointer<ffi.Uint32> arg6,
);

typedef _dart_XQueryBestSize = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  ffi.Pointer<ffi.Uint32> arg5,
  ffi.Pointer<ffi.Uint32> arg6,
);

typedef _c_XQueryBestStipple = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _dart_XQueryBestStipple = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _c_XQueryBestTile = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _dart_XQueryBestTile = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _c_XQueryColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XColor> arg2,
);

typedef _dart_XQueryColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XColor> arg2,
);

typedef _c_XQueryColors = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XColor> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XQueryColors = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XColor> arg2,
  int arg3,
);

typedef _c_XQueryExtension = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XQueryExtension = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XQueryKeymap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_XQueryKeymap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_XQueryPointer = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Int32> arg7,
  ffi.Pointer<ffi.Uint32> arg8,
);

typedef _dart_XQueryPointer = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Int32> arg7,
  ffi.Pointer<ffi.Uint32> arg8,
);

typedef _c_XQueryTextExtents = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XCharStruct> arg7,
);

typedef _dart_XQueryTextExtents = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XCharStruct> arg7,
);

typedef _c_XQueryTextExtents16 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XChar2b> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XCharStruct> arg7,
);

typedef _dart_XQueryTextExtents16 = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XChar2b> arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XCharStruct> arg7,
);

typedef _c_XQueryTree = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _dart_XQueryTree = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _c_XRaiseWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XRaiseWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XReadBitmapFile = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Uint32> arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint64> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Int32> arg7,
);

typedef _dart_XReadBitmapFile = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Uint32> arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint64> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Int32> arg7,
);

typedef _c_XReadBitmapFileData = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart_XReadBitmapFileData = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c_XRebindKeysym = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Uint8> arg4,
  ffi.Int32 arg5,
);

typedef _dart_XRebindKeysym = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  int arg3,
  ffi.Pointer<ffi.Uint8> arg4,
  int arg5,
);

typedef _c_XRecolorCursor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XColor> arg2,
  ffi.Pointer<XColor> arg3,
);

typedef _dart_XRecolorCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XColor> arg2,
  ffi.Pointer<XColor> arg3,
);

typedef _c_XRefreshKeyboardMapping = ffi.Int32 Function(
  ffi.Pointer<XMappingEvent> arg0,
);

typedef _dart_XRefreshKeyboardMapping = int Function(
  ffi.Pointer<XMappingEvent> arg0,
);

typedef _c_XRemoveFromSaveSet = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XRemoveFromSaveSet = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XRemoveHost = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
);

typedef _dart_XRemoveHost = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
);

typedef _c_XRemoveHosts = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XRemoveHosts = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
  int arg2,
);

typedef _c_XReparentWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
);

typedef _dart_XReparentWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XResetScreenSaver = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XResetScreenSaver = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XResizeWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XResizeWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XRestackWindows = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XRestackWindows = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  int arg2,
);

typedef _c_XRotateBuffers = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XRotateBuffers = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XRotateWindowProperties = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
);

typedef _dart_XRotateWindowProperties = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  int arg3,
  int arg4,
);

typedef _c_XScreenCount = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XScreenCount = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XSelectInput = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int64 arg2,
);

typedef _dart_XSelectInput = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XSetAccessControl = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XSetAccessControl = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XSetArcMode = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetArcMode = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetBackground = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetBackground = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetClipMask = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetClipMask = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetClipOrigin = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_XSetClipOrigin = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  int arg3,
);

typedef _c_XSetClipRectangles = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Pointer<XRectangle> arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
);

typedef _dart_XSetClipRectangles = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  int arg3,
  ffi.Pointer<XRectangle> arg4,
  int arg5,
  int arg6,
);

typedef _c_XSetCloseDownMode = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XSetCloseDownMode = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XSetCommand = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XSetCommand = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  int arg3,
);

typedef _c_XSetDashes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Int32 arg4,
);

typedef _dart_XSetDashes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
);

typedef _c_XSetFillRule = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetFillRule = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetFillStyle = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetFillStyle = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetFont = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetFont = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetFontPath = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetFontPath = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  int arg2,
);

typedef _c_XSetForeground = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetForeground = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetFunction = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetFunction = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetGraphicsExposures = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetGraphicsExposures = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetIconName = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XSetIconName = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_XSetInputFocus = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XSetInputFocus = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XSetLineAttributes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
);

typedef _dart_XSetLineAttributes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
);

typedef _c_XSetModifierMapping = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XModifierKeymap> arg1,
);

typedef _dart_XSetModifierMapping = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XModifierKeymap> arg1,
);

typedef _c_XSetPlaneMask = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetPlaneMask = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetPointerMapping = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetPointerMapping = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
  int arg2,
);

typedef _c_XSetScreenSaver = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
);

typedef _dart_XSetScreenSaver = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XSetSelectionOwner = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XSetSelectionOwner = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XSetState = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
  ffi.Int32 arg4,
  ffi.Uint64 arg5,
);

typedef _dart_XSetState = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
);

typedef _c_XSetStipple = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetStipple = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetSubwindowMode = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetSubwindowMode = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetTSOrigin = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_XSetTSOrigin = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  int arg3,
);

typedef _c_XSetTile = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetTile = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetWindowBackground = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetWindowBackground = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XSetWindowBackgroundPixmap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetWindowBackgroundPixmap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XSetWindowBorder = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetWindowBorder = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XSetWindowBorderPixmap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetWindowBorderPixmap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XSetWindowBorderWidth = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XSetWindowBorderWidth = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XSetWindowColormap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetWindowColormap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XStoreBuffer = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_XStoreBuffer = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  int arg3,
);

typedef _c_XStoreBytes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XStoreBytes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_XStoreColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XColor> arg2,
);

typedef _dart_XStoreColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XColor> arg2,
);

typedef _c_XStoreColors = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XColor> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XStoreColors = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XColor> arg2,
  int arg3,
);

typedef _c_XStoreName = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XStoreName = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_XStoreNamedColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Uint64 arg3,
  ffi.Int32 arg4,
);

typedef _dart_XStoreNamedColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  int arg4,
);

typedef _c_XSync = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XSync = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XTextExtents = ffi.Int32 Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<XCharStruct> arg6,
);

typedef _dart_XTextExtents = int Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<XCharStruct> arg6,
);

typedef _c_XTextExtents16 = ffi.Int32 Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<XChar2b> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<XCharStruct> arg6,
);

typedef _dart_XTextExtents16 = int Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<XChar2b> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<XCharStruct> arg6,
);

typedef _c_XTextWidth = ffi.Int32 Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XTextWidth = int Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_XTextWidth16 = ffi.Int32 Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<XChar2b> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XTextWidth16 = int Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<XChar2b> arg1,
  int arg2,
);

typedef _c_XTranslateCoordinates = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Uint64> arg7,
);

typedef _dart_XTranslateCoordinates = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Uint64> arg7,
);

typedef _c_XUndefineCursor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XUndefineCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XUngrabButton = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XUngrabButton = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XUngrabKey = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XUngrabKey = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XUngrabKeyboard = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XUngrabKeyboard = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XUngrabPointer = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XUngrabPointer = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XUngrabServer = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XUngrabServer = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XUninstallColormap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XUninstallColormap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XUnloadFont = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XUnloadFont = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XUnmapSubwindows = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XUnmapSubwindows = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XUnmapWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XUnmapWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XVendorRelease = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XVendorRelease = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XWarpPointer = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
  ffi.Int32 arg7,
  ffi.Int32 arg8,
);

typedef _dart_XWarpPointer = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
);

typedef _c_XWidthMMOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XWidthMMOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XWidthOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XWidthOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XWriteBitmapFile = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
);

typedef _dart_XWriteBitmapFile = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XSupportsLocale = ffi.Int32 Function();

typedef _dart_XSupportsLocale = int Function();

typedef _c_XSetLocaleModifiers = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_XSetLocaleModifiers = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_XOpenOM = ffi.Pointer<_XOM> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart_XOpenOM = ffi.Pointer<_XOM> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_XCloseOM = ffi.Int32 Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _dart_XCloseOM = int Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _c_XSetOMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _dart_XSetOMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _c_XGetOMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _dart_XGetOMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _c_XDisplayOfOM = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _dart_XDisplayOfOM = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _c_XLocaleOfOM = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _dart_XLocaleOfOM = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _c_XCreateOC = ffi.Pointer<_XOC> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _dart_XCreateOC = ffi.Pointer<_XOC> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _c_XDestroyOC = ffi.Void Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XDestroyOC = void Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XOMOfOC = ffi.Pointer<_XOM> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XOMOfOC = ffi.Pointer<_XOM> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XSetOCValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XSetOCValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XGetOCValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XGetOCValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XCreateFontSet = ffi.Pointer<_XOC> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
);

typedef _dart_XCreateFontSet = ffi.Pointer<_XOC> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
);

typedef _c_XFreeFontSet = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XOC> arg1,
);

typedef _dart_XFreeFontSet = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XOC> arg1,
);

typedef _c_XFontsOfFontSet = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<XFontStruct>>> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
);

typedef _dart_XFontsOfFontSet = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<XFontStruct>>> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
);

typedef _c_XBaseFontNameListOfFontSet = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XBaseFontNameListOfFontSet = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XLocaleOfFontSet = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XLocaleOfFontSet = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XContextDependentDrawing = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XContextDependentDrawing = int Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XDirectionalDependentDrawing = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XDirectionalDependentDrawing = int Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XContextualDrawing = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XContextualDrawing = int Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XExtentsOfFontSet = ffi.Pointer<XFontSetExtents> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XExtentsOfFontSet = ffi.Pointer<XFontSetExtents> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XmbTextEscapement = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XmbTextEscapement = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_XwcTextEscapement = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XwcTextEscapement = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
);

typedef _c_Xutf8TextEscapement = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_Xutf8TextEscapement = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_XmbTextExtents = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
);

typedef _dart_XmbTextExtents = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
);

typedef _c_XwcTextExtents = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
);

typedef _dart_XwcTextExtents = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
);

typedef _c_Xutf8TextExtents = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
);

typedef _dart_Xutf8TextExtents = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
);

typedef _c_XmbTextPerCharExtents = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XRectangle> arg7,
  ffi.Pointer<XRectangle> arg8,
);

typedef _dart_XmbTextPerCharExtents = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
  int arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XRectangle> arg7,
  ffi.Pointer<XRectangle> arg8,
);

typedef _c_XwcTextPerCharExtents = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XRectangle> arg7,
  ffi.Pointer<XRectangle> arg8,
);

typedef _dart_XwcTextPerCharExtents = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
  int arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XRectangle> arg7,
  ffi.Pointer<XRectangle> arg8,
);

typedef _c_Xutf8TextPerCharExtents = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XRectangle> arg7,
  ffi.Pointer<XRectangle> arg8,
);

typedef _dart_Xutf8TextPerCharExtents = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
  int arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XRectangle> arg7,
  ffi.Pointer<XRectangle> arg8,
);

typedef _c_XmbDrawText = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XmbTextItem> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XmbDrawText = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XmbTextItem> arg5,
  int arg6,
);

typedef _c_XwcDrawText = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XwcTextItem> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XwcDrawText = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XwcTextItem> arg5,
  int arg6,
);

typedef _c_Xutf8DrawText = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XmbTextItem> arg5,
  ffi.Int32 arg6,
);

typedef _dart_Xutf8DrawText = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XmbTextItem> arg5,
  int arg6,
);

typedef _c_XmbDrawString = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int8> arg6,
  ffi.Int32 arg7,
);

typedef _dart_XmbDrawString = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  ffi.Pointer<ffi.Int8> arg6,
  int arg7,
);

typedef _c_XwcDrawString = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Int32 arg7,
);

typedef _dart_XwcDrawString = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  ffi.Pointer<ffi.Int32> arg6,
  int arg7,
);

typedef _c_Xutf8DrawString = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int8> arg6,
  ffi.Int32 arg7,
);

typedef _dart_Xutf8DrawString = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  ffi.Pointer<ffi.Int8> arg6,
  int arg7,
);

typedef _c_XmbDrawImageString = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int8> arg6,
  ffi.Int32 arg7,
);

typedef _dart_XmbDrawImageString = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  ffi.Pointer<ffi.Int8> arg6,
  int arg7,
);

typedef _c_XwcDrawImageString = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Int32 arg7,
);

typedef _dart_XwcDrawImageString = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  ffi.Pointer<ffi.Int32> arg6,
  int arg7,
);

typedef _c_Xutf8DrawImageString = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int8> arg6,
  ffi.Int32 arg7,
);

typedef _dart_Xutf8DrawImageString = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  ffi.Pointer<ffi.Int8> arg6,
  int arg7,
);

typedef _c_XOpenIM = ffi.Pointer<_XIM> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart_XOpenIM = ffi.Pointer<_XIM> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_XCloseIM = ffi.Int32 Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _dart_XCloseIM = int Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _c_XGetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _dart_XGetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _c_XSetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _dart_XSetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _c_XDisplayOfIM = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _dart_XDisplayOfIM = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _c_XLocaleOfIM = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _dart_XLocaleOfIM = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _c_XCreateIC = ffi.Pointer<_XIC> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _dart_XCreateIC = ffi.Pointer<_XIC> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _c_XDestroyIC = ffi.Void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XDestroyIC = void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XSetICFocus = ffi.Void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XSetICFocus = void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XUnsetICFocus = ffi.Void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XUnsetICFocus = void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XwcResetIC = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XwcResetIC = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XmbResetIC = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XmbResetIC = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_Xutf8ResetIC = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_Xutf8ResetIC = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XSetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XSetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XGetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XGetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XIMOfIC = ffi.Pointer<_XIM> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XIMOfIC = ffi.Pointer<_XIM> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XmbLookupString = ffi.Int32 Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart_XmbLookupString = int Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c_XwcLookupString = ffi.Int32 Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart_XwcLookupString = int Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  int arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c_Xutf8LookupString = ffi.Int32 Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart_Xutf8LookupString = int Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c_XVaCreateNestedList = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 arg0,
);

typedef _dart_XVaCreateNestedList = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef XIDProc = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_XRegisterIMInstantiateCallback = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.NativeFunction<XIDProc>> arg4,
  ffi.Pointer<ffi.Int8> arg5,
);

typedef _dart_XRegisterIMInstantiateCallback = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.NativeFunction<XIDProc>> arg4,
  ffi.Pointer<ffi.Int8> arg5,
);

typedef _c_XUnregisterIMInstantiateCallback = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.NativeFunction<XIDProc>> arg4,
  ffi.Pointer<ffi.Int8> arg5,
);

typedef _dart_XUnregisterIMInstantiateCallback = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.NativeFunction<XIDProc>> arg4,
  ffi.Pointer<ffi.Int8> arg5,
);

typedef _c_XInternalConnectionNumbers = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XInternalConnectionNumbers = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XProcessInternalConnection = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XProcessInternalConnection = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef XConnectionWatchProc = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef _c_XAddConnectionWatch = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.NativeFunction<XConnectionWatchProc>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XAddConnectionWatch = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.NativeFunction<XConnectionWatchProc>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_XRemoveConnectionWatch = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.NativeFunction<XConnectionWatchProc>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XRemoveConnectionWatch = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.NativeFunction<XConnectionWatchProc>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_XSetAuthorization = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XSetAuthorization = void Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
);

typedef _c__Xmbtowc = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart__Xmbtowc = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c__Xwctomb = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart__Xwctomb = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_XGetEventData = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XGenericEventCookie> arg1,
);

typedef _dart_XGetEventData = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XGenericEventCookie> arg1,
);

typedef _c_XFreeEventData = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XGenericEventCookie> arg1,
);

typedef _dart_XFreeEventData = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XGenericEventCookie> arg1,
);

typedef _c_SDL_GetWindowWMInfo = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<SDL_SysWMinfo> info,
);

typedef _dart_SDL_GetWindowWMInfo = int Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<SDL_SysWMinfo> info,
);

typedef _c_SDLTest_DrawCharacter = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> renderer,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int8 c,
);

typedef _dart_SDLTest_DrawCharacter = int Function(
  ffi.Pointer<ffi.Int32> renderer,
  int x,
  int y,
  int c,
);

typedef _c_SDLTest_DrawString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> renderer,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Int8> s,
);

typedef _dart_SDLTest_DrawString = int Function(
  ffi.Pointer<ffi.Int32> renderer,
  int x,
  int y,
  ffi.Pointer<ffi.Int8> s,
);

typedef _c_SDLTest_CleanupTextDrawing = ffi.Void Function();

typedef _dart_SDLTest_CleanupTextDrawing = void Function();

typedef _c_glClearIndex = ffi.Void Function(
  ffi.Float c,
);

typedef _dart_glClearIndex = void Function(
  double c,
);

typedef _c_glClearColor = ffi.Void Function(
  ffi.Float red,
  ffi.Float green,
  ffi.Float blue,
  ffi.Float alpha,
);

typedef _dart_glClearColor = void Function(
  double red,
  double green,
  double blue,
  double alpha,
);

typedef _c_glClear = ffi.Void Function(
  ffi.Uint32 mask,
);

typedef _dart_glClear = void Function(
  int mask,
);

typedef _c_glIndexMask = ffi.Void Function(
  ffi.Uint32 mask,
);

typedef _dart_glIndexMask = void Function(
  int mask,
);

typedef _c_glColorMask = ffi.Void Function(
  ffi.Uint8 red,
  ffi.Uint8 green,
  ffi.Uint8 blue,
  ffi.Uint8 alpha,
);

typedef _dart_glColorMask = void Function(
  int red,
  int green,
  int blue,
  int alpha,
);

typedef _c_glAlphaFunc = ffi.Void Function(
  ffi.Uint32 func,
  ffi.Float ref,
);

typedef _dart_glAlphaFunc = void Function(
  int func,
  double ref,
);

typedef _c_glBlendFunc = ffi.Void Function(
  ffi.Uint32 sfactor,
  ffi.Uint32 dfactor,
);

typedef _dart_glBlendFunc = void Function(
  int sfactor,
  int dfactor,
);

typedef _c_glLogicOp = ffi.Void Function(
  ffi.Uint32 opcode,
);

typedef _dart_glLogicOp = void Function(
  int opcode,
);

typedef _c_glCullFace = ffi.Void Function(
  ffi.Uint32 mode,
);

typedef _dart_glCullFace = void Function(
  int mode,
);

typedef _c_glFrontFace = ffi.Void Function(
  ffi.Uint32 mode,
);

typedef _dart_glFrontFace = void Function(
  int mode,
);

typedef _c_glPointSize = ffi.Void Function(
  ffi.Float size,
);

typedef _dart_glPointSize = void Function(
  double size,
);

typedef _c_glLineWidth = ffi.Void Function(
  ffi.Float width,
);

typedef _dart_glLineWidth = void Function(
  double width,
);

typedef _c_glLineStipple = ffi.Void Function(
  ffi.Int32 factor,
  ffi.Uint16 pattern,
);

typedef _dart_glLineStipple = void Function(
  int factor,
  int pattern,
);

typedef _c_glPolygonMode = ffi.Void Function(
  ffi.Uint32 face,
  ffi.Uint32 mode,
);

typedef _dart_glPolygonMode = void Function(
  int face,
  int mode,
);

typedef _c_glPolygonOffset = ffi.Void Function(
  ffi.Float factor,
  ffi.Float units,
);

typedef _dart_glPolygonOffset = void Function(
  double factor,
  double units,
);

typedef _c_glPolygonStipple = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> mask,
);

typedef _dart_glPolygonStipple = void Function(
  ffi.Pointer<ffi.Uint8> mask,
);

typedef _c_glGetPolygonStipple = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> mask,
);

typedef _dart_glGetPolygonStipple = void Function(
  ffi.Pointer<ffi.Uint8> mask,
);

typedef _c_glEdgeFlag = ffi.Void Function(
  ffi.Uint8 flag,
);

typedef _dart_glEdgeFlag = void Function(
  int flag,
);

typedef _c_glEdgeFlagv = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> flag,
);

typedef _dart_glEdgeFlagv = void Function(
  ffi.Pointer<ffi.Uint8> flag,
);

typedef _c_glScissor = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_glScissor = void Function(
  int x,
  int y,
  int width,
  int height,
);

typedef _c_glClipPlane = ffi.Void Function(
  ffi.Uint32 plane,
  ffi.Pointer<ffi.Double> equation,
);

typedef _dart_glClipPlane = void Function(
  int plane,
  ffi.Pointer<ffi.Double> equation,
);

typedef _c_glGetClipPlane = ffi.Void Function(
  ffi.Uint32 plane,
  ffi.Pointer<ffi.Double> equation,
);

typedef _dart_glGetClipPlane = void Function(
  int plane,
  ffi.Pointer<ffi.Double> equation,
);

typedef _c_glDrawBuffer = ffi.Void Function(
  ffi.Uint32 mode,
);

typedef _dart_glDrawBuffer = void Function(
  int mode,
);

typedef _c_glReadBuffer = ffi.Void Function(
  ffi.Uint32 mode,
);

typedef _dart_glReadBuffer = void Function(
  int mode,
);

typedef _c_glEnable = ffi.Void Function(
  ffi.Uint32 cap,
);

typedef _dart_glEnable = void Function(
  int cap,
);

typedef _c_glDisable = ffi.Void Function(
  ffi.Uint32 cap,
);

typedef _dart_glDisable = void Function(
  int cap,
);

typedef _c_glIsEnabled = ffi.Uint8 Function(
  ffi.Uint32 cap,
);

typedef _dart_glIsEnabled = int Function(
  int cap,
);

typedef _c_glEnableClientState = ffi.Void Function(
  ffi.Uint32 cap,
);

typedef _dart_glEnableClientState = void Function(
  int cap,
);

typedef _c_glDisableClientState = ffi.Void Function(
  ffi.Uint32 cap,
);

typedef _dart_glDisableClientState = void Function(
  int cap,
);

typedef _c_glGetBooleanv = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Uint8> params,
);

typedef _dart_glGetBooleanv = void Function(
  int pname,
  ffi.Pointer<ffi.Uint8> params,
);

typedef _c_glGetDoublev = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Double> params,
);

typedef _dart_glGetDoublev = void Function(
  int pname,
  ffi.Pointer<ffi.Double> params,
);

typedef _c_glGetFloatv = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glGetFloatv = void Function(
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glGetIntegerv = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetIntegerv = void Function(
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glPushAttrib = ffi.Void Function(
  ffi.Uint32 mask,
);

typedef _dart_glPushAttrib = void Function(
  int mask,
);

typedef _c_glPopAttrib = ffi.Void Function();

typedef _dart_glPopAttrib = void Function();

typedef _c_glPushClientAttrib = ffi.Void Function(
  ffi.Uint32 mask,
);

typedef _dart_glPushClientAttrib = void Function(
  int mask,
);

typedef _c_glPopClientAttrib = ffi.Void Function();

typedef _dart_glPopClientAttrib = void Function();

typedef _c_glRenderMode = ffi.Int32 Function(
  ffi.Uint32 mode,
);

typedef _dart_glRenderMode = int Function(
  int mode,
);

typedef _c_glGetError = ffi.Uint32 Function();

typedef _dart_glGetError = int Function();

typedef _c_glGetString = ffi.Pointer<ffi.Uint8> Function(
  ffi.Uint32 name,
);

typedef _dart_glGetString = ffi.Pointer<ffi.Uint8> Function(
  int name,
);

typedef _c_glFinish = ffi.Void Function();

typedef _dart_glFinish = void Function();

typedef _c_glFlush = ffi.Void Function();

typedef _dart_glFlush = void Function();

typedef _c_glHint = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 mode,
);

typedef _dart_glHint = void Function(
  int target,
  int mode,
);

typedef _c_glClearDepth = ffi.Void Function(
  ffi.Double depth,
);

typedef _dart_glClearDepth = void Function(
  double depth,
);

typedef _c_glDepthFunc = ffi.Void Function(
  ffi.Uint32 func,
);

typedef _dart_glDepthFunc = void Function(
  int func,
);

typedef _c_glDepthMask = ffi.Void Function(
  ffi.Uint8 flag,
);

typedef _dart_glDepthMask = void Function(
  int flag,
);

typedef _c_glDepthRange = ffi.Void Function(
  ffi.Double near_val,
  ffi.Double far_val,
);

typedef _dart_glDepthRange = void Function(
  double near_val,
  double far_val,
);

typedef _c_glClearAccum = ffi.Void Function(
  ffi.Float red,
  ffi.Float green,
  ffi.Float blue,
  ffi.Float alpha,
);

typedef _dart_glClearAccum = void Function(
  double red,
  double green,
  double blue,
  double alpha,
);

typedef _c_glAccum = ffi.Void Function(
  ffi.Uint32 op,
  ffi.Float value,
);

typedef _dart_glAccum = void Function(
  int op,
  double value,
);

typedef _c_glMatrixMode = ffi.Void Function(
  ffi.Uint32 mode,
);

typedef _dart_glMatrixMode = void Function(
  int mode,
);

typedef _c_glOrtho = ffi.Void Function(
  ffi.Double left,
  ffi.Double right,
  ffi.Double bottom,
  ffi.Double top,
  ffi.Double near_val,
  ffi.Double far_val,
);

typedef _dart_glOrtho = void Function(
  double left,
  double right,
  double bottom,
  double top,
  double near_val,
  double far_val,
);

typedef _c_glFrustum = ffi.Void Function(
  ffi.Double left,
  ffi.Double right,
  ffi.Double bottom,
  ffi.Double top,
  ffi.Double near_val,
  ffi.Double far_val,
);

typedef _dart_glFrustum = void Function(
  double left,
  double right,
  double bottom,
  double top,
  double near_val,
  double far_val,
);

typedef _c_glViewport = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_glViewport = void Function(
  int x,
  int y,
  int width,
  int height,
);

typedef _c_glPushMatrix = ffi.Void Function();

typedef _dart_glPushMatrix = void Function();

typedef _c_glPopMatrix = ffi.Void Function();

typedef _dart_glPopMatrix = void Function();

typedef _c_glLoadIdentity = ffi.Void Function();

typedef _dart_glLoadIdentity = void Function();

typedef _c_glLoadMatrixd = ffi.Void Function(
  ffi.Pointer<ffi.Double> m,
);

typedef _dart_glLoadMatrixd = void Function(
  ffi.Pointer<ffi.Double> m,
);

typedef _c_glLoadMatrixf = ffi.Void Function(
  ffi.Pointer<ffi.Float> m,
);

typedef _dart_glLoadMatrixf = void Function(
  ffi.Pointer<ffi.Float> m,
);

typedef _c_glMultMatrixd = ffi.Void Function(
  ffi.Pointer<ffi.Double> m,
);

typedef _dart_glMultMatrixd = void Function(
  ffi.Pointer<ffi.Double> m,
);

typedef _c_glMultMatrixf = ffi.Void Function(
  ffi.Pointer<ffi.Float> m,
);

typedef _dart_glMultMatrixf = void Function(
  ffi.Pointer<ffi.Float> m,
);

typedef _c_glRotated = ffi.Void Function(
  ffi.Double angle,
  ffi.Double x,
  ffi.Double y,
  ffi.Double z,
);

typedef _dart_glRotated = void Function(
  double angle,
  double x,
  double y,
  double z,
);

typedef _c_glRotatef = ffi.Void Function(
  ffi.Float angle,
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_glRotatef = void Function(
  double angle,
  double x,
  double y,
  double z,
);

typedef _c_glScaled = ffi.Void Function(
  ffi.Double x,
  ffi.Double y,
  ffi.Double z,
);

typedef _dart_glScaled = void Function(
  double x,
  double y,
  double z,
);

typedef _c_glScalef = ffi.Void Function(
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_glScalef = void Function(
  double x,
  double y,
  double z,
);

typedef _c_glTranslated = ffi.Void Function(
  ffi.Double x,
  ffi.Double y,
  ffi.Double z,
);

typedef _dart_glTranslated = void Function(
  double x,
  double y,
  double z,
);

typedef _c_glTranslatef = ffi.Void Function(
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_glTranslatef = void Function(
  double x,
  double y,
  double z,
);

typedef _c_glIsList = ffi.Uint8 Function(
  ffi.Uint32 list,
);

typedef _dart_glIsList = int Function(
  int list,
);

typedef _c_glDeleteLists = ffi.Void Function(
  ffi.Uint32 list,
  ffi.Int32 range,
);

typedef _dart_glDeleteLists = void Function(
  int list,
  int range,
);

typedef _c_glGenLists = ffi.Uint32 Function(
  ffi.Int32 range,
);

typedef _dart_glGenLists = int Function(
  int range,
);

typedef _c_glNewList = ffi.Void Function(
  ffi.Uint32 list,
  ffi.Uint32 mode,
);

typedef _dart_glNewList = void Function(
  int list,
  int mode,
);

typedef _c_glEndList = ffi.Void Function();

typedef _dart_glEndList = void Function();

typedef _c_glCallList = ffi.Void Function(
  ffi.Uint32 list,
);

typedef _dart_glCallList = void Function(
  int list,
);

typedef _c_glCallLists = ffi.Void Function(
  ffi.Int32 n,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> lists,
);

typedef _dart_glCallLists = void Function(
  int n,
  int type,
  ffi.Pointer<ffi.Void> lists,
);

typedef _c_glListBase = ffi.Void Function(
  ffi.Uint32 base,
);

typedef _dart_glListBase = void Function(
  int base,
);

typedef _c_glBegin = ffi.Void Function(
  ffi.Uint32 mode,
);

typedef _dart_glBegin = void Function(
  int mode,
);

typedef _c_glEnd = ffi.Void Function();

typedef _dart_glEnd = void Function();

typedef _c_glVertex2d = ffi.Void Function(
  ffi.Double x,
  ffi.Double y,
);

typedef _dart_glVertex2d = void Function(
  double x,
  double y,
);

typedef _c_glVertex2f = ffi.Void Function(
  ffi.Float x,
  ffi.Float y,
);

typedef _dart_glVertex2f = void Function(
  double x,
  double y,
);

typedef _c_glVertex2i = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_glVertex2i = void Function(
  int x,
  int y,
);

typedef _c_glVertex2s = ffi.Void Function(
  ffi.Int16 x,
  ffi.Int16 y,
);

typedef _dart_glVertex2s = void Function(
  int x,
  int y,
);

typedef _c_glVertex3d = ffi.Void Function(
  ffi.Double x,
  ffi.Double y,
  ffi.Double z,
);

typedef _dart_glVertex3d = void Function(
  double x,
  double y,
  double z,
);

typedef _c_glVertex3f = ffi.Void Function(
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_glVertex3f = void Function(
  double x,
  double y,
  double z,
);

typedef _c_glVertex3i = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 z,
);

typedef _dart_glVertex3i = void Function(
  int x,
  int y,
  int z,
);

typedef _c_glVertex3s = ffi.Void Function(
  ffi.Int16 x,
  ffi.Int16 y,
  ffi.Int16 z,
);

typedef _dart_glVertex3s = void Function(
  int x,
  int y,
  int z,
);

typedef _c_glVertex4d = ffi.Void Function(
  ffi.Double x,
  ffi.Double y,
  ffi.Double z,
  ffi.Double w,
);

typedef _dart_glVertex4d = void Function(
  double x,
  double y,
  double z,
  double w,
);

typedef _c_glVertex4f = ffi.Void Function(
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
  ffi.Float w,
);

typedef _dart_glVertex4f = void Function(
  double x,
  double y,
  double z,
  double w,
);

typedef _c_glVertex4i = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 z,
  ffi.Int32 w,
);

typedef _dart_glVertex4i = void Function(
  int x,
  int y,
  int z,
  int w,
);

typedef _c_glVertex4s = ffi.Void Function(
  ffi.Int16 x,
  ffi.Int16 y,
  ffi.Int16 z,
  ffi.Int16 w,
);

typedef _dart_glVertex4s = void Function(
  int x,
  int y,
  int z,
  int w,
);

typedef _c_glVertex2dv = ffi.Void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glVertex2dv = void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glVertex2fv = ffi.Void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glVertex2fv = void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glVertex2iv = ffi.Void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glVertex2iv = void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glVertex2sv = ffi.Void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glVertex2sv = void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glVertex3dv = ffi.Void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glVertex3dv = void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glVertex3fv = ffi.Void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glVertex3fv = void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glVertex3iv = ffi.Void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glVertex3iv = void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glVertex3sv = ffi.Void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glVertex3sv = void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glVertex4dv = ffi.Void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glVertex4dv = void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glVertex4fv = ffi.Void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glVertex4fv = void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glVertex4iv = ffi.Void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glVertex4iv = void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glVertex4sv = ffi.Void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glVertex4sv = void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glNormal3b = ffi.Void Function(
  ffi.Int8 nx,
  ffi.Int8 ny,
  ffi.Int8 nz,
);

typedef _dart_glNormal3b = void Function(
  int nx,
  int ny,
  int nz,
);

typedef _c_glNormal3d = ffi.Void Function(
  ffi.Double nx,
  ffi.Double ny,
  ffi.Double nz,
);

typedef _dart_glNormal3d = void Function(
  double nx,
  double ny,
  double nz,
);

typedef _c_glNormal3f = ffi.Void Function(
  ffi.Float nx,
  ffi.Float ny,
  ffi.Float nz,
);

typedef _dart_glNormal3f = void Function(
  double nx,
  double ny,
  double nz,
);

typedef _c_glNormal3i = ffi.Void Function(
  ffi.Int32 nx,
  ffi.Int32 ny,
  ffi.Int32 nz,
);

typedef _dart_glNormal3i = void Function(
  int nx,
  int ny,
  int nz,
);

typedef _c_glNormal3s = ffi.Void Function(
  ffi.Int16 nx,
  ffi.Int16 ny,
  ffi.Int16 nz,
);

typedef _dart_glNormal3s = void Function(
  int nx,
  int ny,
  int nz,
);

typedef _c_glNormal3bv = ffi.Void Function(
  ffi.Pointer<ffi.Int8> v,
);

typedef _dart_glNormal3bv = void Function(
  ffi.Pointer<ffi.Int8> v,
);

typedef _c_glNormal3dv = ffi.Void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glNormal3dv = void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glNormal3fv = ffi.Void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glNormal3fv = void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glNormal3iv = ffi.Void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glNormal3iv = void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glNormal3sv = ffi.Void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glNormal3sv = void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glIndexd = ffi.Void Function(
  ffi.Double c,
);

typedef _dart_glIndexd = void Function(
  double c,
);

typedef _c_glIndexf = ffi.Void Function(
  ffi.Float c,
);

typedef _dart_glIndexf = void Function(
  double c,
);

typedef _c_glIndexi = ffi.Void Function(
  ffi.Int32 c,
);

typedef _dart_glIndexi = void Function(
  int c,
);

typedef _c_glIndexs = ffi.Void Function(
  ffi.Int16 c,
);

typedef _dart_glIndexs = void Function(
  int c,
);

typedef _c_glIndexub = ffi.Void Function(
  ffi.Uint8 c,
);

typedef _dart_glIndexub = void Function(
  int c,
);

typedef _c_glIndexdv = ffi.Void Function(
  ffi.Pointer<ffi.Double> c,
);

typedef _dart_glIndexdv = void Function(
  ffi.Pointer<ffi.Double> c,
);

typedef _c_glIndexfv = ffi.Void Function(
  ffi.Pointer<ffi.Float> c,
);

typedef _dart_glIndexfv = void Function(
  ffi.Pointer<ffi.Float> c,
);

typedef _c_glIndexiv = ffi.Void Function(
  ffi.Pointer<ffi.Int32> c,
);

typedef _dart_glIndexiv = void Function(
  ffi.Pointer<ffi.Int32> c,
);

typedef _c_glIndexsv = ffi.Void Function(
  ffi.Pointer<ffi.Int16> c,
);

typedef _dart_glIndexsv = void Function(
  ffi.Pointer<ffi.Int16> c,
);

typedef _c_glIndexubv = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> c,
);

typedef _dart_glIndexubv = void Function(
  ffi.Pointer<ffi.Uint8> c,
);

typedef _c_glColor3b = ffi.Void Function(
  ffi.Int8 red,
  ffi.Int8 green,
  ffi.Int8 blue,
);

typedef _dart_glColor3b = void Function(
  int red,
  int green,
  int blue,
);

typedef _c_glColor3d = ffi.Void Function(
  ffi.Double red,
  ffi.Double green,
  ffi.Double blue,
);

typedef _dart_glColor3d = void Function(
  double red,
  double green,
  double blue,
);

typedef _c_glColor3f = ffi.Void Function(
  ffi.Float red,
  ffi.Float green,
  ffi.Float blue,
);

typedef _dart_glColor3f = void Function(
  double red,
  double green,
  double blue,
);

typedef _c_glColor3i = ffi.Void Function(
  ffi.Int32 red,
  ffi.Int32 green,
  ffi.Int32 blue,
);

typedef _dart_glColor3i = void Function(
  int red,
  int green,
  int blue,
);

typedef _c_glColor3s = ffi.Void Function(
  ffi.Int16 red,
  ffi.Int16 green,
  ffi.Int16 blue,
);

typedef _dart_glColor3s = void Function(
  int red,
  int green,
  int blue,
);

typedef _c_glColor3ub = ffi.Void Function(
  ffi.Uint8 red,
  ffi.Uint8 green,
  ffi.Uint8 blue,
);

typedef _dart_glColor3ub = void Function(
  int red,
  int green,
  int blue,
);

typedef _c_glColor3ui = ffi.Void Function(
  ffi.Uint32 red,
  ffi.Uint32 green,
  ffi.Uint32 blue,
);

typedef _dart_glColor3ui = void Function(
  int red,
  int green,
  int blue,
);

typedef _c_glColor3us = ffi.Void Function(
  ffi.Uint16 red,
  ffi.Uint16 green,
  ffi.Uint16 blue,
);

typedef _dart_glColor3us = void Function(
  int red,
  int green,
  int blue,
);

typedef _c_glColor4b = ffi.Void Function(
  ffi.Int8 red,
  ffi.Int8 green,
  ffi.Int8 blue,
  ffi.Int8 alpha,
);

typedef _dart_glColor4b = void Function(
  int red,
  int green,
  int blue,
  int alpha,
);

typedef _c_glColor4d = ffi.Void Function(
  ffi.Double red,
  ffi.Double green,
  ffi.Double blue,
  ffi.Double alpha,
);

typedef _dart_glColor4d = void Function(
  double red,
  double green,
  double blue,
  double alpha,
);

typedef _c_glColor4f = ffi.Void Function(
  ffi.Float red,
  ffi.Float green,
  ffi.Float blue,
  ffi.Float alpha,
);

typedef _dart_glColor4f = void Function(
  double red,
  double green,
  double blue,
  double alpha,
);

typedef _c_glColor4i = ffi.Void Function(
  ffi.Int32 red,
  ffi.Int32 green,
  ffi.Int32 blue,
  ffi.Int32 alpha,
);

typedef _dart_glColor4i = void Function(
  int red,
  int green,
  int blue,
  int alpha,
);

typedef _c_glColor4s = ffi.Void Function(
  ffi.Int16 red,
  ffi.Int16 green,
  ffi.Int16 blue,
  ffi.Int16 alpha,
);

typedef _dart_glColor4s = void Function(
  int red,
  int green,
  int blue,
  int alpha,
);

typedef _c_glColor4ub = ffi.Void Function(
  ffi.Uint8 red,
  ffi.Uint8 green,
  ffi.Uint8 blue,
  ffi.Uint8 alpha,
);

typedef _dart_glColor4ub = void Function(
  int red,
  int green,
  int blue,
  int alpha,
);

typedef _c_glColor4ui = ffi.Void Function(
  ffi.Uint32 red,
  ffi.Uint32 green,
  ffi.Uint32 blue,
  ffi.Uint32 alpha,
);

typedef _dart_glColor4ui = void Function(
  int red,
  int green,
  int blue,
  int alpha,
);

typedef _c_glColor4us = ffi.Void Function(
  ffi.Uint16 red,
  ffi.Uint16 green,
  ffi.Uint16 blue,
  ffi.Uint16 alpha,
);

typedef _dart_glColor4us = void Function(
  int red,
  int green,
  int blue,
  int alpha,
);

typedef _c_glColor3bv = ffi.Void Function(
  ffi.Pointer<ffi.Int8> v,
);

typedef _dart_glColor3bv = void Function(
  ffi.Pointer<ffi.Int8> v,
);

typedef _c_glColor3dv = ffi.Void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glColor3dv = void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glColor3fv = ffi.Void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glColor3fv = void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glColor3iv = ffi.Void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glColor3iv = void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glColor3sv = ffi.Void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glColor3sv = void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glColor3ubv = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> v,
);

typedef _dart_glColor3ubv = void Function(
  ffi.Pointer<ffi.Uint8> v,
);

typedef _c_glColor3uiv = ffi.Void Function(
  ffi.Pointer<ffi.Uint32> v,
);

typedef _dart_glColor3uiv = void Function(
  ffi.Pointer<ffi.Uint32> v,
);

typedef _c_glColor3usv = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> v,
);

typedef _dart_glColor3usv = void Function(
  ffi.Pointer<ffi.Uint16> v,
);

typedef _c_glColor4bv = ffi.Void Function(
  ffi.Pointer<ffi.Int8> v,
);

typedef _dart_glColor4bv = void Function(
  ffi.Pointer<ffi.Int8> v,
);

typedef _c_glColor4dv = ffi.Void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glColor4dv = void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glColor4fv = ffi.Void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glColor4fv = void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glColor4iv = ffi.Void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glColor4iv = void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glColor4sv = ffi.Void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glColor4sv = void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glColor4ubv = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> v,
);

typedef _dart_glColor4ubv = void Function(
  ffi.Pointer<ffi.Uint8> v,
);

typedef _c_glColor4uiv = ffi.Void Function(
  ffi.Pointer<ffi.Uint32> v,
);

typedef _dart_glColor4uiv = void Function(
  ffi.Pointer<ffi.Uint32> v,
);

typedef _c_glColor4usv = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> v,
);

typedef _dart_glColor4usv = void Function(
  ffi.Pointer<ffi.Uint16> v,
);

typedef _c_glTexCoord1d = ffi.Void Function(
  ffi.Double s,
);

typedef _dart_glTexCoord1d = void Function(
  double s,
);

typedef _c_glTexCoord1f = ffi.Void Function(
  ffi.Float s,
);

typedef _dart_glTexCoord1f = void Function(
  double s,
);

typedef _c_glTexCoord1i = ffi.Void Function(
  ffi.Int32 s,
);

typedef _dart_glTexCoord1i = void Function(
  int s,
);

typedef _c_glTexCoord1s = ffi.Void Function(
  ffi.Int16 s,
);

typedef _dart_glTexCoord1s = void Function(
  int s,
);

typedef _c_glTexCoord2d = ffi.Void Function(
  ffi.Double s,
  ffi.Double t,
);

typedef _dart_glTexCoord2d = void Function(
  double s,
  double t,
);

typedef _c_glTexCoord2f = ffi.Void Function(
  ffi.Float s,
  ffi.Float t,
);

typedef _dart_glTexCoord2f = void Function(
  double s,
  double t,
);

typedef _c_glTexCoord2i = ffi.Void Function(
  ffi.Int32 s,
  ffi.Int32 t,
);

typedef _dart_glTexCoord2i = void Function(
  int s,
  int t,
);

typedef _c_glTexCoord2s = ffi.Void Function(
  ffi.Int16 s,
  ffi.Int16 t,
);

typedef _dart_glTexCoord2s = void Function(
  int s,
  int t,
);

typedef _c_glTexCoord3d = ffi.Void Function(
  ffi.Double s,
  ffi.Double t,
  ffi.Double r,
);

typedef _dart_glTexCoord3d = void Function(
  double s,
  double t,
  double r,
);

typedef _c_glTexCoord3f = ffi.Void Function(
  ffi.Float s,
  ffi.Float t,
  ffi.Float r,
);

typedef _dart_glTexCoord3f = void Function(
  double s,
  double t,
  double r,
);

typedef _c_glTexCoord3i = ffi.Void Function(
  ffi.Int32 s,
  ffi.Int32 t,
  ffi.Int32 r,
);

typedef _dart_glTexCoord3i = void Function(
  int s,
  int t,
  int r,
);

typedef _c_glTexCoord3s = ffi.Void Function(
  ffi.Int16 s,
  ffi.Int16 t,
  ffi.Int16 r,
);

typedef _dart_glTexCoord3s = void Function(
  int s,
  int t,
  int r,
);

typedef _c_glTexCoord4d = ffi.Void Function(
  ffi.Double s,
  ffi.Double t,
  ffi.Double r,
  ffi.Double q,
);

typedef _dart_glTexCoord4d = void Function(
  double s,
  double t,
  double r,
  double q,
);

typedef _c_glTexCoord4f = ffi.Void Function(
  ffi.Float s,
  ffi.Float t,
  ffi.Float r,
  ffi.Float q,
);

typedef _dart_glTexCoord4f = void Function(
  double s,
  double t,
  double r,
  double q,
);

typedef _c_glTexCoord4i = ffi.Void Function(
  ffi.Int32 s,
  ffi.Int32 t,
  ffi.Int32 r,
  ffi.Int32 q,
);

typedef _dart_glTexCoord4i = void Function(
  int s,
  int t,
  int r,
  int q,
);

typedef _c_glTexCoord4s = ffi.Void Function(
  ffi.Int16 s,
  ffi.Int16 t,
  ffi.Int16 r,
  ffi.Int16 q,
);

typedef _dart_glTexCoord4s = void Function(
  int s,
  int t,
  int r,
  int q,
);

typedef _c_glTexCoord1dv = ffi.Void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glTexCoord1dv = void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glTexCoord1fv = ffi.Void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glTexCoord1fv = void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glTexCoord1iv = ffi.Void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glTexCoord1iv = void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glTexCoord1sv = ffi.Void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glTexCoord1sv = void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glTexCoord2dv = ffi.Void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glTexCoord2dv = void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glTexCoord2fv = ffi.Void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glTexCoord2fv = void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glTexCoord2iv = ffi.Void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glTexCoord2iv = void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glTexCoord2sv = ffi.Void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glTexCoord2sv = void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glTexCoord3dv = ffi.Void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glTexCoord3dv = void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glTexCoord3fv = ffi.Void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glTexCoord3fv = void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glTexCoord3iv = ffi.Void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glTexCoord3iv = void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glTexCoord3sv = ffi.Void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glTexCoord3sv = void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glTexCoord4dv = ffi.Void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glTexCoord4dv = void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glTexCoord4fv = ffi.Void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glTexCoord4fv = void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glTexCoord4iv = ffi.Void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glTexCoord4iv = void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glTexCoord4sv = ffi.Void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glTexCoord4sv = void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glRasterPos2d = ffi.Void Function(
  ffi.Double x,
  ffi.Double y,
);

typedef _dart_glRasterPos2d = void Function(
  double x,
  double y,
);

typedef _c_glRasterPos2f = ffi.Void Function(
  ffi.Float x,
  ffi.Float y,
);

typedef _dart_glRasterPos2f = void Function(
  double x,
  double y,
);

typedef _c_glRasterPos2i = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_glRasterPos2i = void Function(
  int x,
  int y,
);

typedef _c_glRasterPos2s = ffi.Void Function(
  ffi.Int16 x,
  ffi.Int16 y,
);

typedef _dart_glRasterPos2s = void Function(
  int x,
  int y,
);

typedef _c_glRasterPos3d = ffi.Void Function(
  ffi.Double x,
  ffi.Double y,
  ffi.Double z,
);

typedef _dart_glRasterPos3d = void Function(
  double x,
  double y,
  double z,
);

typedef _c_glRasterPos3f = ffi.Void Function(
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_glRasterPos3f = void Function(
  double x,
  double y,
  double z,
);

typedef _c_glRasterPos3i = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 z,
);

typedef _dart_glRasterPos3i = void Function(
  int x,
  int y,
  int z,
);

typedef _c_glRasterPos3s = ffi.Void Function(
  ffi.Int16 x,
  ffi.Int16 y,
  ffi.Int16 z,
);

typedef _dart_glRasterPos3s = void Function(
  int x,
  int y,
  int z,
);

typedef _c_glRasterPos4d = ffi.Void Function(
  ffi.Double x,
  ffi.Double y,
  ffi.Double z,
  ffi.Double w,
);

typedef _dart_glRasterPos4d = void Function(
  double x,
  double y,
  double z,
  double w,
);

typedef _c_glRasterPos4f = ffi.Void Function(
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
  ffi.Float w,
);

typedef _dart_glRasterPos4f = void Function(
  double x,
  double y,
  double z,
  double w,
);

typedef _c_glRasterPos4i = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 z,
  ffi.Int32 w,
);

typedef _dart_glRasterPos4i = void Function(
  int x,
  int y,
  int z,
  int w,
);

typedef _c_glRasterPos4s = ffi.Void Function(
  ffi.Int16 x,
  ffi.Int16 y,
  ffi.Int16 z,
  ffi.Int16 w,
);

typedef _dart_glRasterPos4s = void Function(
  int x,
  int y,
  int z,
  int w,
);

typedef _c_glRasterPos2dv = ffi.Void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glRasterPos2dv = void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glRasterPos2fv = ffi.Void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glRasterPos2fv = void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glRasterPos2iv = ffi.Void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glRasterPos2iv = void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glRasterPos2sv = ffi.Void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glRasterPos2sv = void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glRasterPos3dv = ffi.Void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glRasterPos3dv = void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glRasterPos3fv = ffi.Void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glRasterPos3fv = void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glRasterPos3iv = ffi.Void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glRasterPos3iv = void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glRasterPos3sv = ffi.Void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glRasterPos3sv = void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glRasterPos4dv = ffi.Void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glRasterPos4dv = void Function(
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glRasterPos4fv = ffi.Void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glRasterPos4fv = void Function(
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glRasterPos4iv = ffi.Void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glRasterPos4iv = void Function(
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glRasterPos4sv = ffi.Void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glRasterPos4sv = void Function(
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glRectd = ffi.Void Function(
  ffi.Double x1,
  ffi.Double y1,
  ffi.Double x2,
  ffi.Double y2,
);

typedef _dart_glRectd = void Function(
  double x1,
  double y1,
  double x2,
  double y2,
);

typedef _c_glRectf = ffi.Void Function(
  ffi.Float x1,
  ffi.Float y1,
  ffi.Float x2,
  ffi.Float y2,
);

typedef _dart_glRectf = void Function(
  double x1,
  double y1,
  double x2,
  double y2,
);

typedef _c_glRecti = ffi.Void Function(
  ffi.Int32 x1,
  ffi.Int32 y1,
  ffi.Int32 x2,
  ffi.Int32 y2,
);

typedef _dart_glRecti = void Function(
  int x1,
  int y1,
  int x2,
  int y2,
);

typedef _c_glRects = ffi.Void Function(
  ffi.Int16 x1,
  ffi.Int16 y1,
  ffi.Int16 x2,
  ffi.Int16 y2,
);

typedef _dart_glRects = void Function(
  int x1,
  int y1,
  int x2,
  int y2,
);

typedef _c_glRectdv = ffi.Void Function(
  ffi.Pointer<ffi.Double> v1,
  ffi.Pointer<ffi.Double> v2,
);

typedef _dart_glRectdv = void Function(
  ffi.Pointer<ffi.Double> v1,
  ffi.Pointer<ffi.Double> v2,
);

typedef _c_glRectfv = ffi.Void Function(
  ffi.Pointer<ffi.Float> v1,
  ffi.Pointer<ffi.Float> v2,
);

typedef _dart_glRectfv = void Function(
  ffi.Pointer<ffi.Float> v1,
  ffi.Pointer<ffi.Float> v2,
);

typedef _c_glRectiv = ffi.Void Function(
  ffi.Pointer<ffi.Int32> v1,
  ffi.Pointer<ffi.Int32> v2,
);

typedef _dart_glRectiv = void Function(
  ffi.Pointer<ffi.Int32> v1,
  ffi.Pointer<ffi.Int32> v2,
);

typedef _c_glRectsv = ffi.Void Function(
  ffi.Pointer<ffi.Int16> v1,
  ffi.Pointer<ffi.Int16> v2,
);

typedef _dart_glRectsv = void Function(
  ffi.Pointer<ffi.Int16> v1,
  ffi.Pointer<ffi.Int16> v2,
);

typedef _c_glVertexPointer = ffi.Void Function(
  ffi.Int32 size,
  ffi.Uint32 type,
  ffi.Int32 stride,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_glVertexPointer = void Function(
  int size,
  int type,
  int stride,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_glNormalPointer = ffi.Void Function(
  ffi.Uint32 type,
  ffi.Int32 stride,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_glNormalPointer = void Function(
  int type,
  int stride,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_glColorPointer = ffi.Void Function(
  ffi.Int32 size,
  ffi.Uint32 type,
  ffi.Int32 stride,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_glColorPointer = void Function(
  int size,
  int type,
  int stride,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_glIndexPointer = ffi.Void Function(
  ffi.Uint32 type,
  ffi.Int32 stride,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_glIndexPointer = void Function(
  int type,
  int stride,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_glTexCoordPointer = ffi.Void Function(
  ffi.Int32 size,
  ffi.Uint32 type,
  ffi.Int32 stride,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_glTexCoordPointer = void Function(
  int size,
  int type,
  int stride,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_glEdgeFlagPointer = ffi.Void Function(
  ffi.Int32 stride,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_glEdgeFlagPointer = void Function(
  int stride,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_glGetPointerv = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params,
);

typedef _dart_glGetPointerv = void Function(
  int pname,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params,
);

typedef _c_glArrayElement = ffi.Void Function(
  ffi.Int32 i,
);

typedef _dart_glArrayElement = void Function(
  int i,
);

typedef _c_glDrawArrays = ffi.Void Function(
  ffi.Uint32 mode,
  ffi.Int32 first,
  ffi.Int32 count,
);

typedef _dart_glDrawArrays = void Function(
  int mode,
  int first,
  int count,
);

typedef _c_glDrawElements = ffi.Void Function(
  ffi.Uint32 mode,
  ffi.Int32 count,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> indices,
);

typedef _dart_glDrawElements = void Function(
  int mode,
  int count,
  int type,
  ffi.Pointer<ffi.Void> indices,
);

typedef _c_glInterleavedArrays = ffi.Void Function(
  ffi.Uint32 format,
  ffi.Int32 stride,
  ffi.Pointer<ffi.Void> pointer,
);

typedef _dart_glInterleavedArrays = void Function(
  int format,
  int stride,
  ffi.Pointer<ffi.Void> pointer,
);

typedef _c_glShadeModel = ffi.Void Function(
  ffi.Uint32 mode,
);

typedef _dart_glShadeModel = void Function(
  int mode,
);

typedef _c_glLightf = ffi.Void Function(
  ffi.Uint32 light,
  ffi.Uint32 pname,
  ffi.Float param,
);

typedef _dart_glLightf = void Function(
  int light,
  int pname,
  double param,
);

typedef _c_glLighti = ffi.Void Function(
  ffi.Uint32 light,
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glLighti = void Function(
  int light,
  int pname,
  int param,
);

typedef _c_glLightfv = ffi.Void Function(
  ffi.Uint32 light,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glLightfv = void Function(
  int light,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glLightiv = ffi.Void Function(
  ffi.Uint32 light,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glLightiv = void Function(
  int light,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetLightfv = ffi.Void Function(
  ffi.Uint32 light,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glGetLightfv = void Function(
  int light,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glGetLightiv = ffi.Void Function(
  ffi.Uint32 light,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetLightiv = void Function(
  int light,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glLightModelf = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Float param,
);

typedef _dart_glLightModelf = void Function(
  int pname,
  double param,
);

typedef _c_glLightModeli = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glLightModeli = void Function(
  int pname,
  int param,
);

typedef _c_glLightModelfv = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glLightModelfv = void Function(
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glLightModeliv = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glLightModeliv = void Function(
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glMaterialf = ffi.Void Function(
  ffi.Uint32 face,
  ffi.Uint32 pname,
  ffi.Float param,
);

typedef _dart_glMaterialf = void Function(
  int face,
  int pname,
  double param,
);

typedef _c_glMateriali = ffi.Void Function(
  ffi.Uint32 face,
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glMateriali = void Function(
  int face,
  int pname,
  int param,
);

typedef _c_glMaterialfv = ffi.Void Function(
  ffi.Uint32 face,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glMaterialfv = void Function(
  int face,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glMaterialiv = ffi.Void Function(
  ffi.Uint32 face,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glMaterialiv = void Function(
  int face,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetMaterialfv = ffi.Void Function(
  ffi.Uint32 face,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glGetMaterialfv = void Function(
  int face,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glGetMaterialiv = ffi.Void Function(
  ffi.Uint32 face,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetMaterialiv = void Function(
  int face,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glColorMaterial = ffi.Void Function(
  ffi.Uint32 face,
  ffi.Uint32 mode,
);

typedef _dart_glColorMaterial = void Function(
  int face,
  int mode,
);

typedef _c_glPixelZoom = ffi.Void Function(
  ffi.Float xfactor,
  ffi.Float yfactor,
);

typedef _dart_glPixelZoom = void Function(
  double xfactor,
  double yfactor,
);

typedef _c_glPixelStoref = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Float param,
);

typedef _dart_glPixelStoref = void Function(
  int pname,
  double param,
);

typedef _c_glPixelStorei = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glPixelStorei = void Function(
  int pname,
  int param,
);

typedef _c_glPixelTransferf = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Float param,
);

typedef _dart_glPixelTransferf = void Function(
  int pname,
  double param,
);

typedef _c_glPixelTransferi = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glPixelTransferi = void Function(
  int pname,
  int param,
);

typedef _c_glPixelMapfv = ffi.Void Function(
  ffi.Uint32 map,
  ffi.Int32 mapsize,
  ffi.Pointer<ffi.Float> values,
);

typedef _dart_glPixelMapfv = void Function(
  int map,
  int mapsize,
  ffi.Pointer<ffi.Float> values,
);

typedef _c_glPixelMapuiv = ffi.Void Function(
  ffi.Uint32 map,
  ffi.Int32 mapsize,
  ffi.Pointer<ffi.Uint32> values,
);

typedef _dart_glPixelMapuiv = void Function(
  int map,
  int mapsize,
  ffi.Pointer<ffi.Uint32> values,
);

typedef _c_glPixelMapusv = ffi.Void Function(
  ffi.Uint32 map,
  ffi.Int32 mapsize,
  ffi.Pointer<ffi.Uint16> values,
);

typedef _dart_glPixelMapusv = void Function(
  int map,
  int mapsize,
  ffi.Pointer<ffi.Uint16> values,
);

typedef _c_glGetPixelMapfv = ffi.Void Function(
  ffi.Uint32 map,
  ffi.Pointer<ffi.Float> values,
);

typedef _dart_glGetPixelMapfv = void Function(
  int map,
  ffi.Pointer<ffi.Float> values,
);

typedef _c_glGetPixelMapuiv = ffi.Void Function(
  ffi.Uint32 map,
  ffi.Pointer<ffi.Uint32> values,
);

typedef _dart_glGetPixelMapuiv = void Function(
  int map,
  ffi.Pointer<ffi.Uint32> values,
);

typedef _c_glGetPixelMapusv = ffi.Void Function(
  ffi.Uint32 map,
  ffi.Pointer<ffi.Uint16> values,
);

typedef _dart_glGetPixelMapusv = void Function(
  int map,
  ffi.Pointer<ffi.Uint16> values,
);

typedef _c_glBitmap = ffi.Void Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Float xorig,
  ffi.Float yorig,
  ffi.Float xmove,
  ffi.Float ymove,
  ffi.Pointer<ffi.Uint8> bitmap,
);

typedef _dart_glBitmap = void Function(
  int width,
  int height,
  double xorig,
  double yorig,
  double xmove,
  double ymove,
  ffi.Pointer<ffi.Uint8> bitmap,
);

typedef _c_glReadPixels = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _dart_glReadPixels = void Function(
  int x,
  int y,
  int width,
  int height,
  int format,
  int type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _c_glDrawPixels = ffi.Void Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _dart_glDrawPixels = void Function(
  int width,
  int height,
  int format,
  int type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _c_glCopyPixels = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Uint32 type,
);

typedef _dart_glCopyPixels = void Function(
  int x,
  int y,
  int width,
  int height,
  int type,
);

typedef _c_glStencilFunc = ffi.Void Function(
  ffi.Uint32 func,
  ffi.Int32 ref,
  ffi.Uint32 mask,
);

typedef _dart_glStencilFunc = void Function(
  int func,
  int ref,
  int mask,
);

typedef _c_glStencilMask = ffi.Void Function(
  ffi.Uint32 mask,
);

typedef _dart_glStencilMask = void Function(
  int mask,
);

typedef _c_glStencilOp = ffi.Void Function(
  ffi.Uint32 fail,
  ffi.Uint32 zfail,
  ffi.Uint32 zpass,
);

typedef _dart_glStencilOp = void Function(
  int fail,
  int zfail,
  int zpass,
);

typedef _c_glClearStencil = ffi.Void Function(
  ffi.Int32 s,
);

typedef _dart_glClearStencil = void Function(
  int s,
);

typedef _c_glTexGend = ffi.Void Function(
  ffi.Uint32 coord,
  ffi.Uint32 pname,
  ffi.Double param,
);

typedef _dart_glTexGend = void Function(
  int coord,
  int pname,
  double param,
);

typedef _c_glTexGenf = ffi.Void Function(
  ffi.Uint32 coord,
  ffi.Uint32 pname,
  ffi.Float param,
);

typedef _dart_glTexGenf = void Function(
  int coord,
  int pname,
  double param,
);

typedef _c_glTexGeni = ffi.Void Function(
  ffi.Uint32 coord,
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glTexGeni = void Function(
  int coord,
  int pname,
  int param,
);

typedef _c_glTexGendv = ffi.Void Function(
  ffi.Uint32 coord,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Double> params,
);

typedef _dart_glTexGendv = void Function(
  int coord,
  int pname,
  ffi.Pointer<ffi.Double> params,
);

typedef _c_glTexGenfv = ffi.Void Function(
  ffi.Uint32 coord,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glTexGenfv = void Function(
  int coord,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glTexGeniv = ffi.Void Function(
  ffi.Uint32 coord,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glTexGeniv = void Function(
  int coord,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetTexGendv = ffi.Void Function(
  ffi.Uint32 coord,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Double> params,
);

typedef _dart_glGetTexGendv = void Function(
  int coord,
  int pname,
  ffi.Pointer<ffi.Double> params,
);

typedef _c_glGetTexGenfv = ffi.Void Function(
  ffi.Uint32 coord,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glGetTexGenfv = void Function(
  int coord,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glGetTexGeniv = ffi.Void Function(
  ffi.Uint32 coord,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetTexGeniv = void Function(
  int coord,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glTexEnvf = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Float param,
);

typedef _dart_glTexEnvf = void Function(
  int target,
  int pname,
  double param,
);

typedef _c_glTexEnvi = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glTexEnvi = void Function(
  int target,
  int pname,
  int param,
);

typedef _c_glTexEnvfv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glTexEnvfv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glTexEnviv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glTexEnviv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetTexEnvfv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glGetTexEnvfv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glGetTexEnviv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetTexEnviv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glTexParameterf = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Float param,
);

typedef _dart_glTexParameterf = void Function(
  int target,
  int pname,
  double param,
);

typedef _c_glTexParameteri = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glTexParameteri = void Function(
  int target,
  int pname,
  int param,
);

typedef _c_glTexParameterfv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glTexParameterfv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glTexParameteriv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glTexParameteriv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetTexParameterfv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glGetTexParameterfv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glGetTexParameteriv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetTexParameteriv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetTexLevelParameterfv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glGetTexLevelParameterfv = void Function(
  int target,
  int level,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glGetTexLevelParameteriv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetTexLevelParameteriv = void Function(
  int target,
  int level,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glTexImage1D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Int32 internalFormat,
  ffi.Int32 width,
  ffi.Int32 border,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _dart_glTexImage1D = void Function(
  int target,
  int level,
  int internalFormat,
  int width,
  int border,
  int format,
  int type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _c_glTexImage2D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Int32 internalFormat,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 border,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _dart_glTexImage2D = void Function(
  int target,
  int level,
  int internalFormat,
  int width,
  int height,
  int border,
  int format,
  int type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _c_glGetTexImage = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _dart_glGetTexImage = void Function(
  int target,
  int level,
  int format,
  int type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _c_glGenTextures = ffi.Void Function(
  ffi.Int32 n,
  ffi.Pointer<ffi.Uint32> textures,
);

typedef _dart_glGenTextures = void Function(
  int n,
  ffi.Pointer<ffi.Uint32> textures,
);

typedef _c_glDeleteTextures = ffi.Void Function(
  ffi.Int32 n,
  ffi.Pointer<ffi.Uint32> textures,
);

typedef _dart_glDeleteTextures = void Function(
  int n,
  ffi.Pointer<ffi.Uint32> textures,
);

typedef _c_glBindTexture = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 texture,
);

typedef _dart_glBindTexture = void Function(
  int target,
  int texture,
);

typedef _c_glPrioritizeTextures = ffi.Void Function(
  ffi.Int32 n,
  ffi.Pointer<ffi.Uint32> textures,
  ffi.Pointer<ffi.Float> priorities,
);

typedef _dart_glPrioritizeTextures = void Function(
  int n,
  ffi.Pointer<ffi.Uint32> textures,
  ffi.Pointer<ffi.Float> priorities,
);

typedef _c_glAreTexturesResident = ffi.Uint8 Function(
  ffi.Int32 n,
  ffi.Pointer<ffi.Uint32> textures,
  ffi.Pointer<ffi.Uint8> residences,
);

typedef _dart_glAreTexturesResident = int Function(
  int n,
  ffi.Pointer<ffi.Uint32> textures,
  ffi.Pointer<ffi.Uint8> residences,
);

typedef _c_glIsTexture = ffi.Uint8 Function(
  ffi.Uint32 texture,
);

typedef _dart_glIsTexture = int Function(
  int texture,
);

typedef _c_glTexSubImage1D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Int32 xoffset,
  ffi.Int32 width,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _dart_glTexSubImage1D = void Function(
  int target,
  int level,
  int xoffset,
  int width,
  int format,
  int type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _c_glTexSubImage2D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Int32 xoffset,
  ffi.Int32 yoffset,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _dart_glTexSubImage2D = void Function(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int width,
  int height,
  int format,
  int type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _c_glCopyTexImage1D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Uint32 internalformat,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 width,
  ffi.Int32 border,
);

typedef _dart_glCopyTexImage1D = void Function(
  int target,
  int level,
  int internalformat,
  int x,
  int y,
  int width,
  int border,
);

typedef _c_glCopyTexImage2D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Uint32 internalformat,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 border,
);

typedef _dart_glCopyTexImage2D = void Function(
  int target,
  int level,
  int internalformat,
  int x,
  int y,
  int width,
  int height,
  int border,
);

typedef _c_glCopyTexSubImage1D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Int32 xoffset,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 width,
);

typedef _dart_glCopyTexSubImage1D = void Function(
  int target,
  int level,
  int xoffset,
  int x,
  int y,
  int width,
);

typedef _c_glCopyTexSubImage2D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Int32 xoffset,
  ffi.Int32 yoffset,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_glCopyTexSubImage2D = void Function(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int x,
  int y,
  int width,
  int height,
);

typedef _c_glMap1d = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Double u1,
  ffi.Double u2,
  ffi.Int32 stride,
  ffi.Int32 order,
  ffi.Pointer<ffi.Double> points,
);

typedef _dart_glMap1d = void Function(
  int target,
  double u1,
  double u2,
  int stride,
  int order,
  ffi.Pointer<ffi.Double> points,
);

typedef _c_glMap1f = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Float u1,
  ffi.Float u2,
  ffi.Int32 stride,
  ffi.Int32 order,
  ffi.Pointer<ffi.Float> points,
);

typedef _dart_glMap1f = void Function(
  int target,
  double u1,
  double u2,
  int stride,
  int order,
  ffi.Pointer<ffi.Float> points,
);

typedef _c_glMap2d = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Double u1,
  ffi.Double u2,
  ffi.Int32 ustride,
  ffi.Int32 uorder,
  ffi.Double v1,
  ffi.Double v2,
  ffi.Int32 vstride,
  ffi.Int32 vorder,
  ffi.Pointer<ffi.Double> points,
);

typedef _dart_glMap2d = void Function(
  int target,
  double u1,
  double u2,
  int ustride,
  int uorder,
  double v1,
  double v2,
  int vstride,
  int vorder,
  ffi.Pointer<ffi.Double> points,
);

typedef _c_glMap2f = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Float u1,
  ffi.Float u2,
  ffi.Int32 ustride,
  ffi.Int32 uorder,
  ffi.Float v1,
  ffi.Float v2,
  ffi.Int32 vstride,
  ffi.Int32 vorder,
  ffi.Pointer<ffi.Float> points,
);

typedef _dart_glMap2f = void Function(
  int target,
  double u1,
  double u2,
  int ustride,
  int uorder,
  double v1,
  double v2,
  int vstride,
  int vorder,
  ffi.Pointer<ffi.Float> points,
);

typedef _c_glGetMapdv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 query,
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glGetMapdv = void Function(
  int target,
  int query,
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glGetMapfv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 query,
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glGetMapfv = void Function(
  int target,
  int query,
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glGetMapiv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 query,
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glGetMapiv = void Function(
  int target,
  int query,
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glEvalCoord1d = ffi.Void Function(
  ffi.Double u,
);

typedef _dart_glEvalCoord1d = void Function(
  double u,
);

typedef _c_glEvalCoord1f = ffi.Void Function(
  ffi.Float u,
);

typedef _dart_glEvalCoord1f = void Function(
  double u,
);

typedef _c_glEvalCoord1dv = ffi.Void Function(
  ffi.Pointer<ffi.Double> u,
);

typedef _dart_glEvalCoord1dv = void Function(
  ffi.Pointer<ffi.Double> u,
);

typedef _c_glEvalCoord1fv = ffi.Void Function(
  ffi.Pointer<ffi.Float> u,
);

typedef _dart_glEvalCoord1fv = void Function(
  ffi.Pointer<ffi.Float> u,
);

typedef _c_glEvalCoord2d = ffi.Void Function(
  ffi.Double u,
  ffi.Double v,
);

typedef _dart_glEvalCoord2d = void Function(
  double u,
  double v,
);

typedef _c_glEvalCoord2f = ffi.Void Function(
  ffi.Float u,
  ffi.Float v,
);

typedef _dart_glEvalCoord2f = void Function(
  double u,
  double v,
);

typedef _c_glEvalCoord2dv = ffi.Void Function(
  ffi.Pointer<ffi.Double> u,
);

typedef _dart_glEvalCoord2dv = void Function(
  ffi.Pointer<ffi.Double> u,
);

typedef _c_glEvalCoord2fv = ffi.Void Function(
  ffi.Pointer<ffi.Float> u,
);

typedef _dart_glEvalCoord2fv = void Function(
  ffi.Pointer<ffi.Float> u,
);

typedef _c_glMapGrid1d = ffi.Void Function(
  ffi.Int32 un,
  ffi.Double u1,
  ffi.Double u2,
);

typedef _dart_glMapGrid1d = void Function(
  int un,
  double u1,
  double u2,
);

typedef _c_glMapGrid1f = ffi.Void Function(
  ffi.Int32 un,
  ffi.Float u1,
  ffi.Float u2,
);

typedef _dart_glMapGrid1f = void Function(
  int un,
  double u1,
  double u2,
);

typedef _c_glMapGrid2d = ffi.Void Function(
  ffi.Int32 un,
  ffi.Double u1,
  ffi.Double u2,
  ffi.Int32 vn,
  ffi.Double v1,
  ffi.Double v2,
);

typedef _dart_glMapGrid2d = void Function(
  int un,
  double u1,
  double u2,
  int vn,
  double v1,
  double v2,
);

typedef _c_glMapGrid2f = ffi.Void Function(
  ffi.Int32 un,
  ffi.Float u1,
  ffi.Float u2,
  ffi.Int32 vn,
  ffi.Float v1,
  ffi.Float v2,
);

typedef _dart_glMapGrid2f = void Function(
  int un,
  double u1,
  double u2,
  int vn,
  double v1,
  double v2,
);

typedef _c_glEvalPoint1 = ffi.Void Function(
  ffi.Int32 i,
);

typedef _dart_glEvalPoint1 = void Function(
  int i,
);

typedef _c_glEvalPoint2 = ffi.Void Function(
  ffi.Int32 i,
  ffi.Int32 j,
);

typedef _dart_glEvalPoint2 = void Function(
  int i,
  int j,
);

typedef _c_glEvalMesh1 = ffi.Void Function(
  ffi.Uint32 mode,
  ffi.Int32 i1,
  ffi.Int32 i2,
);

typedef _dart_glEvalMesh1 = void Function(
  int mode,
  int i1,
  int i2,
);

typedef _c_glEvalMesh2 = ffi.Void Function(
  ffi.Uint32 mode,
  ffi.Int32 i1,
  ffi.Int32 i2,
  ffi.Int32 j1,
  ffi.Int32 j2,
);

typedef _dart_glEvalMesh2 = void Function(
  int mode,
  int i1,
  int i2,
  int j1,
  int j2,
);

typedef _c_glFogf = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Float param,
);

typedef _dart_glFogf = void Function(
  int pname,
  double param,
);

typedef _c_glFogi = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glFogi = void Function(
  int pname,
  int param,
);

typedef _c_glFogfv = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glFogfv = void Function(
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glFogiv = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glFogiv = void Function(
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glFeedbackBuffer = ffi.Void Function(
  ffi.Int32 size,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Float> buffer,
);

typedef _dart_glFeedbackBuffer = void Function(
  int size,
  int type,
  ffi.Pointer<ffi.Float> buffer,
);

typedef _c_glPassThrough = ffi.Void Function(
  ffi.Float token,
);

typedef _dart_glPassThrough = void Function(
  double token,
);

typedef _c_glSelectBuffer = ffi.Void Function(
  ffi.Int32 size,
  ffi.Pointer<ffi.Uint32> buffer,
);

typedef _dart_glSelectBuffer = void Function(
  int size,
  ffi.Pointer<ffi.Uint32> buffer,
);

typedef _c_glInitNames = ffi.Void Function();

typedef _dart_glInitNames = void Function();

typedef _c_glLoadName = ffi.Void Function(
  ffi.Uint32 name,
);

typedef _dart_glLoadName = void Function(
  int name,
);

typedef _c_glPushName = ffi.Void Function(
  ffi.Uint32 name,
);

typedef _dart_glPushName = void Function(
  int name,
);

typedef _c_glPopName = ffi.Void Function();

typedef _dart_glPopName = void Function();

typedef _c_glDrawRangeElements = ffi.Void Function(
  ffi.Uint32 mode,
  ffi.Uint32 start,
  ffi.Uint32 end,
  ffi.Int32 count,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> indices,
);

typedef _dart_glDrawRangeElements = void Function(
  int mode,
  int start,
  int end,
  int count,
  int type,
  ffi.Pointer<ffi.Void> indices,
);

typedef _c_glTexImage3D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Int32 internalFormat,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 depth,
  ffi.Int32 border,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _dart_glTexImage3D = void Function(
  int target,
  int level,
  int internalFormat,
  int width,
  int height,
  int depth,
  int border,
  int format,
  int type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _c_glTexSubImage3D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Int32 xoffset,
  ffi.Int32 yoffset,
  ffi.Int32 zoffset,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 depth,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _dart_glTexSubImage3D = void Function(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int format,
  int type,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _c_glCopyTexSubImage3D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Int32 xoffset,
  ffi.Int32 yoffset,
  ffi.Int32 zoffset,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_glCopyTexSubImage3D = void Function(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int x,
  int y,
  int width,
  int height,
);

typedef _c_glColorTable = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 internalformat,
  ffi.Int32 width,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> table,
);

typedef _dart_glColorTable = void Function(
  int target,
  int internalformat,
  int width,
  int format,
  int type,
  ffi.Pointer<ffi.Void> table,
);

typedef _c_glColorSubTable = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 start,
  ffi.Int32 count,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_glColorSubTable = void Function(
  int target,
  int start,
  int count,
  int format,
  int type,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_glColorTableParameteriv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glColorTableParameteriv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glColorTableParameterfv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glColorTableParameterfv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glCopyColorSubTable = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 start,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 width,
);

typedef _dart_glCopyColorSubTable = void Function(
  int target,
  int start,
  int x,
  int y,
  int width,
);

typedef _c_glCopyColorTable = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 internalformat,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 width,
);

typedef _dart_glCopyColorTable = void Function(
  int target,
  int internalformat,
  int x,
  int y,
  int width,
);

typedef _c_glGetColorTable = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> table,
);

typedef _dart_glGetColorTable = void Function(
  int target,
  int format,
  int type,
  ffi.Pointer<ffi.Void> table,
);

typedef _c_glGetColorTableParameterfv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glGetColorTableParameterfv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glGetColorTableParameteriv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetColorTableParameteriv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glBlendEquation = ffi.Void Function(
  ffi.Uint32 mode,
);

typedef _dart_glBlendEquation = void Function(
  int mode,
);

typedef _c_glBlendColor = ffi.Void Function(
  ffi.Float red,
  ffi.Float green,
  ffi.Float blue,
  ffi.Float alpha,
);

typedef _dart_glBlendColor = void Function(
  double red,
  double green,
  double blue,
  double alpha,
);

typedef _c_glHistogram = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 width,
  ffi.Uint32 internalformat,
  ffi.Uint8 sink,
);

typedef _dart_glHistogram = void Function(
  int target,
  int width,
  int internalformat,
  int sink,
);

typedef _c_glResetHistogram = ffi.Void Function(
  ffi.Uint32 target,
);

typedef _dart_glResetHistogram = void Function(
  int target,
);

typedef _c_glGetHistogram = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint8 reset,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> values,
);

typedef _dart_glGetHistogram = void Function(
  int target,
  int reset,
  int format,
  int type,
  ffi.Pointer<ffi.Void> values,
);

typedef _c_glGetHistogramParameterfv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glGetHistogramParameterfv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glGetHistogramParameteriv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetHistogramParameteriv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glMinmax = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 internalformat,
  ffi.Uint8 sink,
);

typedef _dart_glMinmax = void Function(
  int target,
  int internalformat,
  int sink,
);

typedef _c_glResetMinmax = ffi.Void Function(
  ffi.Uint32 target,
);

typedef _dart_glResetMinmax = void Function(
  int target,
);

typedef _c_glGetMinmax = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint8 reset,
  ffi.Uint32 format,
  ffi.Uint32 types,
  ffi.Pointer<ffi.Void> values,
);

typedef _dart_glGetMinmax = void Function(
  int target,
  int reset,
  int format,
  int types,
  ffi.Pointer<ffi.Void> values,
);

typedef _c_glGetMinmaxParameterfv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glGetMinmaxParameterfv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glGetMinmaxParameteriv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetMinmaxParameteriv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glConvolutionFilter1D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 internalformat,
  ffi.Int32 width,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> image,
);

typedef _dart_glConvolutionFilter1D = void Function(
  int target,
  int internalformat,
  int width,
  int format,
  int type,
  ffi.Pointer<ffi.Void> image,
);

typedef _c_glConvolutionFilter2D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 internalformat,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> image,
);

typedef _dart_glConvolutionFilter2D = void Function(
  int target,
  int internalformat,
  int width,
  int height,
  int format,
  int type,
  ffi.Pointer<ffi.Void> image,
);

typedef _c_glConvolutionParameterf = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Float params,
);

typedef _dart_glConvolutionParameterf = void Function(
  int target,
  int pname,
  double params,
);

typedef _c_glConvolutionParameterfv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glConvolutionParameterfv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glConvolutionParameteri = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Int32 params,
);

typedef _dart_glConvolutionParameteri = void Function(
  int target,
  int pname,
  int params,
);

typedef _c_glConvolutionParameteriv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glConvolutionParameteriv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glCopyConvolutionFilter1D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 internalformat,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 width,
);

typedef _dart_glCopyConvolutionFilter1D = void Function(
  int target,
  int internalformat,
  int x,
  int y,
  int width,
);

typedef _c_glCopyConvolutionFilter2D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 internalformat,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_glCopyConvolutionFilter2D = void Function(
  int target,
  int internalformat,
  int x,
  int y,
  int width,
  int height,
);

typedef _c_glGetConvolutionFilter = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> image,
);

typedef _dart_glGetConvolutionFilter = void Function(
  int target,
  int format,
  int type,
  ffi.Pointer<ffi.Void> image,
);

typedef _c_glGetConvolutionParameterfv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glGetConvolutionParameterfv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glGetConvolutionParameteriv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetConvolutionParameteriv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glSeparableFilter2D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 internalformat,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> row,
  ffi.Pointer<ffi.Void> column,
);

typedef _dart_glSeparableFilter2D = void Function(
  int target,
  int internalformat,
  int width,
  int height,
  int format,
  int type,
  ffi.Pointer<ffi.Void> row,
  ffi.Pointer<ffi.Void> column,
);

typedef _c_glGetSeparableFilter = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 format,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Void> row,
  ffi.Pointer<ffi.Void> column,
  ffi.Pointer<ffi.Void> span,
);

typedef _dart_glGetSeparableFilter = void Function(
  int target,
  int format,
  int type,
  ffi.Pointer<ffi.Void> row,
  ffi.Pointer<ffi.Void> column,
  ffi.Pointer<ffi.Void> span,
);

typedef _c_glActiveTexture = ffi.Void Function(
  ffi.Uint32 texture,
);

typedef _dart_glActiveTexture = void Function(
  int texture,
);

typedef _c_glClientActiveTexture = ffi.Void Function(
  ffi.Uint32 texture,
);

typedef _dart_glClientActiveTexture = void Function(
  int texture,
);

typedef _c_glCompressedTexImage1D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Uint32 internalformat,
  ffi.Int32 width,
  ffi.Int32 border,
  ffi.Int32 imageSize,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_glCompressedTexImage1D = void Function(
  int target,
  int level,
  int internalformat,
  int width,
  int border,
  int imageSize,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_glCompressedTexImage2D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Uint32 internalformat,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 border,
  ffi.Int32 imageSize,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_glCompressedTexImage2D = void Function(
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int border,
  int imageSize,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_glCompressedTexImage3D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Uint32 internalformat,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 depth,
  ffi.Int32 border,
  ffi.Int32 imageSize,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_glCompressedTexImage3D = void Function(
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int depth,
  int border,
  int imageSize,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_glCompressedTexSubImage1D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Int32 xoffset,
  ffi.Int32 width,
  ffi.Uint32 format,
  ffi.Int32 imageSize,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_glCompressedTexSubImage1D = void Function(
  int target,
  int level,
  int xoffset,
  int width,
  int format,
  int imageSize,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_glCompressedTexSubImage2D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Int32 xoffset,
  ffi.Int32 yoffset,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Uint32 format,
  ffi.Int32 imageSize,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_glCompressedTexSubImage2D = void Function(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int width,
  int height,
  int format,
  int imageSize,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_glCompressedTexSubImage3D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 level,
  ffi.Int32 xoffset,
  ffi.Int32 yoffset,
  ffi.Int32 zoffset,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 depth,
  ffi.Uint32 format,
  ffi.Int32 imageSize,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_glCompressedTexSubImage3D = void Function(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int format,
  int imageSize,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_glGetCompressedTexImage = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 lod,
  ffi.Pointer<ffi.Void> img,
);

typedef _dart_glGetCompressedTexImage = void Function(
  int target,
  int lod,
  ffi.Pointer<ffi.Void> img,
);

typedef _c_glMultiTexCoord1d = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Double s,
);

typedef _dart_glMultiTexCoord1d = void Function(
  int target,
  double s,
);

typedef _c_glMultiTexCoord1dv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glMultiTexCoord1dv = void Function(
  int target,
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glMultiTexCoord1f = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Float s,
);

typedef _dart_glMultiTexCoord1f = void Function(
  int target,
  double s,
);

typedef _c_glMultiTexCoord1fv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glMultiTexCoord1fv = void Function(
  int target,
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glMultiTexCoord1i = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 s,
);

typedef _dart_glMultiTexCoord1i = void Function(
  int target,
  int s,
);

typedef _c_glMultiTexCoord1iv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glMultiTexCoord1iv = void Function(
  int target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glMultiTexCoord1s = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int16 s,
);

typedef _dart_glMultiTexCoord1s = void Function(
  int target,
  int s,
);

typedef _c_glMultiTexCoord1sv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glMultiTexCoord1sv = void Function(
  int target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glMultiTexCoord2d = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Double s,
  ffi.Double t,
);

typedef _dart_glMultiTexCoord2d = void Function(
  int target,
  double s,
  double t,
);

typedef _c_glMultiTexCoord2dv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glMultiTexCoord2dv = void Function(
  int target,
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glMultiTexCoord2f = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Float s,
  ffi.Float t,
);

typedef _dart_glMultiTexCoord2f = void Function(
  int target,
  double s,
  double t,
);

typedef _c_glMultiTexCoord2fv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glMultiTexCoord2fv = void Function(
  int target,
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glMultiTexCoord2i = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 s,
  ffi.Int32 t,
);

typedef _dart_glMultiTexCoord2i = void Function(
  int target,
  int s,
  int t,
);

typedef _c_glMultiTexCoord2iv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glMultiTexCoord2iv = void Function(
  int target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glMultiTexCoord2s = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int16 s,
  ffi.Int16 t,
);

typedef _dart_glMultiTexCoord2s = void Function(
  int target,
  int s,
  int t,
);

typedef _c_glMultiTexCoord2sv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glMultiTexCoord2sv = void Function(
  int target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glMultiTexCoord3d = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Double s,
  ffi.Double t,
  ffi.Double r,
);

typedef _dart_glMultiTexCoord3d = void Function(
  int target,
  double s,
  double t,
  double r,
);

typedef _c_glMultiTexCoord3dv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glMultiTexCoord3dv = void Function(
  int target,
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glMultiTexCoord3f = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Float s,
  ffi.Float t,
  ffi.Float r,
);

typedef _dart_glMultiTexCoord3f = void Function(
  int target,
  double s,
  double t,
  double r,
);

typedef _c_glMultiTexCoord3fv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glMultiTexCoord3fv = void Function(
  int target,
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glMultiTexCoord3i = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 s,
  ffi.Int32 t,
  ffi.Int32 r,
);

typedef _dart_glMultiTexCoord3i = void Function(
  int target,
  int s,
  int t,
  int r,
);

typedef _c_glMultiTexCoord3iv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glMultiTexCoord3iv = void Function(
  int target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glMultiTexCoord3s = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int16 s,
  ffi.Int16 t,
  ffi.Int16 r,
);

typedef _dart_glMultiTexCoord3s = void Function(
  int target,
  int s,
  int t,
  int r,
);

typedef _c_glMultiTexCoord3sv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glMultiTexCoord3sv = void Function(
  int target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glMultiTexCoord4d = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Double s,
  ffi.Double t,
  ffi.Double r,
  ffi.Double q,
);

typedef _dart_glMultiTexCoord4d = void Function(
  int target,
  double s,
  double t,
  double r,
  double q,
);

typedef _c_glMultiTexCoord4dv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glMultiTexCoord4dv = void Function(
  int target,
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glMultiTexCoord4f = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Float s,
  ffi.Float t,
  ffi.Float r,
  ffi.Float q,
);

typedef _dart_glMultiTexCoord4f = void Function(
  int target,
  double s,
  double t,
  double r,
  double q,
);

typedef _c_glMultiTexCoord4fv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glMultiTexCoord4fv = void Function(
  int target,
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glMultiTexCoord4i = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 s,
  ffi.Int32 t,
  ffi.Int32 r,
  ffi.Int32 q,
);

typedef _dart_glMultiTexCoord4i = void Function(
  int target,
  int s,
  int t,
  int r,
  int q,
);

typedef _c_glMultiTexCoord4iv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glMultiTexCoord4iv = void Function(
  int target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glMultiTexCoord4s = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int16 s,
  ffi.Int16 t,
  ffi.Int16 r,
  ffi.Int16 q,
);

typedef _dart_glMultiTexCoord4s = void Function(
  int target,
  int s,
  int t,
  int r,
  int q,
);

typedef _c_glMultiTexCoord4sv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glMultiTexCoord4sv = void Function(
  int target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glLoadTransposeMatrixd = ffi.Void Function(
  ffi.Pointer<ffi.Double> m,
);

typedef _dart_glLoadTransposeMatrixd = void Function(
  ffi.Pointer<ffi.Double> m,
);

typedef _c_glLoadTransposeMatrixf = ffi.Void Function(
  ffi.Pointer<ffi.Float> m,
);

typedef _dart_glLoadTransposeMatrixf = void Function(
  ffi.Pointer<ffi.Float> m,
);

typedef _c_glMultTransposeMatrixd = ffi.Void Function(
  ffi.Pointer<ffi.Double> m,
);

typedef _dart_glMultTransposeMatrixd = void Function(
  ffi.Pointer<ffi.Double> m,
);

typedef _c_glMultTransposeMatrixf = ffi.Void Function(
  ffi.Pointer<ffi.Float> m,
);

typedef _dart_glMultTransposeMatrixf = void Function(
  ffi.Pointer<ffi.Float> m,
);

typedef _c_glSampleCoverage = ffi.Void Function(
  ffi.Float value,
  ffi.Uint8 invert,
);

typedef _dart_glSampleCoverage = void Function(
  double value,
  int invert,
);

typedef _c_glActiveTextureARB = ffi.Void Function(
  ffi.Uint32 texture,
);

typedef _dart_glActiveTextureARB = void Function(
  int texture,
);

typedef _c_glClientActiveTextureARB = ffi.Void Function(
  ffi.Uint32 texture,
);

typedef _dart_glClientActiveTextureARB = void Function(
  int texture,
);

typedef _c_glMultiTexCoord1dARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Double s,
);

typedef _dart_glMultiTexCoord1dARB = void Function(
  int target,
  double s,
);

typedef _c_glMultiTexCoord1dvARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glMultiTexCoord1dvARB = void Function(
  int target,
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glMultiTexCoord1fARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Float s,
);

typedef _dart_glMultiTexCoord1fARB = void Function(
  int target,
  double s,
);

typedef _c_glMultiTexCoord1fvARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glMultiTexCoord1fvARB = void Function(
  int target,
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glMultiTexCoord1iARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 s,
);

typedef _dart_glMultiTexCoord1iARB = void Function(
  int target,
  int s,
);

typedef _c_glMultiTexCoord1ivARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glMultiTexCoord1ivARB = void Function(
  int target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glMultiTexCoord1sARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int16 s,
);

typedef _dart_glMultiTexCoord1sARB = void Function(
  int target,
  int s,
);

typedef _c_glMultiTexCoord1svARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glMultiTexCoord1svARB = void Function(
  int target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glMultiTexCoord2dARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Double s,
  ffi.Double t,
);

typedef _dart_glMultiTexCoord2dARB = void Function(
  int target,
  double s,
  double t,
);

typedef _c_glMultiTexCoord2dvARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glMultiTexCoord2dvARB = void Function(
  int target,
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glMultiTexCoord2fARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Float s,
  ffi.Float t,
);

typedef _dart_glMultiTexCoord2fARB = void Function(
  int target,
  double s,
  double t,
);

typedef _c_glMultiTexCoord2fvARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glMultiTexCoord2fvARB = void Function(
  int target,
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glMultiTexCoord2iARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 s,
  ffi.Int32 t,
);

typedef _dart_glMultiTexCoord2iARB = void Function(
  int target,
  int s,
  int t,
);

typedef _c_glMultiTexCoord2ivARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glMultiTexCoord2ivARB = void Function(
  int target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glMultiTexCoord2sARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int16 s,
  ffi.Int16 t,
);

typedef _dart_glMultiTexCoord2sARB = void Function(
  int target,
  int s,
  int t,
);

typedef _c_glMultiTexCoord2svARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glMultiTexCoord2svARB = void Function(
  int target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glMultiTexCoord3dARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Double s,
  ffi.Double t,
  ffi.Double r,
);

typedef _dart_glMultiTexCoord3dARB = void Function(
  int target,
  double s,
  double t,
  double r,
);

typedef _c_glMultiTexCoord3dvARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glMultiTexCoord3dvARB = void Function(
  int target,
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glMultiTexCoord3fARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Float s,
  ffi.Float t,
  ffi.Float r,
);

typedef _dart_glMultiTexCoord3fARB = void Function(
  int target,
  double s,
  double t,
  double r,
);

typedef _c_glMultiTexCoord3fvARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glMultiTexCoord3fvARB = void Function(
  int target,
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glMultiTexCoord3iARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 s,
  ffi.Int32 t,
  ffi.Int32 r,
);

typedef _dart_glMultiTexCoord3iARB = void Function(
  int target,
  int s,
  int t,
  int r,
);

typedef _c_glMultiTexCoord3ivARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glMultiTexCoord3ivARB = void Function(
  int target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glMultiTexCoord3sARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int16 s,
  ffi.Int16 t,
  ffi.Int16 r,
);

typedef _dart_glMultiTexCoord3sARB = void Function(
  int target,
  int s,
  int t,
  int r,
);

typedef _c_glMultiTexCoord3svARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glMultiTexCoord3svARB = void Function(
  int target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glMultiTexCoord4dARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Double s,
  ffi.Double t,
  ffi.Double r,
  ffi.Double q,
);

typedef _dart_glMultiTexCoord4dARB = void Function(
  int target,
  double s,
  double t,
  double r,
  double q,
);

typedef _c_glMultiTexCoord4dvARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Double> v,
);

typedef _dart_glMultiTexCoord4dvARB = void Function(
  int target,
  ffi.Pointer<ffi.Double> v,
);

typedef _c_glMultiTexCoord4fARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Float s,
  ffi.Float t,
  ffi.Float r,
  ffi.Float q,
);

typedef _dart_glMultiTexCoord4fARB = void Function(
  int target,
  double s,
  double t,
  double r,
  double q,
);

typedef _c_glMultiTexCoord4fvARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glMultiTexCoord4fvARB = void Function(
  int target,
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glMultiTexCoord4iARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int32 s,
  ffi.Int32 t,
  ffi.Int32 r,
  ffi.Int32 q,
);

typedef _dart_glMultiTexCoord4iARB = void Function(
  int target,
  int s,
  int t,
  int r,
  int q,
);

typedef _c_glMultiTexCoord4ivARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _dart_glMultiTexCoord4ivARB = void Function(
  int target,
  ffi.Pointer<ffi.Int32> v,
);

typedef _c_glMultiTexCoord4sARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int16 s,
  ffi.Int16 t,
  ffi.Int16 r,
  ffi.Int16 q,
);

typedef _dart_glMultiTexCoord4sARB = void Function(
  int target,
  int s,
  int t,
  int r,
  int q,
);

typedef _c_glMultiTexCoord4svARB = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _dart_glMultiTexCoord4svARB = void Function(
  int target,
  ffi.Pointer<ffi.Int16> v,
);

typedef _c_glBlendEquationSeparateATI = ffi.Void Function(
  ffi.Uint32 modeRGB,
  ffi.Uint32 modeA,
);

typedef _dart_glBlendEquationSeparateATI = void Function(
  int modeRGB,
  int modeA,
);

typedef _c_glClearDepthf = ffi.Void Function(
  ffi.Float d,
);

typedef _dart_glClearDepthf = void Function(
  double d,
);

typedef _c_glClipPlanef = ffi.Void Function(
  ffi.Uint32 p,
  ffi.Pointer<ffi.Float> eqn,
);

typedef _dart_glClipPlanef = void Function(
  int p,
  ffi.Pointer<ffi.Float> eqn,
);

typedef _c_glDepthRangef = ffi.Void Function(
  ffi.Float n,
  ffi.Float f,
);

typedef _dart_glDepthRangef = void Function(
  double n,
  double f,
);

typedef _c_glFrustumf = ffi.Void Function(
  ffi.Float l,
  ffi.Float r,
  ffi.Float b,
  ffi.Float t,
  ffi.Float n,
  ffi.Float f,
);

typedef _dart_glFrustumf = void Function(
  double l,
  double r,
  double b,
  double t,
  double n,
  double f,
);

typedef _c_glGetClipPlanef = ffi.Void Function(
  ffi.Uint32 plane,
  ffi.Pointer<ffi.Float> equation,
);

typedef _dart_glGetClipPlanef = void Function(
  int plane,
  ffi.Pointer<ffi.Float> equation,
);

typedef _c_glOrthof = ffi.Void Function(
  ffi.Float l,
  ffi.Float r,
  ffi.Float b,
  ffi.Float t,
  ffi.Float n,
  ffi.Float f,
);

typedef _dart_glOrthof = void Function(
  double l,
  double r,
  double b,
  double t,
  double n,
  double f,
);

typedef _c_glPointParameterf = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Float param,
);

typedef _dart_glPointParameterf = void Function(
  int pname,
  double param,
);

typedef _c_glPointParameterfv = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glPointParameterfv = void Function(
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glAlphaFuncx = ffi.Void Function(
  ffi.Uint32 func,
  ffi.Int32 ref,
);

typedef _dart_glAlphaFuncx = void Function(
  int func,
  int ref,
);

typedef _c_glBindBuffer = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 buffer,
);

typedef _dart_glBindBuffer = void Function(
  int target,
  int buffer,
);

typedef _c_glBufferData = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int64 size,
  ffi.Pointer<ffi.Void> data,
  ffi.Uint32 usage,
);

typedef _dart_glBufferData = void Function(
  int target,
  int size,
  ffi.Pointer<ffi.Void> data,
  int usage,
);

typedef _c_glBufferSubData = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Int64 offset,
  ffi.Int64 size,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_glBufferSubData = void Function(
  int target,
  int offset,
  int size,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_glClearColorx = ffi.Void Function(
  ffi.Int32 red,
  ffi.Int32 green,
  ffi.Int32 blue,
  ffi.Int32 alpha,
);

typedef _dart_glClearColorx = void Function(
  int red,
  int green,
  int blue,
  int alpha,
);

typedef _c_glClearDepthx = ffi.Void Function(
  ffi.Int32 depth,
);

typedef _dart_glClearDepthx = void Function(
  int depth,
);

typedef _c_glClipPlanex = ffi.Void Function(
  ffi.Uint32 plane,
  ffi.Pointer<ffi.Int32> equation,
);

typedef _dart_glClipPlanex = void Function(
  int plane,
  ffi.Pointer<ffi.Int32> equation,
);

typedef _c_glColor4x = ffi.Void Function(
  ffi.Int32 red,
  ffi.Int32 green,
  ffi.Int32 blue,
  ffi.Int32 alpha,
);

typedef _dart_glColor4x = void Function(
  int red,
  int green,
  int blue,
  int alpha,
);

typedef _c_glDeleteBuffers = ffi.Void Function(
  ffi.Int32 n,
  ffi.Pointer<ffi.Uint32> buffers,
);

typedef _dart_glDeleteBuffers = void Function(
  int n,
  ffi.Pointer<ffi.Uint32> buffers,
);

typedef _c_glDepthRangex = ffi.Void Function(
  ffi.Int32 n,
  ffi.Int32 f,
);

typedef _dart_glDepthRangex = void Function(
  int n,
  int f,
);

typedef _c_glFogx = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glFogx = void Function(
  int pname,
  int param,
);

typedef _c_glFogxv = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> param,
);

typedef _dart_glFogxv = void Function(
  int pname,
  ffi.Pointer<ffi.Int32> param,
);

typedef _c_glFrustumx = ffi.Void Function(
  ffi.Int32 l,
  ffi.Int32 r,
  ffi.Int32 b,
  ffi.Int32 t,
  ffi.Int32 n,
  ffi.Int32 f,
);

typedef _dart_glFrustumx = void Function(
  int l,
  int r,
  int b,
  int t,
  int n,
  int f,
);

typedef _c_glGetBufferParameteriv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetBufferParameteriv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetClipPlanex = ffi.Void Function(
  ffi.Uint32 plane,
  ffi.Pointer<ffi.Int32> equation,
);

typedef _dart_glGetClipPlanex = void Function(
  int plane,
  ffi.Pointer<ffi.Int32> equation,
);

typedef _c_glGenBuffers = ffi.Void Function(
  ffi.Int32 n,
  ffi.Pointer<ffi.Uint32> buffers,
);

typedef _dart_glGenBuffers = void Function(
  int n,
  ffi.Pointer<ffi.Uint32> buffers,
);

typedef _c_glGetFixedv = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetFixedv = void Function(
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetLightxv = ffi.Void Function(
  ffi.Uint32 light,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetLightxv = void Function(
  int light,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetMaterialxv = ffi.Void Function(
  ffi.Uint32 face,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetMaterialxv = void Function(
  int face,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetTexEnvxv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetTexEnvxv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetTexParameterxv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetTexParameterxv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glIsBuffer = ffi.Uint8 Function(
  ffi.Uint32 buffer,
);

typedef _dart_glIsBuffer = int Function(
  int buffer,
);

typedef _c_glLightModelx = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glLightModelx = void Function(
  int pname,
  int param,
);

typedef _c_glLightModelxv = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> param,
);

typedef _dart_glLightModelxv = void Function(
  int pname,
  ffi.Pointer<ffi.Int32> param,
);

typedef _c_glLightx = ffi.Void Function(
  ffi.Uint32 light,
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glLightx = void Function(
  int light,
  int pname,
  int param,
);

typedef _c_glLightxv = ffi.Void Function(
  ffi.Uint32 light,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glLightxv = void Function(
  int light,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glLineWidthx = ffi.Void Function(
  ffi.Int32 width,
);

typedef _dart_glLineWidthx = void Function(
  int width,
);

typedef _c_glLoadMatrixx = ffi.Void Function(
  ffi.Pointer<ffi.Int32> m,
);

typedef _dart_glLoadMatrixx = void Function(
  ffi.Pointer<ffi.Int32> m,
);

typedef _c_glMaterialx = ffi.Void Function(
  ffi.Uint32 face,
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glMaterialx = void Function(
  int face,
  int pname,
  int param,
);

typedef _c_glMaterialxv = ffi.Void Function(
  ffi.Uint32 face,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> param,
);

typedef _dart_glMaterialxv = void Function(
  int face,
  int pname,
  ffi.Pointer<ffi.Int32> param,
);

typedef _c_glMultMatrixx = ffi.Void Function(
  ffi.Pointer<ffi.Int32> m,
);

typedef _dart_glMultMatrixx = void Function(
  ffi.Pointer<ffi.Int32> m,
);

typedef _c_glMultiTexCoord4x = ffi.Void Function(
  ffi.Uint32 texture,
  ffi.Int32 s,
  ffi.Int32 t,
  ffi.Int32 r,
  ffi.Int32 q,
);

typedef _dart_glMultiTexCoord4x = void Function(
  int texture,
  int s,
  int t,
  int r,
  int q,
);

typedef _c_glNormal3x = ffi.Void Function(
  ffi.Int32 nx,
  ffi.Int32 ny,
  ffi.Int32 nz,
);

typedef _dart_glNormal3x = void Function(
  int nx,
  int ny,
  int nz,
);

typedef _c_glOrthox = ffi.Void Function(
  ffi.Int32 l,
  ffi.Int32 r,
  ffi.Int32 b,
  ffi.Int32 t,
  ffi.Int32 n,
  ffi.Int32 f,
);

typedef _dart_glOrthox = void Function(
  int l,
  int r,
  int b,
  int t,
  int n,
  int f,
);

typedef _c_glPointParameterx = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glPointParameterx = void Function(
  int pname,
  int param,
);

typedef _c_glPointParameterxv = ffi.Void Function(
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glPointParameterxv = void Function(
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glPointSizex = ffi.Void Function(
  ffi.Int32 size,
);

typedef _dart_glPointSizex = void Function(
  int size,
);

typedef _c_glPolygonOffsetx = ffi.Void Function(
  ffi.Int32 factor,
  ffi.Int32 units,
);

typedef _dart_glPolygonOffsetx = void Function(
  int factor,
  int units,
);

typedef _c_glRotatex = ffi.Void Function(
  ffi.Int32 angle,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 z,
);

typedef _dart_glRotatex = void Function(
  int angle,
  int x,
  int y,
  int z,
);

typedef _c_glSampleCoveragex = ffi.Void Function(
  ffi.Int32 value,
  ffi.Uint8 invert,
);

typedef _dart_glSampleCoveragex = void Function(
  int value,
  int invert,
);

typedef _c_glScalex = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 z,
);

typedef _dart_glScalex = void Function(
  int x,
  int y,
  int z,
);

typedef _c_glTexEnvx = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glTexEnvx = void Function(
  int target,
  int pname,
  int param,
);

typedef _c_glTexEnvxv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glTexEnvxv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glTexParameterx = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Int32 param,
);

typedef _dart_glTexParameterx = void Function(
  int target,
  int pname,
  int param,
);

typedef _c_glTexParameterxv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glTexParameterxv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glTranslatex = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 z,
);

typedef _dart_glTranslatex = void Function(
  int x,
  int y,
  int z,
);

typedef _c_glPointSizePointerOES = ffi.Void Function(
  ffi.Uint32 type,
  ffi.Int32 stride,
  ffi.Pointer<ffi.Void> pointer,
);

typedef _dart_glPointSizePointerOES = void Function(
  int type,
  int stride,
  ffi.Pointer<ffi.Void> pointer,
);

typedef _c_SDLTest_TrackAllocations = ffi.Int32 Function();

typedef _dart_SDLTest_TrackAllocations = int Function();

typedef _c_SDLTest_LogAllocations = ffi.Void Function();

typedef _dart_SDLTest_LogAllocations = void Function();

typedef _c_SDL_MostSignificantBitIndex32 = ffi.Int32 Function(
  ffi.Uint32 x,
);

typedef _dart_SDL_MostSignificantBitIndex32 = int Function(
  int x,
);

typedef _c_SDL_HasExactlyOneBitSet32 = ffi.Int32 Function(
  ffi.Uint32 x,
);

typedef _dart_SDL_HasExactlyOneBitSet32 = int Function(
  int x,
);

typedef _c_SDLTest_ResetAssertSummary = ffi.Void Function();

typedef _dart_SDLTest_ResetAssertSummary = void Function();

typedef _c_SDLTest_LogAssertSummary = ffi.Void Function();

typedef _dart_SDLTest_LogAssertSummary = void Function();

typedef _c_SDLTest_AssertSummaryToTestResult = ffi.Int32 Function();

typedef _dart_SDLTest_AssertSummaryToTestResult = int Function();

typedef _c_SDL_Vulkan_LoadLibrary = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_SDL_Vulkan_LoadLibrary = int Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_SDL_Vulkan_GetVkGetInstanceProcAddr = ffi.Pointer<ffi.Void>
    Function();

typedef _dart_SDL_Vulkan_GetVkGetInstanceProcAddr = ffi.Pointer<ffi.Void>
    Function();

typedef _c_SDL_Vulkan_UnloadLibrary = ffi.Void Function();

typedef _dart_SDL_Vulkan_UnloadLibrary = void Function();

typedef _c_SDL_Vulkan_GetInstanceExtensions = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Uint32> pCount,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pNames,
);

typedef _dart_SDL_Vulkan_GetInstanceExtensions = int Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Uint32> pCount,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pNames,
);

typedef _c_SDL_Vulkan_CreateSurface = ffi.Int32 Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<VkInstance_T> instance,
  ffi.Pointer<ffi.Pointer<VkSurfaceKHR_T>> surface,
);

typedef _dart_SDL_Vulkan_CreateSurface = int Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<VkInstance_T> instance,
  ffi.Pointer<ffi.Pointer<VkSurfaceKHR_T>> surface,
);

typedef _c_SDL_Vulkan_GetDrawableSize = ffi.Void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _dart_SDL_Vulkan_GetDrawableSize = void Function(
  ffi.Pointer<SDL_Window> window,
  ffi.Pointer<ffi.Int32> w,
  ffi.Pointer<ffi.Int32> h,
);

typedef _c_XAllocClassHint = ffi.Pointer<XClassHint> Function();

typedef _dart_XAllocClassHint = ffi.Pointer<XClassHint> Function();

typedef _c_XAllocIconSize = ffi.Pointer<XIconSize> Function();

typedef _dart_XAllocIconSize = ffi.Pointer<XIconSize> Function();

typedef _c_XAllocSizeHints = ffi.Pointer<XSizeHints> Function();

typedef _dart_XAllocSizeHints = ffi.Pointer<XSizeHints> Function();

typedef _c_XAllocStandardColormap = ffi.Pointer<XStandardColormap> Function();

typedef _dart_XAllocStandardColormap = ffi.Pointer<XStandardColormap>
    Function();

typedef _c_XAllocWMHints = ffi.Pointer<XWMHints> Function();

typedef _dart_XAllocWMHints = ffi.Pointer<XWMHints> Function();

typedef _c_XClipBox = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<XRectangle> arg1,
);

typedef _dart_XClipBox = int Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<XRectangle> arg1,
);

typedef _c_XCreateRegion = ffi.Pointer<_XRegion> Function();

typedef _dart_XCreateRegion = ffi.Pointer<_XRegion> Function();

typedef _c_XDefaultString = ffi.Pointer<ffi.Int8> Function();

typedef _dart_XDefaultString = ffi.Pointer<ffi.Int8> Function();

typedef _c_XDeleteContext = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XDeleteContext = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XDestroyRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
);

typedef _dart_XDestroyRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
);

typedef _c_XEmptyRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
);

typedef _dart_XEmptyRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
);

typedef _c_XEqualRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
);

typedef _dart_XEqualRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
);

typedef _c_XFindContext = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
);

typedef _dart_XFindContext = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
);

typedef _c_XGetClassHint = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XClassHint> arg2,
);

typedef _dart_XGetClassHint = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XClassHint> arg2,
);

typedef _c_XGetIconSizes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<XIconSize>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XGetIconSizes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<XIconSize>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XGetNormalHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _dart_XGetNormalHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _c_XGetRGBColormaps = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<XStandardColormap>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Uint64 arg4,
);

typedef _dart_XGetRGBColormaps = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<XStandardColormap>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  int arg4,
);

typedef _c_XGetSizeHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XGetSizeHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
  int arg3,
);

typedef _c_XGetStandardColormap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XStandardColormap> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XGetStandardColormap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XStandardColormap> arg2,
  int arg3,
);

typedef _c_XGetTextProperty = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XGetTextProperty = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
  int arg3,
);

typedef _c_XGetVisualInfo = ffi.Pointer<XVisualInfo> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int64 arg1,
  ffi.Pointer<XVisualInfo> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XGetVisualInfo = ffi.Pointer<XVisualInfo> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XVisualInfo> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XGetWMClientMachine = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _dart_XGetWMClientMachine = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _c_XGetWMHints = ffi.Pointer<XWMHints> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XGetWMHints = ffi.Pointer<XWMHints> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XGetWMIconName = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _dart_XGetWMIconName = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _c_XGetWMName = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _dart_XGetWMName = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _c_XGetWMNormalHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
  ffi.Pointer<ffi.Int64> arg3,
);

typedef _dart_XGetWMNormalHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
  ffi.Pointer<ffi.Int64> arg3,
);

typedef _c_XGetWMSizeHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
  ffi.Pointer<ffi.Int64> arg3,
  ffi.Uint64 arg4,
);

typedef _dart_XGetWMSizeHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
  ffi.Pointer<ffi.Int64> arg3,
  int arg4,
);

typedef _c_XGetZoomHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _dart_XGetZoomHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _c_XIntersectRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _dart_XIntersectRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _c_XConvertCase = ffi.Void Function(
  ffi.Uint64 arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _dart_XConvertCase = void Function(
  int arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _c_XLookupString = ffi.Int32 Function(
  ffi.Pointer<XKeyEvent> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Pointer<XComposeStatus> arg4,
);

typedef _dart_XLookupString = int Function(
  ffi.Pointer<XKeyEvent> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Pointer<XComposeStatus> arg4,
);

typedef _c_XMatchVisualInfo = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Pointer<XVisualInfo> arg4,
);

typedef _dart_XMatchVisualInfo = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<XVisualInfo> arg4,
);

typedef _c_XOffsetRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XOffsetRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  int arg1,
  int arg2,
);

typedef _c_XPointInRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XPointInRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  int arg1,
  int arg2,
);

typedef _c_XPolygonRegion = ffi.Pointer<_XRegion> Function(
  ffi.Pointer<XPoint> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XPolygonRegion = ffi.Pointer<_XRegion> Function(
  ffi.Pointer<XPoint> arg0,
  int arg1,
  int arg2,
);

typedef _c_XRectInRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_XRectInRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XSaveContext = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart_XSaveContext = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_XSetClassHint = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XClassHint> arg2,
);

typedef _dart_XSetClassHint = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XClassHint> arg2,
);

typedef _c_XSetIconSizes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XIconSize> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XSetIconSizes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XIconSize> arg2,
  int arg3,
);

typedef _c_XSetNormalHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _dart_XSetNormalHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _c_XSetRGBColormaps = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XStandardColormap> arg2,
  ffi.Int32 arg3,
  ffi.Uint64 arg4,
);

typedef _dart_XSetRGBColormaps = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XStandardColormap> arg2,
  int arg3,
  int arg4,
);

typedef _c_XSetSizeHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XSetSizeHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
  int arg3,
);

typedef _c_XSetStandardProperties = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Uint64 arg4,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg5,
  ffi.Int32 arg6,
  ffi.Pointer<XSizeHints> arg7,
);

typedef _dart_XSetStandardProperties = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg5,
  int arg6,
  ffi.Pointer<XSizeHints> arg7,
);

typedef _c_XSetTextProperty = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XSetTextProperty = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
  int arg3,
);

typedef _c_XSetWMClientMachine = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _dart_XSetWMClientMachine = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _c_XSetWMHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XWMHints> arg2,
);

typedef _dart_XSetWMHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XWMHints> arg2,
);

typedef _c_XSetWMIconName = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _dart_XSetWMIconName = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _c_XSetWMName = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _dart_XSetWMName = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _c_XSetWMNormalHints = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _dart_XSetWMNormalHints = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _c_XSetWMProperties = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
  ffi.Pointer<XTextProperty> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
  ffi.Int32 arg5,
  ffi.Pointer<XSizeHints> arg6,
  ffi.Pointer<XWMHints> arg7,
  ffi.Pointer<XClassHint> arg8,
);

typedef _dart_XSetWMProperties = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
  ffi.Pointer<XTextProperty> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
  int arg5,
  ffi.Pointer<XSizeHints> arg6,
  ffi.Pointer<XWMHints> arg7,
  ffi.Pointer<XClassHint> arg8,
);

typedef _c_XmbSetWMProperties = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
  ffi.Int32 arg5,
  ffi.Pointer<XSizeHints> arg6,
  ffi.Pointer<XWMHints> arg7,
  ffi.Pointer<XClassHint> arg8,
);

typedef _dart_XmbSetWMProperties = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
  int arg5,
  ffi.Pointer<XSizeHints> arg6,
  ffi.Pointer<XWMHints> arg7,
  ffi.Pointer<XClassHint> arg8,
);

typedef _c_Xutf8SetWMProperties = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
  ffi.Int32 arg5,
  ffi.Pointer<XSizeHints> arg6,
  ffi.Pointer<XWMHints> arg7,
  ffi.Pointer<XClassHint> arg8,
);

typedef _dart_Xutf8SetWMProperties = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
  int arg5,
  ffi.Pointer<XSizeHints> arg6,
  ffi.Pointer<XWMHints> arg7,
  ffi.Pointer<XClassHint> arg8,
);

typedef _c_XSetWMSizeHints = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XSetWMSizeHints = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
  int arg3,
);

typedef _c_XSetRegion = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _dart_XSetRegion = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _c_XSetStandardColormap = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XStandardColormap> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XSetStandardColormap = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XStandardColormap> arg2,
  int arg3,
);

typedef _c_XSetZoomHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _dart_XSetZoomHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _c_XShrinkRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XShrinkRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  int arg1,
  int arg2,
);

typedef _c_XStringListToTextProperty = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _dart_XStringListToTextProperty = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _c_XSubtractRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _dart_XSubtractRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _c_XmbTextListToTextProperty = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> list,
  ffi.Int32 count,
  ffi.Int32 style,
  ffi.Pointer<XTextProperty> text_prop_return,
);

typedef _dart_XmbTextListToTextProperty = int Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> list,
  int count,
  int style,
  ffi.Pointer<XTextProperty> text_prop_return,
);

typedef _c_XwcTextListToTextProperty = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> list,
  ffi.Int32 count,
  ffi.Int32 style,
  ffi.Pointer<XTextProperty> text_prop_return,
);

typedef _dart_XwcTextListToTextProperty = int Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> list,
  int count,
  int style,
  ffi.Pointer<XTextProperty> text_prop_return,
);

typedef _c_Xutf8TextListToTextProperty = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> list,
  ffi.Int32 count,
  ffi.Int32 style,
  ffi.Pointer<XTextProperty> text_prop_return,
);

typedef _dart_Xutf8TextListToTextProperty = int Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> list,
  int count,
  int style,
  ffi.Pointer<XTextProperty> text_prop_return,
);

typedef _c_XwcFreeStringList = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> list,
);

typedef _dart_XwcFreeStringList = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> list,
);

typedef _c_XTextPropertyToStringList = ffi.Int32 Function(
  ffi.Pointer<XTextProperty> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XTextPropertyToStringList = int Function(
  ffi.Pointer<XTextProperty> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XmbTextPropertyToTextList = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_return,
  ffi.Pointer<ffi.Int32> count_return,
);

typedef _dart_XmbTextPropertyToTextList = int Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_return,
  ffi.Pointer<ffi.Int32> count_return,
);

typedef _c_XwcTextPropertyToTextList = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> list_return,
  ffi.Pointer<ffi.Int32> count_return,
);

typedef _dart_XwcTextPropertyToTextList = int Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> list_return,
  ffi.Pointer<ffi.Int32> count_return,
);

typedef _c_Xutf8TextPropertyToTextList = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_return,
  ffi.Pointer<ffi.Int32> count_return,
);

typedef _dart_Xutf8TextPropertyToTextList = int Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_return,
  ffi.Pointer<ffi.Int32> count_return,
);

typedef _c_XUnionRectWithRegion = ffi.Int32 Function(
  ffi.Pointer<XRectangle> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _dart_XUnionRectWithRegion = int Function(
  ffi.Pointer<XRectangle> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _c_XUnionRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _dart_XUnionRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _c_XWMGeometry = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Uint32 arg4,
  ffi.Pointer<XSizeHints> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Int32> arg7,
  ffi.Pointer<ffi.Int32> arg8,
  ffi.Pointer<ffi.Int32> arg9,
  ffi.Pointer<ffi.Int32> arg10,
);

typedef _dart_XWMGeometry = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
  ffi.Pointer<XSizeHints> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Int32> arg7,
  ffi.Pointer<ffi.Int32> arg8,
  ffi.Pointer<ffi.Int32> arg9,
  ffi.Pointer<ffi.Int32> arg10,
);

typedef _c_XXorRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _dart_XXorRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _c_eglChooseConfig = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Int32> attrib_list,
  ffi.Pointer<ffi.Pointer<ffi.Void>> configs,
  ffi.Int32 config_size,
  ffi.Pointer<ffi.Int32> num_config,
);

typedef _dart_eglChooseConfig = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Int32> attrib_list,
  ffi.Pointer<ffi.Pointer<ffi.Void>> configs,
  int config_size,
  ffi.Pointer<ffi.Int32> num_config,
);

typedef _c_eglCopyBuffers = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  ffi.Uint64 target,
);

typedef _dart_eglCopyBuffers = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  int target,
);

typedef _c_eglCreateContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Void> share_context,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _dart_eglCreateContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Void> share_context,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _c_eglCreatePbufferSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _dart_eglCreatePbufferSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _c_eglCreatePixmapSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Uint64 pixmap,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _dart_eglCreatePixmapSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  int pixmap,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _c_eglCreateWindowSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Uint64 win,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _dart_eglCreateWindowSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  int win,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _c_eglDestroyContext = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> ctx,
);

typedef _dart_eglDestroyContext = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> ctx,
);

typedef _c_eglDestroySurface = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
);

typedef _dart_eglDestroySurface = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
);

typedef _c_eglGetConfigAttrib = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Int32 attribute,
  ffi.Pointer<ffi.Int32> value,
);

typedef _dart_eglGetConfigAttrib = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  int attribute,
  ffi.Pointer<ffi.Int32> value,
);

typedef _c_eglGetConfigs = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Pointer<ffi.Void>> configs,
  ffi.Int32 config_size,
  ffi.Pointer<ffi.Int32> num_config,
);

typedef _dart_eglGetConfigs = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Pointer<ffi.Void>> configs,
  int config_size,
  ffi.Pointer<ffi.Int32> num_config,
);

typedef _c_eglGetCurrentDisplay = ffi.Pointer<ffi.Void> Function();

typedef _dart_eglGetCurrentDisplay = ffi.Pointer<ffi.Void> Function();

typedef _c_eglGetCurrentSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 readdraw,
);

typedef _dart_eglGetCurrentSurface = ffi.Pointer<ffi.Void> Function(
  int readdraw,
);

typedef _c_eglGetDisplay = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_XDisplay> display_id,
);

typedef _dart_eglGetDisplay = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_XDisplay> display_id,
);

typedef _c_eglGetError = ffi.Int32 Function();

typedef _dart_eglGetError = int Function();

typedef __eglMustCastToProperFunctionPointerType = ffi.Void Function();

typedef _c_eglGetProcAddress
    = ffi.Pointer<ffi.NativeFunction<__eglMustCastToProperFunctionPointerType>>
        Function(
  ffi.Pointer<ffi.Int8> procname,
);

typedef _dart_eglGetProcAddress
    = ffi.Pointer<ffi.NativeFunction<__eglMustCastToProperFunctionPointerType>>
        Function(
  ffi.Pointer<ffi.Int8> procname,
);

typedef _c_eglInitialize = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Int32> major,
  ffi.Pointer<ffi.Int32> minor,
);

typedef _dart_eglInitialize = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Int32> major,
  ffi.Pointer<ffi.Int32> minor,
);

typedef _c_eglMakeCurrent = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> draw,
  ffi.Pointer<ffi.Void> read,
  ffi.Pointer<ffi.Void> ctx,
);

typedef _dart_eglMakeCurrent = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> draw,
  ffi.Pointer<ffi.Void> read,
  ffi.Pointer<ffi.Void> ctx,
);

typedef _c_eglQueryContext = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> ctx,
  ffi.Int32 attribute,
  ffi.Pointer<ffi.Int32> value,
);

typedef _dart_eglQueryContext = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> ctx,
  int attribute,
  ffi.Pointer<ffi.Int32> value,
);

typedef _c_eglQueryString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Int32 name,
);

typedef _dart_eglQueryString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> dpy,
  int name,
);

typedef _c_eglQuerySurface = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  ffi.Int32 attribute,
  ffi.Pointer<ffi.Int32> value,
);

typedef _dart_eglQuerySurface = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  int attribute,
  ffi.Pointer<ffi.Int32> value,
);

typedef _c_eglSwapBuffers = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
);

typedef _dart_eglSwapBuffers = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
);

typedef _c_eglTerminate = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
);

typedef _dart_eglTerminate = int Function(
  ffi.Pointer<ffi.Void> dpy,
);

typedef _c_eglWaitGL = ffi.Uint32 Function();

typedef _dart_eglWaitGL = int Function();

typedef _c_eglWaitNative = ffi.Uint32 Function(
  ffi.Int32 engine,
);

typedef _dart_eglWaitNative = int Function(
  int engine,
);

typedef _c_eglBindTexImage = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  ffi.Int32 buffer,
);

typedef _dart_eglBindTexImage = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  int buffer,
);

typedef _c_eglReleaseTexImage = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  ffi.Int32 buffer,
);

typedef _dart_eglReleaseTexImage = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  int buffer,
);

typedef _c_eglSurfaceAttrib = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  ffi.Int32 attribute,
  ffi.Int32 value,
);

typedef _dart_eglSurfaceAttrib = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  int attribute,
  int value,
);

typedef _c_eglSwapInterval = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Int32 interval,
);

typedef _dart_eglSwapInterval = int Function(
  ffi.Pointer<ffi.Void> dpy,
  int interval,
);

typedef _c_eglBindAPI = ffi.Uint32 Function(
  ffi.Uint32 api,
);

typedef _dart_eglBindAPI = int Function(
  int api,
);

typedef _c_eglQueryAPI = ffi.Uint32 Function();

typedef _dart_eglQueryAPI = int Function();

typedef _c_eglCreatePbufferFromClientBuffer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Uint32 buftype,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _dart_eglCreatePbufferFromClientBuffer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  int buftype,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _c_eglReleaseThread = ffi.Uint32 Function();

typedef _dart_eglReleaseThread = int Function();

typedef _c_eglWaitClient = ffi.Uint32 Function();

typedef _dart_eglWaitClient = int Function();

typedef _c_eglGetCurrentContext = ffi.Pointer<ffi.Void> Function();

typedef _dart_eglGetCurrentContext = ffi.Pointer<ffi.Void> Function();

typedef _c_eglCreateSync = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Int64> attrib_list,
);

typedef _dart_eglCreateSync = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  int type,
  ffi.Pointer<ffi.Int64> attrib_list,
);

typedef _c_eglDestroySync = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
);

typedef _dart_eglDestroySync = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
);

typedef _c_eglClientWaitSync = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
  ffi.Int32 flags,
  ffi.Uint64 timeout,
);

typedef _dart_eglClientWaitSync = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
  int flags,
  int timeout,
);

typedef _c_eglGetSyncAttrib = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
  ffi.Int32 attribute,
  ffi.Pointer<ffi.Int64> value,
);

typedef _dart_eglGetSyncAttrib = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
  int attribute,
  ffi.Pointer<ffi.Int64> value,
);

typedef _c_eglCreateImage = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> ctx,
  ffi.Uint32 target,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Pointer<ffi.Int64> attrib_list,
);

typedef _dart_eglCreateImage = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> ctx,
  int target,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Pointer<ffi.Int64> attrib_list,
);

typedef _c_eglDestroyImage = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> image,
);

typedef _dart_eglDestroyImage = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> image,
);

typedef _c_eglGetPlatformDisplay = ffi.Pointer<ffi.Void> Function(
  ffi.Uint32 platform,
  ffi.Pointer<ffi.Void> native_display,
  ffi.Pointer<ffi.Int64> attrib_list,
);

typedef _dart_eglGetPlatformDisplay = ffi.Pointer<ffi.Void> Function(
  int platform,
  ffi.Pointer<ffi.Void> native_display,
  ffi.Pointer<ffi.Int64> attrib_list,
);

typedef _c_eglCreatePlatformWindowSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Void> native_window,
  ffi.Pointer<ffi.Int64> attrib_list,
);

typedef _dart_eglCreatePlatformWindowSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Void> native_window,
  ffi.Pointer<ffi.Int64> attrib_list,
);

typedef _c_eglCreatePlatformPixmapSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Void> native_pixmap,
  ffi.Pointer<ffi.Int64> attrib_list,
);

typedef _dart_eglCreatePlatformPixmapSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Void> native_pixmap,
  ffi.Pointer<ffi.Int64> attrib_list,
);

typedef _c_eglWaitSync = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
  ffi.Int32 flags,
);

typedef _dart_eglWaitSync = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
  int flags,
);

typedef _c_glAttachShader = ffi.Void Function(
  ffi.Uint32 program,
  ffi.Uint32 shader,
);

typedef _dart_glAttachShader = void Function(
  int program,
  int shader,
);

typedef _c_glBindAttribLocation = ffi.Void Function(
  ffi.Uint32 program,
  ffi.Uint32 index,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_glBindAttribLocation = void Function(
  int program,
  int index,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_glBindFramebuffer = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 framebuffer,
);

typedef _dart_glBindFramebuffer = void Function(
  int target,
  int framebuffer,
);

typedef _c_glBindRenderbuffer = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 renderbuffer,
);

typedef _dart_glBindRenderbuffer = void Function(
  int target,
  int renderbuffer,
);

typedef _c_glBlendEquationSeparate = ffi.Void Function(
  ffi.Uint32 modeRGB,
  ffi.Uint32 modeAlpha,
);

typedef _dart_glBlendEquationSeparate = void Function(
  int modeRGB,
  int modeAlpha,
);

typedef _c_glBlendFuncSeparate = ffi.Void Function(
  ffi.Uint32 sfactorRGB,
  ffi.Uint32 dfactorRGB,
  ffi.Uint32 sfactorAlpha,
  ffi.Uint32 dfactorAlpha,
);

typedef _dart_glBlendFuncSeparate = void Function(
  int sfactorRGB,
  int dfactorRGB,
  int sfactorAlpha,
  int dfactorAlpha,
);

typedef _c_glCheckFramebufferStatus = ffi.Uint32 Function(
  ffi.Uint32 target,
);

typedef _dart_glCheckFramebufferStatus = int Function(
  int target,
);

typedef _c_glCompileShader = ffi.Void Function(
  ffi.Uint32 shader,
);

typedef _dart_glCompileShader = void Function(
  int shader,
);

typedef _c_glCreateProgram = ffi.Uint32 Function();

typedef _dart_glCreateProgram = int Function();

typedef _c_glCreateShader = ffi.Uint32 Function(
  ffi.Uint32 type,
);

typedef _dart_glCreateShader = int Function(
  int type,
);

typedef _c_glDeleteFramebuffers = ffi.Void Function(
  ffi.Int32 n,
  ffi.Pointer<ffi.Uint32> framebuffers,
);

typedef _dart_glDeleteFramebuffers = void Function(
  int n,
  ffi.Pointer<ffi.Uint32> framebuffers,
);

typedef _c_glDeleteProgram = ffi.Void Function(
  ffi.Uint32 program,
);

typedef _dart_glDeleteProgram = void Function(
  int program,
);

typedef _c_glDeleteRenderbuffers = ffi.Void Function(
  ffi.Int32 n,
  ffi.Pointer<ffi.Uint32> renderbuffers,
);

typedef _dart_glDeleteRenderbuffers = void Function(
  int n,
  ffi.Pointer<ffi.Uint32> renderbuffers,
);

typedef _c_glDeleteShader = ffi.Void Function(
  ffi.Uint32 shader,
);

typedef _dart_glDeleteShader = void Function(
  int shader,
);

typedef _c_glDetachShader = ffi.Void Function(
  ffi.Uint32 program,
  ffi.Uint32 shader,
);

typedef _dart_glDetachShader = void Function(
  int program,
  int shader,
);

typedef _c_glDisableVertexAttribArray = ffi.Void Function(
  ffi.Uint32 index,
);

typedef _dart_glDisableVertexAttribArray = void Function(
  int index,
);

typedef _c_glEnableVertexAttribArray = ffi.Void Function(
  ffi.Uint32 index,
);

typedef _dart_glEnableVertexAttribArray = void Function(
  int index,
);

typedef _c_glFramebufferRenderbuffer = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 attachment,
  ffi.Uint32 renderbuffertarget,
  ffi.Uint32 renderbuffer,
);

typedef _dart_glFramebufferRenderbuffer = void Function(
  int target,
  int attachment,
  int renderbuffertarget,
  int renderbuffer,
);

typedef _c_glFramebufferTexture2D = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 attachment,
  ffi.Uint32 textarget,
  ffi.Uint32 texture,
  ffi.Int32 level,
);

typedef _dart_glFramebufferTexture2D = void Function(
  int target,
  int attachment,
  int textarget,
  int texture,
  int level,
);

typedef _c_glGenerateMipmap = ffi.Void Function(
  ffi.Uint32 target,
);

typedef _dart_glGenerateMipmap = void Function(
  int target,
);

typedef _c_glGenFramebuffers = ffi.Void Function(
  ffi.Int32 n,
  ffi.Pointer<ffi.Uint32> framebuffers,
);

typedef _dart_glGenFramebuffers = void Function(
  int n,
  ffi.Pointer<ffi.Uint32> framebuffers,
);

typedef _c_glGenRenderbuffers = ffi.Void Function(
  ffi.Int32 n,
  ffi.Pointer<ffi.Uint32> renderbuffers,
);

typedef _dart_glGenRenderbuffers = void Function(
  int n,
  ffi.Pointer<ffi.Uint32> renderbuffers,
);

typedef _c_glGetActiveAttrib = ffi.Void Function(
  ffi.Uint32 program,
  ffi.Uint32 index,
  ffi.Int32 bufSize,
  ffi.Pointer<ffi.Int32> length,
  ffi.Pointer<ffi.Int32> size,
  ffi.Pointer<ffi.Uint32> type,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_glGetActiveAttrib = void Function(
  int program,
  int index,
  int bufSize,
  ffi.Pointer<ffi.Int32> length,
  ffi.Pointer<ffi.Int32> size,
  ffi.Pointer<ffi.Uint32> type,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_glGetActiveUniform = ffi.Void Function(
  ffi.Uint32 program,
  ffi.Uint32 index,
  ffi.Int32 bufSize,
  ffi.Pointer<ffi.Int32> length,
  ffi.Pointer<ffi.Int32> size,
  ffi.Pointer<ffi.Uint32> type,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_glGetActiveUniform = void Function(
  int program,
  int index,
  int bufSize,
  ffi.Pointer<ffi.Int32> length,
  ffi.Pointer<ffi.Int32> size,
  ffi.Pointer<ffi.Uint32> type,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_glGetAttachedShaders = ffi.Void Function(
  ffi.Uint32 program,
  ffi.Int32 maxCount,
  ffi.Pointer<ffi.Int32> count,
  ffi.Pointer<ffi.Uint32> shaders,
);

typedef _dart_glGetAttachedShaders = void Function(
  int program,
  int maxCount,
  ffi.Pointer<ffi.Int32> count,
  ffi.Pointer<ffi.Uint32> shaders,
);

typedef _c_glGetAttribLocation = ffi.Int32 Function(
  ffi.Uint32 program,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_glGetAttribLocation = int Function(
  int program,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_glGetFramebufferAttachmentParameteriv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 attachment,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetFramebufferAttachmentParameteriv = void Function(
  int target,
  int attachment,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetProgramiv = ffi.Void Function(
  ffi.Uint32 program,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetProgramiv = void Function(
  int program,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetProgramInfoLog = ffi.Void Function(
  ffi.Uint32 program,
  ffi.Int32 bufSize,
  ffi.Pointer<ffi.Int32> length,
  ffi.Pointer<ffi.Int8> infoLog,
);

typedef _dart_glGetProgramInfoLog = void Function(
  int program,
  int bufSize,
  ffi.Pointer<ffi.Int32> length,
  ffi.Pointer<ffi.Int8> infoLog,
);

typedef _c_glGetRenderbufferParameteriv = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetRenderbufferParameteriv = void Function(
  int target,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetShaderiv = ffi.Void Function(
  ffi.Uint32 shader,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetShaderiv = void Function(
  int shader,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetShaderInfoLog = ffi.Void Function(
  ffi.Uint32 shader,
  ffi.Int32 bufSize,
  ffi.Pointer<ffi.Int32> length,
  ffi.Pointer<ffi.Int8> infoLog,
);

typedef _dart_glGetShaderInfoLog = void Function(
  int shader,
  int bufSize,
  ffi.Pointer<ffi.Int32> length,
  ffi.Pointer<ffi.Int8> infoLog,
);

typedef _c_glGetShaderPrecisionFormat = ffi.Void Function(
  ffi.Uint32 shadertype,
  ffi.Uint32 precisiontype,
  ffi.Pointer<ffi.Int32> range,
  ffi.Pointer<ffi.Int32> precision,
);

typedef _dart_glGetShaderPrecisionFormat = void Function(
  int shadertype,
  int precisiontype,
  ffi.Pointer<ffi.Int32> range,
  ffi.Pointer<ffi.Int32> precision,
);

typedef _c_glGetShaderSource = ffi.Void Function(
  ffi.Uint32 shader,
  ffi.Int32 bufSize,
  ffi.Pointer<ffi.Int32> length,
  ffi.Pointer<ffi.Int8> source,
);

typedef _dart_glGetShaderSource = void Function(
  int shader,
  int bufSize,
  ffi.Pointer<ffi.Int32> length,
  ffi.Pointer<ffi.Int8> source,
);

typedef _c_glGetUniformfv = ffi.Void Function(
  ffi.Uint32 program,
  ffi.Int32 location,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glGetUniformfv = void Function(
  int program,
  int location,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glGetUniformiv = ffi.Void Function(
  ffi.Uint32 program,
  ffi.Int32 location,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetUniformiv = void Function(
  int program,
  int location,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetUniformLocation = ffi.Int32 Function(
  ffi.Uint32 program,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_glGetUniformLocation = int Function(
  int program,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_glGetVertexAttribfv = ffi.Void Function(
  ffi.Uint32 index,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _dart_glGetVertexAttribfv = void Function(
  int index,
  int pname,
  ffi.Pointer<ffi.Float> params,
);

typedef _c_glGetVertexAttribiv = ffi.Void Function(
  ffi.Uint32 index,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _dart_glGetVertexAttribiv = void Function(
  int index,
  int pname,
  ffi.Pointer<ffi.Int32> params,
);

typedef _c_glGetVertexAttribPointerv = ffi.Void Function(
  ffi.Uint32 index,
  ffi.Uint32 pname,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pointer,
);

typedef _dart_glGetVertexAttribPointerv = void Function(
  int index,
  int pname,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pointer,
);

typedef _c_glIsFramebuffer = ffi.Uint8 Function(
  ffi.Uint32 framebuffer,
);

typedef _dart_glIsFramebuffer = int Function(
  int framebuffer,
);

typedef _c_glIsProgram = ffi.Uint8 Function(
  ffi.Uint32 program,
);

typedef _dart_glIsProgram = int Function(
  int program,
);

typedef _c_glIsRenderbuffer = ffi.Uint8 Function(
  ffi.Uint32 renderbuffer,
);

typedef _dart_glIsRenderbuffer = int Function(
  int renderbuffer,
);

typedef _c_glIsShader = ffi.Uint8 Function(
  ffi.Uint32 shader,
);

typedef _dart_glIsShader = int Function(
  int shader,
);

typedef _c_glLinkProgram = ffi.Void Function(
  ffi.Uint32 program,
);

typedef _dart_glLinkProgram = void Function(
  int program,
);

typedef _c_glReleaseShaderCompiler = ffi.Void Function();

typedef _dart_glReleaseShaderCompiler = void Function();

typedef _c_glRenderbufferStorage = ffi.Void Function(
  ffi.Uint32 target,
  ffi.Uint32 internalformat,
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_glRenderbufferStorage = void Function(
  int target,
  int internalformat,
  int width,
  int height,
);

typedef _c_glShaderBinary = ffi.Void Function(
  ffi.Int32 count,
  ffi.Pointer<ffi.Uint32> shaders,
  ffi.Uint32 binaryformat,
  ffi.Pointer<ffi.Void> binary,
  ffi.Int32 length,
);

typedef _dart_glShaderBinary = void Function(
  int count,
  ffi.Pointer<ffi.Uint32> shaders,
  int binaryformat,
  ffi.Pointer<ffi.Void> binary,
  int length,
);

typedef _c_glShaderSource = ffi.Void Function(
  ffi.Uint32 shader,
  ffi.Int32 count,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> string,
  ffi.Pointer<ffi.Int32> length,
);

typedef _dart_glShaderSource = void Function(
  int shader,
  int count,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> string,
  ffi.Pointer<ffi.Int32> length,
);

typedef _c_glStencilFuncSeparate = ffi.Void Function(
  ffi.Uint32 face,
  ffi.Uint32 func,
  ffi.Int32 ref,
  ffi.Uint32 mask,
);

typedef _dart_glStencilFuncSeparate = void Function(
  int face,
  int func,
  int ref,
  int mask,
);

typedef _c_glStencilMaskSeparate = ffi.Void Function(
  ffi.Uint32 face,
  ffi.Uint32 mask,
);

typedef _dart_glStencilMaskSeparate = void Function(
  int face,
  int mask,
);

typedef _c_glStencilOpSeparate = ffi.Void Function(
  ffi.Uint32 face,
  ffi.Uint32 sfail,
  ffi.Uint32 dpfail,
  ffi.Uint32 dppass,
);

typedef _dart_glStencilOpSeparate = void Function(
  int face,
  int sfail,
  int dpfail,
  int dppass,
);

typedef _c_glUniform1f = ffi.Void Function(
  ffi.Int32 location,
  ffi.Float v0,
);

typedef _dart_glUniform1f = void Function(
  int location,
  double v0,
);

typedef _c_glUniform1fv = ffi.Void Function(
  ffi.Int32 location,
  ffi.Int32 count,
  ffi.Pointer<ffi.Float> value,
);

typedef _dart_glUniform1fv = void Function(
  int location,
  int count,
  ffi.Pointer<ffi.Float> value,
);

typedef _c_glUniform1i = ffi.Void Function(
  ffi.Int32 location,
  ffi.Int32 v0,
);

typedef _dart_glUniform1i = void Function(
  int location,
  int v0,
);

typedef _c_glUniform1iv = ffi.Void Function(
  ffi.Int32 location,
  ffi.Int32 count,
  ffi.Pointer<ffi.Int32> value,
);

typedef _dart_glUniform1iv = void Function(
  int location,
  int count,
  ffi.Pointer<ffi.Int32> value,
);

typedef _c_glUniform2f = ffi.Void Function(
  ffi.Int32 location,
  ffi.Float v0,
  ffi.Float v1,
);

typedef _dart_glUniform2f = void Function(
  int location,
  double v0,
  double v1,
);

typedef _c_glUniform2fv = ffi.Void Function(
  ffi.Int32 location,
  ffi.Int32 count,
  ffi.Pointer<ffi.Float> value,
);

typedef _dart_glUniform2fv = void Function(
  int location,
  int count,
  ffi.Pointer<ffi.Float> value,
);

typedef _c_glUniform2i = ffi.Void Function(
  ffi.Int32 location,
  ffi.Int32 v0,
  ffi.Int32 v1,
);

typedef _dart_glUniform2i = void Function(
  int location,
  int v0,
  int v1,
);

typedef _c_glUniform2iv = ffi.Void Function(
  ffi.Int32 location,
  ffi.Int32 count,
  ffi.Pointer<ffi.Int32> value,
);

typedef _dart_glUniform2iv = void Function(
  int location,
  int count,
  ffi.Pointer<ffi.Int32> value,
);

typedef _c_glUniform3f = ffi.Void Function(
  ffi.Int32 location,
  ffi.Float v0,
  ffi.Float v1,
  ffi.Float v2,
);

typedef _dart_glUniform3f = void Function(
  int location,
  double v0,
  double v1,
  double v2,
);

typedef _c_glUniform3fv = ffi.Void Function(
  ffi.Int32 location,
  ffi.Int32 count,
  ffi.Pointer<ffi.Float> value,
);

typedef _dart_glUniform3fv = void Function(
  int location,
  int count,
  ffi.Pointer<ffi.Float> value,
);

typedef _c_glUniform3i = ffi.Void Function(
  ffi.Int32 location,
  ffi.Int32 v0,
  ffi.Int32 v1,
  ffi.Int32 v2,
);

typedef _dart_glUniform3i = void Function(
  int location,
  int v0,
  int v1,
  int v2,
);

typedef _c_glUniform3iv = ffi.Void Function(
  ffi.Int32 location,
  ffi.Int32 count,
  ffi.Pointer<ffi.Int32> value,
);

typedef _dart_glUniform3iv = void Function(
  int location,
  int count,
  ffi.Pointer<ffi.Int32> value,
);

typedef _c_glUniform4f = ffi.Void Function(
  ffi.Int32 location,
  ffi.Float v0,
  ffi.Float v1,
  ffi.Float v2,
  ffi.Float v3,
);

typedef _dart_glUniform4f = void Function(
  int location,
  double v0,
  double v1,
  double v2,
  double v3,
);

typedef _c_glUniform4fv = ffi.Void Function(
  ffi.Int32 location,
  ffi.Int32 count,
  ffi.Pointer<ffi.Float> value,
);

typedef _dart_glUniform4fv = void Function(
  int location,
  int count,
  ffi.Pointer<ffi.Float> value,
);

typedef _c_glUniform4i = ffi.Void Function(
  ffi.Int32 location,
  ffi.Int32 v0,
  ffi.Int32 v1,
  ffi.Int32 v2,
  ffi.Int32 v3,
);

typedef _dart_glUniform4i = void Function(
  int location,
  int v0,
  int v1,
  int v2,
  int v3,
);

typedef _c_glUniform4iv = ffi.Void Function(
  ffi.Int32 location,
  ffi.Int32 count,
  ffi.Pointer<ffi.Int32> value,
);

typedef _dart_glUniform4iv = void Function(
  int location,
  int count,
  ffi.Pointer<ffi.Int32> value,
);

typedef _c_glUniformMatrix2fv = ffi.Void Function(
  ffi.Int32 location,
  ffi.Int32 count,
  ffi.Uint8 transpose,
  ffi.Pointer<ffi.Float> value,
);

typedef _dart_glUniformMatrix2fv = void Function(
  int location,
  int count,
  int transpose,
  ffi.Pointer<ffi.Float> value,
);

typedef _c_glUniformMatrix3fv = ffi.Void Function(
  ffi.Int32 location,
  ffi.Int32 count,
  ffi.Uint8 transpose,
  ffi.Pointer<ffi.Float> value,
);

typedef _dart_glUniformMatrix3fv = void Function(
  int location,
  int count,
  int transpose,
  ffi.Pointer<ffi.Float> value,
);

typedef _c_glUniformMatrix4fv = ffi.Void Function(
  ffi.Int32 location,
  ffi.Int32 count,
  ffi.Uint8 transpose,
  ffi.Pointer<ffi.Float> value,
);

typedef _dart_glUniformMatrix4fv = void Function(
  int location,
  int count,
  int transpose,
  ffi.Pointer<ffi.Float> value,
);

typedef _c_glUseProgram = ffi.Void Function(
  ffi.Uint32 program,
);

typedef _dart_glUseProgram = void Function(
  int program,
);

typedef _c_glValidateProgram = ffi.Void Function(
  ffi.Uint32 program,
);

typedef _dart_glValidateProgram = void Function(
  int program,
);

typedef _c_glVertexAttrib1f = ffi.Void Function(
  ffi.Uint32 index,
  ffi.Float x,
);

typedef _dart_glVertexAttrib1f = void Function(
  int index,
  double x,
);

typedef _c_glVertexAttrib1fv = ffi.Void Function(
  ffi.Uint32 index,
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glVertexAttrib1fv = void Function(
  int index,
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glVertexAttrib2f = ffi.Void Function(
  ffi.Uint32 index,
  ffi.Float x,
  ffi.Float y,
);

typedef _dart_glVertexAttrib2f = void Function(
  int index,
  double x,
  double y,
);

typedef _c_glVertexAttrib2fv = ffi.Void Function(
  ffi.Uint32 index,
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glVertexAttrib2fv = void Function(
  int index,
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glVertexAttrib3f = ffi.Void Function(
  ffi.Uint32 index,
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_glVertexAttrib3f = void Function(
  int index,
  double x,
  double y,
  double z,
);

typedef _c_glVertexAttrib3fv = ffi.Void Function(
  ffi.Uint32 index,
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glVertexAttrib3fv = void Function(
  int index,
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glVertexAttrib4f = ffi.Void Function(
  ffi.Uint32 index,
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
  ffi.Float w,
);

typedef _dart_glVertexAttrib4f = void Function(
  int index,
  double x,
  double y,
  double z,
  double w,
);

typedef _c_glVertexAttrib4fv = ffi.Void Function(
  ffi.Uint32 index,
  ffi.Pointer<ffi.Float> v,
);

typedef _dart_glVertexAttrib4fv = void Function(
  int index,
  ffi.Pointer<ffi.Float> v,
);

typedef _c_glVertexAttribPointer = ffi.Void Function(
  ffi.Uint32 index,
  ffi.Int32 size,
  ffi.Uint32 type,
  ffi.Uint8 normalized,
  ffi.Int32 stride,
  ffi.Pointer<ffi.Void> pointer,
);

typedef _dart_glVertexAttribPointer = void Function(
  int index,
  int size,
  int type,
  int normalized,
  int stride,
  ffi.Pointer<ffi.Void> pointer,
);

typedef _c_SDLTest_RandomInit = ffi.Void Function(
  ffi.Pointer<SDLTest_RandomContext> rndContext,
  ffi.Uint32 xi,
  ffi.Uint32 ci,
);

typedef _dart_SDLTest_RandomInit = void Function(
  ffi.Pointer<SDLTest_RandomContext> rndContext,
  int xi,
  int ci,
);

typedef _c_SDLTest_RandomInitTime = ffi.Void Function(
  ffi.Pointer<SDLTest_RandomContext> rndContext,
);

typedef _dart_SDLTest_RandomInitTime = void Function(
  ffi.Pointer<SDLTest_RandomContext> rndContext,
);

typedef _c_SDLTest_Random = ffi.Uint32 Function(
  ffi.Pointer<SDLTest_RandomContext> rndContext,
);

typedef _dart_SDLTest_Random = int Function(
  ffi.Pointer<SDLTest_RandomContext> rndContext,
);

typedef _c_SDLTest_Assert = ffi.Void Function(
  ffi.Int32 assertCondition,
  ffi.Pointer<ffi.Int8> assertDescription,
);

typedef _dart_SDLTest_Assert = void Function(
  int assertCondition,
  ffi.Pointer<ffi.Int8> assertDescription,
);

typedef _c_SDLTest_AssertCheck = ffi.Int32 Function(
  ffi.Int32 assertCondition,
  ffi.Pointer<ffi.Int8> assertDescription,
);

typedef _dart_SDLTest_AssertCheck = int Function(
  int assertCondition,
  ffi.Pointer<ffi.Int8> assertDescription,
);

typedef _c_SDLTest_AssertPass = ffi.Void Function(
  ffi.Pointer<ffi.Int8> assertDescription,
);

typedef _dart_SDLTest_AssertPass = void Function(
  ffi.Pointer<ffi.Int8> assertDescription,
);

typedef _c_SDLTest_CommonCreateState = ffi.Pointer<SDLTest_CommonState>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ffi.Uint32 flags,
);

typedef _dart_SDLTest_CommonCreateState = ffi.Pointer<SDLTest_CommonState>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  int flags,
);

typedef _c_SDLTest_CommonArg = ffi.Int32 Function(
  ffi.Pointer<SDLTest_CommonState> state,
  ffi.Int32 index,
);

typedef _dart_SDLTest_CommonArg = int Function(
  ffi.Pointer<SDLTest_CommonState> state,
  int index,
);

typedef _c_SDLTest_CommonLogUsage = ffi.Void Function(
  ffi.Pointer<SDLTest_CommonState> state,
  ffi.Pointer<ffi.Int8> argv0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> options,
);

typedef _dart_SDLTest_CommonLogUsage = void Function(
  ffi.Pointer<SDLTest_CommonState> state,
  ffi.Pointer<ffi.Int8> argv0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> options,
);

typedef _c_SDLTest_CommonUsage = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<SDLTest_CommonState> state,
);

typedef _dart_SDLTest_CommonUsage = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<SDLTest_CommonState> state,
);

typedef _c_SDLTest_CommonInit = ffi.Int32 Function(
  ffi.Pointer<SDLTest_CommonState> state,
);

typedef _dart_SDLTest_CommonInit = int Function(
  ffi.Pointer<SDLTest_CommonState> state,
);

typedef _c_SDLTest_CommonDefaultArgs = ffi.Int32 Function(
  ffi.Pointer<SDLTest_CommonState> state,
  ffi.Int32 argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
);

typedef _dart_SDLTest_CommonDefaultArgs = int Function(
  ffi.Pointer<SDLTest_CommonState> state,
  int argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
);

typedef _c_SDLTest_CommonQuit = ffi.Void Function(
  ffi.Pointer<SDLTest_CommonState> state,
);

typedef _dart_SDLTest_CommonQuit = void Function(
  ffi.Pointer<SDLTest_CommonState> state,
);

typedef _c_SDLTest_Log = ffi.Void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_SDLTest_Log = void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_SDLTest_LogError = ffi.Void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_SDLTest_LogError = void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef SDL_AudioCallback = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Uint8>,
  ffi.Int32,
);

typedef SDLTest_TestCaseFp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef SDLTest_TestCaseSetUpFp = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef SDLTest_TestCaseTearDownFp = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_11 = ffi.Int32 Function(
  ffi.Pointer<XExtData>,
);

typedef _typedefC_12 = ffi.Pointer<XImage> Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<Visual>,
  ffi.Uint32,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint32,
  ffi.Uint32,
  ffi.Int32,
  ffi.Int32,
);

typedef _typedefC_13 = ffi.Int32 Function(
  ffi.Pointer<XImage>,
);

typedef _typedefC_14 = ffi.Uint64 Function(
  ffi.Pointer<XImage>,
  ffi.Int32,
  ffi.Int32,
);

typedef _typedefC_15 = ffi.Int32 Function(
  ffi.Pointer<XImage>,
  ffi.Int32,
  ffi.Int32,
  ffi.Uint64,
);

typedef _typedefC_16 = ffi.Pointer<XImage> Function(
  ffi.Pointer<XImage>,
  ffi.Int32,
  ffi.Int32,
  ffi.Uint32,
  ffi.Uint32,
);

typedef _typedefC_17 = ffi.Int32 Function(
  ffi.Pointer<XImage>,
  ffi.Int64,
);

typedef _typedefC_18 = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay>,
);

typedef _typedefC_19 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
);

typedef XIMProc = ffi.Void Function(
  ffi.Pointer<_XIM>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef XICProc = ffi.Int32 Function(
  ffi.Pointer<_XIC>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);
